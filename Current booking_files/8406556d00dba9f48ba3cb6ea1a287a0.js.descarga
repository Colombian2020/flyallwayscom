/*  Prototype JavaScript framework, version 1.7
 *  (c) 2005-2010 Sam Stephenson
 *
 *  Prototype is freely distributable under the terms of an MIT-style license.
 *  For details, see the Prototype web site: http://www.prototypejs.org/
 *
 *--------------------------------------------------------------------------*/
var bindTemp = Function.prototype.bind; //fix for compatibility with angular build  
var wat = Array.from; //fix for compatibility with angular build https://github.com/angular/angular/issues/6221
var Prototype = {

  Version: '1.7',

  Browser: (function () {
    var ua = navigator.userAgent;
    var isOpera = Object.prototype.toString.call(window.opera) == '[object Opera]';
    return {
      IE: !!window.attachEvent && !isOpera,
      Opera: isOpera,
      WebKit: ua.indexOf('AppleWebKit/') > -1,
      Gecko: ua.indexOf('Gecko') > -1 && ua.indexOf('KHTML') === -1,
      MobileSafari: /Apple.*Mobile/.test(ua)
    }
  })(),

  BrowserFeatures: {
    XPath: !!document.evaluate,

    SelectorsAPI: !!document.querySelector,

    ElementExtensions: (function () {
      var constructor = window.Element || window.HTMLElement;
      return !!(constructor && constructor.prototype);
    })(),
    SpecificElementExtensions: (function () {
      if (typeof window.HTMLDivElement !== 'undefined')
        return true;

      var div = document.createElement('div'),
        form = document.createElement('form'),
        isSupported = false;

      if (div['__proto__'] && (div['__proto__'] !== form['__proto__'])) {
        isSupported = true;
      }

      div = form = null;

      return isSupported;
    })()
  },

  ScriptFragment: '<script[^>]*>([\\S\\s]*?)<\/script>',
  JSONFilter: /^\/\*-secure-([\s\S]*)\*\/\s*$/,

  emptyFunction: function () { },

  K: function (x) { return x }
};

if (Prototype.Browser.MobileSafari)
  Prototype.BrowserFeatures.SpecificElementExtensions = false;


var Abstract = {};


var Try = {
  these: function () {
    var returnValue;

    for (var i = 0, length = arguments.length; i < length; i++) {
      var lambda = arguments[i];
      try {
        returnValue = lambda();
        break;
      } catch (e) { }
    }

    return returnValue;
  }
};

/* Based on Alex Arnell's inheritance implementation. */

var Class = (function () {

  var IS_DONTENUM_BUGGY = (function () {
    for (var p in { toString: 1 }) {
      if (p === 'toString') return false;
    }
    return true;
  })();

  function subclass() { };
  function create() {
    var parent = null, properties = $A(arguments);
    if (Object.isFunction(properties[0]))
      parent = properties.shift();

    function klass() {
      this.initialize.apply(this, arguments);
    }

    Object.extend(klass, Class.Methods);
    klass.superclass = parent;
    klass.subclasses = [];

    if (parent) {
      subclass.prototype = parent.prototype;
      klass.prototype = new subclass;
      parent.subclasses.push(klass);
    }

    for (var i = 0, length = properties.length; i < length; i++)
      klass.addMethods(properties[i]);

    if (!klass.prototype.initialize)
      klass.prototype.initialize = Prototype.emptyFunction;

    klass.prototype.constructor = klass;
    return klass;
  }

  function addMethods(source) {
    var ancestor = this.superclass && this.superclass.prototype,
      properties = Object.keys(source);

    if (IS_DONTENUM_BUGGY) {
      if (source.toString != Object.prototype.toString)
        properties.push("toString");
      if (source.valueOf != Object.prototype.valueOf)
        properties.push("valueOf");
    }

    for (var i = 0, length = properties.length; i < length; i++) {
      var property = properties[i], value = source[property];
      if (ancestor && Object.isFunction(value) &&
        value.argumentNames()[0] == "$super") {
        var method = value;
        value = (function (m) {
          return function () { return ancestor[m].apply(this, arguments); };
        })(property).wrap(method);

        value.valueOf = method.valueOf.bind(method);
        value.toString = method.toString.bind(method);
      }
      this.prototype[property] = value;
    }

    return this;
  }

  return {
    create: create,
    Methods: {
      addMethods: addMethods
    }
  };
})();
(function () {

  var _toString = Object.prototype.toString,
    NULL_TYPE = 'Null',
    UNDEFINED_TYPE = 'Undefined',
    BOOLEAN_TYPE = 'Boolean',
    NUMBER_TYPE = 'Number',
    STRING_TYPE = 'String',
    OBJECT_TYPE = 'Object',
    FUNCTION_CLASS = '[object Function]',
    BOOLEAN_CLASS = '[object Boolean]',
    NUMBER_CLASS = '[object Number]',
    STRING_CLASS = '[object String]',
    ARRAY_CLASS = '[object Array]',
    DATE_CLASS = '[object Date]',
    NATIVE_JSON_STRINGIFY_SUPPORT = window.JSON &&
      typeof JSON.stringify === 'function' &&
      JSON.stringify(0) === '0' &&
      typeof JSON.stringify(Prototype.K) === 'undefined';

  function Type(o) {
    switch (o) {
      case null: return NULL_TYPE;
      case (void 0): return UNDEFINED_TYPE;
    }
    var type = typeof o;
    switch (type) {
      case 'boolean': return BOOLEAN_TYPE;
      case 'number': return NUMBER_TYPE;
      case 'string': return STRING_TYPE;
    }
    return OBJECT_TYPE;
  }

  function extend(destination, source) {
    for (var property in source)
      destination[property] = source[property];
    return destination;
  }

  function inspect(object) {
    try {
      if (isUndefined(object)) return 'undefined';
      if (object === null) return 'null';
      return object.inspect ? object.inspect() : String(object);
    } catch (e) {
      if (e instanceof RangeError) return '...';
      throw e;
    }
  }

  function toJSON(value) {
    return Str('', { '': value }, []);
  }

  function Str(key, holder, stack) {
    var value = holder[key],
      type = typeof value;

    if (Type(value) === OBJECT_TYPE && typeof value.toJSON === 'function') {
      value = value.toJSON(key);
    }

    var _class = _toString.call(value);

    switch (_class) {
      case NUMBER_CLASS:
      case BOOLEAN_CLASS:
      case STRING_CLASS:
        value = value.valueOf();
    }

    switch (value) {
      case null: return 'null';
      case true: return 'true';
      case false: return 'false';
    }

    type = typeof value;
    switch (type) {
      case 'string':
        return value.inspect(true);
      case 'number':
        return isFinite(value) ? String(value) : 'null';
      case 'object':

        for (var i = 0, length = stack.length; i < length; i++) {
          if (stack[i] === value) { throw new TypeError(); }
        }
        stack.push(value);

        var partial = [];
        if (_class === ARRAY_CLASS) {
          for (var i = 0, length = value.length; i < length; i++) {
            var str = Str(i, value, stack);
            partial.push(typeof str === 'undefined' ? 'null' : str);
          }
          partial = '[' + partial.join(',') + ']';
        } else {
          var keys = Object.keys(value);
          for (var i = 0, length = keys.length; i < length; i++) {
            var key = keys[i], str = Str(key, value, stack);
            if (typeof str !== "undefined") {
              partial.push(key.inspect(true) + ':' + str);
            }
          }
          partial = '{' + partial.join(',') + '}';
        }
        stack.pop();
        return partial;
    }
  }

  function stringify(object) {
    return JSON.stringify(object);
  }

  function toQueryString(object) {
    return $H(object).toQueryString();
  }

  function toHTML(object) {
    return object && object.toHTML ? object.toHTML() : String.interpret(object);
  }

  function keys(object) {
    if (Type(object) !== OBJECT_TYPE) { throw new TypeError(); }
    var results = [];
    for (var property in object) {
      if (object.hasOwnProperty(property)) {
        results.push(property);
      }
    }
    return results;
  }

  function values(object) {
    var results = [];
    for (var property in object)
      results.push(object[property]);
    return results;
  }

  function clone(object) {
    return extend({}, object);
  }

  function isElement(object) {
    return !!(object && object.nodeType == 1);
  }

  function isArray(object) {
    return _toString.call(object) === ARRAY_CLASS;
  }

  var hasNativeIsArray = (typeof Array.isArray == 'function')
    && Array.isArray([]) && !Array.isArray({});

  if (hasNativeIsArray) {
    isArray = Array.isArray;
  }

  function isHash(object) {
    return object instanceof Hash;
  }

  function isFunction(object) {
    return _toString.call(object) === FUNCTION_CLASS;
  }

  function isString(object) {
    return _toString.call(object) === STRING_CLASS;
  }

  function isNumber(object) {
    return _toString.call(object) === NUMBER_CLASS;
  }

  function isDate(object) {
    return _toString.call(object) === DATE_CLASS;
  }

  function isUndefined(object) {
    return typeof object === "undefined";
  }

  extend(Object, {
    extend: extend,
    inspect: inspect,
    toJSON: NATIVE_JSON_STRINGIFY_SUPPORT ? stringify : toJSON,
    toQueryString: toQueryString,
    toHTML: toHTML,
    keys: Object.keys || keys,
    values: values,
    clone: clone,
    isElement: isElement,
    isArray: isArray,
    isHash: isHash,
    isFunction: isFunction,
    isString: isString,
    isNumber: isNumber,
    isDate: isDate,
    isUndefined: isUndefined
  });
})();
Object.extend(Function.prototype, (function () {
  var slice = Array.prototype.slice;

  function update(array, args) {
    var arrayLength = array.length, length = args.length;
    while (length--) array[arrayLength + length] = args[length];
    return array;
  }

  function merge(array, args) {
    array = slice.call(array, 0);
    return update(array, args);
  }

  function argumentNames() {
    var names = this.toString().match(/^[\s\(]*function[^(]*\(([^)]*)\)/)[1]
      .replace(/\/\/.*?[\r\n]|\/\*(?:.|[\r\n])*?\*\//g, '')
      .replace(/\s+/g, '').split(',');
    return names.length == 1 && !names[0] ? [] : names;
  }

  function bind(context) {
    if (arguments.length < 2 && Object.isUndefined(arguments[0])) return this;
    var __method = this, args = slice.call(arguments, 1);
    return function () {
      var a = merge(args, arguments);
      return __method.apply(context, a);
    }
  }

  function bindAsEventListener(context) {
    var __method = this, args = slice.call(arguments, 1);
    return function (event) {
      var a = update([event || window.event], args);
      return __method.apply(context, a);
    }
  }

  function curry() {
    if (!arguments.length) return this;
    var __method = this, args = slice.call(arguments, 0);
    return function () {
      var a = merge(args, arguments);
      return __method.apply(this, a);
    }
  }

  function delay(timeout) {
    var __method = this, args = slice.call(arguments, 1);
    timeout = timeout * 1000;
    return window.setTimeout(function () {
      return __method.apply(__method, args);
    }, timeout);
  }

  function defer() {
    var args = update([0.01], arguments);
    return this.delay.apply(this, args);
  }

  function wrap(wrapper) {
    var __method = this;
    return function () {
      var a = update([__method.bind(this)], arguments);
      return wrapper.apply(this, a);
    }
  }

  function methodize() {
    if (this._methodized) return this._methodized;
    var __method = this;
    return this._methodized = function () {
      var a = update([this], arguments);
      return __method.apply(null, a);
    };
  }

  return {
    argumentNames: argumentNames,
    bind: bind,
    bindAsEventListener: bindAsEventListener,
    curry: curry,
    delay: delay,
    defer: defer,
    wrap: wrap,
    methodize: methodize
  }
})());



(function (proto) {


  function toISOString() {
    return this.getUTCFullYear() + '-' +
      (this.getUTCMonth() + 1).toPaddedString(2) + '-' +
      this.getUTCDate().toPaddedString(2) + 'T' +
      this.getUTCHours().toPaddedString(2) + ':' +
      this.getUTCMinutes().toPaddedString(2) + ':' +
      this.getUTCSeconds().toPaddedString(2) + 'Z';
  }


  function toJSON() {
    return this.toISOString();
  }

  if (!proto.toISOString) proto.toISOString = toISOString;
  if (!proto.toJSON) proto.toJSON = toJSON;

})(Date.prototype);


RegExp.prototype.match = RegExp.prototype.test;

RegExp.escape = function (str) {
  return String(str).replace(/([.*+?^=!:${}()|[\]\/\\])/g, '\\$1');
};
var PeriodicalExecuter = Class.create({
  initialize: function (callback, frequency) {
    this.callback = callback;
    this.frequency = frequency;
    this.currentlyExecuting = false;

    this.registerCallback();
  },

  registerCallback: function () {
    this.timer = setInterval(this.onTimerEvent.bind(this), this.frequency * 1000);
  },

  execute: function () {
    this.callback(this);
  },

  stop: function () {
    if (!this.timer) return;
    clearInterval(this.timer);
    this.timer = null;
  },

  onTimerEvent: function () {
    if (!this.currentlyExecuting) {
      try {
        this.currentlyExecuting = true;
        this.execute();
        this.currentlyExecuting = false;
      } catch (e) {
        this.currentlyExecuting = false;
        throw e;
      }
    }
  }
});
Object.extend(String, {
  interpret: function (value) {
    return value == null ? '' : String(value);
  },
  specialChar: {
    '\b': '\\b',
    '\t': '\\t',
    '\n': '\\n',
    '\f': '\\f',
    '\r': '\\r',
    '\\': '\\\\'
  }
});

Object.extend(String.prototype, (function () {
  var NATIVE_JSON_PARSE_SUPPORT = window.JSON &&
    typeof JSON.parse === 'function' &&
    JSON.parse('{"test": true}').test;

  function prepareReplacement(replacement) {
    if (Object.isFunction(replacement)) return replacement;
    var template = new Template(replacement);
    return function (match) { return template.evaluate(match) };
  }

  function gsub(pattern, replacement) {
    var result = '', source = this, match;
    replacement = prepareReplacement(replacement);

    if (Object.isString(pattern))
      pattern = RegExp.escape(pattern);

    if (!(pattern.length || pattern.source)) {
      replacement = replacement('');
      return replacement + source.split('').join(replacement) + replacement;
    }

    while (source.length > 0) {
      if (match = source.match(pattern)) {
        result += source.slice(0, match.index);
        result += String.interpret(replacement(match));
        source = source.slice(match.index + match[0].length);
      } else {
        result += source, source = '';
      }
    }
    return result;
  }

  function sub(pattern, replacement, count) {
    replacement = prepareReplacement(replacement);
    count = Object.isUndefined(count) ? 1 : count;

    return this.gsub(pattern, function (match) {
      if (--count < 0) return match[0];
      return replacement(match);
    });
  }

  function scan(pattern, iterator) {
    this.gsub(pattern, iterator);
    return String(this);
  }

  function truncate(length, truncation) {
    length = length || 30;
    truncation = Object.isUndefined(truncation) ? '...' : truncation;
    return this.length > length ?
      this.slice(0, length - truncation.length) + truncation : String(this);
  }

  function strip() {
    return this.replace(/^\s+/, '').replace(/\s+$/, '');
  }

  function stripTags() {
    return this.replace(/<\w+(\s+("[^"]*"|'[^']*'|[^>])+)?>|<\/\w+>/gi, '');
  }

  function stripScripts() {
    return this.replace(new RegExp(Prototype.ScriptFragment, 'img'), '');
  }

  function extractScripts() {
    var matchAll = new RegExp(Prototype.ScriptFragment, 'img'),
      matchOne = new RegExp(Prototype.ScriptFragment, 'im');
    return (this.match(matchAll) || []).map(function (scriptTag) {
      return (scriptTag.match(matchOne) || ['', ''])[1];
    });
  }

  function evalScripts() {
    return this.extractScripts().map(function (script) { return eval(script) });
  }

  function escapeHTML() {
    return this.replace(/&/g, '&amp;').replace(/</g, '&lt;').replace(/>/g, '&gt;');
  }

  function unescapeHTML() {
    return this.stripTags().replace(/&lt;/g, '<').replace(/&gt;/g, '>').replace(/&amp;/g, '&');
  }


  function toQueryParams(separator) {
    var match = this.strip().match(/([^?#]*)(#.*)?$/);
    if (!match) return {};

    return match[1].split(separator || '&').inject({}, function (hash, pair) {
      if ((pair = pair.split('='))[0]) {
        var key = decodeURIComponent(pair.shift()),
          value = pair.length > 1 ? pair.join('=') : pair[0];

        if (value != undefined) value = decodeURIComponent(value);

        if (key in hash) {
          if (!Object.isArray(hash[key])) hash[key] = [hash[key]];
          hash[key].push(value);
        }
        else hash[key] = value;
      }
      return hash;
    });
  }

  function toArray() {
    return this.split('');
  }

  function succ() {
    return this.slice(0, this.length - 1) +
      String.fromCharCode(this.charCodeAt(this.length - 1) + 1);
  }

  function times(count) {
    return count < 1 ? '' : new Array(count + 1).join(this);
  }

  function camelize() {
    return this.replace(/-+(.)?/g, function (match, chr) {
      return chr ? chr.toUpperCase() : '';
    });
  }

  function capitalize() {
    return this.charAt(0).toUpperCase() + this.substring(1).toLowerCase();
  }

  function underscore() {
    return this.replace(/::/g, '/')
      .replace(/([A-Z]+)([A-Z][a-z])/g, '$1_$2')
      .replace(/([a-z\d])([A-Z])/g, '$1_$2')
      .replace(/-/g, '_')
      .toLowerCase();
  }

  function dasherize() {
    return this.replace(/_/g, '-');
  }

  function inspect(useDoubleQuotes) {
    var escapedString = this.replace(/[\x00-\x1f\\]/g, function (character) {
      if (character in String.specialChar) {
        return String.specialChar[character];
      }
      return '\\u00' + character.charCodeAt().toPaddedString(2, 16);
    });
    if (useDoubleQuotes) return '"' + escapedString.replace(/"/g, '\\"') + '"';
    return "'" + escapedString.replace(/'/g, '\\\'') + "'";
  }

  function unfilterJSON(filter) {
    return this.replace(filter || Prototype.JSONFilter, '$1');
  }

  function isJSON() {
    var str = this;
    if (str.blank()) return false;
    str = str.replace(/\\(?:["\\\/bfnrt]|u[0-9a-fA-F]{4})/g, '@');
    str = str.replace(/"[^"\\\n\r]*"|true|false|null|-?\d+(?:\.\d*)?(?:[eE][+\-]?\d+)?/g, ']');
    str = str.replace(/(?:^|:|,)(?:\s*\[)+/g, '');
    return (/^[\],:{}\s]*$/).test(str);
  }

  function evalJSON(sanitize) {
    var json = this.unfilterJSON(),
      cx = /[\u0000\u00ad\u0600-\u0604\u070f\u17b4\u17b5\u200c-\u200f\u2028-\u202f\u2060-\u206f\ufeff\ufff0-\uffff]/g;
    if (cx.test(json)) {
      json = json.replace(cx, function (a) {
        return '\\u' + ('0000' + a.charCodeAt(0).toString(16)).slice(-4);
      });
    }
    try {
      if (!sanitize || json.isJSON()) return eval('(' + json + ')');
    } catch (e) { }
    throw new SyntaxError('Badly formed JSON string: ' + this.inspect());
  }

  function parseJSON() {
    var json = this.unfilterJSON();
    return JSON.parse(json);
  }

  function include(pattern) {
    return this.indexOf(pattern) > -1;
  }

  function startsWith(pattern) {
    return this.lastIndexOf(pattern, 0) === 0;
  }

  function endsWith(pattern) {
    var d = this.length - pattern.length;
    return d >= 0 && this.indexOf(pattern, d) === d;
  }

  function empty() {
    return this == '';
  }

  function blank() {
    return /^\s*$/.test(this);
  }

  function interpolate(object, pattern) {
    return new Template(this, pattern).evaluate(object);
  }

  return {
    gsub: gsub,
    sub: sub,
    scan: scan,
    truncate: truncate,
    strip: String.prototype.trim || strip,
    stripTags: stripTags,
    stripScripts: stripScripts,
    extractScripts: extractScripts,
    evalScripts: evalScripts,
    escapeHTML: escapeHTML,
    unescapeHTML: unescapeHTML,
    toQueryParams: toQueryParams,
    parseQuery: toQueryParams,
    toArray: toArray,
    succ: succ,
    times: times,
    camelize: camelize,
    capitalize: capitalize,
    underscore: underscore,
    dasherize: dasherize,
    inspect: inspect,
    unfilterJSON: unfilterJSON,
    isJSON: isJSON,
    evalJSON: NATIVE_JSON_PARSE_SUPPORT ? parseJSON : evalJSON,
    include: include,
    startsWith: startsWith,
    endsWith: endsWith,
    empty: empty,
    blank: blank,
    interpolate: interpolate
  };
})());

var Template = Class.create({
  initialize: function (template, pattern) {
    this.template = template.toString();
    this.pattern = pattern || Template.Pattern;
  },

  evaluate: function (object) {
    if (object && Object.isFunction(object.toTemplateReplacements))
      object = object.toTemplateReplacements();

    return this.template.gsub(this.pattern, function (match) {
      if (object == null) return (match[1] + '');

      var before = match[1] || '';
      if (before == '\\') return match[2];

      var ctx = object, expr = match[3],
        pattern = /^([^.[]+|\[((?:.*?[^\\])?)\])(\.|\[|$)/;

      match = pattern.exec(expr);
      if (match == null) return before;

      while (match != null) {
        var comp = match[1].startsWith('[') ? match[2].replace(/\\\\]/g, ']') : match[1];
        ctx = ctx[comp];
        if (null == ctx || '' == match[3]) break;
        expr = expr.substring('[' == match[3] ? match[1].length : match[0].length);
        match = pattern.exec(expr);
      }

      return before + String.interpret(ctx);
    });
  }
});
Template.Pattern = /(^|.|\r|\n)(#\{(.*?)\})/;

var $break = {};

var Enumerable = (function () {
  function each(iterator, context) {
    var index = 0;
    try {
      this._each(function (value) {
        iterator.call(context, value, index++);
      });
    } catch (e) {
      if (e != $break) throw e;
    }
    return this;
  }

  function eachSlice(number, iterator, context) {
    var index = -number, slices = [], array = this.toArray();
    if (number < 1) return array;
    while ((index += number) < array.length)
      slices.push(array.slice(index, index + number));
    return slices.collect(iterator, context);
  }

  function all(iterator, context) {
    iterator = iterator || Prototype.K;
    var result = true;
    this.each(function (value, index) {
      result = result && !!iterator.call(context, value, index);
      if (!result) throw $break;
    });
    return result;
  }

  function any(iterator, context) {
    iterator = iterator || Prototype.K;
    var result = false;
    this.each(function (value, index) {
      if (result = !!iterator.call(context, value, index))
        throw $break;
    });
    return result;
  }

  function collect(iterator, context) {
    iterator = iterator || Prototype.K;
    var results = [];
    this.each(function (value, index) {
      results.push(iterator.call(context, value, index));
    });
    return results;
  }

  function detect(iterator, context) {
    var result;
    this.each(function (value, index) {
      if (iterator.call(context, value, index)) {
        result = value;
        throw $break;
      }
    });
    return result;
  }

  function findAll(iterator, context) {
    var results = [];
    this.each(function (value, index) {
      if (iterator.call(context, value, index))
        results.push(value);
    });
    return results;
  }

  function grep(filter, iterator, context) {
    iterator = iterator || Prototype.K;
    var results = [];

    if (Object.isString(filter))
      filter = new RegExp(RegExp.escape(filter));

    this.each(function (value, index) {
      if (filter.match(value))
        results.push(iterator.call(context, value, index));
    });
    return results;
  }

  function include(object) {
    if (Object.isFunction(this.indexOf))
      if (this.indexOf(object) != -1) return true;

    var found = false;
    this.each(function (value) {
      if (value == object) {
        found = true;
        throw $break;
      }
    });
    return found;
  }

  function inGroupsOf(number, fillWith) {
    fillWith = Object.isUndefined(fillWith) ? null : fillWith;
    return this.eachSlice(number, function (slice) {
      while (slice.length < number) slice.push(fillWith);
      return slice;
    });
  }

  function inject(memo, iterator, context) {
    this.each(function (value, index) {
      memo = iterator.call(context, memo, value, index);
    });
    return memo;
  }

  function invoke(method) {
    var args = $A(arguments).slice(1);
    return this.map(function (value) {
      return value[method].apply(value, args);
    });
  }

  function max(iterator, context) {
    iterator = iterator || Prototype.K;
    var result;
    this.each(function (value, index) {
      value = iterator.call(context, value, index);
      if (result == null || value >= result)
        result = value;
    });
    return result;
  }

  function min(iterator, context) {
    iterator = iterator || Prototype.K;
    var result;
    this.each(function (value, index) {
      value = iterator.call(context, value, index);
      if (result == null || value < result)
        result = value;
    });
    return result;
  }

  function partition(iterator, context) {
    iterator = iterator || Prototype.K;
    var trues = [], falses = [];
    this.each(function (value, index) {
      (iterator.call(context, value, index) ?
        trues : falses).push(value);
    });
    return [trues, falses];
  }

  function pluck(property) {
    var results = [];
    this.each(function (value) {
      results.push(value[property]);
    });
    return results;
  }

  function reject(iterator, context) {
    var results = [];
    this.each(function (value, index) {
      if (!iterator.call(context, value, index))
        results.push(value);
    });
    return results;
  }

  function sortBy(iterator, context) {
    return this.map(function (value, index) {
      return {
        value: value,
        criteria: iterator.call(context, value, index)
      };
    }).sort(function (left, right) {
      var a = left.criteria, b = right.criteria;
      return a < b ? -1 : a > b ? 1 : 0;
    }).pluck('value');
  }

  function toArray() {
    return this.map();
  }

  function zip() {
    var iterator = Prototype.K, args = $A(arguments);
    if (Object.isFunction(args.last()))
      iterator = args.pop();

    var collections = [this].concat(args).map($A);
    return this.map(function (value, index) {
      return iterator(collections.pluck(index));
    });
  }

  function size() {
    return this.toArray().length;
  }

  function inspect() {
    return '#<Enumerable:' + this.toArray().inspect() + '>';
  }









  return {
    each: each,
    eachSlice: eachSlice,
    all: all,
    every: all,
    any: any,
    some: any,
    collect: collect,
    map: collect,
    detect: detect,
    findAll: findAll,
    select: findAll,
    filter: findAll,
    grep: grep,
    include: include,
    member: include,
    inGroupsOf: inGroupsOf,
    inject: inject,
    invoke: invoke,
    max: max,
    min: min,
    partition: partition,
    pluck: pluck,
    reject: reject,
    sortBy: sortBy,
    toArray: toArray,
    entries: toArray,
    zip: zip,
    size: size,
    inspect: inspect,
    find: detect
  };
})();

function $A(iterable) {
  if (!iterable) return [];
  if ('toArray' in Object(iterable)) return iterable.toArray();
  var length = iterable.length || 0, results = new Array(length);
  while (length--) results[length] = iterable[length];
  return results;
}


function $w(string) {
  if (!Object.isString(string)) return [];
  string = string.strip();
  return string ? string.split(/\s+/) : [];
}

Array.from = $A;


(function () {
  var arrayProto = Array.prototype,
    slice = arrayProto.slice,
    _each = arrayProto.forEach; // use native browser JS 1.6 implementation if available

  function each(iterator, context) {
    for (var i = 0, length = this.length >>> 0; i < length; i++) {
      if (i in this) iterator.call(context, this[i], i, this);
    }
  }
  if (!_each) _each = each;

  function clear() {
    this.length = 0;
    return this;
  }

  function first() {
    return this[0];
  }

  function last() {
    return this[this.length - 1];
  }

  function compact() {
    return this.select(function (value) {
      return value != null;
    });
  }

  function flatten() {
    return this.inject([], function (array, value) {
      if (Object.isArray(value))
        return array.concat(value.flatten());
      array.push(value);
      return array;
    });
  }

  function without() {
    var values = slice.call(arguments, 0);
    return this.select(function (value) {
      return !values.include(value);
    });
  }

  function reverse(inline) {
    return (inline === false ? this.toArray() : this)._reverse();
  }

  function uniq(sorted) {
    return this.inject([], function (array, value, index) {
      if (0 == index || (sorted ? array.last() != value : !array.include(value)))
        array.push(value);
      return array;
    });
  }

  function intersect(array) {
    return this.uniq().findAll(function (item) {
      return array.detect(function (value) { return item === value });
    });
  }


  function clone() {
    return slice.call(this, 0);
  }

  function size() {
    return this.length;
  }

  function inspect() {
    return '[' + this.map(Object.inspect).join(', ') + ']';
  }

  function indexOf(item, i) {
    i || (i = 0);
    var length = this.length;
    if (i < 0) i = length + i;
    for (; i < length; i++)
      if (this[i] === item) return i;
    return -1;
  }

  function lastIndexOf(item, i) {
    i = isNaN(i) ? this.length : (i < 0 ? this.length + i : i) + 1;
    var n = this.slice(0, i).reverse().indexOf(item);
    return (n < 0) ? n : i - n - 1;
  }

  function concat() {
    var array = slice.call(this, 0), item;
    for (var i = 0, length = arguments.length; i < length; i++) {
      item = arguments[i];
      if (Object.isArray(item) && !('callee' in item)) {
        for (var j = 0, arrayLength = item.length; j < arrayLength; j++)
          array.push(item[j]);
      } else {
        array.push(item);
      }
    }
    return array;
  }

  Object.extend(arrayProto, Enumerable);

  if (!arrayProto._reverse)
    arrayProto._reverse = arrayProto.reverse;

  Object.extend(arrayProto, {
    _each: _each,
    clear: clear,
    first: first,
    last: last,
    compact: compact,
    flatten: flatten,
    without: without,
    reverse: reverse,
    uniq: uniq,
    intersect: intersect,
    clone: clone,
    toArray: clone,
    size: size,
    inspect: inspect
  });

  var CONCAT_ARGUMENTS_BUGGY = (function () {
    return [].concat(arguments)[0][0] !== 1;
  })(1, 2)

  if (CONCAT_ARGUMENTS_BUGGY) arrayProto.concat = concat;

  if (!arrayProto.indexOf) arrayProto.indexOf = indexOf;
  if (!arrayProto.lastIndexOf) arrayProto.lastIndexOf = lastIndexOf;
})();
function $H(object) {
  return new Hash(object);
};

var Hash = Class.create(Enumerable, (function () {
  function initialize(object) {
    this._object = Object.isHash(object) ? object.toObject() : Object.clone(object);
  }


  function _each(iterator) {
    for (var key in this._object) {
      var value = this._object[key], pair = [key, value];
      pair.key = key;
      pair.value = value;
      iterator(pair);
    }
  }

  function set(key, value) {
    return this._object[key] = value;
  }

  function get(key) {
    if (this._object[key] !== Object.prototype[key])
      return this._object[key];
  }

  function unset(key) {
    var value = this._object[key];
    delete this._object[key];
    return value;
  }

  function toObject() {
    return Object.clone(this._object);
  }



  function keys() {
    return this.pluck('key');
  }

  function values() {
    return this.pluck('value');
  }

  function index(value) {
    var match = this.detect(function (pair) {
      return pair.value === value;
    });
    return match && match.key;
  }

  function merge(object) {
    return this.clone().update(object);
  }

  function update(object) {
    return new Hash(object).inject(this, function (result, pair) {
      result.set(pair.key, pair.value);
      return result;
    });
  }

  function toQueryPair(key, value) {
    if (Object.isUndefined(value)) return key;
    return key + '=' + encodeURIComponent(String.interpret(value));
  }

  function toQueryString() {
    return this.inject([], function (results, pair) {
      var key = encodeURIComponent(pair.key), values = pair.value;

      if (values && typeof values == 'object') {
        if (Object.isArray(values)) {
          var queryValues = [];
          for (var i = 0, len = values.length, value; i < len; i++) {
            value = values[i];
            queryValues.push(toQueryPair(key, value));
          }
          return results.concat(queryValues);
        }
      } else results.push(toQueryPair(key, values));
      return results;
    }).join('&');
  }

  function inspect() {
    return '#<Hash:{' + this.map(function (pair) {
      return pair.map(Object.inspect).join(': ');
    }).join(', ') + '}>';
  }

  function clone() {
    return new Hash(this);
  }

  return {
    initialize: initialize,
    _each: _each,
    set: set,
    get: get,
    unset: unset,
    toObject: toObject,
    toTemplateReplacements: toObject,
    keys: keys,
    values: values,
    index: index,
    merge: merge,
    update: update,
    toQueryString: toQueryString,
    inspect: inspect,
    toJSON: toObject,
    clone: clone
  };
})());

Hash.from = $H;
Object.extend(Number.prototype, (function () {
  function toColorPart() {
    return this.toPaddedString(2, 16);
  }

  function succ() {
    return this + 1;
  }

  function times(iterator, context) {
    $R(0, this, true).each(iterator, context);
    return this;
  }

  function toPaddedString(length, radix) {
    var string = this.toString(radix || 10);
    return '0'.times(length - string.length) + string;
  }

  function abs() {
    return Math.abs(this);
  }

  function round() {
    return Math.round(this);
  }

  function ceil() {
    return Math.ceil(this);
  }

  function floor() {
    return Math.floor(this);
  }

  return {
    toColorPart: toColorPart,
    succ: succ,
    times: times,
    toPaddedString: toPaddedString,
    abs: abs,
    round: round,
    ceil: ceil,
    floor: floor
  };
})());

function $R(start, end, exclusive) {
  return new ObjectRange(start, end, exclusive);
}

var ObjectRange = Class.create(Enumerable, (function () {
  function initialize(start, end, exclusive) {
    this.start = start;
    this.end = end;
    this.exclusive = exclusive;
  }

  function _each(iterator) {
    var value = this.start;
    while (this.include(value)) {
      iterator(value);
      value = value.succ();
    }
  }

  function include(value) {
    if (value < this.start)
      return false;
    if (this.exclusive)
      return value < this.end;
    return value <= this.end;
  }

  return {
    initialize: initialize,
    _each: _each,
    include: include
  };
})());



var Ajax = {
  getTransport: function () {
    return Try.these(
      function () { return new XMLHttpRequest() },
      function () { return new ActiveXObject('Msxml2.XMLHTTP') },
      function () { return new ActiveXObject('Microsoft.XMLHTTP') }
    ) || false;
  },

  activeRequestCount: 0
};

Ajax.Responders = {
  responders: [],

  _each: function (iterator) {
    this.responders._each(iterator);
  },

  register: function (responder) {
    if (!this.include(responder))
      this.responders.push(responder);
  },

  unregister: function (responder) {
    this.responders = this.responders.without(responder);
  },

  dispatch: function (callback, request, transport, json) {
    this.each(function (responder) {
      if (Object.isFunction(responder[callback])) {
        try {
          responder[callback].apply(responder, [request, transport, json]);
        } catch (e) { }
      }
    });
  }
};

Object.extend(Ajax.Responders, Enumerable);

Ajax.Responders.register({
  onCreate: function () { Ajax.activeRequestCount++ },
  onComplete: function () { Ajax.activeRequestCount-- }
});
Ajax.Base = Class.create({
  initialize: function (options) {
    this.options = {
      method: 'post',
      asynchronous: true,
      contentType: 'application/x-www-form-urlencoded',
      encoding: 'UTF-8',
      parameters: '',
      evalJSON: true,
      evalJS: true
    };
    Object.extend(this.options, options || {});

    this.options.method = this.options.method.toLowerCase();

    if (Object.isHash(this.options.parameters))
      this.options.parameters = this.options.parameters.toObject();
  }
});
Ajax.Request = Class.create(Ajax.Base, {
  _complete: false,

  initialize: function ($super, url, options) {
    $super(options);
    this.transport = Ajax.getTransport();
    this.request(url);
  },

  request: function (url) {
    this.url = url;
    this.method = this.options.method;
    var params = Object.isString(this.options.parameters) ?
      this.options.parameters :
      Object.toQueryString(this.options.parameters);

    if (!['get', 'post'].include(this.method)) {
      params += (params ? '&' : '') + "_method=" + this.method;
      this.method = 'post';
    }

    if (params && this.method === 'get') {
      this.url += (this.url.include('?') ? '&' : '?') + params;
    }

    this.parameters = params.toQueryParams();

    try {
      var response = new Ajax.Response(this);
      if (this.options.onCreate) this.options.onCreate(response);
      Ajax.Responders.dispatch('onCreate', this, response);

      this.transport.open(this.method.toUpperCase(), this.url,
        this.options.asynchronous);

      if (this.options.asynchronous) this.respondToReadyState.bind(this).defer(1);

      this.transport.onreadystatechange = this.onStateChange.bind(this);
      this.setRequestHeaders();

      this.body = this.method == 'post' ? (this.options.postBody || params) : null;
      this.transport.send(this.body);

      /* Force Firefox to handle ready state 4 for synchronous requests */
      if (!this.options.asynchronous && this.transport.overrideMimeType)
        this.onStateChange();

    }
    catch (e) {
      this.dispatchException(e);
    }
  },

  onStateChange: function () {
    var readyState = this.transport.readyState;
    if (readyState > 1 && !((readyState == 4) && this._complete))
      this.respondToReadyState(this.transport.readyState);
  },

  setRequestHeaders: function () {
    var headers = {
      'X-Requested-With': 'XMLHttpRequest',
      'X-Prototype-Version': Prototype.Version,
      'Accept': 'text/javascript, text/html, application/xml, text/xml, */*'
    };

    if (this.method == 'post') {
      headers['Content-type'] = this.options.contentType +
        (this.options.encoding ? '; charset=' + this.options.encoding : '');

      /* Force "Connection: close" for older Mozilla browsers to work
       * around a bug where XMLHttpRequest sends an incorrect
       * Content-length header. See Mozilla Bugzilla #246651.
       */
      if (this.transport.overrideMimeType &&
        (navigator.userAgent.match(/Gecko\/(\d{4})/) || [0, 2005])[1] < 2005)
        headers['Connection'] = 'close';
    }

    if (typeof this.options.requestHeaders == 'object') {
      var extras = this.options.requestHeaders;

      if (Object.isFunction(extras.push))
        for (var i = 0, length = extras.length; i < length; i += 2)
          headers[extras[i]] = extras[i + 1];
      else
        $H(extras).each(function (pair) { headers[pair.key] = pair.value });
    }

    for (var name in headers)
      this.transport.setRequestHeader(name, headers[name]);
  },

  success: function () {
    var status = this.getStatus();
    return !status || (status >= 200 && status < 300) || status == 304;
  },

  getStatus: function () {
    try {
      if (this.transport.status === 1223) return 204;
      return this.transport.status || 0;
    } catch (e) { return 0 }
  },

  respondToReadyState: function (readyState) {
    var state = Ajax.Request.Events[readyState], response = new Ajax.Response(this);

    if (state == 'Complete') {
      try {
        this._complete = true;
        (this.options['on' + response.status]
          || this.options['on' + (this.success() ? 'Success' : 'Failure')]
          || Prototype.emptyFunction)(response, response.headerJSON);
      } catch (e) {
        this.dispatchException(e);
      }

      var contentType = response.getHeader('Content-type');
      if (this.options.evalJS == 'force'
        || (this.options.evalJS && this.isSameOrigin() && contentType
          && contentType.match(/^\s*(text|application)\/(x-)?(java|ecma)script(;.*)?\s*$/i)))
        this.evalResponse();
    }

    try {
      (this.options['on' + state] || Prototype.emptyFunction)(response, response.headerJSON);
      Ajax.Responders.dispatch('on' + state, this, response, response.headerJSON);
    } catch (e) {
      this.dispatchException(e);
    }

    if (state == 'Complete') {
      this.transport.onreadystatechange = Prototype.emptyFunction;
    }
  },

  isSameOrigin: function () {
    var m = this.url.match(/^\s*https?:\/\/[^\/]*/);
    return !m || (m[0] == '#{protocol}//#{domain}#{port}'.interpolate({
      protocol: location.protocol,
      domain: document.domain,
      port: location.port ? ':' + location.port : ''
    }));
  },

  getHeader: function (name) {
    try {
      return this.transport.getResponseHeader(name) || null;
    } catch (e) { return null; }
  },

  evalResponse: function () {
    try {
      return eval((this.transport.responseText || '').unfilterJSON());
    } catch (e) {
      this.dispatchException(e);
    }
  },

  dispatchException: function (exception) {
    (this.options.onException || Prototype.emptyFunction)(this, exception);
    Ajax.Responders.dispatch('onException', this, exception);
  }
});

Ajax.Request.Events =
  ['Uninitialized', 'Loading', 'Loaded', 'Interactive', 'Complete'];








Ajax.Response = Class.create({
  initialize: function (request) {
    this.request = request;
    var transport = this.transport = request.transport,
      readyState = this.readyState = transport.readyState;

    if ((readyState > 2 && !Prototype.Browser.IE) || readyState == 4) {
      this.status = this.getStatus();
      this.statusText = this.getStatusText();
      this.responseText = String.interpret(transport.responseText);
      this.headerJSON = this._getHeaderJSON();
    }

    if (readyState == 4) {
      var xml = transport.responseXML;
      this.responseXML = Object.isUndefined(xml) ? null : xml;
      this.responseJSON = this._getResponseJSON();
    }
  },

  status: 0,

  statusText: '',

  getStatus: Ajax.Request.prototype.getStatus,

  getStatusText: function () {
    try {
      return this.transport.statusText || '';
    } catch (e) { return '' }
  },

  getHeader: Ajax.Request.prototype.getHeader,

  getAllHeaders: function () {
    try {
      return this.getAllResponseHeaders();
    } catch (e) { return null }
  },

  getResponseHeader: function (name) {
    return this.transport.getResponseHeader(name);
  },

  getAllResponseHeaders: function () {
    return this.transport.getAllResponseHeaders();
  },

  _getHeaderJSON: function () {
    var json = this.getHeader('X-JSON');
    if (!json) return null;
    json = decodeURIComponent(escape(json));
    try {
      return json.evalJSON(this.request.options.sanitizeJSON ||
        !this.request.isSameOrigin());
    } catch (e) {
      this.request.dispatchException(e);
    }
  },

  _getResponseJSON: function () {
    var options = this.request.options;
    if (!options.evalJSON || (options.evalJSON != 'force' &&
      !(this.getHeader('Content-type') || '').include('application/json')) ||
      this.responseText.blank())
      return null;
    try {
      return this.responseText.evalJSON(options.sanitizeJSON ||
        !this.request.isSameOrigin());
    } catch (e) {
      this.request.dispatchException(e);
    }
  }
});

Ajax.Updater = Class.create(Ajax.Request, {
  initialize: function ($super, container, url, options) {
    this.container = {
      success: (container.success || container),
      failure: (container.failure || (container.success ? null : container))
    };

    options = Object.clone(options);
    var onComplete = options.onComplete;
    options.onComplete = (function (response, json) {
      this.updateContent(response.responseText);
      if (Object.isFunction(onComplete)) onComplete(response, json);
    }).bind(this);

    $super(url, options);
  },

  updateContent: function (responseText) {
    var receiver = this.container[this.success() ? 'success' : 'failure'],
      options = this.options;

    if (!options.evalScripts) responseText = responseText.stripScripts();

    if (receiver = $(receiver)) {
      if (options.insertion) {
        if (Object.isString(options.insertion)) {
          var insertion = {}; insertion[options.insertion] = responseText;
          receiver.insert(insertion);
        }
        else options.insertion(receiver, responseText);
      }
      else receiver.update(responseText);
    }
  }
});

Ajax.PeriodicalUpdater = Class.create(Ajax.Base, {
  initialize: function ($super, container, url, options) {
    $super(options);
    this.onComplete = this.options.onComplete;

    this.frequency = (this.options.frequency || 2);
    this.decay = (this.options.decay || 1);

    this.updater = {};
    this.container = container;
    this.url = url;

    this.start();
  },

  start: function () {
    this.options.onComplete = this.updateComplete.bind(this);
    this.onTimerEvent();
  },

  stop: function () {
    this.updater.options.onComplete = undefined;
    clearTimeout(this.timer);
    (this.onComplete || Prototype.emptyFunction).apply(this, arguments);
  },

  updateComplete: function (response) {
    if (this.options.decay) {
      this.decay = (response.responseText == this.lastText ?
        this.decay * this.options.decay : 1);

      this.lastText = response.responseText;
    }
    this.timer = this.onTimerEvent.bind(this).delay(this.decay * this.frequency);
  },

  onTimerEvent: function () {
    this.updater = new Ajax.Updater(this.container, this.url, this.options);
  }
});


function $(element) {
  if (arguments.length > 1) {
    for (var i = 0, elements = [], length = arguments.length; i < length; i++)
      elements.push($(arguments[i]));
    return elements;
  }
  if (Object.isString(element))
    element = document.getElementById(element);
  return Element.extend(element);
}

if (Prototype.BrowserFeatures.XPath) {
  document._getElementsByXPath = function (expression, parentElement) {
    var results = [];
    var query = document.evaluate(expression, $(parentElement) || document,
      null, XPathResult.ORDERED_NODE_SNAPSHOT_TYPE, null);
    for (var i = 0, length = query.snapshotLength; i < length; i++)
      results.push(Element.extend(query.snapshotItem(i)));
    return results;
  };
}

/*--------------------------------------------------------------------------*/

if (!Node) var Node = {};

if (!Node.ELEMENT_NODE) {
  Object.extend(Node, {
    ELEMENT_NODE: 1,
    ATTRIBUTE_NODE: 2,
    TEXT_NODE: 3,
    CDATA_SECTION_NODE: 4,
    ENTITY_REFERENCE_NODE: 5,
    ENTITY_NODE: 6,
    PROCESSING_INSTRUCTION_NODE: 7,
    COMMENT_NODE: 8,
    DOCUMENT_NODE: 9,
    DOCUMENT_TYPE_NODE: 10,
    DOCUMENT_FRAGMENT_NODE: 11,
    NOTATION_NODE: 12
  });
}



(function (global) {
  function shouldUseCache(tagName, attributes) {
    if (tagName === 'select') return false;
    if ('type' in attributes) return false;
    return true;
  }

  var HAS_EXTENDED_CREATE_ELEMENT_SYNTAX = (function () {
    try {
      var el = document.createElement('<input name="x">');
      return el.tagName.toLowerCase() === 'input' && el.name === 'x';
    }
    catch (err) {
      return false;
    }
  })();

  var element = global.Element;

  global.Element = function (tagName, attributes) {
    attributes = attributes || {};
    tagName = tagName.toLowerCase();
    var cache = Element.cache;

    if (HAS_EXTENDED_CREATE_ELEMENT_SYNTAX && attributes.name) {
      tagName = '<' + tagName + ' name="' + attributes.name + '">';
      delete attributes.name;
      return Element.writeAttribute(document.createElement(tagName), attributes);
    }

    if (!cache[tagName]) cache[tagName] = Element.extend(document.createElement(tagName));

    var node = shouldUseCache(tagName, attributes) ?
      cache[tagName].cloneNode(false) : document.createElement(tagName);

    return Element.writeAttribute(node, attributes);
  };

  Object.extend(global.Element, element || {});
  if (element) global.Element.prototype = element.prototype;

})(this);

Element.idCounter = 1;
Element.cache = {};

Element._purgeElement = function (element) {
  var uid = element._prototypeUID;
  if (uid) {
    Element.stopObserving(element);
    element._prototypeUID = void 0;
    delete Element.Storage[uid];
  }
}

Element.Methods = {
  visible: function (element) {
    return $(element).style.display != 'none';
  },

  toggle: function (element) {
    element = $(element);
    Element[Element.visible(element) ? 'hide' : 'show'](element);
    return element;
  },

  hide: function (element) {
    element = $(element);
    element.style.display = 'none';
    return element;
  },

  show: function (element) {
    element = $(element);
    element.style.display = '';
    return element;
  },

  remove: function (element) {
    element = $(element);
    element.parentNode.removeChild(element);
    return element;
  },

  update: (function () {

    var SELECT_ELEMENT_INNERHTML_BUGGY = (function () {
      var el = document.createElement("select"),
        isBuggy = true;
      el.innerHTML = "<option value=\"test\">test</option>";
      if (el.options && el.options[0]) {
        isBuggy = el.options[0].nodeName.toUpperCase() !== "OPTION";
      }
      el = null;
      return isBuggy;
    })();

    var TABLE_ELEMENT_INNERHTML_BUGGY = (function () {
      try {
        var el = document.createElement("table");
        if (el && el.tBodies) {
          el.innerHTML = "<tbody><tr><td>test</td></tr></tbody>";
          var isBuggy = typeof el.tBodies[0] == "undefined";
          el = null;
          return isBuggy;
        }
      } catch (e) {
        return true;
      }
    })();

    var LINK_ELEMENT_INNERHTML_BUGGY = (function () {
      try {
        var el = document.createElement('div');
        el.innerHTML = "<link>";
        var isBuggy = (el.childNodes.length === 0);
        el = null;
        return isBuggy;
      } catch (e) {
        return true;
      }
    })();

    var ANY_INNERHTML_BUGGY = SELECT_ELEMENT_INNERHTML_BUGGY ||
      TABLE_ELEMENT_INNERHTML_BUGGY || LINK_ELEMENT_INNERHTML_BUGGY;

    var SCRIPT_ELEMENT_REJECTS_TEXTNODE_APPENDING = (function () {
      var s = document.createElement("script"),
        isBuggy = false;
      try {
        s.appendChild(document.createTextNode(""));
        isBuggy = !s.firstChild ||
          s.firstChild && s.firstChild.nodeType !== 3;
      } catch (e) {
        isBuggy = true;
      }
      s = null;
      return isBuggy;
    })();


    function update(element, content) {
      element = $(element);
      var purgeElement = Element._purgeElement;

      var descendants = element.getElementsByTagName('*'),
        i = descendants.length;
      while (i--) purgeElement(descendants[i]);

      if (content && content.toElement)
        content = content.toElement();

      if (Object.isElement(content))
        return element.update().insert(content);

      content = Object.toHTML(content);

      var tagName = element.tagName.toUpperCase();

      if (tagName === 'SCRIPT' && SCRIPT_ELEMENT_REJECTS_TEXTNODE_APPENDING) {
        element.text = content;
        return element;
      }

      if (ANY_INNERHTML_BUGGY) {
        if (tagName in Element._insertionTranslations.tags) {
          while (element.firstChild) {
            element.removeChild(element.firstChild);
          }
          Element._getContentFromAnonymousElement(tagName, content.stripScripts())
            .each(function (node) {
              element.appendChild(node)
            });
        } else if (LINK_ELEMENT_INNERHTML_BUGGY && Object.isString(content) && content.indexOf('<link') > -1) {
          while (element.firstChild) {
            element.removeChild(element.firstChild);
          }
          var nodes = Element._getContentFromAnonymousElement(tagName, content.stripScripts(), true);
          nodes.each(function (node) { element.appendChild(node) });
        }
        else {
          element.innerHTML = content.stripScripts();
        }
      }
      else {
        element.innerHTML = content.stripScripts();
      }

      content.evalScripts.bind(content).defer();
      return element;
    }

    return update;
  })(),

  replace: function (element, content) {
    element = $(element);
    if (content && content.toElement) content = content.toElement();
    else if (!Object.isElement(content)) {
      content = Object.toHTML(content);
      var range = element.ownerDocument.createRange();
      range.selectNode(element);
      content.evalScripts.bind(content).defer();
      content = range.createContextualFragment(content.stripScripts());
    }
    element.parentNode.replaceChild(content, element);
    return element;
  },

  insert: function (element, insertions) {
    element = $(element);

    if (Object.isString(insertions) || Object.isNumber(insertions) ||
      Object.isElement(insertions) || (insertions && (insertions.toElement || insertions.toHTML)))
      insertions = { bottom: insertions };

    var content, insert, tagName, childNodes;

    for (var position in insertions) {
      content = insertions[position];
      position = position.toLowerCase();
      insert = Element._insertionTranslations[position];

      if (content && content.toElement) content = content.toElement();
      if (Object.isElement(content)) {
        insert(element, content);
        continue;
      }

      content = Object.toHTML(content);

      tagName = ((position == 'before' || position == 'after')
        ? element.parentNode : element).tagName.toUpperCase();

      childNodes = Element._getContentFromAnonymousElement(tagName, content.stripScripts());

      if (position == 'top' || position == 'after') childNodes.reverse();
      childNodes.each(insert.curry(element));

      content.evalScripts.bind(content).defer();
    }

    return element;
  },

  wrap: function (element, wrapper, attributes) {
    element = $(element);
    if (Object.isElement(wrapper))
      $(wrapper).writeAttribute(attributes || {});
    else if (Object.isString(wrapper)) wrapper = new Element(wrapper, attributes);
    else wrapper = new Element('div', wrapper);
    if (element.parentNode)
      element.parentNode.replaceChild(wrapper, element);
    wrapper.appendChild(element);
    return wrapper;
  },

  inspect: function (element) {
    element = $(element);
    var result = '<' + element.tagName.toLowerCase();
    $H({ 'id': 'id', 'className': 'class' }).each(function (pair) {
      var property = pair.first(),
        attribute = pair.last(),
        value = (element[property] || '').toString();
      if (value) result += ' ' + attribute + '=' + value.inspect(true);
    });
    return result + '>';
  },

  recursivelyCollect: function (element, property, maximumLength) {
    element = $(element);
    maximumLength = maximumLength || -1;
    var elements = [];

    while (element = element[property]) {
      if (element.nodeType == 1)
        elements.push(Element.extend(element));
      if (elements.length == maximumLength)
        break;
    }

    return elements;
  },

  ancestors: function (element) {
    return Element.recursivelyCollect(element, 'parentNode');
  },

  descendants: function (element) {
    return Element.select(element, "*");
  },

  firstDescendant: function (element) {
    element = $(element).firstChild;
    while (element && element.nodeType != 1) element = element.nextSibling;
    return $(element);
  },

  immediateDescendants: function (element) {
    var results = [], child = $(element).firstChild;
    while (child) {
      if (child.nodeType === 1) {
        results.push(Element.extend(child));
      }
      child = child.nextSibling;
    }
    return results;
  },

  previousSiblings: function (element, maximumLength) {
    return Element.recursivelyCollect(element, 'previousSibling');
  },

  nextSiblings: function (element) {
    return Element.recursivelyCollect(element, 'nextSibling');
  },

  siblings: function (element) {
    element = $(element);
    return Element.previousSiblings(element).reverse()
      .concat(Element.nextSiblings(element));
  },

  match: function (element, selector) {
    element = $(element);
    if (Object.isString(selector))
      return Prototype.Selector.match(element, selector);
    return selector.match(element);
  },

  up: function (element, expression, index) {
    element = $(element);
    if (arguments.length == 1) return $(element.parentNode);
    var ancestors = Element.ancestors(element);
    return Object.isNumber(expression) ? ancestors[expression] :
      Prototype.Selector.find(ancestors, expression, index);
  },

  down: function (element, expression, index) {
    element = $(element);
    if (arguments.length == 1) return Element.firstDescendant(element);
    return Object.isNumber(expression) ? Element.descendants(element)[expression] :
      Element.select(element, expression)[index || 0];
  },

  previous: function (element, expression, index) {
    element = $(element);
    if (Object.isNumber(expression)) index = expression, expression = false;
    if (!Object.isNumber(index)) index = 0;

    if (expression) {
      return Prototype.Selector.find(element.previousSiblings(), expression, index);
    } else {
      return element.recursivelyCollect("previousSibling", index + 1)[index];
    }
  },

  next: function (element, expression, index) {
    element = $(element);
    if (Object.isNumber(expression)) index = expression, expression = false;
    if (!Object.isNumber(index)) index = 0;

    if (expression) {
      return Prototype.Selector.find(element.nextSiblings(), expression, index);
    } else {
      var maximumLength = Object.isNumber(index) ? index + 1 : 1;
      return element.recursivelyCollect("nextSibling", index + 1)[index];
    }
  },


  select: function (element) {
    element = $(element);
    var expressions = Array.prototype.slice.call(arguments, 1).join(', ');
    return Prototype.Selector.select(expressions, element);
  },

  adjacent: function (element) {
    element = $(element);
    var expressions = Array.prototype.slice.call(arguments, 1).join(', ');
    return Prototype.Selector.select(expressions, element.parentNode).without(element);
  },

  identify: function (element) {
    element = $(element);
    var id = Element.readAttribute(element, 'id');
    if (id) return id;
    do { id = 'anonymous_element_' + Element.idCounter++ } while ($(id));
    Element.writeAttribute(element, 'id', id);
    return id;
  },

  readAttribute: function (element, name) {
    element = $(element);
    if (Prototype.Browser.IE) {
      var t = Element._attributeTranslations.read;
      if (t.values[name]) return t.values[name](element, name);
      if (t.names[name]) name = t.names[name];
      if (name.include(':')) {
        return (!element.attributes || !element.attributes[name]) ? null :
          element.attributes[name].value;
      }
    }
    return element.getAttribute(name);
  },

  writeAttribute: function (element, name, value) {
    element = $(element);
    var attributes = {}, t = Element._attributeTranslations.write;

    if (typeof name == 'object') attributes = name;
    else attributes[name] = Object.isUndefined(value) ? true : value;

    for (var attr in attributes) {
      name = t.names[attr] || attr;
      value = attributes[attr];
      if (t.values[attr]) name = t.values[attr](element, value);
      if (value === false || value === null)
        element.removeAttribute(name);
      else if (value === true)
        element.setAttribute(name, name);
      else element.setAttribute(name, value);
    }
    return element;
  },

  getHeight: function (element) {
    return Element.getDimensions(element).height;
  },

  getWidth: function (element) {
    return Element.getDimensions(element).width;
  },

  classNames: function (element) {
    return new Element.ClassNames(element);
  },

  hasClassName: function (element, className) {
    if (!(element = $(element))) return;
    var elementClassName = element.className;
    return (elementClassName.length > 0 && (elementClassName == className ||
      new RegExp("(^|\\s)" + className + "(\\s|$)").test(elementClassName)));
  },

  addClassName: function (element, className) {
    if (!(element = $(element))) return;
    if (!Element.hasClassName(element, className))
      element.className += (element.className ? ' ' : '') + className;
    return element;
  },

  removeClassName: function (element, className) {
    if (!(element = $(element))) return;
    element.className = element.className.replace(
      new RegExp("(^|\\s+)" + className + "(\\s+|$)"), ' ').strip();
    return element;
  },

  toggleClassName: function (element, className) {
    if (!(element = $(element))) return;
    return Element[Element.hasClassName(element, className) ?
      'removeClassName' : 'addClassName'](element, className);
  },

  cleanWhitespace: function (element) {
    element = $(element);
    var node = element.firstChild;
    while (node) {
      var nextNode = node.nextSibling;
      if (node.nodeType == 3 && !/\S/.test(node.nodeValue))
        element.removeChild(node);
      node = nextNode;
    }
    return element;
  },

  empty: function (element) {
    return $(element).innerHTML.blank();
  },

  descendantOf: function (element, ancestor) {
    element = $(element), ancestor = $(ancestor);

    if (element.compareDocumentPosition)
      return (element.compareDocumentPosition(ancestor) & 8) === 8;

    if (ancestor.contains)
      return ancestor.contains(element) && ancestor !== element;

    while (element = element.parentNode)
      if (element == ancestor) return true;

    return false;
  },

  scrollTo: function (element) {
    element = $(element);
    var pos = Element.cumulativeOffset(element);
    window.scrollTo(pos[0], pos[1]);
    return element;
  },

  getStyle: function (element, style) {
    element = $(element);
    style = style == 'float' ? 'cssFloat' : style.camelize();
    var value = element.style[style];
    if (!value || value == 'auto') {
      var css = document.defaultView.getComputedStyle(element, null);
      value = css ? css[style] : null;
    }
    if (style == 'opacity') return value ? parseFloat(value) : 1.0;
    return value == 'auto' ? null : value;
  },

  getOpacity: function (element) {
    return $(element).getStyle('opacity');
  },

  setStyle: function (element, styles) {
    element = $(element);
    var elementStyle = element.style, match;
    if (Object.isString(styles)) {
      element.style.cssText += ';' + styles;
      return styles.include('opacity') ?
        element.setOpacity(styles.match(/opacity:\s*(\d?\.?\d*)/)[1]) : element;
    }
    for (var property in styles)
      if (property == 'opacity') element.setOpacity(styles[property]);
      else
        elementStyle[(property == 'float' || property == 'cssFloat') ?
          (Object.isUndefined(elementStyle.styleFloat) ? 'cssFloat' : 'styleFloat') :
          property] = styles[property];

    return element;
  },

  setOpacity: function (element, value) {
    element = $(element);
    element.style.opacity = (value == 1 || value === '') ? '' :
      (value < 0.00001) ? 0 : value;
    return element;
  },

  makePositioned: function (element) {
    element = $(element);
    var pos = Element.getStyle(element, 'position');
    if (pos == 'static' || !pos) {
      element._madePositioned = true;
      element.style.position = 'relative';
      if (Prototype.Browser.Opera) {
        element.style.top = 0;
        element.style.left = 0;
      }
    }
    return element;
  },

  undoPositioned: function (element) {
    element = $(element);
    if (element._madePositioned) {
      element._madePositioned = undefined;
      element.style.position =
        element.style.top =
        element.style.left =
        element.style.bottom =
        element.style.right = '';
    }
    return element;
  },

  makeClipping: function (element) {
    element = $(element);
    if (element._overflow) return element;
    element._overflow = Element.getStyle(element, 'overflow') || 'auto';
    if (element._overflow !== 'hidden')
      element.style.overflow = 'hidden';
    return element;
  },

  undoClipping: function (element) {
    element = $(element);
    if (!element._overflow) return element;
    element.style.overflow = element._overflow == 'auto' ? '' : element._overflow;
    element._overflow = null;
    return element;
  },

  clonePosition: function (element, source) {
    var options = Object.extend({
      setLeft: true,
      setTop: true,
      setWidth: true,
      setHeight: true,
      offsetTop: 0,
      offsetLeft: 0
    }, arguments[2] || {});

    source = $(source);
    var p = Element.viewportOffset(source), delta = [0, 0], parent = null;

    element = $(element);

    if (Element.getStyle(element, 'position') == 'absolute') {
      parent = Element.getOffsetParent(element);
      delta = Element.viewportOffset(parent);
    }

    if (parent == document.body) {
      delta[0] -= document.body.offsetLeft;
      delta[1] -= document.body.offsetTop;
    }

    if (options.setLeft) element.style.left = (p[0] - delta[0] + options.offsetLeft) + 'px';
    if (options.setTop) element.style.top = (p[1] - delta[1] + options.offsetTop) + 'px';
    if (options.setWidth) element.style.width = source.offsetWidth + 'px';
    if (options.setHeight) element.style.height = source.offsetHeight + 'px';
    return element;
  }
};

Object.extend(Element.Methods, {
  getElementsBySelector: Element.Methods.select,

  childElements: Element.Methods.immediateDescendants
});

Element._attributeTranslations = {
  write: {
    names: {
      className: 'class',
      htmlFor: 'for'
    },
    values: {}
  }
};

if (Prototype.Browser.Opera) {
  Element.Methods.getStyle = Element.Methods.getStyle.wrap(
    function (proceed, element, style) {
      switch (style) {
        case 'height': case 'width':
          if (!Element.visible(element)) return null;

          var dim = parseInt(proceed(element, style), 10);

          if (dim !== element['offset' + style.capitalize()])
            return dim + 'px';

          var properties;
          if (style === 'height') {
            properties = ['border-top-width', 'padding-top',
              'padding-bottom', 'border-bottom-width'];
          }
          else {
            properties = ['border-left-width', 'padding-left',
              'padding-right', 'border-right-width'];
          }
          return properties.inject(dim, function (memo, property) {
            var val = proceed(element, property);
            return val === null ? memo : memo - parseInt(val, 10);
          }) + 'px';
        default: return proceed(element, style);
      }
    }
  );

  Element.Methods.readAttribute = Element.Methods.readAttribute.wrap(
    function (proceed, element, attribute) {
      if (attribute === 'title') return element.title;
      return proceed(element, attribute);
    }
  );
}

else if (Prototype.Browser.IE) {
  Element.Methods.getStyle = function (element, style) {
    element = $(element);
    style = (style == 'float' || style == 'cssFloat') ? 'styleFloat' : style.camelize();
    var value = element.style[style];
    if (!value && element.currentStyle) value = element.currentStyle[style];

    if (style == 'opacity') {
      if (value = (element.getStyle('filter') || '').match(/alpha\(opacity=(.*)\)/))
        if (value[1]) return parseFloat(value[1]) / 100;
      return 1.0;
    }

    if (value == 'auto') {
      if ((style == 'width' || style == 'height') && (element.getStyle('display') != 'none'))
        return element['offset' + style.capitalize()] + 'px';
      return null;
    }
    return value;
  };

  Element.Methods.setOpacity = function (element, value) {
    function stripAlpha(filter) {
      return filter.replace(/alpha\([^\)]*\)/gi, '');
    }
    element = $(element);
    var currentStyle = element.currentStyle;
    if ((currentStyle && !currentStyle.hasLayout) ||
      (!currentStyle && element.style.zoom == 'normal'))
      element.style.zoom = 1;

    var filter = element.getStyle('filter'), style = element.style;
    if (value == 1 || value === '') {
      (filter = stripAlpha(filter)) ?
        style.filter = filter : style.removeAttribute('filter');
      return element;
    } else if (value < 0.00001) value = 0;
    style.filter = stripAlpha(filter) +
      'alpha(opacity=' + (value * 100) + ')';
    return element;
  };

  Element._attributeTranslations = (function () {

    var classProp = 'className',
      forProp = 'for',
      el = document.createElement('div');

    el.setAttribute(classProp, 'x');

    if (el.className !== 'x') {
      el.setAttribute('class', 'x');
      if (el.className === 'x') {
        classProp = 'class';
      }
    }
    el = null;

    el = document.createElement('label');
    el.setAttribute(forProp, 'x');
    if (el.htmlFor !== 'x') {
      el.setAttribute('htmlFor', 'x');
      if (el.htmlFor === 'x') {
        forProp = 'htmlFor';
      }
    }
    el = null;

    return {
      read: {
        names: {
          'class': classProp,
          'className': classProp,
          'for': forProp,
          'htmlFor': forProp
        },
        values: {
          _getAttr: function (element, attribute) {
            return element.getAttribute(attribute);
          },
          _getAttr2: function (element, attribute) {
            return element.getAttribute(attribute, 2);
          },
          _getAttrNode: function (element, attribute) {
            var node = element.getAttributeNode(attribute);
            return node ? node.value : "";
          },
          _getEv: (function () {

            var el = document.createElement('div'), f;
            el.onclick = Prototype.emptyFunction;
            var value = el.getAttribute('onclick');

            if (String(value).indexOf('{') > -1) {
              f = function (element, attribute) {
                attribute = element.getAttribute(attribute);
                if (!attribute) return null;
                attribute = attribute.toString();
                attribute = attribute.split('{')[1];
                attribute = attribute.split('}')[0];
                return attribute.strip();
              };
            }
            else if (value === '') {
              f = function (element, attribute) {
                attribute = element.getAttribute(attribute);
                if (!attribute) return null;
                return attribute.strip();
              };
            }
            el = null;
            return f;
          })(),
          _flag: function (element, attribute) {
            return $(element).hasAttribute(attribute) ? attribute : null;
          },
          style: function (element) {
            return element.style.cssText.toLowerCase();
          },
          title: function (element) {
            return element.title;
          }
        }
      }
    }
  })();

  Element._attributeTranslations.write = {
    names: Object.extend({
      cellpadding: 'cellPadding',
      cellspacing: 'cellSpacing'
    }, Element._attributeTranslations.read.names),
    values: {
      checked: function (element, value) {
        element.checked = !!value;
      },

      style: function (element, value) {
        element.style.cssText = value ? value : '';
      }
    }
  };

  Element._attributeTranslations.has = {};

  $w('colSpan rowSpan vAlign dateTime accessKey tabIndex ' +
    'encType maxLength readOnly longDesc frameBorder').each(function (attr) {
      Element._attributeTranslations.write.names[attr.toLowerCase()] = attr;
      Element._attributeTranslations.has[attr.toLowerCase()] = attr;
    });

  (function (v) {
    Object.extend(v, {
      href: v._getAttr2,
      src: v._getAttr2,
      type: v._getAttr,
      action: v._getAttrNode,
      disabled: v._flag,
      checked: v._flag,
      readonly: v._flag,
      multiple: v._flag,
      onload: v._getEv,
      onunload: v._getEv,
      onclick: v._getEv,
      ondblclick: v._getEv,
      onmousedown: v._getEv,
      onmouseup: v._getEv,
      onmouseover: v._getEv,
      onmousemove: v._getEv,
      onmouseout: v._getEv,
      onfocus: v._getEv,
      onblur: v._getEv,
      onkeypress: v._getEv,
      onkeydown: v._getEv,
      onkeyup: v._getEv,
      onsubmit: v._getEv,
      onreset: v._getEv,
      onselect: v._getEv,
      onchange: v._getEv
    });
  })(Element._attributeTranslations.read.values);

  if (Prototype.BrowserFeatures.ElementExtensions) {
    (function () {
      function _descendants(element) {
        var nodes = element.getElementsByTagName('*'), results = [];
        for (var i = 0, node; node = nodes[i]; i++)
          if (node.tagName !== "!") // Filter out comment nodes.
            results.push(node);
        return results;
      }

      Element.Methods.down = function (element, expression, index) {
        element = $(element);
        if (arguments.length == 1) return element.firstDescendant();
        return Object.isNumber(expression) ? _descendants(element)[expression] :
          Element.select(element, expression)[index || 0];
      }
    })();
  }

}

else if (Prototype.Browser.Gecko && /rv:1\.8\.0/.test(navigator.userAgent)) {
  Element.Methods.setOpacity = function (element, value) {
    element = $(element);
    element.style.opacity = (value == 1) ? 0.999999 :
      (value === '') ? '' : (value < 0.00001) ? 0 : value;
    return element;
  };
}

else if (Prototype.Browser.WebKit) {
  Element.Methods.setOpacity = function (element, value) {
    element = $(element);
    element.style.opacity = (value == 1 || value === '') ? '' :
      (value < 0.00001) ? 0 : value;

    if (value == 1)
      if (element.tagName.toUpperCase() == 'IMG' && element.width) {
        element.width++; element.width--;
      } else try {
        var n = document.createTextNode(' ');
        element.appendChild(n);
        element.removeChild(n);
      } catch (e) { }

    return element;
  };
}

if ('outerHTML' in document.documentElement) {
  Element.Methods.replace = function (element, content) {
    element = $(element);

    if (content && content.toElement) content = content.toElement();
    if (Object.isElement(content)) {
      element.parentNode.replaceChild(content, element);
      return element;
    }

    content = Object.toHTML(content);
    var parent = element.parentNode, tagName = parent.tagName.toUpperCase();

    if (Element._insertionTranslations.tags[tagName]) {
      var nextSibling = element.next(),
        fragments = Element._getContentFromAnonymousElement(tagName, content.stripScripts());
      parent.removeChild(element);
      if (nextSibling)
        fragments.each(function (node) { parent.insertBefore(node, nextSibling) });
      else
        fragments.each(function (node) { parent.appendChild(node) });
    }
    else element.outerHTML = content.stripScripts();

    content.evalScripts.bind(content).defer();
    return element;
  };
}

Element._returnOffset = function (l, t) {
  var result = [l, t];
  result.left = l;
  result.top = t;
  return result;
};

Element._getContentFromAnonymousElement = function (tagName, html, force) {
  var div = new Element('div'),
    t = Element._insertionTranslations.tags[tagName];

  var workaround = false;
  if (t) workaround = true;
  else if (force) {
    workaround = true;
    t = ['', '', 0];
  }

  if (workaround) {
    div.innerHTML = '&nbsp;' + t[0] + html + t[1];
    div.removeChild(div.firstChild);
    for (var i = t[2]; i--;) {
      div = div.firstChild;
    }
  }
  else {
    div.innerHTML = html;
  }
  return $A(div.childNodes);
};

Element._insertionTranslations = {
  before: function (element, node) {
    element.parentNode.insertBefore(node, element);
  },
  top: function (element, node) {
    element.insertBefore(node, element.firstChild);
  },
  bottom: function (element, node) {
    element.appendChild(node);
  },
  after: function (element, node) {
    element.parentNode.insertBefore(node, element.nextSibling);
  },
  tags: {
    TABLE: ['<table>', '</table>', 1],
    TBODY: ['<table><tbody>', '</tbody></table>', 2],
    TR: ['<table><tbody><tr>', '</tr></tbody></table>', 3],
    TD: ['<table><tbody><tr><td>', '</td></tr></tbody></table>', 4],
    SELECT: ['<select>', '</select>', 1]
  }
};

(function () {
  var tags = Element._insertionTranslations.tags;
  Object.extend(tags, {
    THEAD: tags.TBODY,
    TFOOT: tags.TBODY,
    TH: tags.TD
  });
})();

Element.Methods.Simulated = {
  hasAttribute: function (element, attribute) {
    attribute = Element._attributeTranslations.has[attribute] || attribute;
    var node = $(element).getAttributeNode(attribute);
    return !!(node && node.specified);
  }
};

Element.Methods.ByTag = {};

Object.extend(Element, Element.Methods);

(function (div) {

  if (!Prototype.BrowserFeatures.ElementExtensions && div['__proto__']) {
    window.HTMLElement = {};
    window.HTMLElement.prototype = div['__proto__'];
    Prototype.BrowserFeatures.ElementExtensions = true;
  }

  div = null;

})(document.createElement('div'));

Element.extend = (function () {

  function checkDeficiency(tagName) {
    if (typeof window.Element != 'undefined') {
      var proto = window.Element.prototype;
      if (proto) {
        var id = '_' + (Math.random() + '').slice(2),
          el = document.createElement(tagName);
        proto[id] = 'x';
        var isBuggy = (el[id] !== 'x');
        delete proto[id];
        el = null;
        return isBuggy;
      }
    }
    return false;
  }

  function extendElementWith(element, methods) {
    for (var property in methods) {
      var value = methods[property];
      if (Object.isFunction(value) && !(property in element))
        element[property] = value.methodize();
    }
  }

  var HTMLOBJECTELEMENT_PROTOTYPE_BUGGY = checkDeficiency('object');

  if (Prototype.BrowserFeatures.SpecificElementExtensions) {
    if (HTMLOBJECTELEMENT_PROTOTYPE_BUGGY) {
      return function (element) {
        if (element && typeof element._extendedByPrototype == 'undefined') {
          var t = element.tagName;
          if (t && (/^(?:object|applet|embed)$/i.test(t))) {
            extendElementWith(element, Element.Methods);
            extendElementWith(element, Element.Methods.Simulated);
            extendElementWith(element, Element.Methods.ByTag[t.toUpperCase()]);
          }
        }
        return element;
      }
    }
    return Prototype.K;
  }

  var Methods = {}, ByTag = Element.Methods.ByTag;

  var extend = Object.extend(function (element) {
    if (!element || typeof element._extendedByPrototype != 'undefined' ||
      element.nodeType != 1 || element == window) return element;

    var methods = Object.clone(Methods),
      tagName = element.tagName.toUpperCase();

    if (ByTag[tagName]) Object.extend(methods, ByTag[tagName]);

    extendElementWith(element, methods);

    element._extendedByPrototype = Prototype.emptyFunction;
    return element;

  }, {
    refresh: function () {
      if (!Prototype.BrowserFeatures.ElementExtensions) {
        Object.extend(Methods, Element.Methods);
        Object.extend(Methods, Element.Methods.Simulated);
      }
    }
  });

  extend.refresh();
  return extend;
})();

if (document.documentElement.hasAttribute) {
  Element.hasAttribute = function (element, attribute) {
    return element.hasAttribute(attribute);
  };
}
else {
  Element.hasAttribute = Element.Methods.Simulated.hasAttribute;
}

Element.addMethods = function (methods) {
  var F = Prototype.BrowserFeatures, T = Element.Methods.ByTag;

  if (!methods) {
    Object.extend(Form, Form.Methods);
    Object.extend(Form.Element, Form.Element.Methods);
    Object.extend(Element.Methods.ByTag, {
      "FORM": Object.clone(Form.Methods),
      "INPUT": Object.clone(Form.Element.Methods),
      "SELECT": Object.clone(Form.Element.Methods),
      "TEXTAREA": Object.clone(Form.Element.Methods),
      "BUTTON": Object.clone(Form.Element.Methods)
    });
  }

  if (arguments.length == 2) {
    var tagName = methods;
    methods = arguments[1];
  }

  if (!tagName) Object.extend(Element.Methods, methods || {});
  else {
    if (Object.isArray(tagName)) tagName.each(extend);
    else extend(tagName);
  }

  function extend(tagName) {
    tagName = tagName.toUpperCase();
    if (!Element.Methods.ByTag[tagName])
      Element.Methods.ByTag[tagName] = {};
    Object.extend(Element.Methods.ByTag[tagName], methods);
  }

  function copy(methods, destination, onlyIfAbsent) {
    onlyIfAbsent = onlyIfAbsent || false;
    for (var property in methods) {
      var value = methods[property];
      if (!Object.isFunction(value)) continue;
      if (!onlyIfAbsent || !(property in destination))
        destination[property] = value.methodize();
    }
  }

  function findDOMClass(tagName) {
    var klass;
    var trans = {
      "OPTGROUP": "OptGroup", "TEXTAREA": "TextArea", "P": "Paragraph",
      "FIELDSET": "FieldSet", "UL": "UList", "OL": "OList", "DL": "DList",
      "DIR": "Directory", "H1": "Heading", "H2": "Heading", "H3": "Heading",
      "H4": "Heading", "H5": "Heading", "H6": "Heading", "Q": "Quote",
      "INS": "Mod", "DEL": "Mod", "A": "Anchor", "IMG": "Image", "CAPTION":
        "TableCaption", "COL": "TableCol", "COLGROUP": "TableCol", "THEAD":
        "TableSection", "TFOOT": "TableSection", "TBODY": "TableSection", "TR":
        "TableRow", "TH": "TableCell", "TD": "TableCell", "FRAMESET":
        "FrameSet", "IFRAME": "IFrame"
    };
    if (trans[tagName]) klass = 'HTML' + trans[tagName] + 'Element';
    if (window[klass]) return window[klass];
    klass = 'HTML' + tagName + 'Element';
    if (window[klass]) return window[klass];
    klass = 'HTML' + tagName.capitalize() + 'Element';
    if (window[klass]) return window[klass];

    var element = document.createElement(tagName),
      proto = element['__proto__'] || element.constructor.prototype;

    element = null;
    return proto;
  }

  var elementPrototype = window.HTMLElement ? HTMLElement.prototype :
    Element.prototype;

  if (F.ElementExtensions) {
    copy(Element.Methods, elementPrototype);
    copy(Element.Methods.Simulated, elementPrototype, true);
  }

  if (F.SpecificElementExtensions) {
    for (var tag in Element.Methods.ByTag) {
      var klass = findDOMClass(tag);
      if (Object.isUndefined(klass)) continue;
      copy(T[tag], klass.prototype);
    }
  }

  Object.extend(Element, Element.Methods);
  delete Element.ByTag;

  if (Element.extend.refresh) Element.extend.refresh();
  Element.cache = {};
};


document.viewport = {

  getDimensions: function () {
    return { width: this.getWidth(), height: this.getHeight() };
  },

  getScrollOffsets: function () {
    return Element._returnOffset(
      window.pageXOffset || document.documentElement.scrollLeft || document.body.scrollLeft,
      window.pageYOffset || document.documentElement.scrollTop || document.body.scrollTop);
  }
};

(function (viewport) {
  var B = Prototype.Browser, doc = document, element, property = {};

  function getRootElement() {
    if (B.WebKit && !doc.evaluate)
      return document;

    if (B.Opera && window.parseFloat(window.opera.version()) < 9.5)
      return document.body;

    return document.documentElement;
  }

  function define(D) {
    if (!element) element = getRootElement();

    property[D] = 'client' + D;

    viewport['get' + D] = function () { return element[property[D]] };
    return viewport['get' + D]();
  }

  viewport.getWidth = define.curry('Width');

  viewport.getHeight = define.curry('Height');
})(document.viewport);


Element.Storage = {
  UID: 1
};

Element.addMethods({
  getStorage: function (element) {
    if (!(element = $(element))) return;

    var uid;
    if (element === window) {
      uid = 0;
    } else {
      if (typeof element._prototypeUID === "undefined")
        element._prototypeUID = Element.Storage.UID++;
      uid = element._prototypeUID;
    }

    if (!Element.Storage[uid])
      Element.Storage[uid] = $H();

    return Element.Storage[uid];
  },

  store: function (element, key, value) {
    if (!(element = $(element))) return;

    if (arguments.length === 2) {
      Element.getStorage(element).update(key);
    } else {
      Element.getStorage(element).set(key, value);
    }

    return element;
  },

  retrieve: function (element, key, defaultValue) {
    if (!(element = $(element))) return;
    var hash = Element.getStorage(element), value = hash.get(key);

    if (Object.isUndefined(value)) {
      hash.set(key, defaultValue);
      value = defaultValue;
    }

    return value;
  },

  clone: function (element, deep) {
    if (!(element = $(element))) return;
    var clone = element.cloneNode(deep);
    clone._prototypeUID = void 0;
    if (deep) {
      var descendants = Element.select(clone, '*'),
        i = descendants.length;
      while (i--) {
        descendants[i]._prototypeUID = void 0;
      }
    }
    return Element.extend(clone);
  },

  purge: function (element) {
    if (!(element = $(element))) return;
    var purgeElement = Element._purgeElement;

    purgeElement(element);

    var descendants = element.getElementsByTagName('*'),
      i = descendants.length;

    while (i--) purgeElement(descendants[i]);

    return null;
  }
});

(function () {

  function toDecimal(pctString) {
    var match = pctString.match(/^(\d+)%?$/i);
    if (!match) return null;
    return (Number(match[1]) / 100);
  }

  function getPixelValue(value, property, context) {
    var element = null;
    if (Object.isElement(value)) {
      element = value;
      value = element.getStyle(property);
    }

    if (value === null) {
      return null;
    }

    if ((/^(?:-)?\d+(\.\d+)?(px)?$/i).test(value)) {
      return window.parseFloat(value);
    }

    var isPercentage = value.include('%'), isViewport = (context === document.viewport);

    if (/\d/.test(value) && element && element.runtimeStyle && !(isPercentage && isViewport)) {
      var style = element.style.left, rStyle = element.runtimeStyle.left;
      element.runtimeStyle.left = element.currentStyle.left;
      element.style.left = value || 0;
      value = element.style.pixelLeft;
      element.style.left = style;
      element.runtimeStyle.left = rStyle;

      return value;
    }

    if (element && isPercentage) {
      context = context || element.parentNode;
      var decimal = toDecimal(value);
      var whole = null;
      var position = element.getStyle('position');

      var isHorizontal = property.include('left') || property.include('right') ||
        property.include('width');

      var isVertical = property.include('top') || property.include('bottom') ||
        property.include('height');

      if (context === document.viewport) {
        if (isHorizontal) {
          whole = document.viewport.getWidth();
        } else if (isVertical) {
          whole = document.viewport.getHeight();
        }
      } else {
        if (isHorizontal) {
          whole = $(context).measure('width');
        } else if (isVertical) {
          whole = $(context).measure('height');
        }
      }

      return (whole === null) ? 0 : whole * decimal;
    }

    return 0;
  }

  function toCSSPixels(number) {
    if (Object.isString(number) && number.endsWith('px')) {
      return number;
    }
    return number + 'px';
  }

  function isDisplayed(element) {
    var originalElement = element;
    while (element && element.parentNode) {
      var display = element.getStyle('display');
      if (display === 'none') {
        return false;
      }
      element = $(element.parentNode);
    }
    return true;
  }

  var hasLayout = Prototype.K;
  if ('currentStyle' in document.documentElement) {
    hasLayout = function (element) {
      if (!element.currentStyle.hasLayout) {
        element.style.zoom = 1;
      }
      return element;
    };
  }

  function cssNameFor(key) {
    if (key.include('border')) key = key + '-width';
    return key.camelize();
  }

  Element.Layout = Class.create(Hash, {
    initialize: function ($super, element, preCompute) {
      $super();
      this.element = $(element);

      Element.Layout.PROPERTIES.each(function (property) {
        this._set(property, null);
      }, this);

      if (preCompute) {
        this._preComputing = true;
        this._begin();
        Element.Layout.PROPERTIES.each(this._compute, this);
        this._end();
        this._preComputing = false;
      }
    },

    _set: function (property, value) {
      return Hash.prototype.set.call(this, property, value);
    },

    set: function (property, value) {
      throw "Properties of Element.Layout are read-only.";
    },

    get: function ($super, property) {
      var value = $super(property);
      return value === null ? this._compute(property) : value;
    },

    _begin: function () {
      if (this._prepared) return;

      var element = this.element;
      if (isDisplayed(element)) {
        this._prepared = true;
        return;
      }

      var originalStyles = {
        position: element.style.position || '',
        width: element.style.width || '',
        visibility: element.style.visibility || '',
        display: element.style.display || ''
      };

      element.store('prototype_original_styles', originalStyles);

      var position = element.getStyle('position'),
        width = element.getStyle('width');

      if (width === "0px" || width === null) {
        element.style.display = 'block';
        width = element.getStyle('width');
      }

      var context = (position === 'fixed') ? document.viewport :
        element.parentNode;

      element.setStyle({
        position: 'absolute',
        visibility: 'hidden',
        display: 'block'
      });

      var positionedWidth = element.getStyle('width');

      var newWidth;
      if (width && (positionedWidth === width)) {
        newWidth = getPixelValue(element, 'width', context);
      } else if (position === 'absolute' || position === 'fixed') {
        newWidth = getPixelValue(element, 'width', context);
      } else {
        var parent = element.parentNode, pLayout = $(parent).getLayout();

        newWidth = pLayout.get('width') -
          this.get('margin-left') -
          this.get('border-left') -
          this.get('padding-left') -
          this.get('padding-right') -
          this.get('border-right') -
          this.get('margin-right');
      }

      element.setStyle({ width: newWidth + 'px' });

      this._prepared = true;
    },

    _end: function () {
      var element = this.element;
      var originalStyles = element.retrieve('prototype_original_styles');
      element.store('prototype_original_styles', null);
      element.setStyle(originalStyles);
      this._prepared = false;
    },

    _compute: function (property) {
      var COMPUTATIONS = Element.Layout.COMPUTATIONS;
      if (!(property in COMPUTATIONS)) {
        throw "Property not found.";
      }

      return this._set(property, COMPUTATIONS[property].call(this, this.element));
    },

    toObject: function () {
      var args = $A(arguments);
      var keys = (args.length === 0) ? Element.Layout.PROPERTIES :
        args.join(' ').split(' ');
      var obj = {};
      keys.each(function (key) {
        if (!Element.Layout.PROPERTIES.include(key)) return;
        var value = this.get(key);
        if (value != null) obj[key] = value;
      }, this);
      return obj;
    },

    toHash: function () {
      var obj = this.toObject.apply(this, arguments);
      return new Hash(obj);
    },

    toCSS: function () {
      var args = $A(arguments);
      var keys = (args.length === 0) ? Element.Layout.PROPERTIES :
        args.join(' ').split(' ');
      var css = {};

      keys.each(function (key) {
        if (!Element.Layout.PROPERTIES.include(key)) return;
        if (Element.Layout.COMPOSITE_PROPERTIES.include(key)) return;

        var value = this.get(key);
        if (value != null) css[cssNameFor(key)] = value + 'px';
      }, this);
      return css;
    },

    inspect: function () {
      return "#<Element.Layout>";
    }
  });

  Object.extend(Element.Layout, {
    PROPERTIES: $w('height width top left right bottom border-left border-right border-top border-bottom padding-left padding-right padding-top padding-bottom margin-top margin-bottom margin-left margin-right padding-box-width padding-box-height border-box-width border-box-height margin-box-width margin-box-height'),

    COMPOSITE_PROPERTIES: $w('padding-box-width padding-box-height margin-box-width margin-box-height border-box-width border-box-height'),

    COMPUTATIONS: {
      'height': function (element) {
        if (!this._preComputing) this._begin();

        var bHeight = this.get('border-box-height');
        if (bHeight <= 0) {
          if (!this._preComputing) this._end();
          return 0;
        }

        var bTop = this.get('border-top'),
          bBottom = this.get('border-bottom');

        var pTop = this.get('padding-top'),
          pBottom = this.get('padding-bottom');

        if (!this._preComputing) this._end();

        return bHeight - bTop - bBottom - pTop - pBottom;
      },

      'width': function (element) {
        if (!this._preComputing) this._begin();

        var bWidth = this.get('border-box-width');
        if (bWidth <= 0) {
          if (!this._preComputing) this._end();
          return 0;
        }

        var bLeft = this.get('border-left'),
          bRight = this.get('border-right');

        var pLeft = this.get('padding-left'),
          pRight = this.get('padding-right');

        if (!this._preComputing) this._end();

        return bWidth - bLeft - bRight - pLeft - pRight;
      },

      'padding-box-height': function (element) {
        var height = this.get('height'),
          pTop = this.get('padding-top'),
          pBottom = this.get('padding-bottom');

        return height + pTop + pBottom;
      },

      'padding-box-width': function (element) {
        var width = this.get('width'),
          pLeft = this.get('padding-left'),
          pRight = this.get('padding-right');

        return width + pLeft + pRight;
      },

      'border-box-height': function (element) {
        if (!this._preComputing) this._begin();
        var height = element.offsetHeight;
        if (!this._preComputing) this._end();
        return height;
      },

      'border-box-width': function (element) {
        if (!this._preComputing) this._begin();
        var width = element.offsetWidth;
        if (!this._preComputing) this._end();
        return width;
      },

      'margin-box-height': function (element) {
        var bHeight = this.get('border-box-height'),
          mTop = this.get('margin-top'),
          mBottom = this.get('margin-bottom');

        if (bHeight <= 0) return 0;

        return bHeight + mTop + mBottom;
      },

      'margin-box-width': function (element) {
        var bWidth = this.get('border-box-width'),
          mLeft = this.get('margin-left'),
          mRight = this.get('margin-right');

        if (bWidth <= 0) return 0;

        return bWidth + mLeft + mRight;
      },

      'top': function (element) {
        var offset = element.positionedOffset();
        return offset.top;
      },

      'bottom': function (element) {
        var offset = element.positionedOffset(),
          parent = element.getOffsetParent(),
          pHeight = parent.measure('height');

        var mHeight = this.get('border-box-height');

        return pHeight - mHeight - offset.top;
      },

      'left': function (element) {
        var offset = element.positionedOffset();
        return offset.left;
      },

      'right': function (element) {
        var offset = element.positionedOffset(),
          parent = element.getOffsetParent(),
          pWidth = parent.measure('width');

        var mWidth = this.get('border-box-width');

        return pWidth - mWidth - offset.left;
      },

      'padding-top': function (element) {
        return getPixelValue(element, 'paddingTop');
      },

      'padding-bottom': function (element) {
        return getPixelValue(element, 'paddingBottom');
      },

      'padding-left': function (element) {
        return getPixelValue(element, 'paddingLeft');
      },

      'padding-right': function (element) {
        return getPixelValue(element, 'paddingRight');
      },

      'border-top': function (element) {
        return getPixelValue(element, 'borderTopWidth');
      },

      'border-bottom': function (element) {
        return getPixelValue(element, 'borderBottomWidth');
      },

      'border-left': function (element) {
        return getPixelValue(element, 'borderLeftWidth');
      },

      'border-right': function (element) {
        return getPixelValue(element, 'borderRightWidth');
      },

      'margin-top': function (element) {
        return getPixelValue(element, 'marginTop');
      },

      'margin-bottom': function (element) {
        return getPixelValue(element, 'marginBottom');
      },

      'margin-left': function (element) {
        return getPixelValue(element, 'marginLeft');
      },

      'margin-right': function (element) {
        return getPixelValue(element, 'marginRight');
      }
    }
  });

  if ('getBoundingClientRect' in document.documentElement) {
    Object.extend(Element.Layout.COMPUTATIONS, {
      'right': function (element) {
        var parent = hasLayout(element.getOffsetParent());
        var rect = element.getBoundingClientRect(),
          pRect = parent.getBoundingClientRect();

        return (pRect.right - rect.right).round();
      },

      'bottom': function (element) {
        var parent = hasLayout(element.getOffsetParent());
        var rect = element.getBoundingClientRect(),
          pRect = parent.getBoundingClientRect();

        return (pRect.bottom - rect.bottom).round();
      }
    });
  }

  Element.Offset = Class.create({
    initialize: function (left, top) {
      this.left = left.round();
      this.top = top.round();

      this[0] = this.left;
      this[1] = this.top;
    },

    relativeTo: function (offset) {
      return new Element.Offset(
        this.left - offset.left,
        this.top - offset.top
      );
    },

    inspect: function () {
      return "#<Element.Offset left: #{left} top: #{top}>".interpolate(this);
    },

    toString: function () {
      return "[#{left}, #{top}]".interpolate(this);
    },

    toArray: function () {
      return [this.left, this.top];
    }
  });

  function getLayout(element, preCompute) {
    return new Element.Layout(element, preCompute);
  }

  function measure(element, property) {
    return $(element).getLayout().get(property);
  }

  function getDimensions(element) {
    element = $(element);
    var display = Element.getStyle(element, 'display');

    if (display && display !== 'none') {
      return { width: element.offsetWidth, height: element.offsetHeight };
    }

    var style = element.style;
    var originalStyles = {
      visibility: style.visibility,
      position: style.position,
      display: style.display
    };

    var newStyles = {
      visibility: 'hidden',
      display: 'block'
    };

    if (originalStyles.position !== 'fixed')
      newStyles.position = 'absolute';

    Element.setStyle(element, newStyles);

    var dimensions = {
      width: element.offsetWidth,
      height: element.offsetHeight
    };

    Element.setStyle(element, originalStyles);

    return dimensions;
  }

  function getOffsetParent(element) {
    element = $(element);

    if (isDocument(element) || isDetached(element) || isBody(element) || isHtml(element))
      return $(document.body);

    var isInline = (Element.getStyle(element, 'display') === 'inline');
    if (!isInline && element.offsetParent) return $(element.offsetParent);

    while ((element = element.parentNode) && element !== document.body) {
      if (Element.getStyle(element, 'position') !== 'static') {
        return isHtml(element) ? $(document.body) : $(element);
      }
    }

    return $(document.body);
  }


  function cumulativeOffset(element) {
    element = $(element);
    var valueT = 0, valueL = 0;
    if (element.parentNode) {
      do {
        valueT += element.offsetTop || 0;
        valueL += element.offsetLeft || 0;
        element = element.offsetParent;
      } while (element);
    }
    return new Element.Offset(valueL, valueT);
  }

  function positionedOffset(element) {
    element = $(element);

    var layout = element.getLayout();

    var valueT = 0, valueL = 0;
    do {
      valueT += element.offsetTop || 0;
      valueL += element.offsetLeft || 0;
      element = element.offsetParent;
      if (element) {
        if (isBody(element)) break;
        var p = Element.getStyle(element, 'position');
        if (p !== 'static') break;
      }
    } while (element);

    valueL -= layout.get('margin-top');
    valueT -= layout.get('margin-left');

    return new Element.Offset(valueL, valueT);
  }

  function cumulativeScrollOffset(element) {
    var valueT = 0, valueL = 0;
    do {
      valueT += element.scrollTop || 0;
      valueL += element.scrollLeft || 0;
      element = element.parentNode;
    } while (element);
    return new Element.Offset(valueL, valueT);
  }

  function viewportOffset(forElement) {
    element = $(element);
    var valueT = 0, valueL = 0, docBody = document.body;

    var element = forElement;
    do {
      valueT += element.offsetTop || 0;
      valueL += element.offsetLeft || 0;
      if (element.offsetParent == docBody &&
        Element.getStyle(element, 'position') == 'absolute') break;
    } while (element = element.offsetParent);

    element = forElement;
    do {
      if (element != docBody) {
        valueT -= element.scrollTop || 0;
        valueL -= element.scrollLeft || 0;
      }
    } while (element = element.parentNode);
    return new Element.Offset(valueL, valueT);
  }

  function absolutize(element) {
    element = $(element);

    if (Element.getStyle(element, 'position') === 'absolute') {
      return element;
    }

    var offsetParent = getOffsetParent(element);
    var eOffset = element.viewportOffset(),
      pOffset = offsetParent.viewportOffset();

    var offset = eOffset.relativeTo(pOffset);
    var layout = element.getLayout();

    element.store('prototype_absolutize_original_styles', {
      left: element.getStyle('left'),
      top: element.getStyle('top'),
      width: element.getStyle('width'),
      height: element.getStyle('height')
    });

    element.setStyle({
      position: 'absolute',
      top: offset.top + 'px',
      left: offset.left + 'px',
      width: layout.get('width') + 'px',
      height: layout.get('height') + 'px'
    });

    return element;
  }

  function relativize(element) {
    element = $(element);
    if (Element.getStyle(element, 'position') === 'relative') {
      return element;
    }

    var originalStyles =
      element.retrieve('prototype_absolutize_original_styles');

    if (originalStyles) element.setStyle(originalStyles);
    return element;
  }

  if (Prototype.Browser.IE) {
    getOffsetParent = getOffsetParent.wrap(
      function (proceed, element) {
        element = $(element);

        if (isDocument(element) || isDetached(element) || isBody(element) || isHtml(element))
          return $(document.body);

        var position = element.getStyle('position');
        if (position !== 'static') return proceed(element);

        element.setStyle({ position: 'relative' });
        var value = proceed(element);
        element.setStyle({ position: position });
        return value;
      }
    );

    positionedOffset = positionedOffset.wrap(function (proceed, element) {
      element = $(element);
      if (!element.parentNode) return new Element.Offset(0, 0);
      var position = element.getStyle('position');
      if (position !== 'static') return proceed(element);

      var offsetParent = element.getOffsetParent();
      if (offsetParent && offsetParent.getStyle('position') === 'fixed')
        hasLayout(offsetParent);

      element.setStyle({ position: 'relative' });
      var value = proceed(element);
      element.setStyle({ position: position });
      return value;
    });
  } else if (Prototype.Browser.Webkit) {
    cumulativeOffset = function (element) {
      element = $(element);
      var valueT = 0, valueL = 0;
      do {
        valueT += element.offsetTop || 0;
        valueL += element.offsetLeft || 0;
        if (element.offsetParent == document.body)
          if (Element.getStyle(element, 'position') == 'absolute') break;

        element = element.offsetParent;
      } while (element);

      return new Element.Offset(valueL, valueT);
    };
  }


  Element.addMethods({
    getLayout: getLayout,
    measure: measure,
    getDimensions: getDimensions,
    getOffsetParent: getOffsetParent,
    cumulativeOffset: cumulativeOffset,
    positionedOffset: positionedOffset,
    cumulativeScrollOffset: cumulativeScrollOffset,
    viewportOffset: viewportOffset,
    absolutize: absolutize,
    relativize: relativize
  });

  function isBody(element) {
    return element.nodeName.toUpperCase() === 'BODY';
  }

  function isHtml(element) {
    return element.nodeName.toUpperCase() === 'HTML';
  }

  function isDocument(element) {
    return element.nodeType === Node.DOCUMENT_NODE;
  }

  function isDetached(element) {
    return element !== document.body &&
      !Element.descendantOf(element, document.body);
  }

  if ('getBoundingClientRect' in document.documentElement) {
    Element.addMethods({
      viewportOffset: function (element) {
        element = $(element);
        if (isDetached(element)) return new Element.Offset(0, 0);

        var rect = element.getBoundingClientRect(),
          docEl = document.documentElement;
        return new Element.Offset(rect.left - docEl.clientLeft,
          rect.top - docEl.clientTop);
      }
    });
  }
})();
window.$$ = function () {
  var expression = $A(arguments).join(', ');
  return Prototype.Selector.select(expression, document);
};

Prototype.Selector = (function () {

  function select() {
    throw new Error('Method "Prototype.Selector.select" must be defined.');
  }

  function match() {
    throw new Error('Method "Prototype.Selector.match" must be defined.');
  }

  function find(elements, expression, index) {
    index = index || 0;
    var match = Prototype.Selector.match, length = elements.length, matchIndex = 0, i;

    for (i = 0; i < length; i++) {
      if (match(elements[i], expression) && index == matchIndex++) {
        return Element.extend(elements[i]);
      }
    }
  }

  function extendElements(elements) {
    for (var i = 0, length = elements.length; i < length; i++) {
      Element.extend(elements[i]);
    }
    return elements;
  }


  var K = Prototype.K;

  return {
    select: select,
    match: match,
    find: find,
    extendElements: (Element.extend === K) ? K : extendElements,
    extendElement: Element.extend
  };
})();
Prototype._original_property = window.Sizzle;
/*!
 * Sizzle CSS Selector Engine - v1.0
 *  Copyright 2009, The Dojo Foundation
 *  Released under the MIT, BSD, and GPL Licenses.
 *  More information: http://sizzlejs.com/
 */
(function () {

  var chunker = /((?:\((?:\([^()]+\)|[^()]+)+\)|\[(?:\[[^[\]]*\]|['"][^'"]*['"]|[^[\]'"]+)+\]|\\.|[^ >+~,(\[\\]+)+|[>+~])(\s*,\s*)?((?:.|\r|\n)*)/g,
    done = 0,
    toString = Object.prototype.toString,
    hasDuplicate = false,
    baseHasDuplicate = true;

  [0, 0].sort(function () {
    baseHasDuplicate = false;
    return 0;
  });

  var Sizzle = function (selector, context, results, seed) {
    results = results || [];
    var origContext = context = context || document;

    if (context.nodeType !== 1 && context.nodeType !== 9) {
      return [];
    }

    if (!selector || typeof selector !== "string") {
      return results;
    }

    var parts = [], m, set, checkSet, check, mode, extra, prune = true, contextXML = isXML(context),
      soFar = selector;

    while ((chunker.exec(""), m = chunker.exec(soFar)) !== null) {
      soFar = m[3];

      parts.push(m[1]);

      if (m[2]) {
        extra = m[3];
        break;
      }
    }

    if (parts.length > 1 && origPOS.exec(selector)) {
      if (parts.length === 2 && Expr.relative[parts[0]]) {
        set = posProcess(parts[0] + parts[1], context);
      } else {
        set = Expr.relative[parts[0]] ?
          [context] :
          Sizzle(parts.shift(), context);

        while (parts.length) {
          selector = parts.shift();

          if (Expr.relative[selector])
            selector += parts.shift();

          set = posProcess(selector, set);
        }
      }
    } else {
      if (!seed && parts.length > 1 && context.nodeType === 9 && !contextXML &&
        Expr.match.ID.test(parts[0]) && !Expr.match.ID.test(parts[parts.length - 1])) {
        var ret = Sizzle.find(parts.shift(), context, contextXML);
        context = ret.expr ? Sizzle.filter(ret.expr, ret.set)[0] : ret.set[0];
      }

      if (context) {
        var ret = seed ?
          { expr: parts.pop(), set: makeArray(seed) } :
          Sizzle.find(parts.pop(), parts.length === 1 && (parts[0] === "~" || parts[0] === "+") && context.parentNode ? context.parentNode : context, contextXML);
        set = ret.expr ? Sizzle.filter(ret.expr, ret.set) : ret.set;

        if (parts.length > 0) {
          checkSet = makeArray(set);
        } else {
          prune = false;
        }

        while (parts.length) {
          var cur = parts.pop(), pop = cur;

          if (!Expr.relative[cur]) {
            cur = "";
          } else {
            pop = parts.pop();
          }

          if (pop == null) {
            pop = context;
          }

          Expr.relative[cur](checkSet, pop, contextXML);
        }
      } else {
        checkSet = parts = [];
      }
    }

    if (!checkSet) {
      checkSet = set;
    }

    if (!checkSet) {
      throw "Syntax error, unrecognized expression: " + (cur || selector);
    }

    if (toString.call(checkSet) === "[object Array]") {
      if (!prune) {
        results.push.apply(results, checkSet);
      } else if (context && context.nodeType === 1) {
        for (var i = 0; checkSet[i] != null; i++) {
          if (checkSet[i] && (checkSet[i] === true || checkSet[i].nodeType === 1 && contains(context, checkSet[i]))) {
            results.push(set[i]);
          }
        }
      } else {
        for (var i = 0; checkSet[i] != null; i++) {
          if (checkSet[i] && checkSet[i].nodeType === 1) {
            results.push(set[i]);
          }
        }
      }
    } else {
      makeArray(checkSet, results);
    }

    if (extra) {
      Sizzle(extra, origContext, results, seed);
      Sizzle.uniqueSort(results);
    }

    return results;
  };

  Sizzle.uniqueSort = function (results) {
    if (sortOrder) {
      hasDuplicate = baseHasDuplicate;
      results.sort(sortOrder);

      if (hasDuplicate) {
        for (var i = 1; i < results.length; i++) {
          if (results[i] === results[i - 1]) {
            results.splice(i--, 1);
          }
        }
      }
    }

    return results;
  };

  Sizzle.matches = function (expr, set) {
    return Sizzle(expr, null, null, set);
  };

  Sizzle.find = function (expr, context, isXML) {
    var set, match;

    if (!expr) {
      return [];
    }

    for (var i = 0, l = Expr.order.length; i < l; i++) {
      var type = Expr.order[i], match;

      if ((match = Expr.leftMatch[type].exec(expr))) {
        var left = match[1];
        match.splice(1, 1);

        if (left.substr(left.length - 1) !== "\\") {
          match[1] = (match[1] || "").replace(/\\/g, "");
          set = Expr.find[type](match, context, isXML);
          if (set != null) {
            expr = expr.replace(Expr.match[type], "");
            break;
          }
        }
      }
    }

    if (!set) {
      set = context.getElementsByTagName("*");
    }

    return { set: set, expr: expr };
  };

  Sizzle.filter = function (expr, set, inplace, not) {
    var old = expr, result = [], curLoop = set, match, anyFound,
      isXMLFilter = set && set[0] && isXML(set[0]);

    while (expr && set.length) {
      for (var type in Expr.filter) {
        if ((match = Expr.match[type].exec(expr)) != null) {
          var filter = Expr.filter[type], found, item;
          anyFound = false;

          if (curLoop == result) {
            result = [];
          }

          if (Expr.preFilter[type]) {
            match = Expr.preFilter[type](match, curLoop, inplace, result, not, isXMLFilter);

            if (!match) {
              anyFound = found = true;
            } else if (match === true) {
              continue;
            }
          }

          if (match) {
            for (var i = 0; (item = curLoop[i]) != null; i++) {
              if (item) {
                found = filter(item, match, i, curLoop);
                var pass = not ^ !!found;

                if (inplace && found != null) {
                  if (pass) {
                    anyFound = true;
                  } else {
                    curLoop[i] = false;
                  }
                } else if (pass) {
                  result.push(item);
                  anyFound = true;
                }
              }
            }
          }

          if (found !== undefined) {
            if (!inplace) {
              curLoop = result;
            }

            expr = expr.replace(Expr.match[type], "");

            if (!anyFound) {
              return [];
            }

            break;
          }
        }
      }

      if (expr == old) {
        if (anyFound == null) {
          throw "Syntax error, unrecognized expression: " + expr;
        } else {
          break;
        }
      }

      old = expr;
    }

    return curLoop;
  };

  var Expr = Sizzle.selectors = {
    order: ["ID", "NAME", "TAG"],
    match: {
      ID: /#((?:[\w\u00c0-\uFFFF-]|\\.)+)/,
      CLASS: /\.((?:[\w\u00c0-\uFFFF-]|\\.)+)/,
      NAME: /\[name=['"]*((?:[\w\u00c0-\uFFFF-]|\\.)+)['"]*\]/,
      ATTR: /\[\s*((?:[\w\u00c0-\uFFFF-]|\\.)+)\s*(?:(\S?=)\s*(['"]*)(.*?)\3|)\s*\]/,
      TAG: /^((?:[\w\u00c0-\uFFFF\*-]|\\.)+)/,
      CHILD: /:(only|nth|last|first)-child(?:\((even|odd|[\dn+-]*)\))?/,
      POS: /:(nth|eq|gt|lt|first|last|even|odd)(?:\((\d*)\))?(?=[^-]|$)/,
      PSEUDO: /:((?:[\w\u00c0-\uFFFF-]|\\.)+)(?:\((['"]*)((?:\([^\)]+\)|[^\2\(\)]*)+)\2\))?/
    },
    leftMatch: {},
    attrMap: {
      "class": "className",
      "for": "htmlFor"
    },
    attrHandle: {
      href: function (elem) {
        return elem.getAttribute("href");
      }
    },
    relative: {
      "+": function (checkSet, part, isXML) {
        var isPartStr = typeof part === "string",
          isTag = isPartStr && !/\W/.test(part),
          isPartStrNotTag = isPartStr && !isTag;

        if (isTag && !isXML) {
          part = part.toUpperCase();
        }

        for (var i = 0, l = checkSet.length, elem; i < l; i++) {
          if ((elem = checkSet[i])) {
            while ((elem = elem.previousSibling) && elem.nodeType !== 1) { }

            checkSet[i] = isPartStrNotTag || elem && elem.nodeName === part ?
              elem || false :
              elem === part;
          }
        }

        if (isPartStrNotTag) {
          Sizzle.filter(part, checkSet, true);
        }
      },
      ">": function (checkSet, part, isXML) {
        var isPartStr = typeof part === "string";

        if (isPartStr && !/\W/.test(part)) {
          part = isXML ? part : part.toUpperCase();

          for (var i = 0, l = checkSet.length; i < l; i++) {
            var elem = checkSet[i];
            if (elem) {
              var parent = elem.parentNode;
              checkSet[i] = parent.nodeName === part ? parent : false;
            }
          }
        } else {
          for (var i = 0, l = checkSet.length; i < l; i++) {
            var elem = checkSet[i];
            if (elem) {
              checkSet[i] = isPartStr ?
                elem.parentNode :
                elem.parentNode === part;
            }
          }

          if (isPartStr) {
            Sizzle.filter(part, checkSet, true);
          }
        }
      },
      "": function (checkSet, part, isXML) {
        var doneName = done++, checkFn = dirCheck;

        if (!/\W/.test(part)) {
          var nodeCheck = part = isXML ? part : part.toUpperCase();
          checkFn = dirNodeCheck;
        }

        checkFn("parentNode", part, doneName, checkSet, nodeCheck, isXML);
      },
      "~": function (checkSet, part, isXML) {
        var doneName = done++, checkFn = dirCheck;

        if (typeof part === "string" && !/\W/.test(part)) {
          var nodeCheck = part = isXML ? part : part.toUpperCase();
          checkFn = dirNodeCheck;
        }

        checkFn("previousSibling", part, doneName, checkSet, nodeCheck, isXML);
      }
    },
    find: {
      ID: function (match, context, isXML) {
        if (typeof context.getElementById !== "undefined" && !isXML) {
          var m = context.getElementById(match[1]);
          return m ? [m] : [];
        }
      },
      NAME: function (match, context, isXML) {
        if (typeof context.getElementsByName !== "undefined") {
          var ret = [], results = context.getElementsByName(match[1]);

          for (var i = 0, l = results.length; i < l; i++) {
            if (results[i].getAttribute("name") === match[1]) {
              ret.push(results[i]);
            }
          }

          return ret.length === 0 ? null : ret;
        }
      },
      TAG: function (match, context) {
        return context.getElementsByTagName(match[1]);
      }
    },
    preFilter: {
      CLASS: function (match, curLoop, inplace, result, not, isXML) {
        match = " " + match[1].replace(/\\/g, "") + " ";

        if (isXML) {
          return match;
        }

        for (var i = 0, elem; (elem = curLoop[i]) != null; i++) {
          if (elem) {
            if (not ^ (elem.className && (" " + elem.className + " ").indexOf(match) >= 0)) {
              if (!inplace)
                result.push(elem);
            } else if (inplace) {
              curLoop[i] = false;
            }
          }
        }

        return false;
      },
      ID: function (match) {
        return match[1].replace(/\\/g, "");
      },
      TAG: function (match, curLoop) {
        for (var i = 0; curLoop[i] === false; i++) { }
        return curLoop[i] && isXML(curLoop[i]) ? match[1] : match[1].toUpperCase();
      },
      CHILD: function (match) {
        if (match[1] == "nth") {
          var test = /(-?)(\d*)n((?:\+|-)?\d*)/.exec(
            match[2] == "even" && "2n" || match[2] == "odd" && "2n+1" ||
            !/\D/.test(match[2]) && "0n+" + match[2] || match[2]);

          match[2] = (test[1] + (test[2] || 1)) - 0;
          match[3] = test[3] - 0;
        }

        match[0] = done++;

        return match;
      },
      ATTR: function (match, curLoop, inplace, result, not, isXML) {
        var name = match[1].replace(/\\/g, "");

        if (!isXML && Expr.attrMap[name]) {
          match[1] = Expr.attrMap[name];
        }

        if (match[2] === "~=") {
          match[4] = " " + match[4] + " ";
        }

        return match;
      },
      PSEUDO: function (match, curLoop, inplace, result, not) {
        if (match[1] === "not") {
          if ((chunker.exec(match[3]) || "").length > 1 || /^\w/.test(match[3])) {
            match[3] = Sizzle(match[3], null, null, curLoop);
          } else {
            var ret = Sizzle.filter(match[3], curLoop, inplace, true ^ not);
            if (!inplace) {
              result.push.apply(result, ret);
            }
            return false;
          }
        } else if (Expr.match.POS.test(match[0]) || Expr.match.CHILD.test(match[0])) {
          return true;
        }

        return match;
      },
      POS: function (match) {
        match.unshift(true);
        return match;
      }
    },
    filters: {
      enabled: function (elem) {
        return elem.disabled === false && elem.type !== "hidden";
      },
      disabled: function (elem) {
        return elem.disabled === true;
      },
      checked: function (elem) {
        return elem.checked === true;
      },
      selected: function (elem) {
        elem.parentNode.selectedIndex;
        return elem.selected === true;
      },
      parent: function (elem) {
        return !!elem.firstChild;
      },
      empty: function (elem) {
        return !elem.firstChild;
      },
      has: function (elem, i, match) {
        return !!Sizzle(match[3], elem).length;
      },
      header: function (elem) {
        return /h\d/i.test(elem.nodeName);
      },
      text: function (elem) {
        return "text" === elem.type;
      },
      radio: function (elem) {
        return "radio" === elem.type;
      },
      checkbox: function (elem) {
        return "checkbox" === elem.type;
      },
      file: function (elem) {
        return "file" === elem.type;
      },
      password: function (elem) {
        return "password" === elem.type;
      },
      submit: function (elem) {
        return "submit" === elem.type;
      },
      image: function (elem) {
        return "image" === elem.type;
      },
      reset: function (elem) {
        return "reset" === elem.type;
      },
      button: function (elem) {
        return "button" === elem.type || elem.nodeName.toUpperCase() === "BUTTON";
      },
      input: function (elem) {
        return /input|select|textarea|button/i.test(elem.nodeName);
      }
    },
    setFilters: {
      first: function (elem, i) {
        return i === 0;
      },
      last: function (elem, i, match, array) {
        return i === array.length - 1;
      },
      even: function (elem, i) {
        return i % 2 === 0;
      },
      odd: function (elem, i) {
        return i % 2 === 1;
      },
      lt: function (elem, i, match) {
        return i < match[3] - 0;
      },
      gt: function (elem, i, match) {
        return i > match[3] - 0;
      },
      nth: function (elem, i, match) {
        return match[3] - 0 == i;
      },
      eq: function (elem, i, match) {
        return match[3] - 0 == i;
      }
    },
    filter: {
      PSEUDO: function (elem, match, i, array) {
        var name = match[1], filter = Expr.filters[name];

        if (filter) {
          return filter(elem, i, match, array);
        } else if (name === "contains") {
          return (elem.textContent || elem.innerText || "").indexOf(match[3]) >= 0;
        } else if (name === "not") {
          var not = match[3];

          for (var i = 0, l = not.length; i < l; i++) {
            if (not[i] === elem) {
              return false;
            }
          }

          return true;
        }
      },
      CHILD: function (elem, match) {
        var type = match[1], node = elem;
        switch (type) {
          case 'only':
          case 'first':
            while ((node = node.previousSibling)) {
              if (node.nodeType === 1) return false;
            }
            if (type == 'first') return true;
            node = elem;
          case 'last':
            while ((node = node.nextSibling)) {
              if (node.nodeType === 1) return false;
            }
            return true;
          case 'nth':
            var first = match[2], last = match[3];

            if (first == 1 && last == 0) {
              return true;
            }

            var doneName = match[0],
              parent = elem.parentNode;

            if (parent && (parent.sizcache !== doneName || !elem.nodeIndex)) {
              var count = 0;
              for (node = parent.firstChild; node; node = node.nextSibling) {
                if (node.nodeType === 1) {
                  node.nodeIndex = ++count;
                }
              }
              parent.sizcache = doneName;
            }

            var diff = elem.nodeIndex - last;
            if (first == 0) {
              return diff == 0;
            } else {
              return (diff % first == 0 && diff / first >= 0);
            }
        }
      },
      ID: function (elem, match) {
        return elem.nodeType === 1 && elem.getAttribute("id") === match;
      },
      TAG: function (elem, match) {
        return (match === "*" && elem.nodeType === 1) || elem.nodeName === match;
      },
      CLASS: function (elem, match) {
        return (" " + (elem.className || elem.getAttribute("class")) + " ")
          .indexOf(match) > -1;
      },
      ATTR: function (elem, match) {
        var name = match[1],
          result = Expr.attrHandle[name] ?
            Expr.attrHandle[name](elem) :
            elem[name] != null ?
              elem[name] :
              elem.getAttribute(name),
          value = result + "",
          type = match[2],
          check = match[4];

        return result == null ?
          type === "!=" :
          type === "=" ?
            value === check :
            type === "*=" ?
              value.indexOf(check) >= 0 :
              type === "~=" ?
                (" " + value + " ").indexOf(check) >= 0 :
                !check ?
                  value && result !== false :
                  type === "!=" ?
                    value != check :
                    type === "^=" ?
                      value.indexOf(check) === 0 :
                      type === "$=" ?
                        value.substr(value.length - check.length) === check :
                        type === "|=" ?
                          value === check || value.substr(0, check.length + 1) === check + "-" :
                          false;
      },
      POS: function (elem, match, i, array) {
        var name = match[2], filter = Expr.setFilters[name];

        if (filter) {
          return filter(elem, i, match, array);
        }
      }
    }
  };

  var origPOS = Expr.match.POS;

  for (var type in Expr.match) {
    Expr.match[type] = new RegExp(Expr.match[type].source + /(?![^\[]*\])(?![^\(]*\))/.source);
    Expr.leftMatch[type] = new RegExp(/(^(?:.|\r|\n)*?)/.source + Expr.match[type].source);
  }

  var makeArray = function (array, results) {
    array = Array.prototype.slice.call(array, 0);

    if (results) {
      results.push.apply(results, array);
      return results;
    }

    return array;
  };

  try {
    Array.prototype.slice.call(document.documentElement.childNodes, 0);

  } catch (e) {
    makeArray = function (array, results) {
      var ret = results || [];

      if (toString.call(array) === "[object Array]") {
        Array.prototype.push.apply(ret, array);
      } else {
        if (typeof array.length === "number") {
          for (var i = 0, l = array.length; i < l; i++) {
            ret.push(array[i]);
          }
        } else {
          for (var i = 0; array[i]; i++) {
            ret.push(array[i]);
          }
        }
      }

      return ret;
    };
  }

  var sortOrder;

  if (document.documentElement.compareDocumentPosition) {
    sortOrder = function (a, b) {
      if (!a.compareDocumentPosition || !b.compareDocumentPosition) {
        if (a == b) {
          hasDuplicate = true;
        }
        return 0;
      }

      var ret = a.compareDocumentPosition(b) & 4 ? -1 : a === b ? 0 : 1;
      if (ret === 0) {
        hasDuplicate = true;
      }
      return ret;
    };
  } else if ("sourceIndex" in document.documentElement) {
    sortOrder = function (a, b) {
      if (!a.sourceIndex || !b.sourceIndex) {
        if (a == b) {
          hasDuplicate = true;
        }
        return 0;
      }

      var ret = a.sourceIndex - b.sourceIndex;
      if (ret === 0) {
        hasDuplicate = true;
      }
      return ret;
    };
  } else if (document.createRange) {
    sortOrder = function (a, b) {
      if (!a.ownerDocument || !b.ownerDocument) {
        if (a == b) {
          hasDuplicate = true;
        }
        return 0;
      }

      var aRange = a.ownerDocument.createRange(), bRange = b.ownerDocument.createRange();
      aRange.setStart(a, 0);
      aRange.setEnd(a, 0);
      bRange.setStart(b, 0);
      bRange.setEnd(b, 0);
      var ret = aRange.compareBoundaryPoints(Range.START_TO_END, bRange);
      if (ret === 0) {
        hasDuplicate = true;
      }
      return ret;
    };
  }

  (function () {
    var form = document.createElement("div"),
      id = "script" + (new Date).getTime();
    form.innerHTML = "<a name='" + id + "'/>";

    var root = document.documentElement;
    root.insertBefore(form, root.firstChild);

    if (!!document.getElementById(id)) {
      Expr.find.ID = function (match, context, isXML) {
        if (typeof context.getElementById !== "undefined" && !isXML) {
          var m = context.getElementById(match[1]);
          return m ? m.id === match[1] || typeof m.getAttributeNode !== "undefined" && m.getAttributeNode("id").nodeValue === match[1] ? [m] : undefined : [];
        }
      };

      Expr.filter.ID = function (elem, match) {
        var node = typeof elem.getAttributeNode !== "undefined" && elem.getAttributeNode("id");
        return elem.nodeType === 1 && node && node.nodeValue === match;
      };
    }

    root.removeChild(form);
    root = form = null; // release memory in IE
  })();

  (function () {

    var div = document.createElement("div");
    div.appendChild(document.createComment(""));

    if (div.getElementsByTagName("*").length > 0) {
      Expr.find.TAG = function (match, context) {
        var results = context.getElementsByTagName(match[1]);

        if (match[1] === "*") {
          var tmp = [];

          for (var i = 0; results[i]; i++) {
            if (results[i].nodeType === 1) {
              tmp.push(results[i]);
            }
          }

          results = tmp;
        }

        return results;
      };
    }

    div.innerHTML = "<a href='#'></a>";
    if (div.firstChild && typeof div.firstChild.getAttribute !== "undefined" &&
      div.firstChild.getAttribute("href") !== "#") {
      Expr.attrHandle.href = function (elem) {
        return elem.getAttribute("href", 2);
      };
    }

    div = null; // release memory in IE
  })();

  if (document.querySelectorAll) (function () {
    var oldSizzle = Sizzle, div = document.createElement("div");
    div.innerHTML = "<p class='TEST'></p>";

    if (div.querySelectorAll && div.querySelectorAll(".TEST").length === 0) {
      return;
    }

    Sizzle = function (query, context, extra, seed) {
      context = context || document;

      if (!seed && context.nodeType === 9 && !isXML(context)) {
        try {
          return makeArray(context.querySelectorAll(query), extra);
        } catch (e) { }
      }

      return oldSizzle(query, context, extra, seed);
    };

    for (var prop in oldSizzle) {
      Sizzle[prop] = oldSizzle[prop];
    }

    div = null; // release memory in IE
  })();

  if (document.getElementsByClassName && document.documentElement.getElementsByClassName) (function () {
    var div = document.createElement("div");
    div.innerHTML = "<div class='test e'></div><div class='test'></div>";

    if (div.getElementsByClassName("e").length === 0)
      return;

    div.lastChild.className = "e";

    if (div.getElementsByClassName("e").length === 1)
      return;

    Expr.order.splice(1, 0, "CLASS");
    Expr.find.CLASS = function (match, context, isXML) {
      if (typeof context.getElementsByClassName !== "undefined" && !isXML) {
        return context.getElementsByClassName(match[1]);
      }
    };

    div = null; // release memory in IE
  })();

  function dirNodeCheck(dir, cur, doneName, checkSet, nodeCheck, isXML) {
    var sibDir = dir == "previousSibling" && !isXML;
    for (var i = 0, l = checkSet.length; i < l; i++) {
      var elem = checkSet[i];
      if (elem) {
        if (sibDir && elem.nodeType === 1) {
          elem.sizcache = doneName;
          elem.sizset = i;
        }
        elem = elem[dir];
        var match = false;

        while (elem) {
          if (elem.sizcache === doneName) {
            match = checkSet[elem.sizset];
            break;
          }

          if (elem.nodeType === 1 && !isXML) {
            elem.sizcache = doneName;
            elem.sizset = i;
          }

          if (elem.nodeName === cur) {
            match = elem;
            break;
          }

          elem = elem[dir];
        }

        checkSet[i] = match;
      }
    }
  }

  function dirCheck(dir, cur, doneName, checkSet, nodeCheck, isXML) {
    var sibDir = dir == "previousSibling" && !isXML;
    for (var i = 0, l = checkSet.length; i < l; i++) {
      var elem = checkSet[i];
      if (elem) {
        if (sibDir && elem.nodeType === 1) {
          elem.sizcache = doneName;
          elem.sizset = i;
        }
        elem = elem[dir];
        var match = false;

        while (elem) {
          if (elem.sizcache === doneName) {
            match = checkSet[elem.sizset];
            break;
          }

          if (elem.nodeType === 1) {
            if (!isXML) {
              elem.sizcache = doneName;
              elem.sizset = i;
            }
            if (typeof cur !== "string") {
              if (elem === cur) {
                match = true;
                break;
              }

            } else if (Sizzle.filter(cur, [elem]).length > 0) {
              match = elem;
              break;
            }
          }

          elem = elem[dir];
        }

        checkSet[i] = match;
      }
    }
  }

  var contains = document.compareDocumentPosition ? function (a, b) {
    return a.compareDocumentPosition(b) & 16;
  } : function (a, b) {
    return a !== b && (a.contains ? a.contains(b) : true);
  };

  var isXML = function (elem) {
    return elem.nodeType === 9 && elem.documentElement.nodeName !== "HTML" ||
      !!elem.ownerDocument && elem.ownerDocument.documentElement.nodeName !== "HTML";
  };

  var posProcess = function (selector, context) {
    var tmpSet = [], later = "", match,
      root = context.nodeType ? [context] : context;

    while ((match = Expr.match.PSEUDO.exec(selector))) {
      later += match[0];
      selector = selector.replace(Expr.match.PSEUDO, "");
    }

    selector = Expr.relative[selector] ? selector + "*" : selector;

    for (var i = 0, l = root.length; i < l; i++) {
      Sizzle(selector, root[i], tmpSet);
    }

    return Sizzle.filter(later, tmpSet);
  };


  window.Sizzle = Sizzle;

})();

; (function (engine) {
  var extendElements = Prototype.Selector.extendElements;

  function select(selector, scope) {
    return extendElements(engine(selector, scope || document));
  }

  function match(element, selector) {
    return engine.matches(selector, [element]).length == 1;
  }

  Prototype.Selector.engine = engine;
  Prototype.Selector.select = select;
  Prototype.Selector.match = match;
})(Sizzle);

window.Sizzle = Prototype._original_property;
delete Prototype._original_property;

var Form = {
  reset: function (form) {
    form = $(form);
    form.reset();
    return form;
  },

  serializeElements: function (elements, options) {
    if (typeof options != 'object') options = { hash: !!options };
    else if (Object.isUndefined(options.hash)) options.hash = true;
    var key, value, submitted = false, submit = options.submit, accumulator, initial;

    if (options.hash) {
      initial = {};
      accumulator = function (result, key, value) {
        if (key in result) {
          if (!Object.isArray(result[key])) result[key] = [result[key]];
          result[key].push(value);
        } else result[key] = value;
        return result;
      };
    } else {
      initial = '';
      accumulator = function (result, key, value) {
        return result + (result ? '&' : '') + encodeURIComponent(key) + '=' + encodeURIComponent(value);
      }
    }

    return elements.inject(initial, function (result, element) {
      if (!element.disabled && element.name) {
        key = element.name; value = $(element).getValue();
        if (value != null && element.type != 'file' && (element.type != 'submit' || (!submitted &&
          submit !== false && (!submit || key == submit) && (submitted = true)))) {
          result = accumulator(result, key, value);
        }
      }
      return result;
    });
  }
};

Form.Methods = {
  serialize: function (form, options) {
    return Form.serializeElements(Form.getElements(form), options);
  },

  getElements: function (form) {
    var elements = $(form).getElementsByTagName('*'),
      element,
      arr = [],
      serializers = Form.Element.Serializers;
    for (var i = 0; element = elements[i]; i++) {
      arr.push(element);
    }
    return arr.inject([], function (elements, child) {
      if (serializers[child.tagName.toLowerCase()])
        elements.push(Element.extend(child));
      return elements;
    })
  },

  getInputs: function (form, typeName, name) {
    form = $(form);
    var inputs = form.getElementsByTagName('input');

    if (!typeName && !name) return $A(inputs).map(Element.extend);

    for (var i = 0, matchingInputs = [], length = inputs.length; i < length; i++) {
      var input = inputs[i];
      if ((typeName && input.type != typeName) || (name && input.name != name))
        continue;
      matchingInputs.push(Element.extend(input));
    }

    return matchingInputs;
  },

  disable: function (form) {
    form = $(form);
    Form.getElements(form).invoke('disable');
    return form;
  },

  enable: function (form) {
    form = $(form);
    Form.getElements(form).invoke('enable');
    return form;
  },

  findFirstElement: function (form) {
    var elements = $(form).getElements().findAll(function (element) {
      return 'hidden' != element.type && !element.disabled;
    });
    var firstByIndex = elements.findAll(function (element) {
      return element.hasAttribute('tabIndex') && element.tabIndex >= 0;
    }).sortBy(function (element) { return element.tabIndex }).first();

    return firstByIndex ? firstByIndex : elements.find(function (element) {
      return /^(?:input|select|textarea)$/i.test(element.tagName);
    });
  },

  focusFirstElement: function (form) {
    form = $(form);
    var element = form.findFirstElement();
    if (element) element.activate();
    return form;
  },

  request: function (form, options) {
    form = $(form), options = Object.clone(options || {});

    var params = options.parameters, action = form.readAttribute('action') || '';
    if (action.blank()) action = window.location.href;
    options.parameters = form.serialize(true);

    if (params) {
      if (Object.isString(params)) params = params.toQueryParams();
      Object.extend(options.parameters, params);
    }

    if (form.hasAttribute('method') && !options.method)
      options.method = form.method;

    return new Ajax.Request(action, options);
  }
};

/*--------------------------------------------------------------------------*/


Form.Element = {
  focus: function (element) {
    $(element).focus();
    return element;
  },

  select: function (element) {
    $(element).select();
    return element;
  }
};

Form.Element.Methods = {

  serialize: function (element) {
    element = $(element);
    if (!element.disabled && element.name) {
      var value = element.getValue();
      if (value != undefined) {
        var pair = {};
        pair[element.name] = value;
        return Object.toQueryString(pair);
      }
    }
    return '';
  },

  getValue: function (element) {
    element = $(element);
    var method = element.tagName.toLowerCase();
    return Form.Element.Serializers[method](element);
  },

  setValue: function (element, value) {
    element = $(element);
    var method = element.tagName.toLowerCase();
    Form.Element.Serializers[method](element, value);
    return element;
  },

  clear: function (element) {
    $(element).value = '';
    return element;
  },

  present: function (element) {
    return $(element).value != '';
  },

  activate: function (element) {
    element = $(element);
    try {
      element.focus();
      if (element.select && (element.tagName.toLowerCase() != 'input' ||
        !(/^(?:button|reset|submit)$/i.test(element.type))))
        element.select();
    } catch (e) { }
    return element;
  },

  disable: function (element) {
    element = $(element);
    element.disabled = true;
    return element;
  },

  enable: function (element) {
    element = $(element);
    element.disabled = false;
    return element;
  }
};

/*--------------------------------------------------------------------------*/

var Field = Form.Element;

var $F = Form.Element.Methods.getValue;

/*--------------------------------------------------------------------------*/

Form.Element.Serializers = (function () {
  function input(element, value) {
    switch (element.type.toLowerCase()) {
      case 'checkbox':
      case 'radio':
        return inputSelector(element, value);
      default:
        return valueSelector(element, value);
    }
  }

  function inputSelector(element, value) {
    if (Object.isUndefined(value))
      return element.checked ? element.value : null;
    else element.checked = !!value;
  }

  function valueSelector(element, value) {
    if (Object.isUndefined(value)) return element.value;
    else element.value = value;
  }

  function select(element, value) {
    if (Object.isUndefined(value))
      return (element.type === 'select-one' ? selectOne : selectMany)(element);

    var opt, currentValue, single = !Object.isArray(value);
    for (var i = 0, length = element.length; i < length; i++) {
      opt = element.options[i];
      currentValue = this.optionValue(opt);
      if (single) {
        if (currentValue == value) {
          opt.selected = true;
          return;
        }
      }
      else opt.selected = value.include(currentValue);
    }
  }

  function selectOne(element) {
    var index = element.selectedIndex;
    return index >= 0 ? optionValue(element.options[index]) : null;
  }

  function selectMany(element) {
    var values, length = element.length;
    if (!length) return null;

    for (var i = 0, values = []; i < length; i++) {
      var opt = element.options[i];
      if (opt.selected) values.push(optionValue(opt));
    }
    return values;
  }

  function optionValue(opt) {
    return Element.hasAttribute(opt, 'value') ? opt.value : opt.text;
  }

  return {
    input: input,
    inputSelector: inputSelector,
    textarea: valueSelector,
    select: select,
    selectOne: selectOne,
    selectMany: selectMany,
    optionValue: optionValue,
    button: valueSelector
  };
})();

/*--------------------------------------------------------------------------*/


Abstract.TimedObserver = Class.create(PeriodicalExecuter, {
  initialize: function ($super, element, frequency, callback) {
    $super(callback, frequency);
    this.element = $(element);
    this.lastValue = this.getValue();
  },

  execute: function () {
    var value = this.getValue();
    if (Object.isString(this.lastValue) && Object.isString(value) ?
      this.lastValue != value : String(this.lastValue) != String(value)) {
      this.callback(this.element, value);
      this.lastValue = value;
    }
  }
});

Form.Element.Observer = Class.create(Abstract.TimedObserver, {
  getValue: function () {
    return Form.Element.getValue(this.element);
  }
});

Form.Observer = Class.create(Abstract.TimedObserver, {
  getValue: function () {
    return Form.serialize(this.element);
  }
});

/*--------------------------------------------------------------------------*/

Abstract.EventObserver = Class.create({
  initialize: function (element, callback) {
    this.element = $(element);
    this.callback = callback;

    this.lastValue = this.getValue();
    if (this.element.tagName.toLowerCase() == 'form')
      this.registerFormCallbacks();
    else
      this.registerCallback(this.element);
  },

  onElementEvent: function () {
    var value = this.getValue();
    if (this.lastValue != value) {
      this.callback(this.element, value);
      this.lastValue = value;
    }
  },

  registerFormCallbacks: function () {
    Form.getElements(this.element).each(this.registerCallback, this);
  },

  registerCallback: function (element) {
    if (element.type) {
      switch (element.type.toLowerCase()) {
        case 'checkbox':
        case 'radio':
          Event.observe(element, 'click', this.onElementEvent.bind(this));
          break;
        default:
          Event.observe(element, 'change', this.onElementEvent.bind(this));
          break;
      }
    }
  }
});

Form.Element.EventObserver = Class.create(Abstract.EventObserver, {
  getValue: function () {
    return Form.Element.getValue(this.element);
  }
});

Form.EventObserver = Class.create(Abstract.EventObserver, {
  getValue: function () {
    return Form.serialize(this.element);
  }
});
(function () {

  var Event = {
    KEY_BACKSPACE: 8,
    KEY_TAB: 9,
    KEY_RETURN: 13,
    KEY_ESC: 27,
    KEY_LEFT: 37,
    KEY_UP: 38,
    KEY_RIGHT: 39,
    KEY_DOWN: 40,
    KEY_DELETE: 46,
    KEY_HOME: 36,
    KEY_END: 35,
    KEY_PAGEUP: 33,
    KEY_PAGEDOWN: 34,
    KEY_INSERT: 45,

    cache: {}
  };

  var docEl = document.documentElement;
  var MOUSEENTER_MOUSELEAVE_EVENTS_SUPPORTED = 'onmouseenter' in docEl
    && 'onmouseleave' in docEl;



  var isIELegacyEvent = function (event) { return false; };

  if (window.attachEvent) {
    if (window.addEventListener) {
      isIELegacyEvent = function (event) {
        return !(event instanceof window.Event);
      };
    } else {
      isIELegacyEvent = function (event) { return true; };
    }
  }

  var _isButton;

  function _isButtonForDOMEvents(event, code) {
    return event.which ? (event.which === code + 1) : (event.button === code);
  }

  var legacyButtonMap = { 0: 1, 1: 4, 2: 2 };
  function _isButtonForLegacyEvents(event, code) {
    return event.button === legacyButtonMap[code];
  }

  function _isButtonForWebKit(event, code) {
    switch (code) {
      case 0: return event.which == 1 && !event.metaKey;
      case 1: return event.which == 2 || (event.which == 1 && event.metaKey);
      case 2: return event.which == 3;
      default: return false;
    }
  }

  if (window.attachEvent) {
    if (!window.addEventListener) {
      _isButton = _isButtonForLegacyEvents;
    } else {
      _isButton = function (event, code) {
        return isIELegacyEvent(event) ? _isButtonForLegacyEvents(event, code) :
          _isButtonForDOMEvents(event, code);
      }
    }
  } else if (Prototype.Browser.WebKit) {
    _isButton = _isButtonForWebKit;
  } else {
    _isButton = _isButtonForDOMEvents;
  }

  function isLeftClick(event) { return _isButton(event, 0) }

  function isMiddleClick(event) { return _isButton(event, 1) }

  function isRightClick(event) { return _isButton(event, 2) }

  function element(event) {
    event = Event.extend(event);

    var node = event.target, type = event.type,
      currentTarget = event.currentTarget;

    if (currentTarget && currentTarget.tagName) {
      if (type === 'load' || type === 'error' ||
        (type === 'click' && currentTarget.tagName.toLowerCase() === 'input'
          && currentTarget.type === 'radio'))
        node = currentTarget;
    }

    if (node.nodeType == Node.TEXT_NODE)
      node = node.parentNode;

    return Element.extend(node);
  }

  function findElement(event, expression) {
    var element = Event.element(event);

    if (!expression) return element;
    while (element) {
      if (Object.isElement(element) && Prototype.Selector.match(element, expression)) {
        return Element.extend(element);
      }
      element = element.parentNode;
    }
  }

  function pointer(event) {
    return { x: pointerX(event), y: pointerY(event) };
  }

  function pointerX(event) {
    var docElement = document.documentElement,
      body = document.body || { scrollLeft: 0 };

    return event.pageX || (event.clientX +
      (docElement.scrollLeft || body.scrollLeft) -
      (docElement.clientLeft || 0));
  }

  function pointerY(event) {
    var docElement = document.documentElement,
      body = document.body || { scrollTop: 0 };

    return event.pageY || (event.clientY +
      (docElement.scrollTop || body.scrollTop) -
      (docElement.clientTop || 0));
  }


  function stop(event) {
    Event.extend(event);
    event.preventDefault();
    event.stopPropagation();

    event.stopped = true;
  }


  Event.Methods = {
    isLeftClick: isLeftClick,
    isMiddleClick: isMiddleClick,
    isRightClick: isRightClick,

    element: element,
    findElement: findElement,

    pointer: pointer,
    pointerX: pointerX,
    pointerY: pointerY,

    stop: stop
  };

  var methods = Object.keys(Event.Methods).inject({}, function (m, name) {
    m[name] = Event.Methods[name].methodize();
    return m;
  });

  if (window.attachEvent) {
    function _relatedTarget(event) {
      var element;
      switch (event.type) {
        case 'mouseover':
        case 'mouseenter':
          element = event.fromElement;
          break;
        case 'mouseout':
        case 'mouseleave':
          element = event.toElement;
          break;
        default:
          return null;
      }
      return Element.extend(element);
    }

    var additionalMethods = {
      stopPropagation: function () { this.cancelBubble = true },
      preventDefault: function () { this.returnValue = false },
      inspect: function () { return '[object Event]' }
    };

    Event.extend = function (event, element) {
      if (!event) return false;

      if (!isIELegacyEvent(event)) return event;

      if (event._extendedByPrototype) return event;
      event._extendedByPrototype = Prototype.emptyFunction;

      var pointer = Event.pointer(event);

      Object.extend(event, {
        target: event.srcElement || element,
        relatedTarget: _relatedTarget(event),
        pageX: pointer.x,
        pageY: pointer.y
      });

      Object.extend(event, methods);
      Object.extend(event, additionalMethods);

      return event;
    };
  } else {
    Event.extend = Prototype.K;
  }

  if (window.addEventListener) {
    Event.prototype = window.Event.prototype || document.createEvent('HTMLEvents').__proto__;
    Object.extend(Event.prototype, methods);
  }

  function _createResponder(element, eventName, handler) {
    if (element === null) return;
    var registry = Element.retrieve(element, 'prototype_event_registry');

    if (Object.isUndefined(registry)) {
      CACHE.push(element);
      registry = Element.retrieve(element, 'prototype_event_registry', $H());
    }

    var respondersForEvent = registry && registry.get(eventName);
    if (Object.isUndefined(respondersForEvent)) {
      respondersForEvent = [];
      registry.set(eventName, respondersForEvent);
    }

    if (respondersForEvent.pluck('handler').include(handler)) return false;

    var responder;
    if (eventName.include(":")) {
      responder = function (event) {
        if (Object.isUndefined(event.eventName))
          return false;

        if (event.eventName !== eventName)
          return false;

        Event.extend(event, element);
        handler.call(element, event);
      };
    } else {
      if (!MOUSEENTER_MOUSELEAVE_EVENTS_SUPPORTED &&
        (eventName === "mouseenter" || eventName === "mouseleave")) {
        if (eventName === "mouseenter" || eventName === "mouseleave") {
          responder = function (event) {
            Event.extend(event, element);

            var parent = event.relatedTarget;
            while (parent && parent !== element) {
              try { parent = parent.parentNode; }
              catch (e) { parent = element; }
            }

            if (parent === element) return;

            handler.call(element, event);
          };
        }
      } else {
        responder = function (event) {
          Event.extend(event, element);
          handler.call(element, event);
        };
      }
    }

    responder.handler = handler;
    respondersForEvent.push(responder);
    return responder;
  }

  function _destroyCache() {
    for (var i = 0, length = CACHE.length; i < length; i++) {
      Event.stopObserving(CACHE[i]);
      CACHE[i] = null;
    }
  }

  var CACHE = [];

  if (Prototype.Browser.IE)
    window.attachEvent('onunload', _destroyCache);

  if (Prototype.Browser.WebKit)
    window.addEventListener('unload', Prototype.emptyFunction, false);


  var _getDOMEventName = Prototype.K,
    translations = { mouseenter: "mouseover", mouseleave: "mouseout" };

  if (!MOUSEENTER_MOUSELEAVE_EVENTS_SUPPORTED) {
    _getDOMEventName = function (eventName) {
      return (translations[eventName] || eventName);
    };
  }

  function observe(element, eventName, handler) {
    element = $(element);

    var responder = _createResponder(element, eventName, handler);

    if (!responder) return element;

    if (eventName.include(':')) {
      if (element.addEventListener)
        element.addEventListener("dataavailable", responder, false);
      else {
        element.attachEvent("ondataavailable", responder);
        element.attachEvent("onlosecapture", responder);
      }
    } else {
      var actualEventName = _getDOMEventName(eventName);

      if (element.addEventListener)
        element.addEventListener(actualEventName, responder, false);
      else
        element.attachEvent("on" + actualEventName, responder);
    }

    return element;
  }

  function stopObserving(element, eventName, handler) {
    element = $(element);

    var registry = Element.retrieve(element, 'prototype_event_registry');
    if (!registry) return element;

    if (!eventName) {
      registry.each(function (pair) {
        var eventName = pair.key;
        stopObserving(element, eventName);
      });
      return element;
    }

    var responders = registry.get(eventName);
    if (!responders) return element;

    if (!handler) {
      responders.each(function (r) {
        stopObserving(element, eventName, r.handler);
      });
      return element;
    }

    var i = responders.length, responder;
    while (i--) {
      if (responders[i].handler === handler) {
        responder = responders[i];
        break;
      }
    }
    if (!responder) return element;

    if (eventName.include(':')) {
      if (element.removeEventListener)
        element.removeEventListener("dataavailable", responder, false);
      else {
        element.detachEvent("ondataavailable", responder);
        element.detachEvent("onlosecapture", responder);
      }
    } else {
      var actualEventName = _getDOMEventName(eventName);
      if (element.removeEventListener)
        element.removeEventListener(actualEventName, responder, false);
      else
        element.detachEvent('on' + actualEventName, responder);
    }

    registry.set(eventName, responders.without(responder));

    return element;
  }

  function fire(element, eventName, memo, bubble) {
    element = $(element);

    if (Object.isUndefined(bubble))
      bubble = true;

    if (element == document && document.createEvent && !element.dispatchEvent)
      element = document.documentElement;

    var event;
    if (document.createEvent) {
      event = document.createEvent('HTMLEvents');
      event.initEvent('dataavailable', bubble, true);
    } else {
      event = document.createEventObject();
      event.eventType = bubble ? 'ondataavailable' : 'onlosecapture';
    }

    event.eventName = eventName;
    event.memo = memo || {};

    if (document.createEvent)
      element.dispatchEvent(event);
    else
      element.fireEvent(event.eventType, event);

    return Event.extend(event);
  }

  Event.Handler = Class.create({
    initialize: function (element, eventName, selector, callback) {
      this.element = $(element);
      this.eventName = eventName;
      this.selector = selector;
      this.callback = callback;
      this.handler = this.handleEvent.bind(this);
    },

    start: function () {
      Event.observe(this.element, this.eventName, this.handler);
      return this;
    },

    stop: function () {
      Event.stopObserving(this.element, this.eventName, this.handler);
      return this;
    },

    handleEvent: function (event) {
      var element = Event.findElement(event, this.selector);
      if (element) this.callback.call(this.element, event, element);
    }
  });

  function on(element, eventName, selector, callback) {
    element = $(element);
    if (Object.isFunction(selector) && Object.isUndefined(callback)) {
      callback = selector, selector = null;
    }

    return new Event.Handler(element, eventName, selector, callback).start();
  }

  Object.extend(Event, Event.Methods);

  Object.extend(Event, {
    fire: fire,
    observe: observe,
    stopObserving: stopObserving,
    on: on
  });

  Element.addMethods({
    fire: fire,

    observe: observe,

    stopObserving: stopObserving,

    on: on
  });

  Object.extend(document, {
    fire: fire.methodize(),

    observe: observe.methodize(),

    stopObserving: stopObserving.methodize(),

    on: on.methodize(),

    loaded: false
  });

  if (window.Event) Object.extend(window.Event, Event);
  else window.Event = Event;
})();

(function () {
  /* Support for the DOMContentLoaded event is based on work by Dan Webb,
     Matthias Miller, Dean Edwards, John Resig, and Diego Perini. */

  var timer;

  function fireContentLoadedEvent() {
    if (document.loaded) return;
    if (timer) window.clearTimeout(timer);
    document.loaded = true;
    document.fire('dom:loaded');
  }

  function checkReadyState() {
    if (document.readyState === 'complete') {
      document.stopObserving('readystatechange', checkReadyState);
      fireContentLoadedEvent();
    }
  }

  function pollDoScroll() {
    try { document.documentElement.doScroll('left'); }
    catch (e) {
      timer = pollDoScroll.defer();
      return;
    }
    fireContentLoadedEvent();
  }

  if (document.addEventListener) {
    document.addEventListener('DOMContentLoaded', fireContentLoadedEvent, false);
  } else {
    document.observe('readystatechange', checkReadyState);
    if (window == top)
      timer = pollDoScroll.defer();
  }

  Event.observe(window, 'load', fireContentLoadedEvent);
})();

Element.addMethods();

/*------------------------------- DEPRECATED -------------------------------*/

Hash.toQueryString = Object.toQueryString;

var Toggle = { display: Element.toggle };

Element.Methods.childOf = Element.Methods.descendantOf;

var Insertion = {
  Before: function (element, content) {
    return Element.insert(element, { before: content });
  },

  Top: function (element, content) {
    return Element.insert(element, { top: content });
  },

  Bottom: function (element, content) {
    return Element.insert(element, { bottom: content });
  },

  After: function (element, content) {
    return Element.insert(element, { after: content });
  }
};

var $continue = new Error('"throw $continue" is deprecated, use "return" instead');

var Position = {
  includeScrollOffsets: false,

  prepare: function () {
    this.deltaX = window.pageXOffset
      || document.documentElement.scrollLeft
      || document.body.scrollLeft
      || 0;
    this.deltaY = window.pageYOffset
      || document.documentElement.scrollTop
      || document.body.scrollTop
      || 0;
  },

  within: function (element, x, y) {
    if (this.includeScrollOffsets)
      return this.withinIncludingScrolloffsets(element, x, y);
    this.xcomp = x;
    this.ycomp = y;
    this.offset = Element.cumulativeOffset(element);

    return (y >= this.offset[1] &&
      y < this.offset[1] + element.offsetHeight &&
      x >= this.offset[0] &&
      x < this.offset[0] + element.offsetWidth);
  },

  withinIncludingScrolloffsets: function (element, x, y) {
    var offsetcache = Element.cumulativeScrollOffset(element);

    this.xcomp = x + offsetcache[0] - this.deltaX;
    this.ycomp = y + offsetcache[1] - this.deltaY;
    this.offset = Element.cumulativeOffset(element);

    return (this.ycomp >= this.offset[1] &&
      this.ycomp < this.offset[1] + element.offsetHeight &&
      this.xcomp >= this.offset[0] &&
      this.xcomp < this.offset[0] + element.offsetWidth);
  },

  overlap: function (mode, element) {
    if (!mode) return 0;
    if (mode == 'vertical')
      return ((this.offset[1] + element.offsetHeight) - this.ycomp) /
        element.offsetHeight;
    if (mode == 'horizontal')
      return ((this.offset[0] + element.offsetWidth) - this.xcomp) /
        element.offsetWidth;
  },


  cumulativeOffset: Element.Methods.cumulativeOffset,

  positionedOffset: Element.Methods.positionedOffset,

  absolutize: function (element) {
    Position.prepare();
    return Element.absolutize(element);
  },

  relativize: function (element) {
    Position.prepare();
    return Element.relativize(element);
  },

  realOffset: Element.Methods.cumulativeScrollOffset,

  offsetParent: Element.Methods.getOffsetParent,

  page: Element.Methods.viewportOffset,

  clone: function (source, target, options) {
    options = options || {};
    return Element.clonePosition(target, source, options);
  }
};

/*--------------------------------------------------------------------------*/

if (!document.getElementsByClassName) document.getElementsByClassName = function (instanceMethods) {
  function iter(name) {
    return name.blank() ? null : "[contains(concat(' ', @class, ' '), ' " + name + " ')]";
  }

  instanceMethods.getElementsByClassName = Prototype.BrowserFeatures.XPath ?
    function (element, className) {
      className = className.toString().strip();
      var cond = /\s/.test(className) ? $w(className).map(iter).join('') : iter(className);
      return cond ? document._getElementsByXPath('.//*' + cond, element) : [];
    } : function (element, className) {
      className = className.toString().strip();
      var elements = [], classNames = (/\s/.test(className) ? $w(className) : null);
      if (!classNames && !className) return elements;

      var nodes = $(element).getElementsByTagName('*');
      className = ' ' + className + ' ';

      for (var i = 0, child, cn; child = nodes[i]; i++) {
        if (child.className && (cn = ' ' + child.className + ' ') && (cn.include(className) ||
          (classNames && classNames.all(function (name) {
            return !name.toString().blank() && cn.include(' ' + name + ' ');
          }))))
          elements.push(Element.extend(child));
      }
      return elements;
    };

  return function (className, parentElement) {
    return $(parentElement || document.body).getElementsByClassName(className);
  };
}(Element.Methods);

/*--------------------------------------------------------------------------*/

Element.ClassNames = Class.create();
Element.ClassNames.prototype = {
  initialize: function (element) {
    this.element = $(element);
  },

  _each: function (iterator) {
    this.element.className.split(/\s+/).select(function (name) {
      return name.length > 0;
    })._each(iterator);
  },

  set: function (className) {
    this.element.className = className;
  },

  add: function (classNameToAdd) {
    if (this.include(classNameToAdd)) return;
    this.set($A(this).concat(classNameToAdd).join(' '));
  },

  remove: function (classNameToRemove) {
    if (!this.include(classNameToRemove)) return;
    this.set($A(this).without(classNameToRemove).join(' '));
  },

  toString: function () {
    return $A(this).join(' ');
  }
};

Object.extend(Element.ClassNames.prototype, Enumerable);

/*--------------------------------------------------------------------------*/

(function () {
  window.Selector = Class.create({
    initialize: function (expression) {
      this.expression = expression.strip();
    },

    findElements: function (rootElement) {
      return Prototype.Selector.select(this.expression, rootElement);
    },

    match: function (element) {
      return Prototype.Selector.match(element, this.expression);
    },

    toString: function () {
      return this.expression;
    },

    inspect: function () {
      return "#<Selector: " + this.expression + ">";
    }
  });

  Object.extend(Selector, {
    matchElements: function (elements, expression) {
      var match = Prototype.Selector.match,
        results = [];

      for (var i = 0, length = elements.length; i < length; i++) {
        var element = elements[i];
        if (match(element, expression)) {
          results.push(Element.extend(element));
        }
      }
      return results;
    },

    findElement: function (elements, expression, index) {
      index = index || 0;
      var matchIndex = 0, element;
      for (var i = 0, length = elements.length; i < length; i++) {
        element = elements[i];
        if (Prototype.Selector.match(element, expression) && index === matchIndex++) {
          return Element.extend(element);
        }
      }
    },

    findChildElements: function (element, expressions) {
      var selector = expressions.toArray().join(', ');
      return Prototype.Selector.select(selector, element || document);
    }
  });
})();
Function.prototype.bind = bindTemp; //fix for compatibility with angular build
Array.from = wat; //fix for compatibility with angular build
// Credit Card Validation Javascript
// copyright 12th May 2003, by Stephen Chapman, Felgall Pty Ltd

// You have permission to copy and use this javascript provided that
// the content of the script is not changed in any way.

function validateCreditCard(s) {
  // remove non-numerics
  var v = "0123456789";
  var w = "";
  for (i = 0; i < s.length; i++) {
    x = s.charAt(i);
    if (v.indexOf(x, 0) != -1)
      w += x;
  }
  // validate number
  j = w.length / 2;
  k = Math.floor(j);
  m = Math.ceil(j) - k;
  c = 0;
  for (i = 0; i < k; i++) {
    a = w.charAt(i * 2 + m) * 2;
    c += a > 9 ? Math.floor(a / 10 + a % 10) : a;
  }
  for (i = 0; i < k + m; i++) c += w.charAt(i * 2 + 1 - m) * 1;
  return (c % 10 == 0);
}


/*
* Really easy field validation with Prototype
* http://tetlaw.id.au/view/javascript/really-easy-field-validation
* Andrew Tetlaw
* Version 1.5.4.1 (2007-01-05)
*
* Copyright (c) 2007 Andrew Tetlaw
* Permission is hereby granted, free of charge, to any person
* obtaining a copy of this software and associated documentation
* files (the "Software"), to deal in the Software without
* restriction, including without limitation the rights to use, copy,
* modify, merge, publish, distribute, sublicense, and/or sell copies
* of the Software, and to permit persons to whom the Software is
* furnished to do so, subject to the following conditions:
*
* The above copyright notice and this permission notice shall be
* included in all copies or substantial portions of the Software.
*
* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
* EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
* MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
* NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS
* BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN
* ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
* CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
* SOFTWARE.
*
*/
var Validator = Class.create();

Validator.prototype = {
  initialize: function (className, error, test, options) {
    if (typeof test == 'function') {
      this.options = $H(options);
      this._test = test;
    } else {
      this.options = $H(test);
      this._test = function () { return true };
    }
    this.error = error || 'Validation failed.';
    this.className = className;
  },
  test: function (v, elm) {
    return (this._test(v, elm) && this.options.all(function (p) {
      return Validator.methods[p.key] ? Validator.methods[p.key](v, elm, p.value) : true;
    }));
  }
}
Validator.methods = {
  pattern: function (v, elm, opt) { return Validation.get('IsEmpty').test(v) || opt.test(v) },
  minLength: function (v, elm, opt) { return v.length >= opt },
  maxLength: function (v, elm, opt) { return v.length <= opt },
  min: function (v, elm, opt) { return v >= parseFloat(opt) },
  max: function (v, elm, opt) { return v <= parseFloat(opt) },
  notOneOf: function (v, elm, opt) {
    return $A(opt).all(function (value) {
      return v != value;
    })
  },
  oneOf: function (v, elm, opt) {
    return $A(opt).any(function (value) {
      return v == value;
    })
  },
  is: function (v, elm, opt) { return v == opt },
  isNot: function (v, elm, opt) { return v != opt },
  equalToField: function (v, elm, opt) { return v == $F(opt) },
  notEqualToField: function (v, elm, opt) { return v != $F(opt) },
  include: function (v, elm, opt) {
    return $A(opt).all(function (value) {
      return Validation.get(value).test(v, elm);
    })
  }
}

var Validation = Class.create();
Validation.defaultOptions = {
  onSubmit: true,
  stopOnFirst: false,
  immediate: false,
  focusOnError: true,
  useTitles: false,
  addClassNameToContainer: false,
  containerClassName: '.input-box',
  onFormValidate: function (result, form) { },
  onElementValidate: function (result, elm) { }
};

Validation.prototype = {
  initialize: function (form, options) {
    this.form = $(form);
    if (!this.form) {
      return;
    }
    this.options = Object.extend({
      onSubmit: Validation.defaultOptions.onSubmit,
      stopOnFirst: Validation.defaultOptions.stopOnFirst,
      immediate: Validation.defaultOptions.immediate,
      focusOnError: Validation.defaultOptions.focusOnError,
      useTitles: Validation.defaultOptions.useTitles,
      onFormValidate: Validation.defaultOptions.onFormValidate,
      onElementValidate: Validation.defaultOptions.onElementValidate
    }, options || {});
    if (this.options.onSubmit) Event.observe(this.form, 'submit', this.onSubmit.bind(this), false);
    if (this.options.immediate) {
      Form.getElements(this.form).each(function (input) { // Thanks Mike!
        if (input.tagName.toLowerCase() == 'select') {
          Event.observe(input, 'blur', this.onChange.bindAsEventListener(this));
        }
        if (input.type.toLowerCase() == 'radio' || input.type.toLowerCase() == 'checkbox') {
          Event.observe(input, 'click', this.onChange.bindAsEventListener(this));
        } else {
          Event.observe(input, 'change', this.onChange.bindAsEventListener(this));
        }
      }, this);
    }
  },
  onChange: function (ev) {
    Validation.isOnChange = true;
    Validation.validate(Event.element(ev), {
      useTitle: this.options.useTitles,
      onElementValidate: this.options.onElementValidate
    });
    Validation.isOnChange = false;
  },
  onSubmit: function (ev) {
    if (!this.validate()) Event.stop(ev);
  },
  validate: function () {
    var result = false;
    var useTitles = this.options.useTitles;
    var callback = this.options.onElementValidate;
    try {
      if (this.options.stopOnFirst) {
        result = Form.getElements(this.form).all(function (elm) {
          if (elm.hasClassName('local-validation') && !this.isElementInForm(elm, this.form)) {
            return true;
          }
          return Validation.validate(elm, { useTitle: useTitles, onElementValidate: callback });
        }, this);
      } else {
        result = Form.getElements(this.form).collect(function (elm) {
          if (elm.hasClassName('local-validation') && !this.isElementInForm(elm, this.form)) {
            return true;
          }
          return Validation.validate(elm, { useTitle: useTitles, onElementValidate: callback });
        }, this).all();
      }
    } catch (e) {
    }
    if (!result && this.options.focusOnError) {
      try {
        Form.getElements(this.form).findAll(function (elm) { return $(elm).hasClassName('validation-failed') }).first().focus()
      }
      catch (e) {
      }
    }
    this.options.onFormValidate(result, this.form);
    return result;
  },
  reset: function () {
    Form.getElements(this.form).each(Validation.reset);
  },
  isElementInForm: function (elm, form) {
    var domForm = elm.up('form');
    if (domForm == form) {
      return true;
    }
    return false;
  }
}

Object.extend(Validation, {
  validate: function (elm, options) {
    options = Object.extend({
      useTitle: false,
      onElementValidate: function (result, elm) { }
    }, options || {});
    elm = $(elm);

    var cn = $w(elm.className);
    return result = cn.all(function (value) {
      var test = Validation.test(value, elm, options.useTitle);
      options.onElementValidate(test, elm);
      return test;
    });
  },
  insertAdvice: function (elm, advice) {
    var container = $(elm).up('.field-row');
    if (container) {
      Element.insert(container, { after: advice });
    } else if (elm.up('td.value')) {
      elm.up('td.value').insert({ bottom: advice });
    } else if (elm.advaiceContainer && $(elm.advaiceContainer)) {
      $(elm.advaiceContainer).update(advice);
    }
    else {
      switch (elm.type.toLowerCase()) {
        case 'checkbox':
        case 'radio':
          var p = elm.parentNode;
          if (p) {
            Element.insert(p, { 'bottom': advice });
          } else {
            Element.insert(elm, { 'after': advice });
          }
          break;
        default:
          Element.insert(elm, { 'after': advice });
      }
    }
  },
  showAdvice: function (elm, advice, adviceName) {
    if (!elm.advices) {
      elm.advices = new Hash();
    }
    else {
      elm.advices.each(function (pair) {
        if (!advice || pair.value.id != advice.id) {
          // hide non-current advice after delay
          this.hideAdvice(elm, pair.value);
        }
      }.bind(this));
    }
    elm.advices.set(adviceName, advice);
    if (typeof Effect == 'undefined') {
      advice.style.display = 'block';
    } else {
      if (!advice._adviceAbsolutize) {
        new Effect.Appear(advice, { duration: 1 });
      } else {
        Position.absolutize(advice);
        advice.show();
        advice.setStyle({
          'top': advice._adviceTop,
          'left': advice._adviceLeft,
          'width': advice._adviceWidth,
          'z-index': 1000
        });
        advice.addClassName('advice-absolute');
      }
    }
  },
  hideAdvice: function (elm, advice) {
    if (advice != null) {
      new Effect.Fade(advice, { duration: 1, afterFinishInternal: function () { advice.hide(); } });
    }
  },
  updateCallback: function (elm, status) {
    if (typeof elm.callbackFunction != 'undefined') {
      eval(elm.callbackFunction + '(\'' + elm.id + '\',\'' + status + '\')');
    }
  },
  ajaxError: function (elm, errorMsg) {
    var name = 'validate-ajax';
    var advice = Validation.getAdvice(name, elm);
    if (advice == null) {
      advice = this.createAdvice(name, elm, false, errorMsg);
    }
    this.showAdvice(elm, advice, 'validate-ajax');
    this.updateCallback(elm, 'failed');

    elm.addClassName('validation-failed');
    elm.addClassName('validate-ajax');
    if (Validation.defaultOptions.addClassNameToContainer && Validation.defaultOptions.containerClassName != '') {
      var container = elm.up(Validation.defaultOptions.containerClassName);
      if (container && this.allowContainerClassName(elm)) {
        container.removeClassName('validation-passed');
        container.addClassName('validation-error');
      }
    }
  },
  allowContainerClassName: function (elm) {
    if (elm.type == 'radio' || elm.type == 'checkbox') {
      return elm.hasClassName('change-container-classname');
    }

    return true;
  },
  test: function (name, elm, useTitle) {
    var v = Validation.get(name);
    var prop = '__advice' + name.camelize();
    try {
      if (Validation.isVisible(elm) && !v.test($F(elm), elm)) {
        //if(!elm[prop]) {
        var advice = Validation.getAdvice(name, elm);
        if (advice == null) {
          advice = this.createAdvice(name, elm, useTitle);
        }
        this.showAdvice(elm, advice, name);
        this.updateCallback(elm, 'failed');
        //}
        elm[prop] = 1;
        if (!elm.advaiceContainer) {
          elm.removeClassName('validation-passed');
          elm.addClassName('validation-failed');
        }

        if (Validation.defaultOptions.addClassNameToContainer && Validation.defaultOptions.containerClassName != '') {
          var container = elm.up(Validation.defaultOptions.containerClassName);
          if (container && this.allowContainerClassName(elm)) {
            container.removeClassName('validation-passed');
            container.addClassName('validation-error');
          }
        }
        return false;
      } else {
        var advice = Validation.getAdvice(name, elm);
        this.hideAdvice(elm, advice);
        this.updateCallback(elm, 'passed');
        elm[prop] = '';
        elm.removeClassName('validation-failed');
        elm.addClassName('validation-passed');
        if (Validation.defaultOptions.addClassNameToContainer && Validation.defaultOptions.containerClassName != '') {
          var container = elm.up(Validation.defaultOptions.containerClassName);
          if (container && !container.down('.validation-failed') && this.allowContainerClassName(elm)) {
            if (!Validation.get('IsEmpty').test(elm.value) || !this.isVisible(elm)) {
              container.addClassName('validation-passed');
            } else {
              container.removeClassName('validation-passed');
            }
            container.removeClassName('validation-error');
          }
        }
        return true;
      }
    } catch (e) {
      throw (e)
    }
  },
  isVisible: function (elm) {
    while (elm.tagName != 'BODY') {
      if (!$(elm).visible()) return false;
      elm = elm.parentNode;
    }
    return true;
  },
  getAdvice: function (name, elm) {
    return $('advice-' + name + '-' + Validation.getElmID(elm)) || $('advice-' + Validation.getElmID(elm));
  },
  createAdvice: function (name, elm, useTitle, customError) {
    var v = Validation.get(name);
    var errorMsg = useTitle ? ((elm && elm.title) ? elm.title : v.error) : v.error;
    if (customError) {
      errorMsg = customError;
    }
    try {
      if (Translator) {
        errorMsg = Translator.translate(errorMsg);
      }
    }
    catch (e) { }

    advice = '<div class="validation-advice" id="advice-' + name + '-' + Validation.getElmID(elm) + '" style="display:none">' + errorMsg + '</div>'


    Validation.insertAdvice(elm, advice);
    advice = Validation.getAdvice(name, elm);
    if ($(elm).hasClassName('absolute-advice')) {
      var dimensions = $(elm).getDimensions();
      var originalPosition = Position.cumulativeOffset(elm);

      advice._adviceTop = (originalPosition[1] + dimensions.height) + 'px';
      advice._adviceLeft = (originalPosition[0]) + 'px';
      advice._adviceWidth = (dimensions.width) + 'px';
      advice._adviceAbsolutize = true;
    }
    return advice;
  },
  getElmID: function (elm) {
    return elm.id ? elm.id : elm.name;
  },
  reset: function (elm) {
    elm = $(elm);
    var cn = $w(elm.className);
    cn.each(function (value) {
      var prop = '__advice' + value.camelize();
      if (elm[prop]) {
        var advice = Validation.getAdvice(value, elm);
        if (advice) {
          advice.hide();
        }
        elm[prop] = '';
      }
      elm.removeClassName('validation-failed');
      elm.removeClassName('validation-passed');
      if (Validation.defaultOptions.addClassNameToContainer && Validation.defaultOptions.containerClassName != '') {
        var container = elm.up(Validation.defaultOptions.containerClassName);
        if (container) {
          container.removeClassName('validation-passed');
          container.removeClassName('validation-error');
        }
      }
    });
  },
  add: function (className, error, test, options) {
    var nv = {};
    nv[className] = new Validator(className, error, test, options);
    Object.extend(Validation.methods, nv);
  },
  addAllThese: function (validators) {
    var nv = {};
    $A(validators).each(function (value) {
      nv[value[0]] = new Validator(value[0], value[1], value[2], (value.length > 3 ? value[3] : {}));
    });
    Object.extend(Validation.methods, nv);
  },
  get: function (name) {
    return Validation.methods[name] ? Validation.methods[name] : Validation.methods['_LikeNoIDIEverSaw_'];
  },
  methods: {
    '_LikeNoIDIEverSaw_': new Validator('_LikeNoIDIEverSaw_', '', {})
  }
});

Validation.add('IsEmpty', '', function (v) {
  return (v == '' || (v == null) || (v.length == 0) || /^\s+$/.test(v));
});

Validation.addAllThese([
  ['validate-no-html-tags', 'HTML tags are not allowed', function (v) {
    return !/<(\/)?\w+/.test(v);
  }],
  ['validate-select', 'Please select an option.', function (v) {
    return ((v != "none") && (v != null) && (v.length != 0));
  }],
  ['required-entry', 'This is a required field.', function (v) {
    return !Validation.get('IsEmpty').test(v);
  }],
  ['validate-number', 'Please enter a valid number in this field.', function (v) {
    return Validation.get('IsEmpty').test(v)
      || (!isNaN(parseNumber(v)) && /^\s*-?\d*(\.\d*)?\s*$/.test(v));
  }],
  ['validate-number-range', 'The value is not within the specified range.', function (v, elm) {
    if (Validation.get('IsEmpty').test(v)) {
      return true;
    }

    var numValue = parseNumber(v);
    if (isNaN(numValue)) {
      return false;
    }

    var reRange = /^number-range-(-?[\d.,]+)?-(-?[\d.,]+)?$/,
      result = true;

    $w(elm.className).each(function (name) {
      var m = reRange.exec(name);
      if (m) {
        result = result
          && (m[1] == null || m[1] == '' || numValue >= parseNumber(m[1]))
          && (m[2] == null || m[2] == '' || numValue <= parseNumber(m[2]));
      }
    });

    return result;
  }],
  ['validate-digits', 'Please use numbers only in this field. Please avoid spaces or other characters such as dots or commas.', function (v) {
    return Validation.get('IsEmpty').test(v) || !/[^\d]/.test(v);
  }],
  ['validate-digits-range', 'The value is not within the specified range.', function (v, elm) {
    if (Validation.get('IsEmpty').test(v)) {
      return true;
    }

    var numValue = parseNumber(v);
    if (isNaN(numValue)) {
      return false;
    }

    var reRange = /^digits-range-(-?\d+)?-(-?\d+)?$/,
      result = true;

    $w(elm.className).each(function (name) {
      var m = reRange.exec(name);
      if (m) {
        result = result
          && (m[1] == null || m[1] == '' || numValue >= parseNumber(m[1]))
          && (m[2] == null || m[2] == '' || numValue <= parseNumber(m[2]));
      }
    });

    return result;
  }],
  ['validate-alpha', 'Please use letters only (a-z or A-Z) in this field.', function (v) {
    return Validation.get('IsEmpty').test(v) || /^[a-zA-Z]+$/.test(v)
  }],
  ['validate-code', 'Please use only letters (a-z), numbers (0-9) or underscore(_) in this field, first character should be a letter.', function (v) {
    return Validation.get('IsEmpty').test(v) || /^[a-z]+[a-z0-9_]+$/.test(v)
  }],
  ['validate-alphanum', 'Please use only letters (a-z or A-Z) or numbers (0-9) only in this field. No spaces or other characters are allowed.', function (v) {
    return Validation.get('IsEmpty').test(v) || /^[a-zA-Z0-9]+$/.test(v)
  }],
  ['validate-alphanum-with-spaces', 'Please use only letters (a-z or A-Z), numbers (0-9) or spaces only in this field.', function (v) {
    return Validation.get('IsEmpty').test(v) || /^[a-zA-Z0-9 ]+$/.test(v)
  }],
  ['validate-street', 'Please use only letters (a-z or A-Z) or numbers (0-9) or spaces and # only in this field.', function (v) {
    return Validation.get('IsEmpty').test(v) || /^[ \w]{3,}([A-Za-z]\.)?([ \w]*\#\d+)?(\r\n| )[ \w]{3,}/.test(v)
  }],
  ['validate-phoneStrict', 'Please enter a valid phone number. For example (123) 456-7890 or 123-456-7890.', function (v) {
    return Validation.get('IsEmpty').test(v) || /^(\()?\d{3}(\))?(-|\s)?\d{3}(-|\s)\d{4}$/.test(v);
  }],
  ['validate-date', 'Please enter a valid date.', function (v) {
    var test = new Date(v);
    return Validation.get('IsEmpty').test(v) || !isNaN(test);
  }],
  ['validate-date-range', 'The From Date value should be less than or equal to the To Date value.', function (v, elm) {
    var m = /\bdate-range-(\w+)-(\w+)\b/.exec(elm.className);
    if (!m || m[2] == 'to' || Validation.get('IsEmpty').test(v)) {
      return true;
    }

    var currentYear = new Date().getFullYear() + '';
    var normalizedTime = function (v) {
      v = v.split(/[.\/]/);
      if (v[2] && v[2].length < 4) {
        v[2] = currentYear.substr(0, v[2].length) + v[2];
      }
      return new Date(v.join('/')).getTime();
    };

    var dependentElements = Element.select(elm.form, '.validate-date-range.date-range-' + m[1] + '-to');
    return !dependentElements.length || Validation.get('IsEmpty').test(dependentElements[0].value)
      || normalizedTime(v) <= normalizedTime(dependentElements[0].value);
  }],
  ['validate-emailSender', 'Please use only visible characters and spaces.', function (v) {
    return Validation.get('IsEmpty').test(v) || /^[\S ]+$/.test(v)
  }],
  ['validate-password', 'Please enter more characters or clean leading or trailing spaces.', function (v, elm) {
    var pass = v.strip(); /*strip leading and trailing spaces*/
    var reMin = new RegExp(/^min-pass-length-[0-9]+$/);
    var minLength = 7;
    $w(elm.className).each(function (name, index) {
      if (name.match(reMin)) {
        minLength = name.split('-')[3];
      }
    });
    return (!(v.length > 0 && v.length < minLength) && v.length == pass.length);
  }],
  ['validate-admin-password', 'Please enter more characters. Password should contain both numeric and alphabetic characters.', function (v, elm) {
    var pass = v.strip();
    if (0 == pass.length) {
      return true;
    }
    if (!(/[a-z]/i.test(v)) || !(/[0-9]/.test(v))) {
      return false;
    }
    var reMin = new RegExp(/^min-admin-pass-length-[0-9]+$/);
    var minLength = 7;
    $w(elm.className).each(function (name, index) {
      if (name.match(reMin)) {
        minLength = name.split('-')[4];
      }
    });
    return !(pass.length < minLength);
  }],
  ['validate-cpassword', 'Please make sure your passwords match.', function (v) {
    var conf = $('confirmation') ? $('confirmation') : $$('.validate-cpassword')[0];
    var pass = false;
    if ($('password')) {
      pass = $('password');
    }
    var passwordElements = $$('.validate-password');
    for (var i = 0; i < passwordElements.size(); i++) {
      var passwordElement = passwordElements[i];
      if (passwordElement.up('form').id == conf.up('form').id) {
        pass = passwordElement;
      }
    }
    if ($$('.validate-admin-password').size()) {
      pass = $$('.validate-admin-password')[0];
    }
    return (pass.value == conf.value);
  }],
  ['validate-both-passwords', 'Please make sure your passwords match.', function (v, input) {
    var dependentInput = $(input.form[input.name == 'password' ? 'confirmation' : 'password']),
      isEqualValues = input.value == dependentInput.value;

    if (isEqualValues && dependentInput.hasClassName('validation-failed')) {
      Validation.test(this.className, dependentInput);
    }

    return dependentInput.value == '' || isEqualValues;
  }],
  ['validate-url', 'Please enter a valid URL. Protocol is required (http://, https:// or ftp://)', function (v) {
    v = (v || '').replace(/^\s+/, '').replace(/\s+$/, '');
    return Validation.get('IsEmpty').test(v) || /^(https?|ftp):\/\/(((([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(%[\da-f]{2})|[!\$&'\(\)\*\+,;=]|:)*@)?(((\d|[1-9]\d|1\d\d|2[0-4]\d|25[0-5])\.(\d|[1-9]\d|1\d\d|2[0-4]\d|25[0-5])\.(\d|[1-9]\d|1\d\d|2[0-4]\d|25[0-5])\.(\d|[1-9]\d|1\d\d|2[0-4]\d|25[0-5]))|((([a-z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(([a-z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])*([a-z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])))\.)+(([a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(([a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])*([a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])))\.?)(:\d*)?)(\/((([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(%[\da-f]{2})|[!\$&'\(\)\*\+,;=]|:|@)+(\/(([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(%[\da-f]{2})|[!\$&'\(\)\*\+,;=]|:|@)*)*)?)?(\?((([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(%[\da-f]{2})|[!\$&'\(\)\*\+,;=]|:|@)|[\uE000-\uF8FF]|\/|\?)*)?(\#((([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(%[\da-f]{2})|[!\$&'\(\)\*\+,;=]|:|@)|\/|\?)*)?$/i.test(v)
  }],
  ['validate-clean-url', 'Please enter a valid URL. For example http://www.example.com or www.example.com', function (v) {
    return Validation.get('IsEmpty').test(v) || /^(http|https|ftp):\/\/(([A-Z0-9][A-Z0-9_-]*)(\.[A-Z0-9][A-Z0-9_-]*)+.(com|org|net|dk|at|us|tv|info|uk|co.uk|biz|se)$)(:(\d+))?\/?/i.test(v) || /^(www)((\.[A-Z0-9][A-Z0-9_-]*)+.(com|org|net|dk|at|us|tv|info|uk|co.uk|biz|se)$)(:(\d+))?\/?/i.test(v)
  }],
  ['validate-identifier', 'Please enter a valid URL Key. For example "example-page", "example-page.html" or "anotherlevel/example-page".', function (v) {
    return Validation.get('IsEmpty').test(v) || /^[a-z0-9][a-z0-9_\/-]+(\.[a-z0-9_-]+)?$/.test(v)
  }],
  ['validate-xml-identifier', 'Please enter a valid XML-identifier. For example something_1, block5, id-4.', function (v) {
    return Validation.get('IsEmpty').test(v) || /^[A-Z][A-Z0-9_\/-]*$/i.test(v)
  }],
  ['validate-ssn', 'Please enter a valid social security number. For example 123-45-6789.', function (v) {
    return Validation.get('IsEmpty').test(v) || /^\d{3}-?\d{2}-?\d{4}$/.test(v);
  }],
  ['validate-zip', 'Please enter a valid zip code. For example 90602 or 90602-1234.', function (v) {
    return Validation.get('IsEmpty').test(v) || /(^\d{5}$)|(^\d{5}-\d{4}$)/.test(v);
  }],
  ['validate-zip-international', 'Please enter a valid zip code.', function (v) {
    //return Validation.get('IsEmpty').test(v) || /(^[A-z0-9]{2,10}([\s]{0,1}|[\-]{0,1})[A-z0-9]{2,10}$)/.test(v);
    return true;
  }],
  ['validate-date-au', 'Please use this date format: dd/mm/yyyy. For example 17/03/2006 for the 17th of March, 2006.', function (v) {
    if (Validation.get('IsEmpty').test(v)) return true;
    var regex = /^(\d{2})\/(\d{2})\/(\d{4})$/;
    if (!regex.test(v)) return false;
    var d = new Date(v.replace(regex, '$2/$1/$3'));
    return (parseInt(RegExp.$2, 10) == (1 + d.getMonth())) &&
      (parseInt(RegExp.$1, 10) == d.getDate()) &&
      (parseInt(RegExp.$3, 10) == d.getFullYear());
  }],
  ['validate-currency-dollar', 'Please enter a valid $ amount. For example $100.00.', function (v) {
    // [$]1[##][,###]+[.##]
    // [$]1###+[.##]
    // [$]0.##
    // [$].##
    return Validation.get('IsEmpty').test(v) || /^\$?\-?([1-9]{1}[0-9]{0,2}(\,[0-9]{3})*(\.[0-9]{0,2})?|[1-9]{1}\d*(\.[0-9]{0,2})?|0(\.[0-9]{0,2})?|(\.[0-9]{1,2})?)$/.test(v)
  }],
  ['validate-one-required', 'Please select one of the above options.', function (v, elm) {
    var p = elm.parentNode;
    var options = p.getElementsByTagName('INPUT');
    return $A(options).any(function (elm) {
      return $F(elm);
    });
  }],
  ['validate-one-required-by-name', 'Please select one of the options.', function (v, elm) {
    var inputs = $$('input[name="' + elm.name.replace(/([\\"])/g, '\\$1') + '"]');

    var error = 1;
    for (var i = 0; i < inputs.length; i++) {
      if ((inputs[i].type == 'checkbox' || inputs[i].type == 'radio') && inputs[i].checked == true) {
        error = 0;
      }

      if (Validation.isOnChange && (inputs[i].type == 'checkbox' || inputs[i].type == 'radio')) {
        Validation.reset(inputs[i]);
      }
    }

    if (error == 0) {
      return true;
    } else {
      return false;
    }
  }],
  ['validate-not-negative-number', 'Please enter a number 0 or greater in this field.', function (v) {
    if (Validation.get('IsEmpty').test(v)) {
      return true;
    }
    v = parseNumber(v);
    return !isNaN(v) && v >= 0;
  }],
  ['validate-zero-or-greater', 'Please enter a number 0 or greater in this field.', function (v) {
    return Validation.get('validate-not-negative-number').test(v);
  }],
  ['validate-greater-than-zero', 'Please enter a number greater than 0 in this field.', function (v) {
    if (Validation.get('IsEmpty').test(v)) {
      return true;
    }
    v = parseNumber(v);
    return !isNaN(v) && v > 0;
  }],
  ['validate-state', 'Please select State/Province.', function (v) {
    return (v != 0 || v == '');
  }],
  ['validate-new-password', 'Please enter more characters or clean leading or trailing spaces.', function (v, elm) {
    if (!Validation.get('validate-password').test(v, elm)) return false;
    if (Validation.get('IsEmpty').test(v) && v != '') return false;
    return true;
  }],
  ['validate-cc-number', 'Please enter a valid credit card number.', function (v, elm) {
    // remove non-numerics
    var ccTypeContainer = $(elm.id.substr(0, elm.id.indexOf('_cc_number')) + '_cc_type');
    if (ccTypeContainer && typeof Validation.creditCartTypes.get(ccTypeContainer.value) != 'undefined'
      && Validation.creditCartTypes.get(ccTypeContainer.value)[2] == false) {
      if (!Validation.get('IsEmpty').test(v) && Validation.get('validate-digits').test(v)) {
        return true;
      } else {
        return false;
      }
    }
    return validateCreditCard(v);
  }],
  ['validate-cc-type', 'Credit card number does not match credit card type.', function (v, elm) {
    // remove credit card number delimiters such as "-" and space
    elm.value = removeDelimiters(elm.value);
    v = removeDelimiters(v);

    var ccTypeContainer = $(elm.id.substr(0, elm.id.indexOf('_cc_number')) + '_cc_type');
    if (!ccTypeContainer) {
      return true;
    }
    var ccType = ccTypeContainer.value;

    if (typeof Validation.creditCartTypes.get(ccType) == 'undefined') {
      return false;
    }

    // Other card type or switch or solo card
    if (Validation.creditCartTypes.get(ccType)[0] == false) {
      return true;
    }

    var validationFailure = false;
    Validation.creditCartTypes.each(function (pair) {
      if (pair.key == ccType) {
        if (pair.value[0] && !v.match(pair.value[0])) {
          validationFailure = true;
        }
        throw $break;
      }
    });

    if (validationFailure) {
      return false;
    }

    if (ccTypeContainer.hasClassName('validation-failed') && Validation.isOnChange) {
      Validation.validate(ccTypeContainer);
    }

    return true;
  }],
  ['validate-cc-type-select', 'Card type does not match credit card number.', function (v, elm) {
    var ccNumberContainer = $(elm.id.substr(0, elm.id.indexOf('_cc_type')) + '_cc_number');
    if (Validation.isOnChange && Validation.get('IsEmpty').test(ccNumberContainer.value)) {
      return true;
    }
    if (Validation.get('validate-cc-type').test(ccNumberContainer.value, ccNumberContainer)) {
      Validation.validate(ccNumberContainer);
    }
    return Validation.get('validate-cc-type').test(ccNumberContainer.value, ccNumberContainer);
  }],
  ['validate-cc-exp', 'Incorrect credit card expiration date.', function (v, elm) {
    var ccExpMonth = v;
    var ccExpYear = $(elm.id.substr(0, elm.id.indexOf('_expiration')) + '_expiration_yr').value;
    var currentTime = new Date();
    var currentMonth = currentTime.getMonth() + 1;
    var currentYear = currentTime.getFullYear();
    if (ccExpMonth < currentMonth && ccExpYear == currentYear) {
      return false;
    }
    return true;
  }],
  ['validate-cc-cvn', 'Please enter a valid credit card verification number.', function (v, elm) {
    var ccTypeContainer = $(elm.id.substr(0, elm.id.indexOf('_cc_cid')) + '_cc_type');
    if (!ccTypeContainer) {
      return true;
    }
    var ccType = ccTypeContainer.value;

    if (typeof Validation.creditCartTypes.get(ccType) == 'undefined') {
      return false;
    }

    var re = Validation.creditCartTypes.get(ccType)[1];

    if (v.match(re)) {
      return true;
    }

    return false;
  }],
  ['validate-ajax', '', function (v, elm) { return true; }],
  ['validate-data', 'Please use only letters (a-z or A-Z), numbers (0-9) or underscore(_) in this field, first character should be a letter.', function (v) {
    if (v != '' && v) {
      return /^[A-Za-z]+[A-Za-z0-9_]+$/.test(v);
    }
    return true;
  }],
  ['validate-css-length', 'Please input a valid CSS-length. For example 100px or 77pt or 20em or .5ex or 50%.', function (v) {
    if (v != '' && v) {
      return /^[0-9\.]+(px|pt|em|ex|%)?$/.test(v) && (!(/\..*\./.test(v))) && !(/\.$/.test(v));
    }
    return true;
  }],
  ['validate-length', 'Text length does not satisfy specified text range.', function (v, elm) {
    var reMax = new RegExp(/^maximum-length-[0-9]+$/);
    var reMin = new RegExp(/^minimum-length-[0-9]+$/);
    var result = true;
    $w(elm.className).each(function (name, index) {
      if (name.match(reMax) && result) {
        var length = name.split('-')[2];
        result = (v.length <= length);
      }
      if (name.match(reMin) && result && !Validation.get('IsEmpty').test(v)) {
        var length = name.split('-')[2];
        result = (v.length >= length);
      }
    });
    return result;
  }],
  ['validate-percents', 'Please enter a number lower than 100.', { max: 100 }],
  ['required-file', 'Please select a file', function (v, elm) {
    var result = !Validation.get('IsEmpty').test(v);
    if (result === false) {
      ovId = elm.id + '_value';
      if ($(ovId)) {
        result = !Validation.get('IsEmpty').test($(ovId).value);
      }
    }
    return result;
  }],
  ['validate-cc-ukss', 'Please enter issue number or start date for switch/solo card type.', function (v, elm) {
    var endposition;

    if (elm.id.match(/(.)+_cc_issue$/)) {
      endposition = elm.id.indexOf('_cc_issue');
    } else if (elm.id.match(/(.)+_start_month$/)) {
      endposition = elm.id.indexOf('_start_month');
    } else {
      endposition = elm.id.indexOf('_start_year');
    }

    var prefix = elm.id.substr(0, endposition);

    var ccTypeContainer = $(prefix + '_cc_type');

    if (!ccTypeContainer) {
      return true;
    }
    var ccType = ccTypeContainer.value;

    if (['SS', 'SM', 'SO'].indexOf(ccType) == -1) {
      return true;
    }

    $(prefix + '_cc_issue').advaiceContainer
      = $(prefix + '_start_month').advaiceContainer
      = $(prefix + '_start_year').advaiceContainer
      = $(prefix + '_cc_type_ss_div').down('ul li.adv-container');

    var ccIssue = $(prefix + '_cc_issue').value;
    var ccSMonth = $(prefix + '_start_month').value;
    var ccSYear = $(prefix + '_start_year').value;

    var ccStartDatePresent = (ccSMonth && ccSYear) ? true : false;

    if (!ccStartDatePresent && !ccIssue) {
      return false;
    }
    return true;
  }],
  ['validate-decimal-two-numbers', 'Maximum number of numbers after decimal point is 2.', function (v, elm) {
    // ##.##
    // #.#
    // #
    return Validation.get('IsEmpty').test(v) || /^\d+.?\d{0,2}$/.test(v)
  }],
]);

function removeDelimiters(v) {
  v = v.replace(/\s/g, '');
  v = v.replace(/\-/g, '');
  return v;
}

function parseNumber(v) {
  if (typeof v != 'string') {
    return parseFloat(v);
  }

  var isDot = v.indexOf('.');
  var isComa = v.indexOf(',');

  if (isDot != -1 && isComa != -1) {
    if (isComa > isDot) {
      v = v.replace('.', '').replace(',', '.');
    }
    else {
      v = v.replace(',', '');
    }
  }
  else if (isComa != -1) {
    v = v.replace(',', '.');
  }

  return parseFloat(v);
}

/**
 * Hash with credit card types which can be simply extended in payment modules
 * 0 - regexp for card number
 * 1 - regexp for cvn
 * 2 - check or not credit card number trough Luhn algorithm by
 *     function validateCreditCard which you can find above in this file
 */
Validation.creditCartTypes = $H({
  //    'SS': [new RegExp('^((6759[0-9]{12})|(5018|5020|5038|6304|6759|6761|6763[0-9]{12,19})|(49[013][1356][0-9]{12})|(6333[0-9]{12})|(6334[0-4]\d{11})|(633110[0-9]{10})|(564182[0-9]{10}))([0-9]{2,3})?$'), new RegExp('^([0-9]{3}|[0-9]{4})?$'), true],
  'SO': [new RegExp('^(6334[5-9]([0-9]{11}|[0-9]{13,14}))|(6767([0-9]{12}|[0-9]{14,15}))$'), new RegExp('^([0-9]{3}|[0-9]{4})?$'), true],
  'VI': [new RegExp('^4[0-9]{12}([0-9]{3})?$'), new RegExp('^[0-9]{3}$'), true],
  'MC': [new RegExp('^5[1-5][0-9]{14}$'), new RegExp('^[0-9]{3}$'), true],
  'AE': [new RegExp('^3[47][0-9]{13}$'), new RegExp('^[0-9]{4}$'), true],
  'DI': [new RegExp('^(30[0-5][0-9]{13}|3095[0-9]{12}|35(2[8-9][0-9]{12}|[3-8][0-9]{13})|36[0-9]{12}|3[8-9][0-9]{14}|6011(0[0-9]{11}|[2-4][0-9]{11}|74[0-9]{10}|7[7-9][0-9]{10}|8[6-9][0-9]{10}|9[0-9]{11})|62(2(12[6-9][0-9]{10}|1[3-9][0-9]{11}|[2-8][0-9]{12}|9[0-1][0-9]{11}|92[0-5][0-9]{10})|[4-6][0-9]{13}|8[2-8][0-9]{12})|6(4[4-9][0-9]{13}|5[0-9]{14}))$'), new RegExp('^[0-9]{3}$'), true],
  'JCB': [new RegExp('^(30[0-5][0-9]{13}|3095[0-9]{12}|35(2[8-9][0-9]{12}|[3-8][0-9]{13})|36[0-9]{12}|3[8-9][0-9]{14}|6011(0[0-9]{11}|[2-4][0-9]{11}|74[0-9]{10}|7[7-9][0-9]{10}|8[6-9][0-9]{10}|9[0-9]{11})|62(2(12[6-9][0-9]{10}|1[3-9][0-9]{11}|[2-8][0-9]{12}|9[0-1][0-9]{11}|92[0-5][0-9]{10})|[4-6][0-9]{13}|8[2-8][0-9]{12})|6(4[4-9][0-9]{13}|5[0-9]{14}))$'), new RegExp('^[0-9]{3,4}$'), true],
  'DICL': [new RegExp('^(30[0-5][0-9]{13}|3095[0-9]{12}|35(2[8-9][0-9]{12}|[3-8][0-9]{13})|36[0-9]{12}|3[8-9][0-9]{14}|6011(0[0-9]{11}|[2-4][0-9]{11}|74[0-9]{10}|7[7-9][0-9]{10}|8[6-9][0-9]{10}|9[0-9]{11})|62(2(12[6-9][0-9]{10}|1[3-9][0-9]{11}|[2-8][0-9]{12}|9[0-1][0-9]{11}|92[0-5][0-9]{10})|[4-6][0-9]{13}|8[2-8][0-9]{12})|6(4[4-9][0-9]{13}|5[0-9]{14}))$'), new RegExp('^[0-9]{3}$'), true],
  'SM': [new RegExp('(^(5[0678])[0-9]{11,18}$)|(^(6[^05])[0-9]{11,18}$)|(^(601)[^1][0-9]{9,16}$)|(^(6011)[0-9]{9,11}$)|(^(6011)[0-9]{13,16}$)|(^(65)[0-9]{11,13}$)|(^(65)[0-9]{15,18}$)|(^(49030)[2-9]([0-9]{10}$|[0-9]{12,13}$))|(^(49033)[5-9]([0-9]{10}$|[0-9]{12,13}$))|(^(49110)[1-2]([0-9]{10}$|[0-9]{12,13}$))|(^(49117)[4-9]([0-9]{10}$|[0-9]{12,13}$))|(^(49118)[0-2]([0-9]{10}$|[0-9]{12,13}$))|(^(4936)([0-9]{12}$|[0-9]{14,15}$))'), new RegExp('^([0-9]{3}|[0-9]{4})?$'), true],
  'OT': [false, new RegExp('^([0-9]{3}|[0-9]{4})?$'), false]
});

// script.aculo.us builder.js v1.8.2, Tue Nov 18 18:30:58 +0100 2008

// Copyright (c) 2005-2008 Thomas Fuchs (http://script.aculo.us, http://mir.aculo.us)
//
// script.aculo.us is freely distributable under the terms of an MIT-style license.
// For details, see the script.aculo.us web site: http://script.aculo.us/

var Builder = {
  NODEMAP: {
    AREA: 'map',
    CAPTION: 'table',
    COL: 'table',
    COLGROUP: 'table',
    LEGEND: 'fieldset',
    OPTGROUP: 'select',
    OPTION: 'select',
    PARAM: 'object',
    TBODY: 'table',
    TD: 'table',
    TFOOT: 'table',
    TH: 'table',
    THEAD: 'table',
    TR: 'table'
  },
  // note: For Firefox < 1.5, OPTION and OPTGROUP tags are currently broken,
  //       due to a Firefox bug
  node: function (elementName) {
    elementName = elementName.toUpperCase();

    // try innerHTML approach
    var parentTag = this.NODEMAP[elementName] || 'div';
    var parentElement = document.createElement(parentTag);
    try { // prevent IE "feature": http://dev.rubyonrails.org/ticket/2707
      parentElement.innerHTML = "<" + elementName + "></" + elementName + ">";
    } catch (e) { }
    var element = parentElement.firstChild || null;

    // see if browser added wrapping tags
    if (element && (element.tagName.toUpperCase() != elementName))
      element = element.getElementsByTagName(elementName)[0];

    // fallback to createElement approach
    if (!element) element = document.createElement(elementName);

    // abort if nothing could be created
    if (!element) return;

    // attributes (or text)
    if (arguments[1])
      if (this._isStringOrNumber(arguments[1]) ||
        (arguments[1] instanceof Array) ||
        arguments[1].tagName) {
        this._children(element, arguments[1]);
      } else {
        var attrs = this._attributes(arguments[1]);
        if (attrs.length) {
          try { // prevent IE "feature": http://dev.rubyonrails.org/ticket/2707
            parentElement.innerHTML = "<" + elementName + " " +
              attrs + "></" + elementName + ">";
          } catch (e) { }
          element = parentElement.firstChild || null;
          // workaround firefox 1.0.X bug
          if (!element) {
            element = document.createElement(elementName);
            for (attr in arguments[1])
              element[attr == 'class' ? 'className' : attr] = arguments[1][attr];
          }
          if (element.tagName.toUpperCase() != elementName)
            element = parentElement.getElementsByTagName(elementName)[0];
        }
      }

    // text, or array of children
    if (arguments[2])
      this._children(element, arguments[2]);

    return $(element);
  },
  _text: function (text) {
    return document.createTextNode(text);
  },

  ATTR_MAP: {
    'className': 'class',
    'htmlFor': 'for'
  },

  _attributes: function (attributes) {
    var attrs = [];
    for (attribute in attributes)
      attrs.push((attribute in this.ATTR_MAP ? this.ATTR_MAP[attribute] : attribute) +
        '="' + attributes[attribute].toString().escapeHTML().gsub(/"/, '&quot;') + '"');
    return attrs.join(" ");
  },
  _children: function (element, children) {
    if (children.tagName) {
      element.appendChild(children);
      return;
    }
    if (typeof children == 'object') { // array can hold nodes and text
      children.flatten().each(function (e) {
        if (typeof e == 'object')
          element.appendChild(e);
        else
          if (Builder._isStringOrNumber(e))
            element.appendChild(Builder._text(e));
      });
    } else
      if (Builder._isStringOrNumber(children))
        element.appendChild(Builder._text(children));
  },
  _isStringOrNumber: function (param) {
    return (typeof param == 'string' || typeof param == 'number');
  },
  build: function (html) {
    var element = this.node('div');
    $(element).update(html.strip());
    return element.down();
  },
  dump: function (scope) {
    if (typeof scope != 'object' && typeof scope != 'function') scope = window; //global scope

    var tags = ("A ABBR ACRONYM ADDRESS APPLET AREA B BASE BASEFONT BDO BIG BLOCKQUOTE BODY " +
      "BR BUTTON CAPTION CENTER CITE CODE COL COLGROUP DD DEL DFN DIR DIV DL DT EM FIELDSET " +
      "FONT FORM FRAME FRAMESET H1 H2 H3 H4 H5 H6 HEAD HR HTML I IFRAME IMG INPUT INS ISINDEX " +
      "KBD LABEL LEGEND LI LINK MAP MENU META NOFRAMES NOSCRIPT OBJECT OL OPTGROUP OPTION P " +
      "PARAM PRE Q S SAMP SCRIPT SELECT SMALL SPAN STRIKE STRONG STYLE SUB SUP TABLE TBODY TD " +
      "TEXTAREA TFOOT TH THEAD TITLE TR TT U UL VAR").split(/\s+/);

    tags.each(function (tag) {
      scope[tag] = function () {
        return Builder.node.apply(Builder, [tag].concat($A(arguments)));
      };
    });
  }
};
// script.aculo.us effects.js v1.8.2, Tue Nov 18 18:30:58 +0100 2008

// Copyright (c) 2005-2008 Thomas Fuchs (http://script.aculo.us, http://mir.aculo.us)
// Contributors:
//  Justin Palmer (http://encytemedia.com/)
//  Mark Pilgrim (http://diveintomark.org/)
//  Martin Bialasinki
//
// script.aculo.us is freely distributable under the terms of an MIT-style license.
// For details, see the script.aculo.us web site: http://script.aculo.us/

// converts rgb() and #xxx to #xxxxxx format,
// returns self (or first argument) if not convertable
String.prototype.parseColor = function () {
  var color = '#';
  if (this.slice(0, 4) == 'rgb(') {
    var cols = this.slice(4, this.length - 1).split(',');
    var i = 0; do { color += parseInt(cols[i]).toColorPart() } while (++i < 3);
  } else {
    if (this.slice(0, 1) == '#') {
      if (this.length == 4) for (var i = 1; i < 4; i++) color += (this.charAt(i) + this.charAt(i)).toLowerCase();
      if (this.length == 7) color = this.toLowerCase();
    }
  }
  return (color.length == 7 ? color : (arguments[0] || this));
};

/*--------------------------------------------------------------------------*/

Element.collectTextNodes = function (element) {
  return $A($(element).childNodes).collect(function (node) {
    return (node.nodeType == 3 ? node.nodeValue :
      (node.hasChildNodes() ? Element.collectTextNodes(node) : ''));
  }).flatten().join('');
};

Element.collectTextNodesIgnoreClass = function (element, className) {
  return $A($(element).childNodes).collect(function (node) {
    return (node.nodeType == 3 ? node.nodeValue :
      ((node.hasChildNodes() && !Element.hasClassName(node, className)) ?
        Element.collectTextNodesIgnoreClass(node, className) : ''));
  }).flatten().join('');
};

Element.setContentZoom = function (element, percent) {
  element = $(element);
  element.setStyle({ fontSize: (percent / 100) + 'em' });
  if (Prototype.Browser.WebKit) window.scrollBy(0, 0);
  return element;
};

Element.getInlineOpacity = function (element) {
  return $(element).style.opacity || '';
};

Element.forceRerendering = function (element) {
  try {
    element = $(element);
    var n = document.createTextNode(' ');
    element.appendChild(n);
    element.removeChild(n);
  } catch (e) { }
};

/*--------------------------------------------------------------------------*/

var Effect = {
  _elementDoesNotExistError: {
    name: 'ElementDoesNotExistError',
    message: 'The specified DOM element does not exist, but is required for this effect to operate'
  },
  Transitions: {
    linear: Prototype.K,
    sinoidal: function (pos) {
      return (-Math.cos(pos * Math.PI) / 2) + .5;
    },
    reverse: function (pos) {
      return 1 - pos;
    },
    flicker: function (pos) {
      var pos = ((-Math.cos(pos * Math.PI) / 4) + .75) + Math.random() / 4;
      return pos > 1 ? 1 : pos;
    },
    wobble: function (pos) {
      return (-Math.cos(pos * Math.PI * (9 * pos)) / 2) + .5;
    },
    pulse: function (pos, pulses) {
      return (-Math.cos((pos * ((pulses || 5) - .5) * 2) * Math.PI) / 2) + .5;
    },
    spring: function (pos) {
      return 1 - (Math.cos(pos * 4.5 * Math.PI) * Math.exp(-pos * 6));
    },
    none: function (pos) {
      return 0;
    },
    full: function (pos) {
      return 1;
    }
  },
  DefaultOptions: {
    duration: 1.0,   // seconds
    fps: 100,   // 100= assume 66fps max.
    sync: false, // true for combining
    from: 0.0,
    to: 1.0,
    delay: 0.0,
    queue: 'parallel'
  },
  tagifyText: function (element) {
    var tagifyStyle = 'position:relative';
    if (Prototype.Browser.IE) tagifyStyle += ';zoom:1';

    element = $(element);
    $A(element.childNodes).each(function (child) {
      if (child.nodeType == 3) {
        child.nodeValue.toArray().each(function (character) {
          element.insertBefore(
            new Element('span', { style: tagifyStyle }).update(
              character == ' ' ? String.fromCharCode(160) : character),
            child);
        });
        Element.remove(child);
      }
    });
  },
  multiple: function (element, effect) {
    var elements;
    if (((typeof element == 'object') ||
      Object.isFunction(element)) &&
      (element.length))
      elements = element;
    else
      elements = $(element).childNodes;

    var options = Object.extend({
      speed: 0.1,
      delay: 0.0
    }, arguments[2] || {});
    var masterDelay = options.delay;

    $A(elements).each(function (element, index) {
      new effect(element, Object.extend(options, { delay: index * options.speed + masterDelay }));
    });
  },
  PAIRS: {
    'slide': ['SlideDown', 'SlideUp'],
    'blind': ['BlindDown', 'BlindUp'],
    'appear': ['Appear', 'Fade']
  },
  toggle: function (element, effect) {
    element = $(element);
    effect = (effect || 'appear').toLowerCase();
    var options = Object.extend({
      queue: { position: 'end', scope: (element.id || 'global'), limit: 1 }
    }, arguments[2] || {});
    Effect[element.visible() ?
      Effect.PAIRS[effect][1] : Effect.PAIRS[effect][0]](element, options);
  }
};

Effect.DefaultOptions.transition = Effect.Transitions.sinoidal;

/* ------------- core effects ------------- */

Effect.ScopedQueue = Class.create(Enumerable, {
  initialize: function () {
    this.effects = [];
    this.interval = null;
  },
  _each: function (iterator) {
    this.effects._each(iterator);
  },
  add: function (effect) {
    var timestamp = new Date().getTime();

    var position = Object.isString(effect.options.queue) ?
      effect.options.queue : effect.options.queue.position;

    switch (position) {
      case 'front':
        // move unstarted effects after this effect
        this.effects.findAll(function (e) { return e.state == 'idle' }).each(function (e) {
          e.startOn += effect.finishOn;
          e.finishOn += effect.finishOn;
        });
        break;
      case 'with-last':
        timestamp = this.effects.pluck('startOn').max() || timestamp;
        break;
      case 'end':
        // start effect after last queued effect has finished
        timestamp = this.effects.pluck('finishOn').max() || timestamp;
        break;
    }

    effect.startOn += timestamp;
    effect.finishOn += timestamp;

    if (!effect.options.queue.limit || (this.effects.length < effect.options.queue.limit))
      this.effects.push(effect);

    if (!this.interval)
      this.interval = setInterval(this.loop.bind(this), 15);
  },
  remove: function (effect) {
    this.effects = this.effects.reject(function (e) { return e == effect });
    if (this.effects.length == 0) {
      clearInterval(this.interval);
      this.interval = null;
    }
  },
  loop: function () {
    var timePos = new Date().getTime();
    for (var i = 0, len = this.effects.length; i < len; i++)
      this.effects[i] && this.effects[i].loop(timePos);
  }
});

Effect.Queues = {
  instances: $H(),
  get: function (queueName) {
    if (!Object.isString(queueName)) return queueName;

    return this.instances.get(queueName) ||
      this.instances.set(queueName, new Effect.ScopedQueue());
  }
};
Effect.Queue = Effect.Queues.get('global');

Effect.Base = Class.create({
  position: null,
  start: function (options) {
    function codeForEvent(options, eventName) {
      return (
        (options[eventName + 'Internal'] ? 'this.options.' + eventName + 'Internal(this);' : '') +
        (options[eventName] ? 'this.options.' + eventName + '(this);' : '')
      );
    }
    if (options && options.transition === false) options.transition = Effect.Transitions.linear;
    this.options = Object.extend(Object.extend({}, Effect.DefaultOptions), options || {});
    this.currentFrame = 0;
    this.state = 'idle';
    this.startOn = this.options.delay * 1000;
    this.finishOn = this.startOn + (this.options.duration * 1000);
    this.fromToDelta = this.options.to - this.options.from;
    this.totalTime = this.finishOn - this.startOn;
    this.totalFrames = this.options.fps * this.options.duration;

    this.render = (function () {
      function dispatch(effect, eventName) {
        if (effect.options[eventName + 'Internal'])
          effect.options[eventName + 'Internal'](effect);
        if (effect.options[eventName])
          effect.options[eventName](effect);
      }

      return function (pos) {
        if (this.state === "idle") {
          this.state = "running";
          dispatch(this, 'beforeSetup');
          if (this.setup) this.setup();
          dispatch(this, 'afterSetup');
        }
        if (this.state === "running") {
          pos = (this.options.transition(pos) * this.fromToDelta) + this.options.from;
          this.position = pos;
          dispatch(this, 'beforeUpdate');
          if (this.update) this.update(pos);
          dispatch(this, 'afterUpdate');
        }
      };
    })();

    this.event('beforeStart');
    if (!this.options.sync)
      Effect.Queues.get(Object.isString(this.options.queue) ?
        'global' : this.options.queue.scope).add(this);
  },
  loop: function (timePos) {
    if (timePos >= this.startOn) {
      if (timePos >= this.finishOn) {
        this.render(1.0);
        this.cancel();
        this.event('beforeFinish');
        if (this.finish) this.finish();
        this.event('afterFinish');
        return;
      }
      var pos = (timePos - this.startOn) / this.totalTime,
        frame = (pos * this.totalFrames).round();
      if (frame > this.currentFrame) {
        this.render(pos);
        this.currentFrame = frame;
      }
    }
  },
  cancel: function () {
    if (!this.options.sync)
      Effect.Queues.get(Object.isString(this.options.queue) ?
        'global' : this.options.queue.scope).remove(this);
    this.state = 'finished';
  },
  event: function (eventName) {
    if (this.options[eventName + 'Internal']) this.options[eventName + 'Internal'](this);
    if (this.options[eventName]) this.options[eventName](this);
  },
  inspect: function () {
    var data = $H();
    for (property in this)
      if (!Object.isFunction(this[property])) data.set(property, this[property]);
    return '#<Effect:' + data.inspect() + ',options:' + $H(this.options).inspect() + '>';
  }
});

Effect.Parallel = Class.create(Effect.Base, {
  initialize: function (effects) {
    this.effects = effects || [];
    this.start(arguments[1]);
  },
  update: function (position) {
    this.effects.invoke('render', position);
  },
  finish: function (position) {
    this.effects.each(function (effect) {
      effect.render(1.0);
      effect.cancel();
      effect.event('beforeFinish');
      if (effect.finish) effect.finish(position);
      effect.event('afterFinish');
    });
  }
});

Effect.Tween = Class.create(Effect.Base, {
  initialize: function (object, from, to) {
    object = Object.isString(object) ? $(object) : object;
    var args = $A(arguments), method = args.last(),
      options = args.length == 5 ? args[3] : null;
    this.method = Object.isFunction(method) ? method.bind(object) :
      Object.isFunction(object[method]) ? object[method].bind(object) :
        function (value) { object[method] = value };
    this.start(Object.extend({ from: from, to: to }, options || {}));
  },
  update: function (position) {
    this.method(position);
  }
});

Effect.Event = Class.create(Effect.Base, {
  initialize: function () {
    this.start(Object.extend({ duration: 0 }, arguments[0] || {}));
  },
  update: Prototype.emptyFunction
});

Effect.Opacity = Class.create(Effect.Base, {
  initialize: function (element) {
    this.element = $(element);
    if (!this.element) throw (Effect._elementDoesNotExistError);
    // make this work on IE on elements without 'layout'
    if (Prototype.Browser.IE && (!this.element.currentStyle.hasLayout))
      this.element.setStyle({ zoom: 1 });
    var options = Object.extend({
      from: this.element.getOpacity() || 0.0,
      to: 1.0
    }, arguments[1] || {});
    this.start(options);
  },
  update: function (position) {
    this.element.setOpacity(position);
  }
});

Effect.Move = Class.create(Effect.Base, {
  initialize: function (element) {
    this.element = $(element);
    if (!this.element) throw (Effect._elementDoesNotExistError);
    var options = Object.extend({
      x: 0,
      y: 0,
      mode: 'relative'
    }, arguments[1] || {});
    this.start(options);
  },
  setup: function () {
    this.element.makePositioned();
    this.originalLeft = parseFloat(this.element.getStyle('left') || '0');
    this.originalTop = parseFloat(this.element.getStyle('top') || '0');
    if (this.options.mode == 'absolute') {
      this.options.x = this.options.x - this.originalLeft;
      this.options.y = this.options.y - this.originalTop;
    }
  },
  update: function (position) {
    this.element.setStyle({
      left: (this.options.x * position + this.originalLeft).round() + 'px',
      top: (this.options.y * position + this.originalTop).round() + 'px'
    });
  }
});

// for backwards compatibility
Effect.MoveBy = function (element, toTop, toLeft) {
  return new Effect.Move(element,
    Object.extend({ x: toLeft, y: toTop }, arguments[3] || {}));
};

Effect.Scale = Class.create(Effect.Base, {
  initialize: function (element, percent) {
    this.element = $(element);
    if (!this.element) throw (Effect._elementDoesNotExistError);
    var options = Object.extend({
      scaleX: true,
      scaleY: true,
      scaleContent: true,
      scaleFromCenter: false,
      scaleMode: 'box',        // 'box' or 'contents' or { } with provided values
      scaleFrom: 100.0,
      scaleTo: percent
    }, arguments[2] || {});
    this.start(options);
  },
  setup: function () {
    this.restoreAfterFinish = this.options.restoreAfterFinish || false;
    this.elementPositioning = this.element.getStyle('position');

    this.originalStyle = {};
    ['top', 'left', 'width', 'height', 'fontSize'].each(function (k) {
      this.originalStyle[k] = this.element.style[k];
    }.bind(this));

    this.originalTop = this.element.offsetTop;
    this.originalLeft = this.element.offsetLeft;

    var fontSize = this.element.getStyle('font-size') || '100%';
    ['em', 'px', '%', 'pt'].each(function (fontSizeType) {
      if (fontSize.indexOf(fontSizeType) > 0) {
        this.fontSize = parseFloat(fontSize);
        this.fontSizeType = fontSizeType;
      }
    }.bind(this));

    this.factor = (this.options.scaleTo - this.options.scaleFrom) / 100;

    this.dims = null;
    if (this.options.scaleMode == 'box')
      this.dims = [this.element.offsetHeight, this.element.offsetWidth];
    if (/^content/.test(this.options.scaleMode))
      this.dims = [this.element.scrollHeight, this.element.scrollWidth];
    if (!this.dims)
      this.dims = [this.options.scaleMode.originalHeight,
      this.options.scaleMode.originalWidth];
  },
  update: function (position) {
    var currentScale = (this.options.scaleFrom / 100.0) + (this.factor * position);
    if (this.options.scaleContent && this.fontSize)
      this.element.setStyle({ fontSize: this.fontSize * currentScale + this.fontSizeType });
    this.setDimensions(this.dims[0] * currentScale, this.dims[1] * currentScale);
  },
  finish: function (position) {
    if (this.restoreAfterFinish) this.element.setStyle(this.originalStyle);
  },
  setDimensions: function (height, width) {
    var d = {};
    if (this.options.scaleX) d.width = width.round() + 'px';
    if (this.options.scaleY) d.height = height.round() + 'px';
    if (this.options.scaleFromCenter) {
      var topd = (height - this.dims[0]) / 2;
      var leftd = (width - this.dims[1]) / 2;
      if (this.elementPositioning == 'absolute') {
        if (this.options.scaleY) d.top = this.originalTop - topd + 'px';
        if (this.options.scaleX) d.left = this.originalLeft - leftd + 'px';
      } else {
        if (this.options.scaleY) d.top = -topd + 'px';
        if (this.options.scaleX) d.left = -leftd + 'px';
      }
    }
    this.element.setStyle(d);
  }
});

Effect.Highlight = Class.create(Effect.Base, {
  initialize: function (element) {
    this.element = $(element);
    if (!this.element) throw (Effect._elementDoesNotExistError);
    var options = Object.extend({ startcolor: '#ffff99' }, arguments[1] || {});
    this.start(options);
  },
  setup: function () {
    // Prevent executing on elements not in the layout flow
    if (this.element.getStyle('display') == 'none') { this.cancel(); return; }
    // Disable background image during the effect
    this.oldStyle = {};
    if (!this.options.keepBackgroundImage) {
      this.oldStyle.backgroundImage = this.element.getStyle('background-image');
      this.element.setStyle({ backgroundImage: 'none' });
    }
    if (!this.options.endcolor)
      this.options.endcolor = this.element.getStyle('background-color').parseColor('#ffffff');
    if (!this.options.restorecolor)
      this.options.restorecolor = this.element.getStyle('background-color');
    // init color calculations
    this._base = $R(0, 2).map(function (i) { return parseInt(this.options.startcolor.slice(i * 2 + 1, i * 2 + 3), 16) }.bind(this));
    this._delta = $R(0, 2).map(function (i) { return parseInt(this.options.endcolor.slice(i * 2 + 1, i * 2 + 3), 16) - this._base[i] }.bind(this));
  },
  update: function (position) {
    this.element.setStyle({
      backgroundColor: $R(0, 2).inject('#', function (m, v, i) {
        return m + ((this._base[i] + (this._delta[i] * position)).round().toColorPart());
      }.bind(this))
    });
  },
  finish: function () {
    this.element.setStyle(Object.extend(this.oldStyle, {
      backgroundColor: this.options.restorecolor
    }));
  }
});

Effect.ScrollTo = function (element) {
  var options = arguments[1] || {},
    scrollOffsets = document.viewport.getScrollOffsets(),
    elementOffsets = $(element).cumulativeOffset();

  if (options.offset) elementOffsets[1] += options.offset;

  return new Effect.Tween(null,
    scrollOffsets.top,
    elementOffsets[1],
    options,
    function (p) { scrollTo(scrollOffsets.left, p.round()); }
  );
};

/* ------------- combination effects ------------- */

Effect.Fade = function (element) {
  element = $(element);
  var oldOpacity = element.getInlineOpacity();
  var options = Object.extend({
    from: element.getOpacity() || 1.0,
    to: 0.0,
    afterFinishInternal: function (effect) {
      if (effect.options.to != 0) return;
      effect.element.hide().setStyle({ opacity: oldOpacity });
    }
  }, arguments[1] || {});
  return new Effect.Opacity(element, options);
};

Effect.Appear = function (element) {
  element = $(element);
  var options = Object.extend({
    from: (element.getStyle('display') == 'none' ? 0.0 : element.getOpacity() || 0.0),
    to: 1.0,
    // force Safari to render floated elements properly
    afterFinishInternal: function (effect) {
      effect.element.forceRerendering();
    },
    beforeSetup: function (effect) {
      effect.element.setOpacity(effect.options.from).show();
    }
  }, arguments[1] || {});
  return new Effect.Opacity(element, options);
};

Effect.Puff = function (element) {
  element = $(element);
  var oldStyle = {
    opacity: element.getInlineOpacity(),
    position: element.getStyle('position'),
    top: element.style.top,
    left: element.style.left,
    width: element.style.width,
    height: element.style.height
  };
  return new Effect.Parallel(
    [new Effect.Scale(element, 200,
      { sync: true, scaleFromCenter: true, scaleContent: true, restoreAfterFinish: true }),
    new Effect.Opacity(element, { sync: true, to: 0.0 })],
    Object.extend({
      duration: 1.0,
      beforeSetupInternal: function (effect) {
        Position.absolutize(effect.effects[0].element);
      },
      afterFinishInternal: function (effect) {
        effect.effects[0].element.hide().setStyle(oldStyle);
      }
    }, arguments[1] || {})
  );
};

Effect.BlindUp = function (element) {
  element = $(element);
  element.makeClipping();
  return new Effect.Scale(element, 0,
    Object.extend({
      scaleContent: false,
      scaleX: false,
      restoreAfterFinish: true,
      afterFinishInternal: function (effect) {
        effect.element.hide().undoClipping();
      }
    }, arguments[1] || {})
  );
};

Effect.BlindDown = function (element) {
  element = $(element);
  var elementDimensions = element.getDimensions();
  return new Effect.Scale(element, 100, Object.extend({
    scaleContent: false,
    scaleX: false,
    scaleFrom: 0,
    scaleMode: { originalHeight: elementDimensions.height, originalWidth: elementDimensions.width },
    restoreAfterFinish: true,
    afterSetup: function (effect) {
      effect.element.makeClipping().setStyle({ height: '0px' }).show();
    },
    afterFinishInternal: function (effect) {
      effect.element.undoClipping();
    }
  }, arguments[1] || {}));
};

Effect.SwitchOff = function (element) {
  element = $(element);
  var oldOpacity = element.getInlineOpacity();
  return new Effect.Appear(element, Object.extend({
    duration: 0.4,
    from: 0,
    transition: Effect.Transitions.flicker,
    afterFinishInternal: function (effect) {
      new Effect.Scale(effect.element, 1, {
        duration: 0.3, scaleFromCenter: true,
        scaleX: false, scaleContent: false, restoreAfterFinish: true,
        beforeSetup: function (effect) {
          effect.element.makePositioned().makeClipping();
        },
        afterFinishInternal: function (effect) {
          effect.element.hide().undoClipping().undoPositioned().setStyle({ opacity: oldOpacity });
        }
      });
    }
  }, arguments[1] || {}));
};

Effect.DropOut = function (element) {
  element = $(element);
  var oldStyle = {
    top: element.getStyle('top'),
    left: element.getStyle('left'),
    opacity: element.getInlineOpacity()
  };
  return new Effect.Parallel(
    [new Effect.Move(element, { x: 0, y: 100, sync: true }),
    new Effect.Opacity(element, { sync: true, to: 0.0 })],
    Object.extend(
      {
        duration: 0.5,
        beforeSetup: function (effect) {
          effect.effects[0].element.makePositioned();
        },
        afterFinishInternal: function (effect) {
          effect.effects[0].element.hide().undoPositioned().setStyle(oldStyle);
        }
      }, arguments[1] || {}));
};

Effect.Shake = function (element) {
  element = $(element);
  var options = Object.extend({
    distance: 20,
    duration: 0.5
  }, arguments[1] || {});
  var distance = parseFloat(options.distance);
  var split = parseFloat(options.duration) / 10.0;
  var oldStyle = {
    top: element.getStyle('top'),
    left: element.getStyle('left')
  };
  return new Effect.Move(element,
    {
      x: distance, y: 0, duration: split, afterFinishInternal: function (effect) {
        new Effect.Move(effect.element,
          {
            x: -distance * 2, y: 0, duration: split * 2, afterFinishInternal: function (effect) {
              new Effect.Move(effect.element,
                {
                  x: distance * 2, y: 0, duration: split * 2, afterFinishInternal: function (effect) {
                    new Effect.Move(effect.element,
                      {
                        x: -distance * 2, y: 0, duration: split * 2, afterFinishInternal: function (effect) {
                          new Effect.Move(effect.element,
                            {
                              x: distance * 2, y: 0, duration: split * 2, afterFinishInternal: function (effect) {
                                new Effect.Move(effect.element,
                                  {
                                    x: -distance, y: 0, duration: split, afterFinishInternal: function (effect) {
                                      effect.element.undoPositioned().setStyle(oldStyle);
                                    }
                                  });
                              }
                            });
                        }
                      });
                  }
                });
            }
          });
      }
    });
};

Effect.SlideDown = function (element) {
  element = $(element).cleanWhitespace();
  // SlideDown need to have the content of the element wrapped in a container element with fixed height!
  var oldInnerBottom = element.down().getStyle('bottom');
  var elementDimensions = element.getDimensions();
  return new Effect.Scale(element, 100, Object.extend({
    scaleContent: false,
    scaleX: false,
    scaleFrom: window.opera ? 0 : 1,
    scaleMode: { originalHeight: elementDimensions.height, originalWidth: elementDimensions.width },
    restoreAfterFinish: true,
    afterSetup: function (effect) {
      effect.element.makePositioned();
      effect.element.down().makePositioned();
      if (window.opera) effect.element.setStyle({ top: '' });
      effect.element.makeClipping().setStyle({ height: '0px' }).show();
    },
    afterUpdateInternal: function (effect) {
      effect.element.down().setStyle({
        bottom:
          (effect.dims[0] - effect.element.clientHeight) + 'px'
      });
    },
    afterFinishInternal: function (effect) {
      effect.element.undoClipping().undoPositioned();
      effect.element.down().undoPositioned().setStyle({ bottom: oldInnerBottom });
    }
  }, arguments[1] || {})
  );
};

Effect.SlideUp = function (element) {
  element = $(element).cleanWhitespace();
  var oldInnerBottom = element.down().getStyle('bottom');
  var elementDimensions = element.getDimensions();
  return new Effect.Scale(element, window.opera ? 0 : 1,
    Object.extend({
      scaleContent: false,
      scaleX: false,
      scaleMode: 'box',
      scaleFrom: 100,
      scaleMode: { originalHeight: elementDimensions.height, originalWidth: elementDimensions.width },
      restoreAfterFinish: true,
      afterSetup: function (effect) {
        effect.element.makePositioned();
        effect.element.down().makePositioned();
        if (window.opera) effect.element.setStyle({ top: '' });
        effect.element.makeClipping().show();
      },
      afterUpdateInternal: function (effect) {
        effect.element.down().setStyle({
          bottom:
            (effect.dims[0] - effect.element.clientHeight) + 'px'
        });
      },
      afterFinishInternal: function (effect) {
        effect.element.hide().undoClipping().undoPositioned();
        effect.element.down().undoPositioned().setStyle({ bottom: oldInnerBottom });
      }
    }, arguments[1] || {})
  );
};

// Bug in opera makes the TD containing this element expand for a instance after finish
Effect.Squish = function (element) {
  return new Effect.Scale(element, window.opera ? 1 : 0, {
    restoreAfterFinish: true,
    beforeSetup: function (effect) {
      effect.element.makeClipping();
    },
    afterFinishInternal: function (effect) {
      effect.element.hide().undoClipping();
    }
  });
};

Effect.Grow = function (element) {
  element = $(element);
  var options = Object.extend({
    direction: 'center',
    moveTransition: Effect.Transitions.sinoidal,
    scaleTransition: Effect.Transitions.sinoidal,
    opacityTransition: Effect.Transitions.full
  }, arguments[1] || {});
  var oldStyle = {
    top: element.style.top,
    left: element.style.left,
    height: element.style.height,
    width: element.style.width,
    opacity: element.getInlineOpacity()
  };

  var dims = element.getDimensions();
  var initialMoveX, initialMoveY;
  var moveX, moveY;

  switch (options.direction) {
    case 'top-left':
      initialMoveX = initialMoveY = moveX = moveY = 0;
      break;
    case 'top-right':
      initialMoveX = dims.width;
      initialMoveY = moveY = 0;
      moveX = -dims.width;
      break;
    case 'bottom-left':
      initialMoveX = moveX = 0;
      initialMoveY = dims.height;
      moveY = -dims.height;
      break;
    case 'bottom-right':
      initialMoveX = dims.width;
      initialMoveY = dims.height;
      moveX = -dims.width;
      moveY = -dims.height;
      break;
    case 'center':
      initialMoveX = dims.width / 2;
      initialMoveY = dims.height / 2;
      moveX = -dims.width / 2;
      moveY = -dims.height / 2;
      break;
  }

  return new Effect.Move(element, {
    x: initialMoveX,
    y: initialMoveY,
    duration: 0.01,
    beforeSetup: function (effect) {
      effect.element.hide().makeClipping().makePositioned();
    },
    afterFinishInternal: function (effect) {
      new Effect.Parallel(
        [new Effect.Opacity(effect.element, { sync: true, to: 1.0, from: 0.0, transition: options.opacityTransition }),
        new Effect.Move(effect.element, { x: moveX, y: moveY, sync: true, transition: options.moveTransition }),
        new Effect.Scale(effect.element, 100, {
          scaleMode: { originalHeight: dims.height, originalWidth: dims.width },
          sync: true, scaleFrom: window.opera ? 1 : 0, transition: options.scaleTransition, restoreAfterFinish: true
        })
        ], Object.extend({
          beforeSetup: function (effect) {
            effect.effects[0].element.setStyle({ height: '0px' }).show();
          },
          afterFinishInternal: function (effect) {
            effect.effects[0].element.undoClipping().undoPositioned().setStyle(oldStyle);
          }
        }, options)
      );
    }
  });
};

Effect.Shrink = function (element) {
  element = $(element);
  var options = Object.extend({
    direction: 'center',
    moveTransition: Effect.Transitions.sinoidal,
    scaleTransition: Effect.Transitions.sinoidal,
    opacityTransition: Effect.Transitions.none
  }, arguments[1] || {});
  var oldStyle = {
    top: element.style.top,
    left: element.style.left,
    height: element.style.height,
    width: element.style.width,
    opacity: element.getInlineOpacity()
  };

  var dims = element.getDimensions();
  var moveX, moveY;

  switch (options.direction) {
    case 'top-left':
      moveX = moveY = 0;
      break;
    case 'top-right':
      moveX = dims.width;
      moveY = 0;
      break;
    case 'bottom-left':
      moveX = 0;
      moveY = dims.height;
      break;
    case 'bottom-right':
      moveX = dims.width;
      moveY = dims.height;
      break;
    case 'center':
      moveX = dims.width / 2;
      moveY = dims.height / 2;
      break;
  }

  return new Effect.Parallel(
    [new Effect.Opacity(element, { sync: true, to: 0.0, from: 1.0, transition: options.opacityTransition }),
    new Effect.Scale(element, window.opera ? 1 : 0, { sync: true, transition: options.scaleTransition, restoreAfterFinish: true }),
    new Effect.Move(element, { x: moveX, y: moveY, sync: true, transition: options.moveTransition })
    ], Object.extend({
      beforeStartInternal: function (effect) {
        effect.effects[0].element.makePositioned().makeClipping();
      },
      afterFinishInternal: function (effect) {
        effect.effects[0].element.hide().undoClipping().undoPositioned().setStyle(oldStyle);
      }
    }, options)
  );
};

Effect.Pulsate = function (element) {
  element = $(element);
  var options = arguments[1] || {},
    oldOpacity = element.getInlineOpacity(),
    transition = options.transition || Effect.Transitions.linear,
    reverser = function (pos) {
      return 1 - transition((-Math.cos((pos * (options.pulses || 5) * 2) * Math.PI) / 2) + .5);
    };

  return new Effect.Opacity(element,
    Object.extend(Object.extend({
      duration: 2.0, from: 0,
      afterFinishInternal: function (effect) { effect.element.setStyle({ opacity: oldOpacity }); }
    }, options), { transition: reverser }));
};

Effect.Fold = function (element) {
  element = $(element);
  var oldStyle = {
    top: element.style.top,
    left: element.style.left,
    width: element.style.width,
    height: element.style.height
  };
  element.makeClipping();
  return new Effect.Scale(element, 5, Object.extend({
    scaleContent: false,
    scaleX: false,
    afterFinishInternal: function (effect) {
      new Effect.Scale(element, 1, {
        scaleContent: false,
        scaleY: false,
        afterFinishInternal: function (effect) {
          effect.element.hide().undoClipping().setStyle(oldStyle);
        }
      });
    }
  }, arguments[1] || {}));
};

Effect.Morph = Class.create(Effect.Base, {
  initialize: function (element) {
    this.element = $(element);
    if (!this.element) throw (Effect._elementDoesNotExistError);
    var options = Object.extend({
      style: {}
    }, arguments[1] || {});

    if (!Object.isString(options.style)) this.style = $H(options.style);
    else {
      if (options.style.include(':'))
        this.style = options.style.parseStyle();
      else {
        this.element.addClassName(options.style);
        this.style = $H(this.element.getStyles());
        this.element.removeClassName(options.style);
        var css = this.element.getStyles();
        this.style = this.style.reject(function (style) {
          return style.value == css[style.key];
        });
        options.afterFinishInternal = function (effect) {
          effect.element.addClassName(effect.options.style);
          effect.transforms.each(function (transform) {
            effect.element.style[transform.style] = '';
          });
        };
      }
    }
    this.start(options);
  },

  setup: function () {
    function parseColor(color) {
      if (!color || ['rgba(0, 0, 0, 0)', 'transparent'].include(color)) color = '#ffffff';
      color = color.parseColor();
      return $R(0, 2).map(function (i) {
        return parseInt(color.slice(i * 2 + 1, i * 2 + 3), 16);
      });
    }
    this.transforms = this.style.map(function (pair) {
      var property = pair[0], value = pair[1], unit = null;

      if (value.parseColor('#zzzzzz') != '#zzzzzz') {
        value = value.parseColor();
        unit = 'color';
      } else if (property == 'opacity') {
        value = parseFloat(value);
        if (Prototype.Browser.IE && (!this.element.currentStyle.hasLayout))
          this.element.setStyle({ zoom: 1 });
      } else if (Element.CSS_LENGTH.test(value)) {
        var components = value.match(/^([\+\-]?[0-9\.]+)(.*)$/);
        value = parseFloat(components[1]);
        unit = (components.length == 3) ? components[2] : null;
      }

      var originalValue = this.element.getStyle(property);
      return {
        style: property.camelize(),
        originalValue: unit == 'color' ? parseColor(originalValue) : parseFloat(originalValue || 0),
        targetValue: unit == 'color' ? parseColor(value) : value,
        unit: unit
      };
    }.bind(this)).reject(function (transform) {
      return (
        (transform.originalValue == transform.targetValue) ||
        (
          transform.unit != 'color' &&
          (isNaN(transform.originalValue) || isNaN(transform.targetValue))
        )
      );
    });
  },
  update: function (position) {
    var style = {}, transform, i = this.transforms.length;
    while (i--)
      style[(transform = this.transforms[i]).style] =
        transform.unit == 'color' ? '#' +
          (Math.round(transform.originalValue[0] +
            (transform.targetValue[0] - transform.originalValue[0]) * position)).toColorPart() +
          (Math.round(transform.originalValue[1] +
            (transform.targetValue[1] - transform.originalValue[1]) * position)).toColorPart() +
          (Math.round(transform.originalValue[2] +
            (transform.targetValue[2] - transform.originalValue[2]) * position)).toColorPart() :
          (transform.originalValue +
            (transform.targetValue - transform.originalValue) * position).toFixed(3) +
          (transform.unit === null ? '' : transform.unit);
    this.element.setStyle(style, true);
  }
});

Effect.Transform = Class.create({
  initialize: function (tracks) {
    this.tracks = [];
    this.options = arguments[1] || {};
    this.addTracks(tracks);
  },
  addTracks: function (tracks) {
    tracks.each(function (track) {
      track = $H(track);
      var data = track.values().first();
      this.tracks.push($H({
        ids: track.keys().first(),
        effect: Effect.Morph,
        options: { style: data }
      }));
    }.bind(this));
    return this;
  },
  play: function () {
    return new Effect.Parallel(
      this.tracks.map(function (track) {
        var ids = track.get('ids'), effect = track.get('effect'), options = track.get('options');
        var elements = [$(ids) || $$(ids)].flatten();
        return elements.map(function (e) { return new effect(e, Object.extend({ sync: true }, options)) });
      }).flatten(),
      this.options
    );
  }
});

Element.CSS_PROPERTIES = $w(
  'backgroundColor backgroundPosition borderBottomColor borderBottomStyle ' +
  'borderBottomWidth borderLeftColor borderLeftStyle borderLeftWidth ' +
  'borderRightColor borderRightStyle borderRightWidth borderSpacing ' +
  'borderTopColor borderTopStyle borderTopWidth bottom clip color ' +
  'fontSize fontWeight height left letterSpacing lineHeight ' +
  'marginBottom marginLeft marginRight marginTop markerOffset maxHeight ' +
  'maxWidth minHeight minWidth opacity outlineColor outlineOffset ' +
  'outlineWidth paddingBottom paddingLeft paddingRight paddingTop ' +
  'right textIndent top width wordSpacing zIndex');

Element.CSS_LENGTH = /^(([\+\-]?[0-9\.]+)(em|ex|px|in|cm|mm|pt|pc|\%))|0$/;

String.__parseStyleElement = document.createElement('div');
String.prototype.parseStyle = function () {
  var style, styleRules = $H();
  if (Prototype.Browser.WebKit)
    style = new Element('div', { style: this }).style;
  else {
    String.__parseStyleElement.innerHTML = '<div style="' + this + '"></div>';
    style = String.__parseStyleElement.childNodes[0].style;
  }

  Element.CSS_PROPERTIES.each(function (property) {
    if (style[property]) styleRules.set(property, style[property]);
  });

  if (Prototype.Browser.IE && this.include('opacity'))
    styleRules.set('opacity', this.match(/opacity:\s*((?:0|1)?(?:\.\d*)?)/)[1]);

  return styleRules;
};

if (document.defaultView && document.defaultView.getComputedStyle) {
  Element.getStyles = function (element) {
    var css = document.defaultView.getComputedStyle($(element), null);
    return Element.CSS_PROPERTIES.inject({}, function (styles, property) {
      styles[property] = css[property];
      return styles;
    });
  };
} else {
  Element.getStyles = function (element) {
    element = $(element);
    var css = element.currentStyle, styles;
    styles = Element.CSS_PROPERTIES.inject({}, function (results, property) {
      results[property] = css[property];
      return results;
    });
    if (!styles.opacity) styles.opacity = element.getOpacity();
    return styles;
  };
}

Effect.Methods = {
  morph: function (element, style) {
    element = $(element);
    new Effect.Morph(element, Object.extend({ style: style }, arguments[2] || {}));
    return element;
  },
  visualEffect: function (element, effect, options) {
    element = $(element);
    var s = effect.dasherize().camelize(), klass = s.charAt(0).toUpperCase() + s.substring(1);
    new Effect[klass](element, options);
    return element;
  },
  highlight: function (element, options) {
    element = $(element);
    new Effect.Highlight(element, options);
    return element;
  }
};

$w('fade appear grow shrink fold blindUp blindDown slideUp slideDown ' +
  'pulsate shake puff squish switchOff dropOut').each(
    function (effect) {
      Effect.Methods[effect] = function (element, options) {
        element = $(element);
        Effect[effect.charAt(0).toUpperCase() + effect.substring(1)](element, options);
        return element;
      };
    }
  );

$w('getInlineOpacity forceRerendering setContentZoom collectTextNodes collectTextNodesIgnoreClass getStyles').each(
  function (f) { Effect.Methods[f] = Element[f]; }
);

Element.addMethods(Effect.Methods);
// script.aculo.us dragdrop.js v1.9.0, Thu Dec 23 16:54:48 -0500 2010

// Copyright (c) 2005-2010 Thomas Fuchs (http://script.aculo.us, http://mir.aculo.us)
//
// script.aculo.us is freely distributable under the terms of an MIT-style license.
// For details, see the script.aculo.us web site: http://script.aculo.us/

if (Object.isUndefined(Effect))
  throw ("dragdrop.js requires including script.aculo.us' effects.js library");

var Droppables = {
  drops: [],

  remove: function (element) {
    this.drops = this.drops.reject(function (d) { return d.element == $(element) });
  },

  add: function (element) {
    element = $(element);
    var options = Object.extend({
      greedy: true,
      hoverclass: null,
      tree: false
    }, arguments[1] || {});

    // cache containers
    if (options.containment) {
      options._containers = [];
      var containment = options.containment;
      if (Object.isArray(containment)) {
        containment.each(function (c) { options._containers.push($(c)) });
      } else {
        options._containers.push($(containment));
      }
    }

    if (options.accept) options.accept = [options.accept].flatten();

    Element.makePositioned(element); // fix IE
    options.element = element;

    this.drops.push(options);
  },

  findDeepestChild: function (drops) {
    deepest = drops[0];

    for (i = 1; i < drops.length; ++i)
      if (Element.isParent(drops[i].element, deepest.element))
        deepest = drops[i];

    return deepest;
  },

  isContained: function (element, drop) {
    var containmentNode;
    if (drop.tree) {
      containmentNode = element.treeNode;
    } else {
      containmentNode = element.parentNode;
    }
    return drop._containers.detect(function (c) { return containmentNode == c });
  },

  isAffected: function (point, element, drop) {
    return (
      (drop.element != element) &&
      ((!drop._containers) ||
        this.isContained(element, drop)) &&
      ((!drop.accept) ||
        (Element.classNames(element).detect(
          function (v) { return drop.accept.include(v) }))) &&
      Position.within(drop.element, point[0], point[1]));
  },

  deactivate: function (drop) {
    if (drop.hoverclass)
      Element.removeClassName(drop.element, drop.hoverclass);
    this.last_active = null;
  },

  activate: function (drop) {
    if (drop.hoverclass)
      Element.addClassName(drop.element, drop.hoverclass);
    this.last_active = drop;
  },

  show: function (point, element) {
    if (!this.drops.length) return;
    var drop, affected = [];

    this.drops.each(function (drop) {
      if (Droppables.isAffected(point, element, drop))
        affected.push(drop);
    });

    if (affected.length > 0)
      drop = Droppables.findDeepestChild(affected);

    if (this.last_active && this.last_active != drop) this.deactivate(this.last_active);
    if (drop) {
      Position.within(drop.element, point[0], point[1]);
      if (drop.onHover)
        drop.onHover(element, drop.element, Position.overlap(drop.overlap, drop.element));

      if (drop != this.last_active) Droppables.activate(drop);
    }
  },

  fire: function (event, element) {
    if (!this.last_active) return;
    Position.prepare();

    if (this.isAffected([Event.pointerX(event), Event.pointerY(event)], element, this.last_active))
      if (this.last_active.onDrop) {
        this.last_active.onDrop(element, this.last_active.element, event);
        return true;
      }
  },

  reset: function () {
    if (this.last_active)
      this.deactivate(this.last_active);
  }
};

var Draggables = {
  drags: [],
  observers: [],

  register: function (draggable) {
    if (this.drags.length == 0) {
      this.eventMouseUp = this.endDrag.bindAsEventListener(this);
      this.eventMouseMove = this.updateDrag.bindAsEventListener(this);
      this.eventKeypress = this.keyPress.bindAsEventListener(this);

      Event.observe(document, "mouseup", this.eventMouseUp);
      Event.observe(document, "mousemove", this.eventMouseMove);
      Event.observe(document, "keypress", this.eventKeypress);
    }
    this.drags.push(draggable);
  },

  unregister: function (draggable) {
    this.drags = this.drags.reject(function (d) { return d == draggable });
    if (this.drags.length == 0) {
      Event.stopObserving(document, "mouseup", this.eventMouseUp);
      Event.stopObserving(document, "mousemove", this.eventMouseMove);
      Event.stopObserving(document, "keypress", this.eventKeypress);
    }
  },

  activate: function (draggable) {
    if (draggable.options.delay) {
      this._timeout = setTimeout(function () {
        Draggables._timeout = null;
        window.focus();
        Draggables.activeDraggable = draggable;
      }.bind(this), draggable.options.delay);
    } else {
      window.focus(); // allows keypress events if window isn't currently focused, fails for Safari
      this.activeDraggable = draggable;
    }
  },

  deactivate: function () {
    this.activeDraggable = null;
  },

  updateDrag: function (event) {
    if (!this.activeDraggable) return;
    var pointer = [Event.pointerX(event), Event.pointerY(event)];
    // Mozilla-based browsers fire successive mousemove events with
    // the same coordinates, prevent needless redrawing (moz bug?)
    if (this._lastPointer && (this._lastPointer.inspect() == pointer.inspect())) return;
    this._lastPointer = pointer;

    this.activeDraggable.updateDrag(event, pointer);
  },

  endDrag: function (event) {
    if (this._timeout) {
      clearTimeout(this._timeout);
      this._timeout = null;
    }
    if (!this.activeDraggable) return;
    this._lastPointer = null;
    this.activeDraggable.endDrag(event);
    this.activeDraggable = null;
  },

  keyPress: function (event) {
    if (this.activeDraggable)
      this.activeDraggable.keyPress(event);
  },

  addObserver: function (observer) {
    this.observers.push(observer);
    this._cacheObserverCallbacks();
  },

  removeObserver: function (element) {  // element instead of observer fixes mem leaks
    this.observers = this.observers.reject(function (o) { return o.element == element });
    this._cacheObserverCallbacks();
  },

  notify: function (eventName, draggable, event) {  // 'onStart', 'onEnd', 'onDrag'
    if (this[eventName + 'Count'] > 0)
      this.observers.each(function (o) {
        if (o[eventName]) o[eventName](eventName, draggable, event);
      });
    if (draggable.options[eventName]) draggable.options[eventName](draggable, event);
  },

  _cacheObserverCallbacks: function () {
    ['onStart', 'onEnd', 'onDrag'].each(function (eventName) {
      Draggables[eventName + 'Count'] = Draggables.observers.select(
        function (o) { return o[eventName]; }
      ).length;
    });
  }
};

/*--------------------------------------------------------------------------*/

var Draggable = Class.create({
  initialize: function (element) {
    var defaults = {
      handle: false,
      reverteffect: function (element, top_offset, left_offset) {
        var dur = Math.sqrt(Math.abs(top_offset ^ 2) + Math.abs(left_offset ^ 2)) * 0.02;
        new Effect.Move(element, {
          x: -left_offset, y: -top_offset, duration: dur,
          queue: { scope: '_draggable', position: 'end' }
        });
      },
      endeffect: function (element) {
        var toOpacity = Object.isNumber(element._opacity) ? element._opacity : 1.0;
        new Effect.Opacity(element, {
          duration: 0.2, from: 0.7, to: toOpacity,
          queue: { scope: '_draggable', position: 'end' },
          afterFinish: function () {
            Draggable._dragging[element] = false
          }
        });
      },
      zindex: 1000,
      revert: false,
      quiet: false,
      scroll: false,
      scrollSensitivity: 20,
      scrollSpeed: 15,
      snap: false,  // false, or xy or [x,y] or function(x,y){ return [x,y] }
      delay: 0
    };

    if (!arguments[1] || Object.isUndefined(arguments[1].endeffect))
      Object.extend(defaults, {
        starteffect: function (element) {
          element._opacity = Element.getOpacity(element);
          Draggable._dragging[element] = true;
          new Effect.Opacity(element, { duration: 0.2, from: element._opacity, to: 0.7 });
        }
      });

    var options = Object.extend(defaults, arguments[1] || {});

    this.element = $(element);

    if (options.handle && Object.isString(options.handle))
      this.handle = this.element.down('.' + options.handle, 0);

    if (!this.handle) this.handle = $(options.handle);
    if (!this.handle) this.handle = this.element;

    if (options.scroll && !options.scroll.scrollTo && !options.scroll.outerHTML) {
      options.scroll = $(options.scroll);
      this._isScrollChild = Element.childOf(this.element, options.scroll);
    }

    Element.makePositioned(this.element); // fix IE

    this.options = options;
    this.dragging = false;

    this.eventMouseDown = this.initDrag.bindAsEventListener(this);
    Event.observe(this.handle, "mousedown", this.eventMouseDown);

    Draggables.register(this);
  },

  destroy: function () {
    Event.stopObserving(this.handle, "mousedown", this.eventMouseDown);
    Draggables.unregister(this);
  },

  currentDelta: function () {
    return ([
      parseInt(Element.getStyle(this.element, 'left') || '0'),
      parseInt(Element.getStyle(this.element, 'top') || '0')]);
  },

  initDrag: function (event) {
    if (!Object.isUndefined(Draggable._dragging[this.element]) &&
      Draggable._dragging[this.element]) return;
    if (Event.isLeftClick(event)) {
      // abort on form elements, fixes a Firefox issue
      var src = Event.element(event);
      if ((tag_name = src.tagName.toUpperCase()) && (
        tag_name == 'INPUT' ||
        tag_name == 'SELECT' ||
        tag_name == 'OPTION' ||
        tag_name == 'BUTTON' ||
        tag_name == 'TEXTAREA')) return;

      var pointer = [Event.pointerX(event), Event.pointerY(event)];
      var pos = this.element.cumulativeOffset();
      this.offset = [0, 1].map(function (i) { return (pointer[i] - pos[i]) });

      Draggables.activate(this);
      Event.stop(event);
    }
  },

  startDrag: function (event) {
    this.dragging = true;
    if (!this.delta)
      this.delta = this.currentDelta();

    if (this.options.zindex) {
      this.originalZ = parseInt(Element.getStyle(this.element, 'z-index') || 0);
      this.element.style.zIndex = this.options.zindex;
    }

    if (this.options.ghosting) {
      this._clone = this.element.cloneNode(true);
      this._originallyAbsolute = (this.element.getStyle('position') == 'absolute');
      if (!this._originallyAbsolute)
        Position.absolutize(this.element);
      this.element.parentNode.insertBefore(this._clone, this.element);
    }

    if (this.options.scroll) {
      if (this.options.scroll == window) {
        var where = this._getWindowScroll(this.options.scroll);
        this.originalScrollLeft = where.left;
        this.originalScrollTop = where.top;
      } else {
        this.originalScrollLeft = this.options.scroll.scrollLeft;
        this.originalScrollTop = this.options.scroll.scrollTop;
      }
    }

    Draggables.notify('onStart', this, event);

    if (this.options.starteffect) this.options.starteffect(this.element);
  },

  updateDrag: function (event, pointer) {
    if (!this.dragging) this.startDrag(event);

    if (!this.options.quiet) {
      Position.prepare();
      Droppables.show(pointer, this.element);
    }

    Draggables.notify('onDrag', this, event);

    this.draw(pointer);
    if (this.options.change) this.options.change(this);

    if (this.options.scroll) {
      this.stopScrolling();

      var p;
      if (this.options.scroll == window) {
        with (this._getWindowScroll(this.options.scroll)) { p = [left, top, left + width, top + height]; }
      } else {
        p = Position.page(this.options.scroll).toArray();
        p[0] += this.options.scroll.scrollLeft + Position.deltaX;
        p[1] += this.options.scroll.scrollTop + Position.deltaY;
        p.push(p[0] + this.options.scroll.offsetWidth);
        p.push(p[1] + this.options.scroll.offsetHeight);
      }
      var speed = [0, 0];
      if (pointer[0] < (p[0] + this.options.scrollSensitivity)) speed[0] = pointer[0] - (p[0] + this.options.scrollSensitivity);
      if (pointer[1] < (p[1] + this.options.scrollSensitivity)) speed[1] = pointer[1] - (p[1] + this.options.scrollSensitivity);
      if (pointer[0] > (p[2] - this.options.scrollSensitivity)) speed[0] = pointer[0] - (p[2] - this.options.scrollSensitivity);
      if (pointer[1] > (p[3] - this.options.scrollSensitivity)) speed[1] = pointer[1] - (p[3] - this.options.scrollSensitivity);
      this.startScrolling(speed);
    }

    // fix AppleWebKit rendering
    if (Prototype.Browser.WebKit) window.scrollBy(0, 0);

    Event.stop(event);
  },

  finishDrag: function (event, success) {
    this.dragging = false;

    if (this.options.quiet) {
      Position.prepare();
      var pointer = [Event.pointerX(event), Event.pointerY(event)];
      Droppables.show(pointer, this.element);
    }

    if (this.options.ghosting) {
      if (!this._originallyAbsolute)
        Position.relativize(this.element);
      delete this._originallyAbsolute;
      Element.remove(this._clone);
      this._clone = null;
    }

    var dropped = false;
    if (success) {
      dropped = Droppables.fire(event, this.element);
      if (!dropped) dropped = false;
    }
    if (dropped && this.options.onDropped) this.options.onDropped(this.element);
    Draggables.notify('onEnd', this, event);

    var revert = this.options.revert;
    if (revert && Object.isFunction(revert)) revert = revert(this.element);

    var d = this.currentDelta();
    if (revert && this.options.reverteffect) {
      if (dropped == 0 || revert != 'failure')
        this.options.reverteffect(this.element,
          d[1] - this.delta[1], d[0] - this.delta[0]);
    } else {
      this.delta = d;
    }

    if (this.options.zindex)
      this.element.style.zIndex = this.originalZ;

    if (this.options.endeffect)
      this.options.endeffect(this.element);

    Draggables.deactivate(this);
    Droppables.reset();
  },

  keyPress: function (event) {
    if (event.keyCode != Event.KEY_ESC) return;
    this.finishDrag(event, false);
    Event.stop(event);
  },

  endDrag: function (event) {
    if (!this.dragging) return;
    this.stopScrolling();
    this.finishDrag(event, true);
    Event.stop(event);
  },

  draw: function (point) {
    var pos = this.element.cumulativeOffset();
    if (this.options.ghosting) {
      var r = Position.realOffset(this.element);
      pos[0] += r[0] - Position.deltaX; pos[1] += r[1] - Position.deltaY;
    }

    var d = this.currentDelta();
    pos[0] -= d[0]; pos[1] -= d[1];

    if (this.options.scroll && (this.options.scroll != window && this._isScrollChild)) {
      pos[0] -= this.options.scroll.scrollLeft - this.originalScrollLeft;
      pos[1] -= this.options.scroll.scrollTop - this.originalScrollTop;
    }

    var p = [0, 1].map(function (i) {
      return (point[i] - pos[i] - this.offset[i])
    }.bind(this));

    if (this.options.snap) {
      if (Object.isFunction(this.options.snap)) {
        p = this.options.snap(p[0], p[1], this);
      } else {
        if (Object.isArray(this.options.snap)) {
          p = p.map(function (v, i) {
            return (v / this.options.snap[i]).round() * this.options.snap[i]
          }.bind(this));
        } else {
          p = p.map(function (v) {
            return (v / this.options.snap).round() * this.options.snap
          }.bind(this));
        }
      }
    }

    var style = this.element.style;
    if ((!this.options.constraint) || (this.options.constraint == 'horizontal'))
      style.left = p[0] + "px";
    if ((!this.options.constraint) || (this.options.constraint == 'vertical'))
      style.top = p[1] + "px";

    if (style.visibility == "hidden") style.visibility = ""; // fix gecko rendering
  },

  stopScrolling: function () {
    if (this.scrollInterval) {
      clearInterval(this.scrollInterval);
      this.scrollInterval = null;
      Draggables._lastScrollPointer = null;
    }
  },

  startScrolling: function (speed) {
    if (!(speed[0] || speed[1])) return;
    this.scrollSpeed = [speed[0] * this.options.scrollSpeed, speed[1] * this.options.scrollSpeed];
    this.lastScrolled = new Date();
    this.scrollInterval = setInterval(this.scroll.bind(this), 10);
  },

  scroll: function () {
    var current = new Date();
    var delta = current - this.lastScrolled;
    this.lastScrolled = current;
    if (this.options.scroll == window) {
      with (this._getWindowScroll(this.options.scroll)) {
        if (this.scrollSpeed[0] || this.scrollSpeed[1]) {
          var d = delta / 1000;
          this.options.scroll.scrollTo(left + d * this.scrollSpeed[0], top + d * this.scrollSpeed[1]);
        }
      }
    } else {
      this.options.scroll.scrollLeft += this.scrollSpeed[0] * delta / 1000;
      this.options.scroll.scrollTop += this.scrollSpeed[1] * delta / 1000;
    }

    Position.prepare();
    Droppables.show(Draggables._lastPointer, this.element);
    Draggables.notify('onDrag', this);
    if (this._isScrollChild) {
      Draggables._lastScrollPointer = Draggables._lastScrollPointer || $A(Draggables._lastPointer);
      Draggables._lastScrollPointer[0] += this.scrollSpeed[0] * delta / 1000;
      Draggables._lastScrollPointer[1] += this.scrollSpeed[1] * delta / 1000;
      if (Draggables._lastScrollPointer[0] < 0)
        Draggables._lastScrollPointer[0] = 0;
      if (Draggables._lastScrollPointer[1] < 0)
        Draggables._lastScrollPointer[1] = 0;
      this.draw(Draggables._lastScrollPointer);
    }

    if (this.options.change) this.options.change(this);
  },

  _getWindowScroll: function (w) {
    var T, L, W, H;
    with (w.document) {
      if (w.document.documentElement && documentElement.scrollTop) {
        T = documentElement.scrollTop;
        L = documentElement.scrollLeft;
      } else if (w.document.body) {
        T = body.scrollTop;
        L = body.scrollLeft;
      }
      if (w.innerWidth) {
        W = w.innerWidth;
        H = w.innerHeight;
      } else if (w.document.documentElement && documentElement.clientWidth) {
        W = documentElement.clientWidth;
        H = documentElement.clientHeight;
      } else {
        W = body.offsetWidth;
        H = body.offsetHeight;
      }
    }
    return { top: T, left: L, width: W, height: H };
  }
});

Draggable._dragging = {};

/*--------------------------------------------------------------------------*/

var SortableObserver = Class.create({
  initialize: function (element, observer) {
    this.element = $(element);
    this.observer = observer;
    this.lastValue = Sortable.serialize(this.element);
  },

  onStart: function () {
    this.lastValue = Sortable.serialize(this.element);
  },

  onEnd: function () {
    Sortable.unmark();
    if (this.lastValue != Sortable.serialize(this.element))
      this.observer(this.element)
  }
});

var Sortable = {
  SERIALIZE_RULE: /^[^_\-](?:[A-Za-z0-9\-\_]*)[_](.*)$/,

  sortables: {},

  _findRootElement: function (element) {
    while (element.tagName.toUpperCase() != "BODY") {
      if (element.id && Sortable.sortables[element.id]) return element;
      element = element.parentNode;
    }
  },

  options: function (element) {
    element = Sortable._findRootElement($(element));
    if (!element) return;
    return Sortable.sortables[element.id];
  },

  destroy: function (element) {
    element = $(element);
    var s = Sortable.sortables[element.id];

    if (s) {
      Draggables.removeObserver(s.element);
      s.droppables.each(function (d) { Droppables.remove(d) });
      s.draggables.invoke('destroy');

      delete Sortable.sortables[s.element.id];
    }
  },

  create: function (element) {
    element = $(element);
    var options = Object.extend({
      element: element,
      tag: 'li',       // assumes li children, override with tag: 'tagname'
      dropOnEmpty: false,
      tree: false,
      treeTag: 'ul',
      overlap: 'vertical', // one of 'vertical', 'horizontal'
      constraint: 'vertical', // one of 'vertical', 'horizontal', false
      containment: element,    // also takes array of elements (or id's); or false
      handle: false,      // or a CSS class
      only: false,
      delay: 0,
      hoverclass: null,
      ghosting: false,
      quiet: false,
      scroll: false,
      scrollSensitivity: 20,
      scrollSpeed: 15,
      format: this.SERIALIZE_RULE,

      // these take arrays of elements or ids and can be
      // used for better initialization performance
      elements: false,
      handles: false,

      onChange: Prototype.emptyFunction,
      onUpdate: Prototype.emptyFunction
    }, arguments[1] || {});

    // clear any old sortable with same element
    this.destroy(element);

    // build options for the draggables
    var options_for_draggable = {
      revert: true,
      quiet: options.quiet,
      scroll: options.scroll,
      scrollSpeed: options.scrollSpeed,
      scrollSensitivity: options.scrollSensitivity,
      delay: options.delay,
      ghosting: options.ghosting,
      constraint: options.constraint,
      handle: options.handle
    };

    if (options.starteffect)
      options_for_draggable.starteffect = options.starteffect;

    if (options.reverteffect)
      options_for_draggable.reverteffect = options.reverteffect;
    else
      if (options.ghosting) options_for_draggable.reverteffect = function (element) {
        element.style.top = 0;
        element.style.left = 0;
      };

    if (options.endeffect)
      options_for_draggable.endeffect = options.endeffect;

    if (options.zindex)
      options_for_draggable.zindex = options.zindex;

    // build options for the droppables
    var options_for_droppable = {
      overlap: options.overlap,
      containment: options.containment,
      tree: options.tree,
      hoverclass: options.hoverclass,
      onHover: Sortable.onHover
    };

    var options_for_tree = {
      onHover: Sortable.onEmptyHover,
      overlap: options.overlap,
      containment: options.containment,
      hoverclass: options.hoverclass
    };

    // fix for gecko engine
    Element.cleanWhitespace(element);

    options.draggables = [];
    options.droppables = [];

    // drop on empty handling
    if (options.dropOnEmpty || options.tree) {
      Droppables.add(element, options_for_tree);
      options.droppables.push(element);
    }

    (options.elements || this.findElements(element, options) || []).each(function (e, i) {
      var handle = options.handles ? $(options.handles[i]) :
        (options.handle ? $(e).select('.' + options.handle)[0] : e);
      options.draggables.push(
        new Draggable(e, Object.extend(options_for_draggable, { handle: handle })));
      Droppables.add(e, options_for_droppable);
      if (options.tree) e.treeNode = element;
      options.droppables.push(e);
    });

    if (options.tree) {
      (Sortable.findTreeElements(element, options) || []).each(function (e) {
        Droppables.add(e, options_for_tree);
        e.treeNode = element;
        options.droppables.push(e);
      });
    }

    // keep reference
    this.sortables[element.identify()] = options;

    // for onupdate
    Draggables.addObserver(new SortableObserver(element, options.onUpdate));

  },

  // return all suitable-for-sortable elements in a guaranteed order
  findElements: function (element, options) {
    return Element.findChildren(
      element, options.only, options.tree ? true : false, options.tag);
  },

  findTreeElements: function (element, options) {
    return Element.findChildren(
      element, options.only, options.tree ? true : false, options.treeTag);
  },

  onHover: function (element, dropon, overlap) {
    if (Element.isParent(dropon, element)) return;

    if (overlap > .33 && overlap < .66 && Sortable.options(dropon).tree) {
      return;
    } else if (overlap > 0.5) {
      Sortable.mark(dropon, 'before');
      if (dropon.previousSibling != element) {
        var oldParentNode = element.parentNode;
        element.style.visibility = "hidden"; // fix gecko rendering
        dropon.parentNode.insertBefore(element, dropon);
        if (dropon.parentNode != oldParentNode)
          Sortable.options(oldParentNode).onChange(element);
        Sortable.options(dropon.parentNode).onChange(element);
      }
    } else {
      Sortable.mark(dropon, 'after');
      var nextElement = dropon.nextSibling || null;
      if (nextElement != element) {
        var oldParentNode = element.parentNode;
        element.style.visibility = "hidden"; // fix gecko rendering
        dropon.parentNode.insertBefore(element, nextElement);
        if (dropon.parentNode != oldParentNode)
          Sortable.options(oldParentNode).onChange(element);
        Sortable.options(dropon.parentNode).onChange(element);
      }
    }
  },

  onEmptyHover: function (element, dropon, overlap) {
    var oldParentNode = element.parentNode;
    var droponOptions = Sortable.options(dropon);

    if (!Element.isParent(dropon, element)) {
      var index;

      var children = Sortable.findElements(dropon, { tag: droponOptions.tag, only: droponOptions.only });
      var child = null;

      if (children) {
        var offset = Element.offsetSize(dropon, droponOptions.overlap) * (1.0 - overlap);

        for (index = 0; index < children.length; index += 1) {
          if (offset - Element.offsetSize(children[index], droponOptions.overlap) >= 0) {
            offset -= Element.offsetSize(children[index], droponOptions.overlap);
          } else if (offset - (Element.offsetSize(children[index], droponOptions.overlap) / 2) >= 0) {
            child = index + 1 < children.length ? children[index + 1] : null;
            break;
          } else {
            child = children[index];
            break;
          }
        }
      }

      dropon.insertBefore(element, child);

      Sortable.options(oldParentNode).onChange(element);
      droponOptions.onChange(element);
    }
  },

  unmark: function () {
    if (Sortable._marker) Sortable._marker.hide();
  },

  mark: function (dropon, position) {
    // mark on ghosting only
    var sortable = Sortable.options(dropon.parentNode);
    if (sortable && !sortable.ghosting) return;

    if (!Sortable._marker) {
      Sortable._marker =
        ($('dropmarker') || Element.extend(document.createElement('DIV'))).
          hide().addClassName('dropmarker').setStyle({ position: 'absolute' });
      document.getElementsByTagName("body").item(0).appendChild(Sortable._marker);
    }
    var offsets = dropon.cumulativeOffset();
    Sortable._marker.setStyle({ left: offsets[0] + 'px', top: offsets[1] + 'px' });

    if (position == 'after')
      if (sortable.overlap == 'horizontal')
        Sortable._marker.setStyle({ left: (offsets[0] + dropon.clientWidth) + 'px' });
      else
        Sortable._marker.setStyle({ top: (offsets[1] + dropon.clientHeight) + 'px' });

    Sortable._marker.show();
  },

  _tree: function (element, options, parent) {
    var children = Sortable.findElements(element, options) || [];

    for (var i = 0; i < children.length; ++i) {
      var match = children[i].id.match(options.format);

      if (!match) continue;

      var child = {
        id: encodeURIComponent(match ? match[1] : null),
        element: element,
        parent: parent,
        children: [],
        position: parent.children.length,
        container: $(children[i]).down(options.treeTag)
      };

      /* Get the element containing the children and recurse over it */
      if (child.container)
        this._tree(child.container, options, child);

      parent.children.push(child);
    }

    return parent;
  },

  tree: function (element) {
    element = $(element);
    var sortableOptions = this.options(element);
    var options = Object.extend({
      tag: sortableOptions.tag,
      treeTag: sortableOptions.treeTag,
      only: sortableOptions.only,
      name: element.id,
      format: sortableOptions.format
    }, arguments[1] || {});

    var root = {
      id: null,
      parent: null,
      children: [],
      container: element,
      position: 0
    };

    return Sortable._tree(element, options, root);
  },

  /* Construct a [i] index for a particular node */
  _constructIndex: function (node) {
    var index = '';
    do {
      if (node.id) index = '[' + node.position + ']' + index;
    } while ((node = node.parent) != null);
    return index;
  },

  sequence: function (element) {
    element = $(element);
    var options = Object.extend(this.options(element), arguments[1] || {});

    return $(this.findElements(element, options) || []).map(function (item) {
      return item.id.match(options.format) ? item.id.match(options.format)[1] : '';
    });
  },

  setSequence: function (element, new_sequence) {
    element = $(element);
    var options = Object.extend(this.options(element), arguments[2] || {});

    var nodeMap = {};
    this.findElements(element, options).each(function (n) {
      if (n.id.match(options.format))
        nodeMap[n.id.match(options.format)[1]] = [n, n.parentNode];
      n.parentNode.removeChild(n);
    });

    new_sequence.each(function (ident) {
      var n = nodeMap[ident];
      if (n) {
        n[1].appendChild(n[0]);
        delete nodeMap[ident];
      }
    });
  },

  serialize: function (element) {
    element = $(element);
    var options = Object.extend(Sortable.options(element), arguments[1] || {});
    var name = encodeURIComponent(
      (arguments[1] && arguments[1].name) ? arguments[1].name : element.id);

    if (options.tree) {
      return Sortable.tree(element, arguments[1]).children.map(function (item) {
        return [name + Sortable._constructIndex(item) + "[id]=" +
          encodeURIComponent(item.id)].concat(item.children.map(arguments.callee));
      }).flatten().join('&');
    } else {
      return Sortable.sequence(element, arguments[1]).map(function (item) {
        return name + "[]=" + encodeURIComponent(item);
      }).join('&');
    }
  }
};

// Returns true if child is contained within element
Element.isParent = function (child, element) {
  if (!child.parentNode || child == element) return false;
  if (child.parentNode == element) return true;
  return Element.isParent(child.parentNode, element);
};

Element.findChildren = function (element, only, recursive, tagName) {
  if (!element.hasChildNodes()) return null;
  tagName = tagName.toUpperCase();
  if (only) only = [only].flatten();
  var elements = [];
  $A(element.childNodes).each(function (e) {
    if (e.tagName && e.tagName.toUpperCase() == tagName &&
      (!only || (Element.classNames(e).detect(function (v) { return only.include(v) }))))
      elements.push(e);
    if (recursive) {
      var grandchildren = Element.findChildren(e, only, recursive, tagName);
      if (grandchildren) elements.push(grandchildren);
    }
  });

  return (elements.length > 0 ? elements.flatten() : []);
};

Element.offsetSize = function (element, type) {
  return element['offset' + ((type == 'vertical' || type == 'height') ? 'Height' : 'Width')];
};
// script.aculo.us controls.js v1.8.2, Tue Nov 18 18:30:58 +0100 2008

// Copyright (c) 2005-2008 Thomas Fuchs (http://script.aculo.us, http://mir.aculo.us)
//           (c) 2005-2008 Ivan Krstic (http://blogs.law.harvard.edu/ivan)
//           (c) 2005-2008 Jon Tirsen (http://www.tirsen.com)
// Contributors:
//  Richard Livsey
//  Rahul Bhargava
//  Rob Wills
//
// script.aculo.us is freely distributable under the terms of an MIT-style license.
// For details, see the script.aculo.us web site: http://script.aculo.us/

// Autocompleter.Base handles all the autocompletion functionality
// that's independent of the data source for autocompletion. This
// includes drawing the autocompletion menu, observing keyboard
// and mouse events, and similar.
//
// Specific autocompleters need to provide, at the very least,
// a getUpdatedChoices function that will be invoked every time
// the text inside the monitored textbox changes. This method
// should get the text for which to provide autocompletion by
// invoking this.getToken(), NOT by directly accessing
// this.element.value. This is to allow incremental tokenized
// autocompletion. Specific auto-completion logic (AJAX, etc)
// belongs in getUpdatedChoices.
//
// Tokenized incremental autocompletion is enabled automatically
// when an autocompleter is instantiated with the 'tokens' option
// in the options parameter, e.g.:
// new Ajax.Autocompleter('id','upd', '/url/', { tokens: ',' });
// will incrementally autocomplete with a comma as the token.
// Additionally, ',' in the above example can be replaced with
// a token array, e.g. { tokens: [',', '\n'] } which
// enables autocompletion on multiple tokens. This is most
// useful when one of the tokens is \n (a newline), as it
// allows smart autocompletion after linebreaks.

if (typeof Effect == 'undefined')
  throw ("controls.js requires including script.aculo.us' effects.js library");

var Autocompleter = {};
Autocompleter.Base = Class.create({
  baseInitialize: function (element, update, options) {
    element = $(element);
    this.element = element;
    this.update = $(update);
    this.hasFocus = false;
    this.changed = false;
    this.active = false;
    this.index = 0;
    this.entryCount = 0;
    this.oldElementValue = this.element.value;

    if (this.setOptions)
      this.setOptions(options);
    else
      this.options = options || {};

    this.options.paramName = this.options.paramName || this.element.name;
    this.options.tokens = this.options.tokens || [];
    this.options.frequency = this.options.frequency || 0.4;
    this.options.minChars = this.options.minChars || 1;
    this.options.onShow = this.options.onShow ||
      function (element, update) {
        if (!update.style.position || update.style.position == 'absolute') {
          update.style.position = 'absolute';
          Position.clone(element, update, {
            setHeight: false,
            offsetTop: element.offsetHeight
          });
        }
        Effect.Appear(update, { duration: 0.15 });
      };
    this.options.onHide = this.options.onHide ||
      function (element, update) { new Effect.Fade(update, { duration: 0.15 }) };

    if (typeof (this.options.tokens) == 'string')
      this.options.tokens = new Array(this.options.tokens);
    // Force carriage returns as token delimiters anyway
    if (!this.options.tokens.include('\n'))
      this.options.tokens.push('\n');

    this.observer = null;

    this.element.setAttribute('autocomplete', 'off');

    Element.hide(this.update);

    Event.observe(this.element, 'blur', this.onBlur.bindAsEventListener(this));
    Event.observe(this.element, 'keydown', this.onKeyPress.bindAsEventListener(this));
  },

  show: function () {
    if (Element.getStyle(this.update, 'display') == 'none') this.options.onShow(this.element, this.update);
    if (!this.iefix &&
      (Prototype.Browser.IE) &&
      (Element.getStyle(this.update, 'position') == 'absolute')) {
      new Insertion.After(this.update,
        '<iframe id="' + this.update.id + '_iefix" ' +
        'style="display:none;position:absolute;filter:progid:DXImageTransform.Microsoft.Alpha(opacity=0);" ' +
        'src="javascript:false;" frameborder="0" scrolling="no"></iframe>');
      this.iefix = $(this.update.id + '_iefix');
    }
    if (this.iefix) setTimeout(this.fixIEOverlapping.bind(this), 50);
  },

  fixIEOverlapping: function () {
    Position.clone(this.update, this.iefix, { setTop: (!this.update.style.height) });
    this.iefix.style.zIndex = 1;
    this.update.style.zIndex = 2;
    Element.show(this.iefix);
  },

  hide: function () {
    this.stopIndicator();
    if (Element.getStyle(this.update, 'display') != 'none') this.options.onHide(this.element, this.update);
    if (this.iefix) Element.hide(this.iefix);
  },

  startIndicator: function () {
    if (this.options.indicator) Element.show(this.options.indicator);
  },

  stopIndicator: function () {
    if (this.options.indicator) Element.hide(this.options.indicator);
  },

  onKeyPress: function (event) {
    if (this.active)
      switch (event.keyCode) {
        case Event.KEY_TAB:
        case Event.KEY_RETURN:
          this.selectEntry();
          Event.stop(event);
        case Event.KEY_ESC:
          this.hide();
          this.active = false;
          Event.stop(event);
          return;
        case Event.KEY_LEFT:
        case Event.KEY_RIGHT:
          return;
        case Event.KEY_UP:
          this.markPrevious();
          this.render();
          Event.stop(event);
          return;
        case Event.KEY_DOWN:
          this.markNext();
          this.render();
          Event.stop(event);
          return;
      }
    else
      if (event.keyCode == Event.KEY_TAB || event.keyCode == Event.KEY_RETURN ||
        (Prototype.Browser.WebKit > 0 && event.keyCode == 0)) return;

    this.changed = true;
    this.hasFocus = true;

    if (this.observer) clearTimeout(this.observer);
    this.observer =
      setTimeout(this.onObserverEvent.bind(this), this.options.frequency * 1000);
  },

  activate: function () {
    this.changed = false;
    this.hasFocus = true;
    this.getUpdatedChoices();
  },

  onHover: function (event) {
    var element = Event.findElement(event, 'LI');
    if (this.index != element.autocompleteIndex) {
      this.index = element.autocompleteIndex;
      this.render();
    }
    Event.stop(event);
  },

  onClick: function (event) {
    var element = Event.findElement(event, 'LI');
    this.index = element.autocompleteIndex;
    this.selectEntry();
    this.hide();
  },

  onBlur: function (event) {
    // needed to make click events working
    setTimeout(this.hide.bind(this), 250);
    this.hasFocus = false;
    this.active = false;
  },

  render: function () {
    if (this.entryCount > 0) {
      for (var i = 0; i < this.entryCount; i++)
        this.index == i ?
          Element.addClassName(this.getEntry(i), "selected") :
          Element.removeClassName(this.getEntry(i), "selected");
      if (this.hasFocus) {
        this.show();
        this.active = true;
      }
    } else {
      this.active = false;
      this.hide();
    }
  },

  markPrevious: function () {
    if (this.index > 0) this.index--;
    else this.index = this.entryCount - 1;
    //this.getEntry(this.index).scrollIntoView(true); useless
  },

  markNext: function () {
    if (this.index < this.entryCount - 1) this.index++;
    else this.index = 0;
    this.getEntry(this.index).scrollIntoView(false);
  },

  getEntry: function (index) {
    return this.update.firstChild.childNodes[index];
  },

  getCurrentEntry: function () {
    return this.getEntry(this.index);
  },

  selectEntry: function () {
    this.active = false;
    this.updateElement(this.getCurrentEntry());
  },

  updateElement: function (selectedElement) {
    if (this.options.updateElement) {
      this.options.updateElement(selectedElement);
      return;
    }
    var value = '';
    if (this.options.select) {
      var nodes = $(selectedElement).select('.' + this.options.select) || [];
      if (nodes.length > 0) value = Element.collectTextNodes(nodes[0], this.options.select);
    } else
      value = Element.collectTextNodesIgnoreClass(selectedElement, 'informal');

    var bounds = this.getTokenBounds();
    if (bounds[0] != -1) {
      var newValue = this.element.value.substr(0, bounds[0]);
      var whitespace = this.element.value.substr(bounds[0]).match(/^\s+/);
      if (whitespace)
        newValue += whitespace[0];
      this.element.value = newValue + value + this.element.value.substr(bounds[1]);
    } else {
      this.element.value = value;
    }
    this.oldElementValue = this.element.value;
    this.element.focus();

    if (this.options.afterUpdateElement)
      this.options.afterUpdateElement(this.element, selectedElement);
  },

  updateChoices: function (choices) {
    if (!this.changed && this.hasFocus) {
      this.update.innerHTML = choices;
      Element.cleanWhitespace(this.update);
      Element.cleanWhitespace(this.update.down());

      if (this.update.firstChild && this.update.down().childNodes) {
        this.entryCount =
          this.update.down().childNodes.length;
        for (var i = 0; i < this.entryCount; i++) {
          var entry = this.getEntry(i);
          entry.autocompleteIndex = i;
          this.addObservers(entry);
        }
      } else {
        this.entryCount = 0;
      }

      this.stopIndicator();
      this.index = 0;

      if (this.entryCount == 1 && this.options.autoSelect) {
        this.selectEntry();
        this.hide();
      } else {
        this.render();
      }
    }
  },

  addObservers: function (element) {
    Event.observe(element, "mouseover", this.onHover.bindAsEventListener(this));
    Event.observe(element, "click", this.onClick.bindAsEventListener(this));
  },

  onObserverEvent: function () {
    this.changed = false;
    this.tokenBounds = null;
    if (this.getToken().length >= this.options.minChars) {
      this.getUpdatedChoices();
    } else {
      this.active = false;
      this.hide();
    }
    this.oldElementValue = this.element.value;
  },

  getToken: function () {
    var bounds = this.getTokenBounds();
    return this.element.value.substring(bounds[0], bounds[1]).strip();
  },

  getTokenBounds: function () {
    if (null != this.tokenBounds) return this.tokenBounds;
    var value = this.element.value;
    if (value.strip().empty()) return [-1, 0];
    var diff = arguments.callee.getFirstDifferencePos(value, this.oldElementValue);
    var offset = (diff == this.oldElementValue.length ? 1 : 0);
    var prevTokenPos = -1, nextTokenPos = value.length;
    var tp;
    for (var index = 0, l = this.options.tokens.length; index < l; ++index) {
      tp = value.lastIndexOf(this.options.tokens[index], diff + offset - 1);
      if (tp > prevTokenPos) prevTokenPos = tp;
      tp = value.indexOf(this.options.tokens[index], diff + offset);
      if (-1 != tp && tp < nextTokenPos) nextTokenPos = tp;
    }
    return (this.tokenBounds = [prevTokenPos + 1, nextTokenPos]);
  }
});

Autocompleter.Base.prototype.getTokenBounds.getFirstDifferencePos = function (newS, oldS) {
  var boundary = Math.min(newS.length, oldS.length);
  for (var index = 0; index < boundary; ++index)
    if (newS[index] != oldS[index])
      return index;
  return boundary;
};

Ajax.Autocompleter = Class.create(Autocompleter.Base, {
  initialize: function (element, update, url, options) {
    this.baseInitialize(element, update, options);
    this.options.asynchronous = true;
    this.options.onComplete = this.onComplete.bind(this);
    this.options.defaultParams = this.options.parameters || null;
    this.url = url;
  },

  getUpdatedChoices: function () {
    this.startIndicator();

    var entry = encodeURIComponent(this.options.paramName) + '=' +
      encodeURIComponent(this.getToken());

    this.options.parameters = this.options.callback ?
      this.options.callback(this.element, entry) : entry;

    if (this.options.defaultParams)
      this.options.parameters += '&' + this.options.defaultParams;

    new Ajax.Request(this.url, this.options);
  },

  onComplete: function (request) {
    this.updateChoices(request.responseText);
  }
});

// The local array autocompleter. Used when you'd prefer to
// inject an array of autocompletion options into the page, rather
// than sending out Ajax queries, which can be quite slow sometimes.
//
// The constructor takes four parameters. The first two are, as usual,
// the id of the monitored textbox, and id of the autocompletion menu.
// The third is the array you want to autocomplete from, and the fourth
// is the options block.
//
// Extra local autocompletion options:
// - choices - How many autocompletion choices to offer
//
// - partialSearch - If false, the autocompleter will match entered
//                    text only at the beginning of strings in the
//                    autocomplete array. Defaults to true, which will
//                    match text at the beginning of any *word* in the
//                    strings in the autocomplete array. If you want to
//                    search anywhere in the string, additionally set
//                    the option fullSearch to true (default: off).
//
// - fullSsearch - Search anywhere in autocomplete array strings.
//
// - partialChars - How many characters to enter before triggering
//                   a partial match (unlike minChars, which defines
//                   how many characters are required to do any match
//                   at all). Defaults to 2.
//
// - ignoreCase - Whether to ignore case when autocompleting.
//                 Defaults to true.
//
// It's possible to pass in a custom function as the 'selector'
// option, if you prefer to write your own autocompletion logic.
// In that case, the other options above will not apply unless
// you support them.

Autocompleter.Local = Class.create(Autocompleter.Base, {
  initialize: function (element, update, array, options) {
    this.baseInitialize(element, update, options);
    this.options.array = array;
  },

  getUpdatedChoices: function () {
    this.updateChoices(this.options.selector(this));
  },

  setOptions: function (options) {
    this.options = Object.extend({
      choices: 10,
      partialSearch: true,
      partialChars: 2,
      ignoreCase: true,
      fullSearch: false,
      selector: function (instance) {
        var ret = []; // Beginning matches
        var partial = []; // Inside matches
        var entry = instance.getToken();
        var count = 0;

        for (var i = 0; i < instance.options.array.length &&
          ret.length < instance.options.choices; i++) {

          var elem = instance.options.array[i];
          var foundPos = instance.options.ignoreCase ?
            elem.toLowerCase().indexOf(entry.toLowerCase()) :
            elem.indexOf(entry);

          while (foundPos != -1) {
            if (foundPos == 0 && elem.length != entry.length) {
              ret.push("<li><strong>" + elem.substr(0, entry.length) + "</strong>" +
                elem.substr(entry.length) + "</li>");
              break;
            } else if (entry.length >= instance.options.partialChars &&
              instance.options.partialSearch && foundPos != -1) {
              if (instance.options.fullSearch || /\s/.test(elem.substr(foundPos - 1, 1))) {
                partial.push("<li>" + elem.substr(0, foundPos) + "<strong>" +
                  elem.substr(foundPos, entry.length) + "</strong>" + elem.substr(
                    foundPos + entry.length) + "</li>");
                break;
              }
            }

            foundPos = instance.options.ignoreCase ?
              elem.toLowerCase().indexOf(entry.toLowerCase(), foundPos + 1) :
              elem.indexOf(entry, foundPos + 1);

          }
        }
        if (partial.length)
          ret = ret.concat(partial.slice(0, instance.options.choices - ret.length));
        return "<ul>" + ret.join('') + "</ul>";
      }
    }, options || {});
  }
});

// AJAX in-place editor and collection editor
// Full rewrite by Christophe Porteneuve <tdd@tddsworld.com> (April 2007).

// Use this if you notice weird scrolling problems on some browsers,
// the DOM might be a bit confused when this gets called so do this
// waits 1 ms (with setTimeout) until it does the activation
Field.scrollFreeActivate = function (field) {
  setTimeout(function () {
    Field.activate(field);
  }, 1);
};

Ajax.InPlaceEditor = Class.create({
  initialize: function (element, url, options) {
    this.url = url;
    this.element = element = $(element);
    this.prepareOptions();
    this._controls = {};
    arguments.callee.dealWithDeprecatedOptions(options); // DEPRECATION LAYER!!!
    Object.extend(this.options, options || {});
    if (!this.options.formId && this.element.id) {
      this.options.formId = this.element.id + '-inplaceeditor';
      if ($(this.options.formId))
        this.options.formId = '';
    }
    if (this.options.externalControl)
      this.options.externalControl = $(this.options.externalControl);
    if (!this.options.externalControl)
      this.options.externalControlOnly = false;
    this._originalBackground = this.element.getStyle('background-color') || 'transparent';
    this.element.title = this.options.clickToEditText;
    this._boundCancelHandler = this.handleFormCancellation.bind(this);
    this._boundComplete = (this.options.onComplete || Prototype.emptyFunction).bind(this);
    this._boundFailureHandler = this.handleAJAXFailure.bind(this);
    this._boundSubmitHandler = this.handleFormSubmission.bind(this);
    this._boundWrapperHandler = this.wrapUp.bind(this);
    this.registerListeners();
  },
  checkForEscapeOrReturn: function (e) {
    if (!this._editing || e.ctrlKey || e.altKey || e.shiftKey) return;
    if (Event.KEY_ESC == e.keyCode)
      this.handleFormCancellation(e);
    else if (Event.KEY_RETURN == e.keyCode)
      this.handleFormSubmission(e);
  },
  createControl: function (mode, handler, extraClasses) {
    var control = this.options[mode + 'Control'];
    var text = this.options[mode + 'Text'];
    if ('button' == control) {
      var btn = document.createElement('input');
      btn.type = 'submit';
      btn.value = text;
      btn.className = 'editor_' + mode + '_button';
      if ('cancel' == mode)
        btn.onclick = this._boundCancelHandler;
      this._form.appendChild(btn);
      this._controls[mode] = btn;
    } else if ('link' == control) {
      var link = document.createElement('a');
      link.href = '#';
      link.appendChild(document.createTextNode(text));
      link.onclick = 'cancel' == mode ? this._boundCancelHandler : this._boundSubmitHandler;
      link.className = 'editor_' + mode + '_link';
      if (extraClasses)
        link.className += ' ' + extraClasses;
      this._form.appendChild(link);
      this._controls[mode] = link;
    }
  },
  createEditField: function () {
    var text = (this.options.loadTextURL ? this.options.loadingText : this.getText());
    var fld;
    if (1 >= this.options.rows && !/\r|\n/.test(this.getText())) {
      fld = document.createElement('input');
      fld.type = 'text';
      var size = this.options.size || this.options.cols || 0;
      if (0 < size) fld.size = size;
    } else {
      fld = document.createElement('textarea');
      fld.rows = (1 >= this.options.rows ? this.options.autoRows : this.options.rows);
      fld.cols = this.options.cols || 40;
    }
    fld.name = this.options.paramName;
    fld.value = text; // No HTML breaks conversion anymore
    fld.className = 'editor_field';
    if (this.options.submitOnBlur)
      fld.onblur = this._boundSubmitHandler;
    this._controls.editor = fld;
    if (this.options.loadTextURL)
      this.loadExternalText();
    this._form.appendChild(this._controls.editor);
  },
  createForm: function () {
    var ipe = this;
    function addText(mode, condition) {
      var text = ipe.options['text' + mode + 'Controls'];
      if (!text || condition === false) return;
      ipe._form.appendChild(document.createTextNode(text));
    };
    this._form = $(document.createElement('form'));
    this._form.id = this.options.formId;
    this._form.addClassName(this.options.formClassName);
    this._form.onsubmit = this._boundSubmitHandler;
    this.createEditField();
    if ('textarea' == this._controls.editor.tagName.toLowerCase())
      this._form.appendChild(document.createElement('br'));
    if (this.options.onFormCustomization)
      this.options.onFormCustomization(this, this._form);
    addText('Before', this.options.okControl || this.options.cancelControl);
    this.createControl('ok', this._boundSubmitHandler);
    addText('Between', this.options.okControl && this.options.cancelControl);
    this.createControl('cancel', this._boundCancelHandler, 'editor_cancel');
    addText('After', this.options.okControl || this.options.cancelControl);
  },
  destroy: function () {
    if (this._oldInnerHTML)
      this.element.innerHTML = this._oldInnerHTML;
    this.leaveEditMode();
    this.unregisterListeners();
  },
  enterEditMode: function (e) {
    if (this._saving || this._editing) return;
    this._editing = true;
    this.triggerCallback('onEnterEditMode');
    if (this.options.externalControl)
      this.options.externalControl.hide();
    this.element.hide();
    this.createForm();
    this.element.parentNode.insertBefore(this._form, this.element);
    if (!this.options.loadTextURL)
      this.postProcessEditField();
    if (e) Event.stop(e);
  },
  enterHover: function (e) {
    if (this.options.hoverClassName)
      this.element.addClassName(this.options.hoverClassName);
    if (this._saving) return;
    this.triggerCallback('onEnterHover');
  },
  getText: function () {
    return this.element.innerHTML.unescapeHTML();
  },
  handleAJAXFailure: function (transport) {
    this.triggerCallback('onFailure', transport);
    if (this._oldInnerHTML) {
      this.element.innerHTML = this._oldInnerHTML;
      this._oldInnerHTML = null;
    }
  },
  handleFormCancellation: function (e) {
    this.wrapUp();
    if (e) Event.stop(e);
  },
  handleFormSubmission: function (e) {
    var form = this._form;
    var value = $F(this._controls.editor);
    this.prepareSubmission();
    var params = this.options.callback(form, value) || '';
    if (Object.isString(params))
      params = params.toQueryParams();
    params.editorId = this.element.id;
    if (this.options.htmlResponse) {
      var options = Object.extend({ evalScripts: true }, this.options.ajaxOptions);
      Object.extend(options, {
        parameters: params,
        onComplete: this._boundWrapperHandler,
        onFailure: this._boundFailureHandler
      });
      new Ajax.Updater({ success: this.element }, this.url, options);
    } else {
      var options = Object.extend({ method: 'get' }, this.options.ajaxOptions);
      Object.extend(options, {
        parameters: params,
        onComplete: this._boundWrapperHandler,
        onFailure: this._boundFailureHandler
      });
      new Ajax.Request(this.url, options);
    }
    if (e) Event.stop(e);
  },
  leaveEditMode: function () {
    this.element.removeClassName(this.options.savingClassName);
    this.removeForm();
    this.leaveHover();
    this.element.style.backgroundColor = this._originalBackground;
    this.element.show();
    if (this.options.externalControl)
      this.options.externalControl.show();
    this._saving = false;
    this._editing = false;
    this._oldInnerHTML = null;
    this.triggerCallback('onLeaveEditMode');
  },
  leaveHover: function (e) {
    if (this.options.hoverClassName)
      this.element.removeClassName(this.options.hoverClassName);
    if (this._saving) return;
    this.triggerCallback('onLeaveHover');
  },
  loadExternalText: function () {
    this._form.addClassName(this.options.loadingClassName);
    this._controls.editor.disabled = true;
    var options = Object.extend({ method: 'get' }, this.options.ajaxOptions);
    Object.extend(options, {
      parameters: 'editorId=' + encodeURIComponent(this.element.id),
      onComplete: Prototype.emptyFunction,
      onSuccess: function (transport) {
        this._form.removeClassName(this.options.loadingClassName);
        var text = transport.responseText;
        if (this.options.stripLoadedTextTags)
          text = text.stripTags();
        this._controls.editor.value = text;
        this._controls.editor.disabled = false;
        this.postProcessEditField();
      }.bind(this),
      onFailure: this._boundFailureHandler
    });
    new Ajax.Request(this.options.loadTextURL, options);
  },
  postProcessEditField: function () {
    var fpc = this.options.fieldPostCreation;
    if (fpc)
      $(this._controls.editor)['focus' == fpc ? 'focus' : 'activate']();
  },
  prepareOptions: function () {
    this.options = Object.clone(Ajax.InPlaceEditor.DefaultOptions);
    Object.extend(this.options, Ajax.InPlaceEditor.DefaultCallbacks);
    [this._extraDefaultOptions].flatten().compact().each(function (defs) {
      Object.extend(this.options, defs);
    }.bind(this));
  },
  prepareSubmission: function () {
    this._saving = true;
    this.removeForm();
    this.leaveHover();
    this.showSaving();
  },
  registerListeners: function () {
    this._listeners = {};
    var listener;
    $H(Ajax.InPlaceEditor.Listeners).each(function (pair) {
      listener = this[pair.value].bind(this);
      this._listeners[pair.key] = listener;
      if (!this.options.externalControlOnly)
        this.element.observe(pair.key, listener);
      if (this.options.externalControl)
        this.options.externalControl.observe(pair.key, listener);
    }.bind(this));
  },
  removeForm: function () {
    if (!this._form) return;
    this._form.remove();
    this._form = null;
    this._controls = {};
  },
  showSaving: function () {
    this._oldInnerHTML = this.element.innerHTML;
    this.element.innerHTML = this.options.savingText;
    this.element.addClassName(this.options.savingClassName);
    this.element.style.backgroundColor = this._originalBackground;
    this.element.show();
  },
  triggerCallback: function (cbName, arg) {
    if ('function' == typeof this.options[cbName]) {
      this.options[cbName](this, arg);
    }
  },
  unregisterListeners: function () {
    $H(this._listeners).each(function (pair) {
      if (!this.options.externalControlOnly)
        this.element.stopObserving(pair.key, pair.value);
      if (this.options.externalControl)
        this.options.externalControl.stopObserving(pair.key, pair.value);
    }.bind(this));
  },
  wrapUp: function (transport) {
    this.leaveEditMode();
    // Can't use triggerCallback due to backward compatibility: requires
    // binding + direct element
    this._boundComplete(transport, this.element);
  }
});

Object.extend(Ajax.InPlaceEditor.prototype, {
  dispose: Ajax.InPlaceEditor.prototype.destroy
});

Ajax.InPlaceCollectionEditor = Class.create(Ajax.InPlaceEditor, {
  initialize: function ($super, element, url, options) {
    this._extraDefaultOptions = Ajax.InPlaceCollectionEditor.DefaultOptions;
    $super(element, url, options);
  },

  createEditField: function () {
    var list = document.createElement('select');
    list.name = this.options.paramName;
    list.size = 1;
    this._controls.editor = list;
    this._collection = this.options.collection || [];
    if (this.options.loadCollectionURL)
      this.loadCollection();
    else
      this.checkForExternalText();
    this._form.appendChild(this._controls.editor);
  },

  loadCollection: function () {
    this._form.addClassName(this.options.loadingClassName);
    this.showLoadingText(this.options.loadingCollectionText);
    var options = Object.extend({ method: 'get' }, this.options.ajaxOptions);
    Object.extend(options, {
      parameters: 'editorId=' + encodeURIComponent(this.element.id),
      onComplete: Prototype.emptyFunction,
      onSuccess: function (transport) {
        var js = transport.responseText.strip();
        if (!/^\[.*\]$/.test(js)) // TODO: improve sanity check
          throw ('Server returned an invalid collection representation.');
        this._collection = eval(js);
        this.checkForExternalText();
      }.bind(this),
      onFailure: this.onFailure
    });
    new Ajax.Request(this.options.loadCollectionURL, options);
  },

  showLoadingText: function (text) {
    this._controls.editor.disabled = true;
    var tempOption = this._controls.editor.firstChild;
    if (!tempOption) {
      tempOption = document.createElement('option');
      tempOption.value = '';
      this._controls.editor.appendChild(tempOption);
      tempOption.selected = true;
    }
    tempOption.update((text || '').stripScripts().stripTags());
  },

  checkForExternalText: function () {
    this._text = this.getText();
    if (this.options.loadTextURL)
      this.loadExternalText();
    else
      this.buildOptionList();
  },

  loadExternalText: function () {
    this.showLoadingText(this.options.loadingText);
    var options = Object.extend({ method: 'get' }, this.options.ajaxOptions);
    Object.extend(options, {
      parameters: 'editorId=' + encodeURIComponent(this.element.id),
      onComplete: Prototype.emptyFunction,
      onSuccess: function (transport) {
        this._text = transport.responseText.strip();
        this.buildOptionList();
      }.bind(this),
      onFailure: this.onFailure
    });
    new Ajax.Request(this.options.loadTextURL, options);
  },

  buildOptionList: function () {
    this._form.removeClassName(this.options.loadingClassName);
    this._collection = this._collection.map(function (entry) {
      return 2 === entry.length ? entry : [entry, entry].flatten();
    });
    var marker = ('value' in this.options) ? this.options.value : this._text;
    var textFound = this._collection.any(function (entry) {
      return entry[0] == marker;
    }.bind(this));
    this._controls.editor.update('');
    var option;
    this._collection.each(function (entry, index) {
      option = document.createElement('option');
      option.value = entry[0];
      option.selected = textFound ? entry[0] == marker : 0 == index;
      option.appendChild(document.createTextNode(entry[1]));
      this._controls.editor.appendChild(option);
    }.bind(this));
    this._controls.editor.disabled = false;
    Field.scrollFreeActivate(this._controls.editor);
  }
});

//**** DEPRECATION LAYER FOR InPlace[Collection]Editor! ****
//**** This only  exists for a while,  in order to  let ****
//**** users adapt to  the new API.  Read up on the new ****
//**** API and convert your code to it ASAP!            ****

Ajax.InPlaceEditor.prototype.initialize.dealWithDeprecatedOptions = function (options) {
  if (!options) return;
  function fallback(name, expr) {
    if (name in options || expr === undefined) return;
    options[name] = expr;
  };
  fallback('cancelControl', (options.cancelLink ? 'link' : (options.cancelButton ? 'button' :
    options.cancelLink == options.cancelButton == false ? false : undefined)));
  fallback('okControl', (options.okLink ? 'link' : (options.okButton ? 'button' :
    options.okLink == options.okButton == false ? false : undefined)));
  fallback('highlightColor', options.highlightcolor);
  fallback('highlightEndColor', options.highlightendcolor);
};

Object.extend(Ajax.InPlaceEditor, {
  DefaultOptions: {
    ajaxOptions: {},
    autoRows: 3,                                // Use when multi-line w/ rows == 1
    cancelControl: 'link',                      // 'link'|'button'|false
    cancelText: 'cancel',
    clickToEditText: 'Click to edit',
    externalControl: null,                      // id|elt
    externalControlOnly: false,
    fieldPostCreation: 'activate',              // 'activate'|'focus'|false
    formClassName: 'inplaceeditor-form',
    formId: null,                               // id|elt
    highlightColor: '#ffff99',
    highlightEndColor: '#ffffff',
    hoverClassName: '',
    htmlResponse: true,
    loadingClassName: 'inplaceeditor-loading',
    loadingText: 'Loading...',
    okControl: 'button',                        // 'link'|'button'|false
    okText: 'ok',
    paramName: 'value',
    rows: 1,                                    // If 1 and multi-line, uses autoRows
    savingClassName: 'inplaceeditor-saving',
    savingText: 'Saving...',
    size: 0,
    stripLoadedTextTags: false,
    submitOnBlur: false,
    textAfterControls: '',
    textBeforeControls: '',
    textBetweenControls: ''
  },
  DefaultCallbacks: {
    callback: function (form) {
      return Form.serialize(form);
    },
    onComplete: function (transport, element) {
      // For backward compatibility, this one is bound to the IPE, and passes
      // the element directly.  It was too often customized, so we don't break it.
      new Effect.Highlight(element, {
        startcolor: this.options.highlightColor, keepBackgroundImage: true
      });
    },
    onEnterEditMode: null,
    onEnterHover: function (ipe) {
      ipe.element.style.backgroundColor = ipe.options.highlightColor;
      if (ipe._effect)
        ipe._effect.cancel();
    },
    onFailure: function (transport, ipe) {
      alert('Error communication with the server: ' + transport.responseText.stripTags());
    },
    onFormCustomization: null, // Takes the IPE and its generated form, after editor, before controls.
    onLeaveEditMode: null,
    onLeaveHover: function (ipe) {
      ipe._effect = new Effect.Highlight(ipe.element, {
        startcolor: ipe.options.highlightColor, endcolor: ipe.options.highlightEndColor,
        restorecolor: ipe._originalBackground, keepBackgroundImage: true
      });
    }
  },
  Listeners: {
    click: 'enterEditMode',
    keydown: 'checkForEscapeOrReturn',
    mouseover: 'enterHover',
    mouseout: 'leaveHover'
  }
});

Ajax.InPlaceCollectionEditor.DefaultOptions = {
  loadingCollectionText: 'Loading options...'
};

// Delayed observer, like Form.Element.Observer,
// but waits for delay after last key input
// Ideal for live-search fields

Form.Element.DelayedObserver = Class.create({
  initialize: function (element, delay, callback) {
    this.delay = delay || 0.5;
    this.element = $(element);
    this.callback = callback;
    this.timer = null;
    this.lastValue = $F(this.element);
    Event.observe(this.element, 'keyup', this.delayedListener.bindAsEventListener(this));
  },
  delayedListener: function (event) {
    if (this.lastValue == $F(this.element)) return;
    if (this.timer) clearTimeout(this.timer);
    this.timer = setTimeout(this.onTimerEvent.bind(this), this.delay * 1000);
    this.lastValue = $F(this.element);
  },
  onTimerEvent: function () {
    this.timer = null;
    this.callback(this.element, $F(this.element));
  }
});
// script.aculo.us slider.js v1.8.2, Tue Nov 18 18:30:58 +0100 2008

// Copyright (c) 2005-2008 Marty Haught, Thomas Fuchs
//
// script.aculo.us is freely distributable under the terms of an MIT-style license.
// For details, see the script.aculo.us web site: http://script.aculo.us/

if (!Control) var Control = {};

// options:
//  axis: 'vertical', or 'horizontal' (default)
//
// callbacks:
//  onChange(value)
//  onSlide(value)
Control.Slider = Class.create({
  initialize: function (handle, track, options) {
    var slider = this;

    if (Object.isArray(handle)) {
      this.handles = handle.collect(function (e) { return $(e) });
    } else {
      this.handles = [$(handle)];
    }

    this.track = $(track);
    this.options = options || {};

    this.axis = this.options.axis || 'horizontal';
    this.increment = this.options.increment || 1;
    this.step = parseInt(this.options.step || '1');
    this.range = this.options.range || $R(0, 1);

    this.value = 0; // assure backwards compat
    this.values = this.handles.map(function () { return 0 });
    this.spans = this.options.spans ? this.options.spans.map(function (s) { return $(s) }) : false;
    this.options.startSpan = $(this.options.startSpan || null);
    this.options.endSpan = $(this.options.endSpan || null);

    this.restricted = this.options.restricted || false;

    this.maximum = this.options.maximum || this.range.end;
    this.minimum = this.options.minimum || this.range.start;

    // Will be used to align the handle onto the track, if necessary
    this.alignX = parseInt(this.options.alignX || '0');
    this.alignY = parseInt(this.options.alignY || '0');

    this.trackLength = this.maximumOffset() - this.minimumOffset();

    this.handleLength = this.isVertical() ?
      (this.handles[0].offsetHeight != 0 ?
        this.handles[0].offsetHeight : this.handles[0].style.height.replace(/px$/, "")) :
      (this.handles[0].offsetWidth != 0 ? this.handles[0].offsetWidth :
        this.handles[0].style.width.replace(/px$/, ""));

    this.active = false;
    this.dragging = false;
    this.disabled = false;

    if (this.options.disabled) this.setDisabled();

    // Allowed values array
    this.allowedValues = this.options.values ? this.options.values.sortBy(Prototype.K) : false;
    if (this.allowedValues) {
      this.minimum = this.allowedValues.min();
      this.maximum = this.allowedValues.max();
    }

    this.eventMouseDown = this.startDrag.bindAsEventListener(this);
    this.eventMouseUp = this.endDrag.bindAsEventListener(this);
    this.eventMouseMove = this.update.bindAsEventListener(this);

    // Initialize handles in reverse (make sure first handle is active)
    this.handles.each(function (h, i) {
      i = slider.handles.length - 1 - i;
      slider.setValue(parseFloat(
        (Object.isArray(slider.options.sliderValue) ?
          slider.options.sliderValue[i] : slider.options.sliderValue) ||
        slider.range.start), i);
      h.makePositioned().observe("mousedown", slider.eventMouseDown);
    });

    this.track.observe("mousedown", this.eventMouseDown);
    document.observe("mouseup", this.eventMouseUp);
    $(this.track.parentNode.parentNode).observe("mousemove", this.eventMouseMove);


    this.initialized = true;
  },
  dispose: function () {
    var slider = this;
    Event.stopObserving(this.track, "mousedown", this.eventMouseDown);
    Event.stopObserving(document, "mouseup", this.eventMouseUp);
    Event.stopObserving(this.track.parentNode.parentNode, "mousemove", this.eventMouseMove);
    this.handles.each(function (h) {
      Event.stopObserving(h, "mousedown", slider.eventMouseDown);
    });
  },
  setDisabled: function () {
    this.disabled = true;
    this.track.parentNode.className = this.track.parentNode.className + ' disabled';
  },
  setEnabled: function () {
    this.disabled = false;
  },
  getNearestValue: function (value) {
    if (this.allowedValues) {
      if (value >= this.allowedValues.max()) return (this.allowedValues.max());
      if (value <= this.allowedValues.min()) return (this.allowedValues.min());

      var offset = Math.abs(this.allowedValues[0] - value);
      var newValue = this.allowedValues[0];
      this.allowedValues.each(function (v) {
        var currentOffset = Math.abs(v - value);
        if (currentOffset <= offset) {
          newValue = v;
          offset = currentOffset;
        }
      });
      return newValue;
    }
    if (value > this.range.end) return this.range.end;
    if (value < this.range.start) return this.range.start;
    return value;
  },
  setValue: function (sliderValue, handleIdx) {
    if (!this.active) {
      this.activeHandleIdx = handleIdx || 0;
      this.activeHandle = this.handles[this.activeHandleIdx];
      this.updateStyles();
    }
    handleIdx = handleIdx || this.activeHandleIdx || 0;
    if (this.initialized && this.restricted) {
      if ((handleIdx > 0) && (sliderValue < this.values[handleIdx - 1]))
        sliderValue = this.values[handleIdx - 1];
      if ((handleIdx < (this.handles.length - 1)) && (sliderValue > this.values[handleIdx + 1]))
        sliderValue = this.values[handleIdx + 1];
    }
    sliderValue = this.getNearestValue(sliderValue);
    this.values[handleIdx] = sliderValue;
    this.value = this.values[0]; // assure backwards compat

    this.handles[handleIdx].style[this.isVertical() ? 'top' : 'left'] =
      this.translateToPx(sliderValue);

    this.drawSpans();
    if (!this.dragging || !this.event) this.updateFinished();
  },
  setValueBy: function (delta, handleIdx) {
    this.setValue(this.values[handleIdx || this.activeHandleIdx || 0] + delta,
      handleIdx || this.activeHandleIdx || 0);
  },
  translateToPx: function (value) {
    return Math.round(
      ((this.trackLength - this.handleLength) / (this.range.end - this.range.start)) *
      (value - this.range.start)) + "px";
  },
  translateToValue: function (offset) {
    return ((offset / (this.trackLength - this.handleLength) *
      (this.range.end - this.range.start)) + this.range.start);
  },
  getRange: function (range) {
    var v = this.values.sortBy(Prototype.K);
    range = range || 0;
    return $R(v[range], v[range + 1]);
  },
  minimumOffset: function () {
    return (this.isVertical() ? this.alignY : this.alignX);
  },
  maximumOffset: function () {
    return (this.isVertical() ?
      (this.track.offsetHeight != 0 ? this.track.offsetHeight :
        this.track.style.height.replace(/px$/, "")) - this.alignY :
      (this.track.offsetWidth != 0 ? this.track.offsetWidth :
        this.track.style.width.replace(/px$/, "")) - this.alignX);
  },
  isVertical: function () {
    return (this.axis == 'vertical');
  },
  drawSpans: function () {
    var slider = this;
    if (this.spans)
      $R(0, this.spans.length - 1).each(function (r) { slider.setSpan(slider.spans[r], slider.getRange(r)) });
    if (this.options.startSpan)
      this.setSpan(this.options.startSpan,
        $R(0, this.values.length > 1 ? this.getRange(0).min() : this.value));
    if (this.options.endSpan)
      this.setSpan(this.options.endSpan,
        $R(this.values.length > 1 ? this.getRange(this.spans.length - 1).max() : this.value, this.maximum));
  },
  setSpan: function (span, range) {
    if (this.isVertical()) {
      span.style.top = this.translateToPx(range.start);
      span.style.height = this.translateToPx(range.end - range.start + this.range.start);
    } else {
      span.style.left = this.translateToPx(range.start);
      span.style.width = this.translateToPx(range.end - range.start + this.range.start);
    }
  },
  updateStyles: function () {
    this.handles.each(function (h) { Element.removeClassName(h, 'selected') });
    Element.addClassName(this.activeHandle, 'selected');
  },
  startDrag: function (event) {
    if (Event.isLeftClick(event)) {
      if (!this.disabled) {
        this.active = true;

        var handle = Event.element(event);
        var pointer = [Event.pointerX(event), Event.pointerY(event)];
        var track = handle;
        if (track == this.track) {
          var offsets = Position.cumulativeOffset(this.track);
          this.event = event;
          this.setValue(this.translateToValue(
            (this.isVertical() ? pointer[1] - offsets[1] : pointer[0] - offsets[0]) - (this.handleLength / 2)
          ));
          var offsets = Position.cumulativeOffset(this.activeHandle);
          this.offsetX = (pointer[0] - offsets[0]);
          this.offsetY = (pointer[1] - offsets[1]);
        } else {
          // find the handle (prevents issues with Safari)
          while ((this.handles.indexOf(handle) == -1) && handle.parentNode)
            handle = handle.parentNode;

          if (this.handles.indexOf(handle) != -1) {
            this.activeHandle = handle;
            this.activeHandleIdx = this.handles.indexOf(this.activeHandle);
            this.updateStyles();

            var offsets = Position.cumulativeOffset(this.activeHandle);
            this.offsetX = (pointer[0] - offsets[0]);
            this.offsetY = (pointer[1] - offsets[1]);
          }
        }
      }
      Event.stop(event);
    }
  },
  update: function (event) {
    if (this.active) {
      if (!this.dragging) this.dragging = true;
      this.draw(event);
      if (Prototype.Browser.WebKit) window.scrollBy(0, 0);
      Event.stop(event);
    }
  },
  draw: function (event) {
    var pointer = [Event.pointerX(event), Event.pointerY(event)];
    var offsets = Position.cumulativeOffset(this.track);
    pointer[0] -= this.offsetX + offsets[0];
    pointer[1] -= this.offsetY + offsets[1];
    this.event = event;
    this.setValue(this.translateToValue(this.isVertical() ? pointer[1] : pointer[0]));
    if (this.initialized && this.options.onSlide)
      this.options.onSlide(this.values.length > 1 ? this.values : this.value, this);
  },
  endDrag: function (event) {
    if (this.active && this.dragging) {
      this.finishDrag(event, true);
      Event.stop(event);
    }
    this.active = false;
    this.dragging = false;
  },
  finishDrag: function (event, success) {
    this.active = false;
    this.dragging = false;
    this.updateFinished();
  },
  updateFinished: function () {
    if (this.initialized && this.options.onChange)
      this.options.onChange(this.values.length > 1 ? this.values : this.value, this);
    this.event = null;
  }
});
/**
 * Magento
 *
 * NOTICE OF LICENSE
 *
 * This source file is subject to the Academic Free License (AFL 3.0)
 * that is bundled with this package in the file LICENSE_AFL.txt.
 * It is also available through the world-wide-web at this URL:
 * http://opensource.org/licenses/afl-3.0.php
 * If you did not receive a copy of the license and are unable to
 * obtain it through the world-wide-web, please send an email
 * to license@magento.com so we can send you a copy immediately.
 *
 * DISCLAIMER
 *
 * Do not edit or add to this file if you wish to upgrade Magento to newer
 * versions in the future. If you wish to customize Magento for your
 * needs please refer to http://www.magento.com for more information.
 *
 * @category    Varien
 * @package     js
 * @copyright   Copyright (c) 2006-2016 X.commerce, Inc. and affiliates (http://www.magento.com)
 * @license     http://opensource.org/licenses/afl-3.0.php  Academic Free License (AFL 3.0)
 */
function popWin(url, win, para) {
  var win = window.open(url, win, para);
  win.focus();
}

function setLocation(url) {
  window.location.href = url;
}

function setPLocation(url, setFocus) {
  if (setFocus) {
    window.opener.focus();
  }
  window.opener.location.href = url;
}

function setLanguageCode(code, fromCode) {
  //TODO: javascript cookies have different domain and path than php cookies
  var href = window.location.href;
  var after = '', dash;
  if (dash = href.match(/\#(.*)$/)) {
    href = href.replace(/\#(.*)$/, '');
    after = dash[0];
  }

  if (href.match(/[?]/)) {
    var re = /([?&]store=)[a-z0-9_]*/;
    if (href.match(re)) {
      href = href.replace(re, '$1' + code);
    } else {
      href += '&store=' + code;
    }

    var re = /([?&]from_store=)[a-z0-9_]*/;
    if (href.match(re)) {
      href = href.replace(re, '');
    }
  } else {
    href += '?store=' + code;
  }
  if (typeof (fromCode) != 'undefined') {
    href += '&from_store=' + fromCode;
  }
  href += after;

  setLocation(href);
}

/**
 * Add classes to specified elements.
 * Supported classes are: 'odd', 'even', 'first', 'last'
 *
 * @param elements - array of elements to be decorated
 * [@param decorateParams] - array of classes to be set. If omitted, all available will be used
 */
function decorateGeneric(elements, decorateParams) {
  var allSupportedParams = ['odd', 'even', 'first', 'last'];
  var _decorateParams = {};
  var total = elements.length;

  if (total) {
    // determine params called
    if (typeof (decorateParams) == 'undefined') {
      decorateParams = allSupportedParams;
    }
    if (!decorateParams.length) {
      return;
    }
    for (var k in allSupportedParams) {
      _decorateParams[allSupportedParams[k]] = false;
    }
    for (var k in decorateParams) {
      _decorateParams[decorateParams[k]] = true;
    }

    // decorate elements
    // elements[0].addClassName('first'); // will cause bug in IE (#5587)
    if (_decorateParams.first) {
      Element.addClassName(elements[0], 'first');
    }
    if (_decorateParams.last) {
      Element.addClassName(elements[total - 1], 'last');
    }
    for (var i = 0; i < total; i++) {
      if ((i + 1) % 2 == 0) {
        if (_decorateParams.even) {
          Element.addClassName(elements[i], 'even');
        }
      }
      else {
        if (_decorateParams.odd) {
          Element.addClassName(elements[i], 'odd');
        }
      }
    }
  }
}

/**
 * Decorate table rows and cells, tbody etc
 * @see decorateGeneric()
 */
function decorateTable(table, options) {
  var table = $(table);
  if (table) {
    // set default options
    var _options = {
      'tbody': false,
      'tbody tr': ['odd', 'even', 'first', 'last'],
      'thead tr': ['first', 'last'],
      'tfoot tr': ['first', 'last'],
      'tr td': ['last']
    };
    // overload options
    if (typeof (options) != 'undefined') {
      for (var k in options) {
        _options[k] = options[k];
      }
    }
    // decorate
    if (_options['tbody']) {
      decorateGeneric(table.select('tbody'), _options['tbody']);
    }
    if (_options['tbody tr']) {
      decorateGeneric(table.select('tbody tr'), _options['tbody tr']);
    }
    if (_options['thead tr']) {
      decorateGeneric(table.select('thead tr'), _options['thead tr']);
    }
    if (_options['tfoot tr']) {
      decorateGeneric(table.select('tfoot tr'), _options['tfoot tr']);
    }
    if (_options['tr td']) {
      var allRows = table.select('tr');
      if (allRows.length) {
        for (var i = 0; i < allRows.length; i++) {
          decorateGeneric(allRows[i].getElementsByTagName('TD'), _options['tr td']);
        }
      }
    }
  }
}

/**
 * Set "odd", "even" and "last" CSS classes for list items
 * @see decorateGeneric()
 */
function decorateList(list, nonRecursive) {
  if ($(list)) {
    if (typeof (nonRecursive) == 'undefined') {
      var items = $(list).select('li')
    }
    else {
      var items = $(list).childElements();
    }
    decorateGeneric(items, ['odd', 'even', 'last']);
  }
}

/**
 * Set "odd", "even" and "last" CSS classes for list items
 * @see decorateGeneric()
 */
function decorateDataList(list) {
  list = $(list);
  if (list) {
    decorateGeneric(list.select('dt'), ['odd', 'even', 'last']);
    decorateGeneric(list.select('dd'), ['odd', 'even', 'last']);
  }
}

/**
 * Parse SID and produces the correct URL
 */
function parseSidUrl(baseUrl, urlExt) {
  var sidPos = baseUrl.indexOf('/?SID=');
  var sid = '';
  urlExt = (urlExt != undefined) ? urlExt : '';

  if (sidPos > -1) {
    sid = '?' + baseUrl.substring(sidPos + 2);
    baseUrl = baseUrl.substring(0, sidPos + 1);
  }

  return baseUrl + urlExt + sid;
}

/**
 * Formats currency using patern
 * format - JSON (pattern, decimal, decimalsDelimeter, groupsDelimeter)
 * showPlus - true (always show '+'or '-'),
 *      false (never show '-' even if number is negative)
 *      null (show '-' if number is negative)
 */

function formatCurrency(price, format, showPlus) {
  var precision = isNaN(format.precision = Math.abs(format.precision)) ? 2 : format.precision;
  var requiredPrecision = isNaN(format.requiredPrecision = Math.abs(format.requiredPrecision)) ? 2 : format.requiredPrecision;

  //precision = (precision > requiredPrecision) ? precision : requiredPrecision;
  //for now we don't need this difference so precision is requiredPrecision
  precision = requiredPrecision;

  var integerRequired = isNaN(format.integerRequired = Math.abs(format.integerRequired)) ? 1 : format.integerRequired;

  var decimalSymbol = format.decimalSymbol == undefined ? "," : format.decimalSymbol;
  var groupSymbol = format.groupSymbol == undefined ? "." : format.groupSymbol;
  var groupLength = format.groupLength == undefined ? 3 : format.groupLength;

  var s = '';

  if (showPlus == undefined || showPlus == true) {
    s = price < 0 ? "-" : (showPlus ? "+" : "");
  } else if (showPlus == false) {
    s = '';
  }

  var i = parseInt(price = Math.abs(+price || 0).toFixed(precision)) + "";
  var pad = (i.length < integerRequired) ? (integerRequired - i.length) : 0;
  while (pad) { i = '0' + i; pad--; }
  j = (j = i.length) > groupLength ? j % groupLength : 0;
  re = new RegExp("(\\d{" + groupLength + "})(?=\\d)", "g");

  /**
   * replace(/-/, 0) is only for fixing Safari bug which appears
   * when Math.abs(0).toFixed() executed on "0" number.
   * Result is "0.-0" :(
   */
  var r = (j ? i.substr(0, j) + groupSymbol : "") + i.substr(j).replace(re, "$1" + groupSymbol) + (precision ? decimalSymbol + Math.abs(price - i).toFixed(precision).replace(/-/, 0).slice(2) : "")
  var pattern = '';
  if (format.pattern.indexOf('{sign}') == -1) {
    pattern = s + format.pattern;
  } else {
    pattern = format.pattern.replace('{sign}', s);
  }

  return pattern.replace('%s', r).replace(/^\s\s*/, '').replace(/\s\s*$/, '');
};

function expandDetails(el, childClass) {
  if (Element.hasClassName(el, 'show-details')) {
    $$(childClass).each(function (item) { item.hide() });
    Element.removeClassName(el, 'show-details');
  }
  else {
    $$(childClass).each(function (item) { item.show() });
    Element.addClassName(el, 'show-details');
  }
}

// Version 1.0
var isIE = navigator.appVersion.match(/MSIE/) == "MSIE";

if (!window.Varien)
  var Varien = new Object();

Varien.showLoading = function () {
  var loader = $('loading-process');
  loader && loader.show();
}
Varien.hideLoading = function () {
  var loader = $('loading-process');
  loader && loader.hide();
}
Varien.GlobalHandlers = {
  onCreate: function () {
    Varien.showLoading();
  },

  onComplete: function () {
    if (Ajax.activeRequestCount == 0) {
      Varien.hideLoading();
    }
  }
};

Ajax.Responders.register(Varien.GlobalHandlers);

/**
 * Quick Search form client model
 */
Varien.searchForm = Class.create();
Varien.searchForm.prototype = {
  initialize: function (form, field, emptyText) {
    this.form = $(form);
    this.field = $(field);
    this.emptyText = emptyText;

    Event.observe(this.form, 'submit', this.submit.bind(this));
    Event.observe(this.field, 'focus', this.focus.bind(this));
    Event.observe(this.field, 'blur', this.blur.bind(this));
    this.blur();
  },

  submit: function (event) {
    if (this.field.value == this.emptyText || this.field.value == '') {
      Event.stop(event);
      return false;
    }
    return true;
  },

  focus: function (event) {
    if (this.field.value == this.emptyText) {
      this.field.value = '';
    }

  },

  blur: function (event) {
    if (this.field.value == '') {
      this.field.value = this.emptyText;
    }
  },

  initAutocomplete: function (url, destinationElement) {
    new Ajax.Autocompleter(
      this.field,
      destinationElement,
      url,
      {
        paramName: this.field.name,
        method: 'get',
        minChars: 2,
        updateElement: this._selectAutocompleteItem.bind(this),
        onShow: function (element, update) {
          if (!update.style.position || update.style.position == 'absolute') {
            update.style.position = 'absolute';
            Position.clone(element, update, {
              setHeight: false,
              offsetTop: element.offsetHeight
            });
          }
          Effect.Appear(update, { duration: 0 });
        }

      }
    );
  },

  _selectAutocompleteItem: function (element) {
    if (element.title) {
      this.field.value = element.title;
    }
    this.form.submit();
  }
}

Varien.Tabs = Class.create();
Varien.Tabs.prototype = {
  initialize: function (selector) {
    var self = this;
    $$(selector + ' a').each(this.initTab.bind(this));
  },

  initTab: function (el) {
    el.href = 'javascript:void(0)';
    if ($(el.parentNode).hasClassName('active')) {
      this.showContent(el);
    }
    el.observe('click', this.showContent.bind(this, el));
  },

  showContent: function (a) {
    var li = $(a.parentNode), ul = $(li.parentNode);
    ul.getElementsBySelector('li', 'ol').each(function (el) {
      var contents = $(el.id + '_contents');
      if (el == li) {
        el.addClassName('active');
        contents.show();
      } else {
        el.removeClassName('active');
        contents.hide();
      }
    });
  }
}

Varien.DateElement = Class.create();
Varien.DateElement.prototype = {
  initialize: function (type, content, required, format) {
    if (type == 'id') {
      // id prefix
      this.day = $(content + 'day');
      this.month = $(content + 'month');
      this.year = $(content + 'year');
      this.full = $(content + 'full');
      this.advice = $(content + 'date-advice');
    } else if (type == 'container') {
      // content must be container with data
      this.day = content.day;
      this.month = content.month;
      this.year = content.year;
      this.full = content.full;
      this.advice = content.advice;
    } else {
      return;
    }

    this.required = required;
    this.format = format;

    this.day.addClassName('validate-custom');
    this.day.validate = this.validate.bind(this);
    this.month.addClassName('validate-custom');
    this.month.validate = this.validate.bind(this);
    this.year.addClassName('validate-custom');
    this.year.validate = this.validate.bind(this);

    this.setDateRange(false, false);
    this.year.setAttribute('autocomplete', 'off');

    this.advice.hide();
  },
  validate: function () {
    var error = false,
      day = parseInt(this.day.value, 10) || 0,
      month = parseInt(this.month.value, 10) || 0,
      year = parseInt(this.year.value, 10) || 0;
    if (this.day.value.strip().empty()
      && this.month.value.strip().empty()
      && this.year.value.strip().empty()
    ) {
      if (this.required) {
        error = 'This date is a required value.';
      } else {
        this.full.value = '';
      }
    } else if (!day || !month || !year) {
      error = 'Please enter a valid full date.';
    } else {
      var date = new Date, countDaysInMonth = 0, errorType = null;
      date.setYear(year); date.setMonth(month - 1); date.setDate(32);
      countDaysInMonth = 32 - date.getDate();
      if (!countDaysInMonth || countDaysInMonth > 31) countDaysInMonth = 31;

      if (day < 1 || day > countDaysInMonth) {
        errorType = 'day';
        error = 'Please enter a valid day (1-%d).';
      } else if (month < 1 || month > 12) {
        errorType = 'month';
        error = 'Please enter a valid month (1-12).';
      } else {
        if (day % 10 == day) this.day.value = '0' + day;
        if (month % 10 == month) this.month.value = '0' + month;
        this.full.value = this.format.replace(/%[mb]/i, this.month.value).replace(/%[de]/i, this.day.value).replace(/%y/i, this.year.value);
        var testFull = this.month.value + '/' + this.day.value + '/' + this.year.value;
        var test = new Date(testFull);
        if (isNaN(test)) {
          error = 'Please enter a valid date.';
        } else {
          this.setFullDate(test);
        }
      }
      var valueError = false;
      if (!error && !this.validateData()) {//(year<1900 || year>curyear) {
        errorType = this.validateDataErrorType;//'year';
        valueError = this.validateDataErrorText;//'Please enter a valid year (1900-%d).';
        error = valueError;
      }
    }

    if (error !== false) {
      try {
        error = Translator.translate(error);
      }
      catch (e) { }
      if (!valueError) {
        this.advice.innerHTML = error.replace('%d', countDaysInMonth);
      } else {
        this.advice.innerHTML = this.errorTextModifier(error);
      }
      this.advice.show();
      return false;
    }

    // fixing elements class
    this.day.removeClassName('validation-failed');
    this.month.removeClassName('validation-failed');
    this.year.removeClassName('validation-failed');

    this.advice.hide();
    return true;
  },
  validateData: function () {
    var year = this.fullDate.getFullYear();
    var date = new Date;
    this.curyear = date.getFullYear();
    return (year >= 1900 && year <= this.curyear);
  },
  validateDataErrorType: 'year',
  validateDataErrorText: 'Please enter a valid year (1900-%d).',
  errorTextModifier: function (text) {
    return text.replace('%d', this.curyear);
  },
  setDateRange: function (minDate, maxDate) {
    this.minDate = minDate;
    this.maxDate = maxDate;
  },
  setFullDate: function (date) {
    this.fullDate = date;
  }
};

Varien.DOB = Class.create();
Varien.DOB.prototype = {
  initialize: function (selector, required, format) {
    var el = $$(selector)[0];
    var container = {};
    container.day = Element.select(el, '.dob-day input')[0];
    container.month = Element.select(el, '.dob-month input')[0];
    container.year = Element.select(el, '.dob-year input')[0];
    container.full = Element.select(el, '.dob-full input')[0];
    container.advice = Element.select(el, '.validation-advice')[0];

    new Varien.DateElement('container', container, required, format);
  }
};

Varien.dateRangeDate = Class.create();
Varien.dateRangeDate.prototype = Object.extend(new Varien.DateElement(), {
  validateData: function () {
    var validate = true;
    if (this.minDate || this.maxValue) {
      if (this.minDate) {
        this.minDate = new Date(this.minDate);
        this.minDate.setHours(0);
        if (isNaN(this.minDate)) {
          this.minDate = new Date('1/1/1900');
        }
        validate = validate && (this.fullDate >= this.minDate)
      }
      if (this.maxDate) {
        this.maxDate = new Date(this.maxDate)
        this.minDate.setHours(0);
        if (isNaN(this.maxDate)) {
          this.maxDate = new Date();
        }
        validate = validate && (this.fullDate <= this.maxDate)
      }
      if (this.maxDate && this.minDate) {
        this.validateDataErrorText = 'Please enter a valid date between %s and %s';
      } else if (this.maxDate) {
        this.validateDataErrorText = 'Please enter a valid date less than or equal to %s';
      } else if (this.minDate) {
        this.validateDataErrorText = 'Please enter a valid date equal to or greater than %s';
      } else {
        this.validateDataErrorText = '';
      }
    }
    return validate;
  },
  validateDataErrorText: 'Date should be between %s and %s',
  errorTextModifier: function (text) {
    if (this.minDate) {
      text = text.sub('%s', this.dateFormat(this.minDate));
    }
    if (this.maxDate) {
      text = text.sub('%s', this.dateFormat(this.maxDate));
    }
    return text;
  },
  dateFormat: function (date) {
    return (date.getMonth() + 1) + '/' + date.getDate() + '/' + date.getFullYear();
  }
});

Varien.FileElement = Class.create();
Varien.FileElement.prototype = {
  initialize: function (id) {
    this.fileElement = $(id);
    this.hiddenElement = $(id + '_value');

    this.fileElement.observe('change', this.selectFile.bind(this));
  },
  selectFile: function (event) {
    this.hiddenElement.value = this.fileElement.getValue();
  }
};

Validation.addAllThese([
  ['validate-custom', ' ', function (v, elm) {
    return elm.validate();
  }]
]);

function truncateOptions() {
  $$('.truncated').each(function (element) {
    Event.observe(element, 'mouseover', function () {
      if (element.down('div.truncated_full_value')) {
        element.down('div.truncated_full_value').addClassName('show')
      }
    });
    Event.observe(element, 'mouseout', function () {
      if (element.down('div.truncated_full_value')) {
        element.down('div.truncated_full_value').removeClassName('show')
      }
    });

  });
}
Event.observe(window, 'load', function () {
  truncateOptions();
});

Element.addMethods({
  getInnerText: function (element) {
    element = $(element);
    if (element.innerText && !Prototype.Browser.Opera) {
      return element.innerText
    }
    return element.innerHTML.stripScripts().unescapeHTML().replace(/[\n\r\s]+/g, ' ').strip();
  }
});

/*
if (!("console" in window) || !("firebug" in console))
{
    var names = ["log", "debug", "info", "warn", "error", "assert", "dir", "dirxml",
    "group", "groupEnd", "time", "timeEnd", "count", "trace", "profile", "profileEnd"];

    window.console = {};
    for (var i = 0; i < names.length; ++i)
        window.console[names[i]] = function() {}
}
*/

/**
 * Executes event handler on the element. Works with event handlers attached by Prototype,
 * in a browser-agnostic fashion.
 * @param element The element object
 * @param event Event name, like 'change'
 *
 * @example fireEvent($('my-input', 'click'));
 */
function fireEvent(element, event) {
  if (document.createEvent) {
    // dispatch for all browsers except IE before version 9
    var evt = document.createEvent("HTMLEvents");
    evt.initEvent(event, true, true); // event type, bubbling, cancelable
    return element.dispatchEvent(evt);
  } else {
    // dispatch for IE before version 9
    var evt = document.createEventObject();
    return element.fireEvent('on' + event, evt)
  }
}

/**
 * Returns more accurate results of floating-point modulo division
 * E.g.:
 * 0.6 % 0.2 = 0.19999999999999996
 * modulo(0.6, 0.2) = 0
 *
 * @param dividend
 * @param divisor
 */
function modulo(dividend, divisor) {
  var epsilon = divisor / 10000;
  var remainder = dividend % divisor;

  if (Math.abs(remainder - divisor) < epsilon || Math.abs(remainder) < epsilon) {
    remainder = 0;
  }

  return remainder;
}

/**
 * createContextualFragment is not supported in IE9. Adding its support.
 */
if ((typeof Range != "undefined") && !Range.prototype.createContextualFragment) {
  Range.prototype.createContextualFragment = function (html) {
    var frag = document.createDocumentFragment(),
      div = document.createElement("div");
    frag.appendChild(div);
    div.outerHTML = html;
    return frag;
  };
}

/**
 * Create form element. Set parameters into it and send
 *
 * @param url
 * @param parametersArray
 * @param method
 */
Varien.formCreator = Class.create();
Varien.formCreator.prototype = {
  initialize: function (url, parametersArray, method) {
    this.url = url;
    this.parametersArray = JSON.parse(parametersArray);
    this.method = method;
    this.form = '';

    this.createForm();
    this.setFormData();
  },
  createForm: function () {
    this.form = new Element('form', { 'method': this.method, action: this.url });
  },
  setFormData: function () {
    for (var key in this.parametersArray) {
      Element.insert(
        this.form,
        new Element('input', { name: key, value: this.parametersArray[key], type: 'hidden' })
      );
    }
  }
};

function customFormSubmit(url, parametersArray, method) {
  var createdForm = new Varien.formCreator(url, parametersArray, method);
  Element.insert($$('body')[0], createdForm.form);
  createdForm.form.submit();
}

function customFormSubmitToParent(url, parametersArray, method) {
  new Ajax.Request(url, {
    method: method,
    parameters: JSON.parse(parametersArray),
    onSuccess: function (response) {
      var node = document.createElement('div');
      node.innerHTML = response.responseText;
      var responseMessage = node.getElementsByClassName('messages')[0];
      var pageTitle = window.document.body.getElementsByClassName('page-title')[0];
      pageTitle.insertAdjacentHTML('afterend', responseMessage.outerHTML);
      window.opener.focus();
      window.opener.location.href = response.transport.responseURL;
    }
  });
}

/**
 * Magento
 *
 * NOTICE OF LICENSE
 *
 * This source file is subject to the Academic Free License (AFL 3.0)
 * that is bundled with this package in the file LICENSE_AFL.txt.
 * It is also available through the world-wide-web at this URL:
 * http://opensource.org/licenses/afl-3.0.php
 * If you did not receive a copy of the license and are unable to
 * obtain it through the world-wide-web, please send an email
 * to license@magento.com so we can send you a copy immediately.
 *
 * DISCLAIMER
 *
 * Do not edit or add to this file if you wish to upgrade Magento to newer
 * versions in the future. If you wish to customize Magento for your
 * needs please refer to http://www.magento.com for more information.
 *
 * @category    Varien
 * @package     js
 * @copyright   Copyright (c) 2006-2016 X.commerce, Inc. and affiliates (http://www.magento.com)
 * @license     http://opensource.org/licenses/afl-3.0.php  Academic Free License (AFL 3.0)
 */
VarienForm = Class.create();
VarienForm.prototype = {
  initialize: function (formId, firstFieldFocus) {
    this.form = $(formId);
    if (!this.form) {
      return;
    }
    this.cache = $A();
    this.currLoader = false;
    this.currDataIndex = false;
    this.validator = new Validation(this.form);
    this.elementFocus = this.elementOnFocus.bindAsEventListener(this);
    this.elementBlur = this.elementOnBlur.bindAsEventListener(this);
    this.childLoader = this.onChangeChildLoad.bindAsEventListener(this);
    this.highlightClass = 'highlight';
    this.extraChildParams = '';
    this.firstFieldFocus = firstFieldFocus || false;
    this.bindElements();
    if (this.firstFieldFocus) {
      try {
        Form.Element.focus(Form.findFirstElement(this.form))
      }
      catch (e) { }
    }
  },

  submit: function (url) {
    if (this.validator && this.validator.validate()) {
      this.form.submit();
    }
    return false;
  },

  bindElements: function () {
    var elements = Form.getElements(this.form);
    for (var row in elements) {
      if (elements[row].id) {
        Event.observe(elements[row], 'focus', this.elementFocus);
        Event.observe(elements[row], 'blur', this.elementBlur);
      }
    }
  },

  elementOnFocus: function (event) {
    var element = Event.findElement(event, 'fieldset');
    if (element) {
      Element.addClassName(element, this.highlightClass);
    }
  },

  elementOnBlur: function (event) {
    var element = Event.findElement(event, 'fieldset');
    if (element) {
      Element.removeClassName(element, this.highlightClass);
    }
  },

  setElementsRelation: function (parent, child, dataUrl, first) {
    if (parent = $(parent)) {
      // TODO: array of relation and caching
      if (!this.cache[parent.id]) {
        this.cache[parent.id] = $A();
        this.cache[parent.id]['child'] = child;
        this.cache[parent.id]['dataUrl'] = dataUrl;
        this.cache[parent.id]['data'] = $A();
        this.cache[parent.id]['first'] = first || false;
      }
      Event.observe(parent, 'change', this.childLoader);
    }
  },

  onChangeChildLoad: function (event) {
    element = Event.element(event);
    this.elementChildLoad(element);
  },

  elementChildLoad: function (element, callback) {
    this.callback = callback || false;
    if (element.value) {
      this.currLoader = element.id;
      this.currDataIndex = element.value;
      if (this.cache[element.id]['data'][element.value]) {
        this.setDataToChild(this.cache[element.id]['data'][element.value]);
      }
      else {
        new Ajax.Request(this.cache[this.currLoader]['dataUrl'], {
          method: 'post',
          parameters: { "parent": element.value },
          onComplete: this.reloadChildren.bind(this)
        });
      }
    }
  },

  reloadChildren: function (transport) {
    var data = eval('(' + transport.responseText + ')');
    this.cache[this.currLoader]['data'][this.currDataIndex] = data;
    this.setDataToChild(data);
  },

  setDataToChild: function (data) {
    if (data.length) {
      var child = $(this.cache[this.currLoader]['child']);
      if (child) {
        var html = '<select name="' + child.name + '" id="' + child.id + '" class="' + child.className + '" title="' + child.title + '" ' + this.extraChildParams + '>';
        if (this.cache[this.currLoader]['first']) {
          html += '<option value="">' + this.cache[this.currLoader]['first'] + '</option>';
        }
        for (var i in data) {
          if (data[i].value) {
            html += '<option value="' + data[i].value + '"';
            if (child.value && (child.value == data[i].value || child.value == data[i].label)) {
              html += ' selected';
            }
            html += '>' + data[i].label + '</option>';
          }
        }
        html += '</select>';
        Element.insert(child, { before: html });
        Element.remove(child);
      }
    }
    else {
      var child = $(this.cache[this.currLoader]['child']);
      if (child) {
        var html = '<input type="text" name="' + child.name + '" id="' + child.id + '" class="' + child.className + '" title="' + child.title + '" ' + this.extraChildParams + '>';
        Element.insert(child, { before: html });
        Element.remove(child);
      }
    }

    this.bindElements();
    if (this.callback) {
      this.callback();
    }
  }
}

RegionUpdater = Class.create();
RegionUpdater.prototype = {
  initialize: function (countryEl, regionTextEl, regionSelectEl, regions, disableAction, zipEl) {
    this.countryEl = $(countryEl);
    this.regionTextEl = $(regionTextEl);
    this.regionSelectEl = $(regionSelectEl);
    this.zipEl = $(zipEl);
    this.config = regions['config'];
    delete regions.config;
    this.regions = regions;

    this.disableAction = (typeof disableAction == 'undefined') ? 'hide' : disableAction;
    this.zipOptions = (typeof zipOptions == 'undefined') ? false : zipOptions;

    if (this.regionSelectEl && this.regionSelectEl.options && this.regionSelectEl.options.length <= 1) {
      this.update();
    }

    Event.observe(this.countryEl, 'change', this.update.bind(this));
  },

  _checkRegionRequired: function () {
    var label, wildCard;
    var elements = [this.regionTextEl, this.regionSelectEl];
    var that = this;
    if (typeof this.config == 'undefined') {
      return;
    }
    var regionRequired = this.config.regions_required.indexOf(this.countryEl.value) >= 0;

    elements.each(function (currentElement) {
      Validation.reset(currentElement);
      label = $$('label[for="' + currentElement.id + '"]')[0];
      if (label) {
        wildCard = label.down('em') || label.down('span.required');
        if (!that.config.show_all_regions) {
          if (regionRequired) {
            label.up().show();
          } else {
            label.up().hide();
          }
        }
      }

      if (label && wildCard) {
        if (!regionRequired) {
          wildCard.hide();
          if (label.hasClassName('required')) {
            label.removeClassName('required');
          }
        } else if (regionRequired) {
          wildCard.show();
          if (!label.hasClassName('required')) {
            label.addClassName('required')
          }
        }
      }

      if (!regionRequired) {
        if (currentElement.hasClassName('required-entry')) {
          currentElement.removeClassName('required-entry');
        }
        if ('select' == currentElement.tagName.toLowerCase() &&
          currentElement.hasClassName('validate-select')) {
          currentElement.removeClassName('validate-select');
        }
      } else {
        if (!currentElement.hasClassName('required-entry')) {
          currentElement.addClassName('required-entry');
        }
        if ('select' == currentElement.tagName.toLowerCase() &&
          !currentElement.hasClassName('validate-select')) {
          currentElement.addClassName('validate-select');
        }
      }
    });
  },

  update: function () {
    if (this.regions[this.countryEl.value]) {
      var i, option, region, def;

      def = this.regionSelectEl.getAttribute('defaultValue');
      if (this.regionTextEl) {
        if (!def) {
          def = this.regionTextEl.value.toLowerCase();
        }
        this.regionTextEl.value = '';
      }

      this.regionSelectEl.options.length = 1;
      for (regionId in this.regions[this.countryEl.value]) {
        region = this.regions[this.countryEl.value][regionId];

        option = document.createElement('OPTION');
        option.value = regionId;
        option.text = region.name.stripTags();
        option.title = region.name;

        if (this.regionSelectEl.options.add) {
          this.regionSelectEl.options.add(option);
        } else {
          this.regionSelectEl.appendChild(option);
        }

        if (regionId == def || (region.name && region.name.toLowerCase() == def)
          || (region.name && region.code.toLowerCase() == def)
        ) {
          this.regionSelectEl.value = regionId;
        }
      }
      this.sortSelect();
      if (this.disableAction == 'hide') {
        if (this.regionTextEl) {
          this.regionTextEl.style.display = 'none';
        }

        this.regionSelectEl.style.display = '';
      } else if (this.disableAction == 'disable') {
        if (this.regionTextEl) {
          this.regionTextEl.disabled = true;
        }
        this.regionSelectEl.disabled = false;
      }
      this.setMarkDisplay(this.regionSelectEl, true);
    } else {
      this.regionSelectEl.options.length = 1;
      this.sortSelect();
      if (this.disableAction == 'hide') {
        if (this.regionTextEl) {
          this.regionTextEl.style.display = '';
        }
        this.regionSelectEl.style.display = 'none';
        Validation.reset(this.regionSelectEl);
      } else if (this.disableAction == 'disable') {
        if (this.regionTextEl) {
          this.regionTextEl.disabled = false;
        }
        this.regionSelectEl.disabled = true;
      } else if (this.disableAction == 'nullify') {
        this.regionSelectEl.options.length = 1;
        this.regionSelectEl.value = '';
        this.regionSelectEl.selectedIndex = 0;
        this.lastCountryId = '';
      }
      this.setMarkDisplay(this.regionSelectEl, false);
    }

    this._checkRegionRequired();
    // Make Zip and its label required/optional
    var zipUpdater = new ZipUpdater(this.countryEl.value, this.zipEl);
    zipUpdater.update();
  },

  setMarkDisplay: function (elem, display) {
    elem = $(elem);
    var labelElement = elem.up(0).down('label > span.required') ||
      elem.up(1).down('label > span.required') ||
      elem.up(0).down('label.required > em') ||
      elem.up(1).down('label.required > em');
    if (labelElement) {
      inputElement = labelElement.up().next('input');
      if (display) {
        labelElement.show();
        if (inputElement) {
          inputElement.addClassName('required-entry');
        }
      } else {
        labelElement.hide();
        if (inputElement) {
          inputElement.removeClassName('required-entry');
        }
      }
    }
  },
  sortSelect: function () {
    var elem = this.regionSelectEl;
    var tmpArray = new Array();
    var currentVal = $(elem).value;
    for (var i = 0; i < $(elem).options.length; i++) {
      if (i == 0) {
        continue;
      }
      tmpArray[i - 1] = new Array();
      tmpArray[i - 1][0] = $(elem).options[i].text;
      tmpArray[i - 1][1] = $(elem).options[i].value;
    }
    tmpArray.sort();
    for (var i = 1; i <= tmpArray.length; i++) {
      var op = new Option(tmpArray[i - 1][0], tmpArray[i - 1][1]);
      $(elem).options[i] = op;
    }
    $(elem).value = currentVal;
    return;
  }
}

ZipUpdater = Class.create();
ZipUpdater.prototype = {
  initialize: function (country, zipElement) {
    this.country = country;
    this.zipElement = $(zipElement);
  },

  update: function () {
    // Country ISO 2-letter codes must be pre-defined
    if (typeof optionalZipCountries == 'undefined') {
      return false;
    }

    // Ajax-request and normal content load compatibility
    if (this.zipElement != undefined) {
      Validation.reset(this.zipElement)
      this._setPostcodeOptional();
    } else {
      Event.observe(window, "load", this._setPostcodeOptional.bind(this));
    }
  },

  _setPostcodeOptional: function () {
    this.zipElement = $(this.zipElement);
    if (this.zipElement == undefined) {
      return false;
    }

    // find label
    var label = $$('label[for="' + this.zipElement.id + '"]')[0];
    if (label != undefined) {
      var wildCard = label.down('em') || label.down('span.required');
    }

    // Make Zip and its label required/optional
    if (optionalZipCountries.indexOf(this.country) != -1) {
      while (this.zipElement.hasClassName('required-entry')) {
        this.zipElement.removeClassName('required-entry');
      }
      if (wildCard != undefined) {
        wildCard.hide();
      }
    } else {
      this.zipElement.addClassName('required-entry');
      if (wildCard != undefined) {
        wildCard.show();
      }
    }
  }
}

/**
 * Magento
 *
 * NOTICE OF LICENSE
 *
 * This source file is subject to the Academic Free License (AFL 3.0)
 * that is bundled with this package in the file LICENSE_AFL.txt.
 * It is also available through the world-wide-web at this URL:
 * http://opensource.org/licenses/afl-3.0.php
 * If you did not receive a copy of the license and are unable to
 * obtain it through the world-wide-web, please send an email
 * to license@magento.com so we can send you a copy immediately.
 *
 * DISCLAIMER
 *
 * Do not edit or add to this file if you wish to upgrade Magento to newer
 * versions in the future. If you wish to customize Magento for your
 * needs please refer to http://www.magento.com for more information.
 *
 * @category    Mage
 * @package     js
 * @copyright   Copyright (c) 2006-2016 X.commerce, Inc. and affiliates (http://www.magento.com)
 * @license     http://opensource.org/licenses/afl-3.0.php  Academic Free License (AFL 3.0)
 */

var Translate = Class.create();
Translate.prototype = {
  initialize: function (data) {
    this.data = $H(data);
  },

  translate: function () {
    var args = arguments;
    var text = arguments[0];

    if (this.data.get(text)) {
      return this.data.get(text);
    }
    return text;
  },
  add: function () {
    if (arguments.length > 1) {
      this.data.set(arguments[0], arguments[1]);
    } else if (typeof arguments[0] == 'object') {
      $H(arguments[0]).each(function (pair) {
        this.data.set(pair.key, pair.value);
      }.bind(this));
    }
  }
}

/**
 * Magento
 *
 * NOTICE OF LICENSE
 *
 * This source file is subject to the Academic Free License (AFL 3.0)
 * that is bundled with this package in the file LICENSE_AFL.txt.
 * It is also available through the world-wide-web at this URL:
 * http://opensource.org/licenses/afl-3.0.php
 * If you did not receive a copy of the license and are unable to
 * obtain it through the world-wide-web, please send an email
 * to license@magento.com so we can send you a copy immediately.
 *
 * DISCLAIMER
 *
 * Do not edit or add to this file if you wish to upgrade Magento to newer
 * versions in the future. If you wish to customize Magento for your
 * needs please refer to http://www.magento.com for more information.
 *
 * @category    Mage
 * @package     js
 * @copyright   Copyright (c) 2006-2016 X.commerce, Inc. and affiliates (http://www.magento.com)
 * @license     http://opensource.org/licenses/afl-3.0.php  Academic Free License (AFL 3.0)
 */
// old school cookie functions grabbed off the web

if (!window.Mage) var Mage = {};

Mage.Cookies = {};
Mage.Cookies.expires = null;
Mage.Cookies.path = '/';
Mage.Cookies.domain = null;
Mage.Cookies.secure = false;
Mage.Cookies.set = function (name, value) {
  var argv = arguments;
  var argc = arguments.length;
  var expires = (argc > 2) ? argv[2] : Mage.Cookies.expires;
  var path = (argc > 3) ? argv[3] : Mage.Cookies.path;
  var domain = (argc > 4) ? argv[4] : Mage.Cookies.domain;
  var secure = (argc > 5) ? argv[5] : Mage.Cookies.secure;
  document.cookie = name + "=" + escape(value) +
    ((expires == null) ? "" : ("; expires=" + expires.toGMTString())) +
    ((path == null) ? "" : ("; path=" + path)) +
    ((domain == null) ? "" : ("; domain=" + domain)) +
    ((secure == true) ? "; secure" : "");
};

Mage.Cookies.get = function (name) {
  var arg = name + "=";
  var alen = arg.length;
  var clen = document.cookie.length;
  var i = 0;
  var j = 0;
  while (i < clen) {
    j = i + alen;
    if (document.cookie.substring(i, j) == arg)
      return Mage.Cookies.getCookieVal(j);
    i = document.cookie.indexOf(" ", i) + 1;
    if (i == 0)
      break;
  }
  return null;
};

Mage.Cookies.clear = function (name) {
  if (Mage.Cookies.get(name)) {
    document.cookie = name + "=" +
      "; expires=Thu, 01-Jan-70 00:00:01 GMT";
  }
};

Mage.Cookies.getCookieVal = function (offset) {
  var endstr = document.cookie.indexOf(";", offset);
  if (endstr == -1) {
    endstr = document.cookie.length;
  }
  return unescape(document.cookie.substring(offset, endstr));
};

/*! jQuery v1.12.1 | (c) jQuery Foundation | jquery.org/license */
!function (a, b) { "object" == typeof module && "object" == typeof module.exports ? module.exports = a.document ? b(a, !0) : function (a) { if (!a.document) throw new Error("jQuery requires a window with a document"); return b(a) } : b(a) }("undefined" != typeof window ? window : this, function (a, b) {
  var c = [], d = a.document, e = c.slice, f = c.concat, g = c.push, h = c.indexOf, i = {}, j = i.toString, k = i.hasOwnProperty, l = {}, m = "1.12.1", n = function (a, b) { return new n.fn.init(a, b) }, o = /^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g, p = /^-ms-/, q = /-([\da-z])/gi, r = function (a, b) { return b.toUpperCase() }; n.fn = n.prototype = { jquery: m, constructor: n, selector: "", length: 0, toArray: function () { return e.call(this) }, get: function (a) { return null != a ? 0 > a ? this[a + this.length] : this[a] : e.call(this) }, pushStack: function (a) { var b = n.merge(this.constructor(), a); return b.prevObject = this, b.context = this.context, b }, each: function (a) { return n.each(this, a) }, map: function (a) { return this.pushStack(n.map(this, function (b, c) { return a.call(b, c, b) })) }, slice: function () { return this.pushStack(e.apply(this, arguments)) }, first: function () { return this.eq(0) }, last: function () { return this.eq(-1) }, eq: function (a) { var b = this.length, c = +a + (0 > a ? b : 0); return this.pushStack(c >= 0 && b > c ? [this[c]] : []) }, end: function () { return this.prevObject || this.constructor() }, push: g, sort: c.sort, splice: c.splice }, n.extend = n.fn.extend = function () { var a, b, c, d, e, f, g = arguments[0] || {}, h = 1, i = arguments.length, j = !1; for ("boolean" == typeof g && (j = g, g = arguments[h] || {}, h++), "object" == typeof g || n.isFunction(g) || (g = {}), h === i && (g = this, h--); i > h; h++)if (null != (e = arguments[h])) for (d in e) a = g[d], c = e[d], g !== c && (j && c && (n.isPlainObject(c) || (b = n.isArray(c))) ? (b ? (b = !1, f = a && n.isArray(a) ? a : []) : f = a && n.isPlainObject(a) ? a : {}, g[d] = n.extend(j, f, c)) : void 0 !== c && (g[d] = c)); return g }, n.extend({ expando: "jQuery" + (m + Math.random()).replace(/\D/g, ""), isReady: !0, error: function (a) { throw new Error(a) }, noop: function () { }, isFunction: function (a) { return "function" === n.type(a) }, isArray: Array.isArray || function (a) { return "array" === n.type(a) }, isWindow: function (a) { return null != a && a == a.window }, isNumeric: function (a) { var b = a && a.toString(); return !n.isArray(a) && b - parseFloat(b) + 1 >= 0 }, isEmptyObject: function (a) { var b; for (b in a) return !1; return !0 }, isPlainObject: function (a) { var b; if (!a || "object" !== n.type(a) || a.nodeType || n.isWindow(a)) return !1; try { if (a.constructor && !k.call(a, "constructor") && !k.call(a.constructor.prototype, "isPrototypeOf")) return !1 } catch (c) { return !1 } if (!l.ownFirst) for (b in a) return k.call(a, b); for (b in a); return void 0 === b || k.call(a, b) }, type: function (a) { return null == a ? a + "" : "object" == typeof a || "function" == typeof a ? i[j.call(a)] || "object" : typeof a }, globalEval: function (b) { b && n.trim(b) && (a.execScript || function (b) { a.eval.call(a, b) })(b) }, camelCase: function (a) { return a.replace(p, "ms-").replace(q, r) }, nodeName: function (a, b) { return a.nodeName && a.nodeName.toLowerCase() === b.toLowerCase() }, each: function (a, b) { var c, d = 0; if (s(a)) { for (c = a.length; c > d; d++)if (b.call(a[d], d, a[d]) === !1) break } else for (d in a) if (b.call(a[d], d, a[d]) === !1) break; return a }, trim: function (a) { return null == a ? "" : (a + "").replace(o, "") }, makeArray: function (a, b) { var c = b || []; return null != a && (s(Object(a)) ? n.merge(c, "string" == typeof a ? [a] : a) : g.call(c, a)), c }, inArray: function (a, b, c) { var d; if (b) { if (h) return h.call(b, a, c); for (d = b.length, c = c ? 0 > c ? Math.max(0, d + c) : c : 0; d > c; c++)if (c in b && b[c] === a) return c } return -1 }, merge: function (a, b) { var c = +b.length, d = 0, e = a.length; while (c > d) a[e++] = b[d++]; if (c !== c) while (void 0 !== b[d]) a[e++] = b[d++]; return a.length = e, a }, grep: function (a, b, c) { for (var d, e = [], f = 0, g = a.length, h = !c; g > f; f++)d = !b(a[f], f), d !== h && e.push(a[f]); return e }, map: function (a, b, c) { var d, e, g = 0, h = []; if (s(a)) for (d = a.length; d > g; g++)e = b(a[g], g, c), null != e && h.push(e); else for (g in a) e = b(a[g], g, c), null != e && h.push(e); return f.apply([], h) }, guid: 1, proxy: function (a, b) { var c, d, f; return "string" == typeof b && (f = a[b], b = a, a = f), n.isFunction(a) ? (c = e.call(arguments, 2), d = function () { return a.apply(b || this, c.concat(e.call(arguments))) }, d.guid = a.guid = a.guid || n.guid++, d) : void 0 }, now: function () { return +new Date }, support: l }), "function" == typeof Symbol && (n.fn[Symbol.iterator] = c[Symbol.iterator]), n.each("Boolean Number String Function Array Date RegExp Object Error Symbol".split(" "), function (a, b) { i["[object " + b + "]"] = b.toLowerCase() }); function s(a) { var b = !!a && "length" in a && a.length, c = n.type(a); return "function" === c || n.isWindow(a) ? !1 : "array" === c || 0 === b || "number" == typeof b && b > 0 && b - 1 in a } var t = function (a) { var b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u = "sizzle" + 1 * new Date, v = a.document, w = 0, x = 0, y = ga(), z = ga(), A = ga(), B = function (a, b) { return a === b && (l = !0), 0 }, C = 1 << 31, D = {}.hasOwnProperty, E = [], F = E.pop, G = E.push, H = E.push, I = E.slice, J = function (a, b) { for (var c = 0, d = a.length; d > c; c++)if (a[c] === b) return c; return -1 }, K = "checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped", L = "[\\x20\\t\\r\\n\\f]", M = "(?:\\\\.|[\\w-]|[^\\x00-\\xa0])+", N = "\\[" + L + "*(" + M + ")(?:" + L + "*([*^$|!~]?=)" + L + "*(?:'((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\"|(" + M + "))|)" + L + "*\\]", O = ":(" + M + ")(?:\\((('((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\")|((?:\\\\.|[^\\\\()[\\]]|" + N + ")*)|.*)\\)|)", P = new RegExp(L + "+", "g"), Q = new RegExp("^" + L + "+|((?:^|[^\\\\])(?:\\\\.)*)" + L + "+$", "g"), R = new RegExp("^" + L + "*," + L + "*"), S = new RegExp("^" + L + "*([>+~]|" + L + ")" + L + "*"), T = new RegExp("=" + L + "*([^\\]'\"]*?)" + L + "*\\]", "g"), U = new RegExp(O), V = new RegExp("^" + M + "$"), W = { ID: new RegExp("^#(" + M + ")"), CLASS: new RegExp("^\\.(" + M + ")"), TAG: new RegExp("^(" + M + "|[*])"), ATTR: new RegExp("^" + N), PSEUDO: new RegExp("^" + O), CHILD: new RegExp("^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\(" + L + "*(even|odd|(([+-]|)(\\d*)n|)" + L + "*(?:([+-]|)" + L + "*(\\d+)|))" + L + "*\\)|)", "i"), bool: new RegExp("^(?:" + K + ")$", "i"), needsContext: new RegExp("^" + L + "*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\(" + L + "*((?:-\\d)?\\d*)" + L + "*\\)|)(?=[^-]|$)", "i") }, X = /^(?:input|select|textarea|button)$/i, Y = /^h\d$/i, Z = /^[^{]+\{\s*\[native \w/, $ = /^(?:#([\w-]+)|(\w+)|\.([\w-]+))$/, _ = /[+~]/, aa = /'|\\/g, ba = new RegExp("\\\\([\\da-f]{1,6}" + L + "?|(" + L + ")|.)", "ig"), ca = function (a, b, c) { var d = "0x" + b - 65536; return d !== d || c ? b : 0 > d ? String.fromCharCode(d + 65536) : String.fromCharCode(d >> 10 | 55296, 1023 & d | 56320) }, da = function () { m() }; try { H.apply(E = I.call(v.childNodes), v.childNodes), E[v.childNodes.length].nodeType } catch (ea) { H = { apply: E.length ? function (a, b) { G.apply(a, I.call(b)) } : function (a, b) { var c = a.length, d = 0; while (a[c++] = b[d++]); a.length = c - 1 } } } function fa(a, b, d, e) { var f, h, j, k, l, o, r, s, w = b && b.ownerDocument, x = b ? b.nodeType : 9; if (d = d || [], "string" != typeof a || !a || 1 !== x && 9 !== x && 11 !== x) return d; if (!e && ((b ? b.ownerDocument || b : v) !== n && m(b), b = b || n, p)) { if (11 !== x && (o = $.exec(a))) if (f = o[1]) { if (9 === x) { if (!(j = b.getElementById(f))) return d; if (j.id === f) return d.push(j), d } else if (w && (j = w.getElementById(f)) && t(b, j) && j.id === f) return d.push(j), d } else { if (o[2]) return H.apply(d, b.getElementsByTagName(a)), d; if ((f = o[3]) && c.getElementsByClassName && b.getElementsByClassName) return H.apply(d, b.getElementsByClassName(f)), d } if (c.qsa && !A[a + " "] && (!q || !q.test(a))) { if (1 !== x) w = b, s = a; else if ("object" !== b.nodeName.toLowerCase()) { (k = b.getAttribute("id")) ? k = k.replace(aa, "\\$&") : b.setAttribute("id", k = u), r = g(a), h = r.length, l = V.test(k) ? "#" + k : "[id='" + k + "']"; while (h--) r[h] = l + " " + qa(r[h]); s = r.join(","), w = _.test(a) && oa(b.parentNode) || b } if (s) try { return H.apply(d, w.querySelectorAll(s)), d } catch (y) { } finally { k === u && b.removeAttribute("id") } } } return i(a.replace(Q, "$1"), b, d, e) } function ga() { var a = []; function b(c, e) { return a.push(c + " ") > d.cacheLength && delete b[a.shift()], b[c + " "] = e } return b } function ha(a) { return a[u] = !0, a } function ia(a) { var b = n.createElement("div"); try { return !!a(b) } catch (c) { return !1 } finally { b.parentNode && b.parentNode.removeChild(b), b = null } } function ja(a, b) { var c = a.split("|"), e = c.length; while (e--) d.attrHandle[c[e]] = b } function ka(a, b) { var c = b && a, d = c && 1 === a.nodeType && 1 === b.nodeType && (~b.sourceIndex || C) - (~a.sourceIndex || C); if (d) return d; if (c) while (c = c.nextSibling) if (c === b) return -1; return a ? 1 : -1 } function la(a) { return function (b) { var c = b.nodeName.toLowerCase(); return "input" === c && b.type === a } } function ma(a) { return function (b) { var c = b.nodeName.toLowerCase(); return ("input" === c || "button" === c) && b.type === a } } function na(a) { return ha(function (b) { return b = +b, ha(function (c, d) { var e, f = a([], c.length, b), g = f.length; while (g--) c[e = f[g]] && (c[e] = !(d[e] = c[e])) }) }) } function oa(a) { return a && "undefined" != typeof a.getElementsByTagName && a } c = fa.support = {}, f = fa.isXML = function (a) { var b = a && (a.ownerDocument || a).documentElement; return b ? "HTML" !== b.nodeName : !1 }, m = fa.setDocument = function (a) { var b, e, g = a ? a.ownerDocument || a : v; return g !== n && 9 === g.nodeType && g.documentElement ? (n = g, o = n.documentElement, p = !f(n), (e = n.defaultView) && e.top !== e && (e.addEventListener ? e.addEventListener("unload", da, !1) : e.attachEvent && e.attachEvent("onunload", da)), c.attributes = ia(function (a) { return a.className = "i", !a.getAttribute("className") }), c.getElementsByTagName = ia(function (a) { return a.appendChild(n.createComment("")), !a.getElementsByTagName("*").length }), c.getElementsByClassName = Z.test(n.getElementsByClassName), c.getById = ia(function (a) { return o.appendChild(a).id = u, !n.getElementsByName || !n.getElementsByName(u).length }), c.getById ? (d.find.ID = function (a, b) { if ("undefined" != typeof b.getElementById && p) { var c = b.getElementById(a); return c ? [c] : [] } }, d.filter.ID = function (a) { var b = a.replace(ba, ca); return function (a) { return a.getAttribute("id") === b } }) : (delete d.find.ID, d.filter.ID = function (a) { var b = a.replace(ba, ca); return function (a) { var c = "undefined" != typeof a.getAttributeNode && a.getAttributeNode("id"); return c && c.value === b } }), d.find.TAG = c.getElementsByTagName ? function (a, b) { return "undefined" != typeof b.getElementsByTagName ? b.getElementsByTagName(a) : c.qsa ? b.querySelectorAll(a) : void 0 } : function (a, b) { var c, d = [], e = 0, f = b.getElementsByTagName(a); if ("*" === a) { while (c = f[e++]) 1 === c.nodeType && d.push(c); return d } return f }, d.find.CLASS = c.getElementsByClassName && function (a, b) { return "undefined" != typeof b.getElementsByClassName && p ? b.getElementsByClassName(a) : void 0 }, r = [], q = [], (c.qsa = Z.test(n.querySelectorAll)) && (ia(function (a) { o.appendChild(a).innerHTML = "<a id='" + u + "'></a><select id='" + u + "-\r\\' msallowcapture=''><option selected=''></option></select>", a.querySelectorAll("[msallowcapture^='']").length && q.push("[*^$]=" + L + "*(?:''|\"\")"), a.querySelectorAll("[selected]").length || q.push("\\[" + L + "*(?:value|" + K + ")"), a.querySelectorAll("[id~=" + u + "-]").length || q.push("~="), a.querySelectorAll(":checked").length || q.push(":checked"), a.querySelectorAll("a#" + u + "+*").length || q.push(".#.+[+~]") }), ia(function (a) { var b = n.createElement("input"); b.setAttribute("type", "hidden"), a.appendChild(b).setAttribute("name", "D"), a.querySelectorAll("[name=d]").length && q.push("name" + L + "*[*^$|!~]?="), a.querySelectorAll(":enabled").length || q.push(":enabled", ":disabled"), a.querySelectorAll("*,:x"), q.push(",.*:") })), (c.matchesSelector = Z.test(s = o.matches || o.webkitMatchesSelector || o.mozMatchesSelector || o.oMatchesSelector || o.msMatchesSelector)) && ia(function (a) { c.disconnectedMatch = s.call(a, "div"), s.call(a, "[s!='']:x"), r.push("!=", O) }), q = q.length && new RegExp(q.join("|")), r = r.length && new RegExp(r.join("|")), b = Z.test(o.compareDocumentPosition), t = b || Z.test(o.contains) ? function (a, b) { var c = 9 === a.nodeType ? a.documentElement : a, d = b && b.parentNode; return a === d || !(!d || 1 !== d.nodeType || !(c.contains ? c.contains(d) : a.compareDocumentPosition && 16 & a.compareDocumentPosition(d))) } : function (a, b) { if (b) while (b = b.parentNode) if (b === a) return !0; return !1 }, B = b ? function (a, b) { if (a === b) return l = !0, 0; var d = !a.compareDocumentPosition - !b.compareDocumentPosition; return d ? d : (d = (a.ownerDocument || a) === (b.ownerDocument || b) ? a.compareDocumentPosition(b) : 1, 1 & d || !c.sortDetached && b.compareDocumentPosition(a) === d ? a === n || a.ownerDocument === v && t(v, a) ? -1 : b === n || b.ownerDocument === v && t(v, b) ? 1 : k ? J(k, a) - J(k, b) : 0 : 4 & d ? -1 : 1) } : function (a, b) { if (a === b) return l = !0, 0; var c, d = 0, e = a.parentNode, f = b.parentNode, g = [a], h = [b]; if (!e || !f) return a === n ? -1 : b === n ? 1 : e ? -1 : f ? 1 : k ? J(k, a) - J(k, b) : 0; if (e === f) return ka(a, b); c = a; while (c = c.parentNode) g.unshift(c); c = b; while (c = c.parentNode) h.unshift(c); while (g[d] === h[d]) d++; return d ? ka(g[d], h[d]) : g[d] === v ? -1 : h[d] === v ? 1 : 0 }, n) : n }, fa.matches = function (a, b) { return fa(a, null, null, b) }, fa.matchesSelector = function (a, b) { if ((a.ownerDocument || a) !== n && m(a), b = b.replace(T, "='$1']"), c.matchesSelector && p && !A[b + " "] && (!r || !r.test(b)) && (!q || !q.test(b))) try { var d = s.call(a, b); if (d || c.disconnectedMatch || a.document && 11 !== a.document.nodeType) return d } catch (e) { } return fa(b, n, null, [a]).length > 0 }, fa.contains = function (a, b) { return (a.ownerDocument || a) !== n && m(a), t(a, b) }, fa.attr = function (a, b) { (a.ownerDocument || a) !== n && m(a); var e = d.attrHandle[b.toLowerCase()], f = e && D.call(d.attrHandle, b.toLowerCase()) ? e(a, b, !p) : void 0; return void 0 !== f ? f : c.attributes || !p ? a.getAttribute(b) : (f = a.getAttributeNode(b)) && f.specified ? f.value : null }, fa.error = function (a) { throw new Error("Syntax error, unrecognized expression: " + a) }, fa.uniqueSort = function (a) { var b, d = [], e = 0, f = 0; if (l = !c.detectDuplicates, k = !c.sortStable && a.slice(0), a.sort(B), l) { while (b = a[f++]) b === a[f] && (e = d.push(f)); while (e--) a.splice(d[e], 1) } return k = null, a }, e = fa.getText = function (a) { var b, c = "", d = 0, f = a.nodeType; if (f) { if (1 === f || 9 === f || 11 === f) { if ("string" == typeof a.textContent) return a.textContent; for (a = a.firstChild; a; a = a.nextSibling)c += e(a) } else if (3 === f || 4 === f) return a.nodeValue } else while (b = a[d++]) c += e(b); return c }, d = fa.selectors = { cacheLength: 50, createPseudo: ha, match: W, attrHandle: {}, find: {}, relative: { ">": { dir: "parentNode", first: !0 }, " ": { dir: "parentNode" }, "+": { dir: "previousSibling", first: !0 }, "~": { dir: "previousSibling" } }, preFilter: { ATTR: function (a) { return a[1] = a[1].replace(ba, ca), a[3] = (a[3] || a[4] || a[5] || "").replace(ba, ca), "~=" === a[2] && (a[3] = " " + a[3] + " "), a.slice(0, 4) }, CHILD: function (a) { return a[1] = a[1].toLowerCase(), "nth" === a[1].slice(0, 3) ? (a[3] || fa.error(a[0]), a[4] = +(a[4] ? a[5] + (a[6] || 1) : 2 * ("even" === a[3] || "odd" === a[3])), a[5] = +(a[7] + a[8] || "odd" === a[3])) : a[3] && fa.error(a[0]), a }, PSEUDO: function (a) { var b, c = !a[6] && a[2]; return W.CHILD.test(a[0]) ? null : (a[3] ? a[2] = a[4] || a[5] || "" : c && U.test(c) && (b = g(c, !0)) && (b = c.indexOf(")", c.length - b) - c.length) && (a[0] = a[0].slice(0, b), a[2] = c.slice(0, b)), a.slice(0, 3)) } }, filter: { TAG: function (a) { var b = a.replace(ba, ca).toLowerCase(); return "*" === a ? function () { return !0 } : function (a) { return a.nodeName && a.nodeName.toLowerCase() === b } }, CLASS: function (a) { var b = y[a + " "]; return b || (b = new RegExp("(^|" + L + ")" + a + "(" + L + "|$)")) && y(a, function (a) { return b.test("string" == typeof a.className && a.className || "undefined" != typeof a.getAttribute && a.getAttribute("class") || "") }) }, ATTR: function (a, b, c) { return function (d) { var e = fa.attr(d, a); return null == e ? "!=" === b : b ? (e += "", "=" === b ? e === c : "!=" === b ? e !== c : "^=" === b ? c && 0 === e.indexOf(c) : "*=" === b ? c && e.indexOf(c) > -1 : "$=" === b ? c && e.slice(-c.length) === c : "~=" === b ? (" " + e.replace(P, " ") + " ").indexOf(c) > -1 : "|=" === b ? e === c || e.slice(0, c.length + 1) === c + "-" : !1) : !0 } }, CHILD: function (a, b, c, d, e) { var f = "nth" !== a.slice(0, 3), g = "last" !== a.slice(-4), h = "of-type" === b; return 1 === d && 0 === e ? function (a) { return !!a.parentNode } : function (b, c, i) { var j, k, l, m, n, o, p = f !== g ? "nextSibling" : "previousSibling", q = b.parentNode, r = h && b.nodeName.toLowerCase(), s = !i && !h, t = !1; if (q) { if (f) { while (p) { m = b; while (m = m[p]) if (h ? m.nodeName.toLowerCase() === r : 1 === m.nodeType) return !1; o = p = "only" === a && !o && "nextSibling" } return !0 } if (o = [g ? q.firstChild : q.lastChild], g && s) { m = q, l = m[u] || (m[u] = {}), k = l[m.uniqueID] || (l[m.uniqueID] = {}), j = k[a] || [], n = j[0] === w && j[1], t = n && j[2], m = n && q.childNodes[n]; while (m = ++n && m && m[p] || (t = n = 0) || o.pop()) if (1 === m.nodeType && ++t && m === b) { k[a] = [w, n, t]; break } } else if (s && (m = b, l = m[u] || (m[u] = {}), k = l[m.uniqueID] || (l[m.uniqueID] = {}), j = k[a] || [], n = j[0] === w && j[1], t = n), t === !1) while (m = ++n && m && m[p] || (t = n = 0) || o.pop()) if ((h ? m.nodeName.toLowerCase() === r : 1 === m.nodeType) && ++t && (s && (l = m[u] || (m[u] = {}), k = l[m.uniqueID] || (l[m.uniqueID] = {}), k[a] = [w, t]), m === b)) break; return t -= e, t === d || t % d === 0 && t / d >= 0 } } }, PSEUDO: function (a, b) { var c, e = d.pseudos[a] || d.setFilters[a.toLowerCase()] || fa.error("unsupported pseudo: " + a); return e[u] ? e(b) : e.length > 1 ? (c = [a, a, "", b], d.setFilters.hasOwnProperty(a.toLowerCase()) ? ha(function (a, c) { var d, f = e(a, b), g = f.length; while (g--) d = J(a, f[g]), a[d] = !(c[d] = f[g]) }) : function (a) { return e(a, 0, c) }) : e } }, pseudos: { not: ha(function (a) { var b = [], c = [], d = h(a.replace(Q, "$1")); return d[u] ? ha(function (a, b, c, e) { var f, g = d(a, null, e, []), h = a.length; while (h--) (f = g[h]) && (a[h] = !(b[h] = f)) }) : function (a, e, f) { return b[0] = a, d(b, null, f, c), b[0] = null, !c.pop() } }), has: ha(function (a) { return function (b) { return fa(a, b).length > 0 } }), contains: ha(function (a) { return a = a.replace(ba, ca), function (b) { return (b.textContent || b.innerText || e(b)).indexOf(a) > -1 } }), lang: ha(function (a) { return V.test(a || "") || fa.error("unsupported lang: " + a), a = a.replace(ba, ca).toLowerCase(), function (b) { var c; do if (c = p ? b.lang : b.getAttribute("xml:lang") || b.getAttribute("lang")) return c = c.toLowerCase(), c === a || 0 === c.indexOf(a + "-"); while ((b = b.parentNode) && 1 === b.nodeType); return !1 } }), target: function (b) { var c = a.location && a.location.hash; return c && c.slice(1) === b.id }, root: function (a) { return a === o }, focus: function (a) { return a === n.activeElement && (!n.hasFocus || n.hasFocus()) && !!(a.type || a.href || ~a.tabIndex) }, enabled: function (a) { return a.disabled === !1 }, disabled: function (a) { return a.disabled === !0 }, checked: function (a) { var b = a.nodeName.toLowerCase(); return "input" === b && !!a.checked || "option" === b && !!a.selected }, selected: function (a) { return a.parentNode && a.parentNode.selectedIndex, a.selected === !0 }, empty: function (a) { for (a = a.firstChild; a; a = a.nextSibling)if (a.nodeType < 6) return !1; return !0 }, parent: function (a) { return !d.pseudos.empty(a) }, header: function (a) { return Y.test(a.nodeName) }, input: function (a) { return X.test(a.nodeName) }, button: function (a) { var b = a.nodeName.toLowerCase(); return "input" === b && "button" === a.type || "button" === b }, text: function (a) { var b; return "input" === a.nodeName.toLowerCase() && "text" === a.type && (null == (b = a.getAttribute("type")) || "text" === b.toLowerCase()) }, first: na(function () { return [0] }), last: na(function (a, b) { return [b - 1] }), eq: na(function (a, b, c) { return [0 > c ? c + b : c] }), even: na(function (a, b) { for (var c = 0; b > c; c += 2)a.push(c); return a }), odd: na(function (a, b) { for (var c = 1; b > c; c += 2)a.push(c); return a }), lt: na(function (a, b, c) { for (var d = 0 > c ? c + b : c; --d >= 0;)a.push(d); return a }), gt: na(function (a, b, c) { for (var d = 0 > c ? c + b : c; ++d < b;)a.push(d); return a }) } }, d.pseudos.nth = d.pseudos.eq; for (b in { radio: !0, checkbox: !0, file: !0, password: !0, image: !0 }) d.pseudos[b] = la(b); for (b in { submit: !0, reset: !0 }) d.pseudos[b] = ma(b); function pa() { } pa.prototype = d.filters = d.pseudos, d.setFilters = new pa, g = fa.tokenize = function (a, b) { var c, e, f, g, h, i, j, k = z[a + " "]; if (k) return b ? 0 : k.slice(0); h = a, i = [], j = d.preFilter; while (h) { (!c || (e = R.exec(h))) && (e && (h = h.slice(e[0].length) || h), i.push(f = [])), c = !1, (e = S.exec(h)) && (c = e.shift(), f.push({ value: c, type: e[0].replace(Q, " ") }), h = h.slice(c.length)); for (g in d.filter) !(e = W[g].exec(h)) || j[g] && !(e = j[g](e)) || (c = e.shift(), f.push({ value: c, type: g, matches: e }), h = h.slice(c.length)); if (!c) break } return b ? h.length : h ? fa.error(a) : z(a, i).slice(0) }; function qa(a) { for (var b = 0, c = a.length, d = ""; c > b; b++)d += a[b].value; return d } function ra(a, b, c) { var d = b.dir, e = c && "parentNode" === d, f = x++; return b.first ? function (b, c, f) { while (b = b[d]) if (1 === b.nodeType || e) return a(b, c, f) } : function (b, c, g) { var h, i, j, k = [w, f]; if (g) { while (b = b[d]) if ((1 === b.nodeType || e) && a(b, c, g)) return !0 } else while (b = b[d]) if (1 === b.nodeType || e) { if (j = b[u] || (b[u] = {}), i = j[b.uniqueID] || (j[b.uniqueID] = {}), (h = i[d]) && h[0] === w && h[1] === f) return k[2] = h[2]; if (i[d] = k, k[2] = a(b, c, g)) return !0 } } } function sa(a) { return a.length > 1 ? function (b, c, d) { var e = a.length; while (e--) if (!a[e](b, c, d)) return !1; return !0 } : a[0] } function ta(a, b, c) { for (var d = 0, e = b.length; e > d; d++)fa(a, b[d], c); return c } function ua(a, b, c, d, e) { for (var f, g = [], h = 0, i = a.length, j = null != b; i > h; h++)(f = a[h]) && (!c || c(f, d, e)) && (g.push(f), j && b.push(h)); return g } function va(a, b, c, d, e, f) { return d && !d[u] && (d = va(d)), e && !e[u] && (e = va(e, f)), ha(function (f, g, h, i) { var j, k, l, m = [], n = [], o = g.length, p = f || ta(b || "*", h.nodeType ? [h] : h, []), q = !a || !f && b ? p : ua(p, m, a, h, i), r = c ? e || (f ? a : o || d) ? [] : g : q; if (c && c(q, r, h, i), d) { j = ua(r, n), d(j, [], h, i), k = j.length; while (k--) (l = j[k]) && (r[n[k]] = !(q[n[k]] = l)) } if (f) { if (e || a) { if (e) { j = [], k = r.length; while (k--) (l = r[k]) && j.push(q[k] = l); e(null, r = [], j, i) } k = r.length; while (k--) (l = r[k]) && (j = e ? J(f, l) : m[k]) > -1 && (f[j] = !(g[j] = l)) } } else r = ua(r === g ? r.splice(o, r.length) : r), e ? e(null, g, r, i) : H.apply(g, r) }) } function wa(a) { for (var b, c, e, f = a.length, g = d.relative[a[0].type], h = g || d.relative[" "], i = g ? 1 : 0, k = ra(function (a) { return a === b }, h, !0), l = ra(function (a) { return J(b, a) > -1 }, h, !0), m = [function (a, c, d) { var e = !g && (d || c !== j) || ((b = c).nodeType ? k(a, c, d) : l(a, c, d)); return b = null, e }]; f > i; i++)if (c = d.relative[a[i].type]) m = [ra(sa(m), c)]; else { if (c = d.filter[a[i].type].apply(null, a[i].matches), c[u]) { for (e = ++i; f > e; e++)if (d.relative[a[e].type]) break; return va(i > 1 && sa(m), i > 1 && qa(a.slice(0, i - 1).concat({ value: " " === a[i - 2].type ? "*" : "" })).replace(Q, "$1"), c, e > i && wa(a.slice(i, e)), f > e && wa(a = a.slice(e)), f > e && qa(a)) } m.push(c) } return sa(m) } function xa(a, b) { var c = b.length > 0, e = a.length > 0, f = function (f, g, h, i, k) { var l, o, q, r = 0, s = "0", t = f && [], u = [], v = j, x = f || e && d.find.TAG("*", k), y = w += null == v ? 1 : Math.random() || .1, z = x.length; for (k && (j = g === n || g || k); s !== z && null != (l = x[s]); s++) { if (e && l) { o = 0, g || l.ownerDocument === n || (m(l), h = !p); while (q = a[o++]) if (q(l, g || n, h)) { i.push(l); break } k && (w = y) } c && ((l = !q && l) && r--, f && t.push(l)) } if (r += s, c && s !== r) { o = 0; while (q = b[o++]) q(t, u, g, h); if (f) { if (r > 0) while (s--) t[s] || u[s] || (u[s] = F.call(i)); u = ua(u) } H.apply(i, u), k && !f && u.length > 0 && r + b.length > 1 && fa.uniqueSort(i) } return k && (w = y, j = v), t }; return c ? ha(f) : f } return h = fa.compile = function (a, b) { var c, d = [], e = [], f = A[a + " "]; if (!f) { b || (b = g(a)), c = b.length; while (c--) f = wa(b[c]), f[u] ? d.push(f) : e.push(f); f = A(a, xa(e, d)), f.selector = a } return f }, i = fa.select = function (a, b, e, f) { var i, j, k, l, m, n = "function" == typeof a && a, o = !f && g(a = n.selector || a); if (e = e || [], 1 === o.length) { if (j = o[0] = o[0].slice(0), j.length > 2 && "ID" === (k = j[0]).type && c.getById && 9 === b.nodeType && p && d.relative[j[1].type]) { if (b = (d.find.ID(k.matches[0].replace(ba, ca), b) || [])[0], !b) return e; n && (b = b.parentNode), a = a.slice(j.shift().value.length) } i = W.needsContext.test(a) ? 0 : j.length; while (i--) { if (k = j[i], d.relative[l = k.type]) break; if ((m = d.find[l]) && (f = m(k.matches[0].replace(ba, ca), _.test(j[0].type) && oa(b.parentNode) || b))) { if (j.splice(i, 1), a = f.length && qa(j), !a) return H.apply(e, f), e; break } } } return (n || h(a, o))(f, b, !p, e, !b || _.test(a) && oa(b.parentNode) || b), e }, c.sortStable = u.split("").sort(B).join("") === u, c.detectDuplicates = !!l, m(), c.sortDetached = ia(function (a) { return 1 & a.compareDocumentPosition(n.createElement("div")) }), ia(function (a) { return a.innerHTML = "<a href='#'></a>", "#" === a.firstChild.getAttribute("href") }) || ja("type|href|height|width", function (a, b, c) { return c ? void 0 : a.getAttribute(b, "type" === b.toLowerCase() ? 1 : 2) }), c.attributes && ia(function (a) { return a.innerHTML = "<input/>", a.firstChild.setAttribute("value", ""), "" === a.firstChild.getAttribute("value") }) || ja("value", function (a, b, c) { return c || "input" !== a.nodeName.toLowerCase() ? void 0 : a.defaultValue }), ia(function (a) { return null == a.getAttribute("disabled") }) || ja(K, function (a, b, c) { var d; return c ? void 0 : a[b] === !0 ? b.toLowerCase() : (d = a.getAttributeNode(b)) && d.specified ? d.value : null }), fa }(a); n.find = t, n.expr = t.selectors, n.expr[":"] = n.expr.pseudos, n.uniqueSort = n.unique = t.uniqueSort, n.text = t.getText, n.isXMLDoc = t.isXML, n.contains = t.contains; var u = function (a, b, c) { var d = [], e = void 0 !== c; while ((a = a[b]) && 9 !== a.nodeType) if (1 === a.nodeType) { if (e && n(a).is(c)) break; d.push(a) } return d }, v = function (a, b) { for (var c = []; a; a = a.nextSibling)1 === a.nodeType && a !== b && c.push(a); return c }, w = n.expr.match.needsContext, x = /^<([\w-]+)\s*\/?>(?:<\/\1>|)$/, y = /^.[^:#\[\.,]*$/; function z(a, b, c) { if (n.isFunction(b)) return n.grep(a, function (a, d) { return !!b.call(a, d, a) !== c }); if (b.nodeType) return n.grep(a, function (a) { return a === b !== c }); if ("string" == typeof b) { if (y.test(b)) return n.filter(b, a, c); b = n.filter(b, a) } return n.grep(a, function (a) { return n.inArray(a, b) > -1 !== c }) } n.filter = function (a, b, c) { var d = b[0]; return c && (a = ":not(" + a + ")"), 1 === b.length && 1 === d.nodeType ? n.find.matchesSelector(d, a) ? [d] : [] : n.find.matches(a, n.grep(b, function (a) { return 1 === a.nodeType })) }, n.fn.extend({ find: function (a) { var b, c = [], d = this, e = d.length; if ("string" != typeof a) return this.pushStack(n(a).filter(function () { for (b = 0; e > b; b++)if (n.contains(d[b], this)) return !0 })); for (b = 0; e > b; b++)n.find(a, d[b], c); return c = this.pushStack(e > 1 ? n.unique(c) : c), c.selector = this.selector ? this.selector + " " + a : a, c }, filter: function (a) { return this.pushStack(z(this, a || [], !1)) }, not: function (a) { return this.pushStack(z(this, a || [], !0)) }, is: function (a) { return !!z(this, "string" == typeof a && w.test(a) ? n(a) : a || [], !1).length } }); var A, B = /^(?:\s*(<[\w\W]+>)[^>]*|#([\w-]*))$/, C = n.fn.init = function (a, b, c) { var e, f; if (!a) return this; if (c = c || A, "string" == typeof a) { if (e = "<" === a.charAt(0) && ">" === a.charAt(a.length - 1) && a.length >= 3 ? [null, a, null] : B.exec(a), !e || !e[1] && b) return !b || b.jquery ? (b || c).find(a) : this.constructor(b).find(a); if (e[1]) { if (b = b instanceof n ? b[0] : b, n.merge(this, n.parseHTML(e[1], b && b.nodeType ? b.ownerDocument || b : d, !0)), x.test(e[1]) && n.isPlainObject(b)) for (e in b) n.isFunction(this[e]) ? this[e](b[e]) : this.attr(e, b[e]); return this } if (f = d.getElementById(e[2]), f && f.parentNode) { if (f.id !== e[2]) return A.find(a); this.length = 1, this[0] = f } return this.context = d, this.selector = a, this } return a.nodeType ? (this.context = this[0] = a, this.length = 1, this) : n.isFunction(a) ? "undefined" != typeof c.ready ? c.ready(a) : a(n) : (void 0 !== a.selector && (this.selector = a.selector, this.context = a.context), n.makeArray(a, this)) }; C.prototype = n.fn, A = n(d); var D = /^(?:parents|prev(?:Until|All))/, E = { children: !0, contents: !0, next: !0, prev: !0 }; n.fn.extend({ has: function (a) { var b, c = n(a, this), d = c.length; return this.filter(function () { for (b = 0; d > b; b++)if (n.contains(this, c[b])) return !0 }) }, closest: function (a, b) { for (var c, d = 0, e = this.length, f = [], g = w.test(a) || "string" != typeof a ? n(a, b || this.context) : 0; e > d; d++)for (c = this[d]; c && c !== b; c = c.parentNode)if (c.nodeType < 11 && (g ? g.index(c) > -1 : 1 === c.nodeType && n.find.matchesSelector(c, a))) { f.push(c); break } return this.pushStack(f.length > 1 ? n.uniqueSort(f) : f) }, index: function (a) { return a ? "string" == typeof a ? n.inArray(this[0], n(a)) : n.inArray(a.jquery ? a[0] : a, this) : this[0] && this[0].parentNode ? this.first().prevAll().length : -1 }, add: function (a, b) { return this.pushStack(n.uniqueSort(n.merge(this.get(), n(a, b)))) }, addBack: function (a) { return this.add(null == a ? this.prevObject : this.prevObject.filter(a)) } }); function F(a, b) { do a = a[b]; while (a && 1 !== a.nodeType); return a } n.each({ parent: function (a) { var b = a.parentNode; return b && 11 !== b.nodeType ? b : null }, parents: function (a) { return u(a, "parentNode") }, parentsUntil: function (a, b, c) { return u(a, "parentNode", c) }, next: function (a) { return F(a, "nextSibling") }, prev: function (a) { return F(a, "previousSibling") }, nextAll: function (a) { return u(a, "nextSibling") }, prevAll: function (a) { return u(a, "previousSibling") }, nextUntil: function (a, b, c) { return u(a, "nextSibling", c) }, prevUntil: function (a, b, c) { return u(a, "previousSibling", c) }, siblings: function (a) { return v((a.parentNode || {}).firstChild, a) }, children: function (a) { return v(a.firstChild) }, contents: function (a) { return n.nodeName(a, "iframe") ? a.contentDocument || a.contentWindow.document : n.merge([], a.childNodes) } }, function (a, b) { n.fn[a] = function (c, d) { var e = n.map(this, b, c); return "Until" !== a.slice(-5) && (d = c), d && "string" == typeof d && (e = n.filter(d, e)), this.length > 1 && (E[a] || (e = n.uniqueSort(e)), D.test(a) && (e = e.reverse())), this.pushStack(e) } }); var G = /\S+/g; function H(a) { var b = {}; return n.each(a.match(G) || [], function (a, c) { b[c] = !0 }), b } n.Callbacks = function (a) { a = "string" == typeof a ? H(a) : n.extend({}, a); var b, c, d, e, f = [], g = [], h = -1, i = function () { for (e = a.once, d = b = !0; g.length; h = -1) { c = g.shift(); while (++h < f.length) f[h].apply(c[0], c[1]) === !1 && a.stopOnFalse && (h = f.length, c = !1) } a.memory || (c = !1), b = !1, e && (f = c ? [] : "") }, j = { add: function () { return f && (c && !b && (h = f.length - 1, g.push(c)), function d(b) { n.each(b, function (b, c) { n.isFunction(c) ? a.unique && j.has(c) || f.push(c) : c && c.length && "string" !== n.type(c) && d(c) }) }(arguments), c && !b && i()), this }, remove: function () { return n.each(arguments, function (a, b) { var c; while ((c = n.inArray(b, f, c)) > -1) f.splice(c, 1), h >= c && h-- }), this }, has: function (a) { return a ? n.inArray(a, f) > -1 : f.length > 0 }, empty: function () { return f && (f = []), this }, disable: function () { return e = g = [], f = c = "", this }, disabled: function () { return !f }, lock: function () { return e = !0, c || j.disable(), this }, locked: function () { return !!e }, fireWith: function (a, c) { return e || (c = c || [], c = [a, c.slice ? c.slice() : c], g.push(c), b || i()), this }, fire: function () { return j.fireWith(this, arguments), this }, fired: function () { return !!d } }; return j }, n.extend({ Deferred: function (a) { var b = [["resolve", "done", n.Callbacks("once memory"), "resolved"], ["reject", "fail", n.Callbacks("once memory"), "rejected"], ["notify", "progress", n.Callbacks("memory")]], c = "pending", d = { state: function () { return c }, always: function () { return e.done(arguments).fail(arguments), this }, then: function () { var a = arguments; return n.Deferred(function (c) { n.each(b, function (b, f) { var g = n.isFunction(a[b]) && a[b]; e[f[1]](function () { var a = g && g.apply(this, arguments); a && n.isFunction(a.promise) ? a.promise().progress(c.notify).done(c.resolve).fail(c.reject) : c[f[0] + "With"](this === d ? c.promise() : this, g ? [a] : arguments) }) }), a = null }).promise() }, promise: function (a) { return null != a ? n.extend(a, d) : d } }, e = {}; return d.pipe = d.then, n.each(b, function (a, f) { var g = f[2], h = f[3]; d[f[1]] = g.add, h && g.add(function () { c = h }, b[1 ^ a][2].disable, b[2][2].lock), e[f[0]] = function () { return e[f[0] + "With"](this === e ? d : this, arguments), this }, e[f[0] + "With"] = g.fireWith }), d.promise(e), a && a.call(e, e), e }, when: function (a) { var b = 0, c = e.call(arguments), d = c.length, f = 1 !== d || a && n.isFunction(a.promise) ? d : 0, g = 1 === f ? a : n.Deferred(), h = function (a, b, c) { return function (d) { b[a] = this, c[a] = arguments.length > 1 ? e.call(arguments) : d, c === i ? g.notifyWith(b, c) : --f || g.resolveWith(b, c) } }, i, j, k; if (d > 1) for (i = new Array(d), j = new Array(d), k = new Array(d); d > b; b++)c[b] && n.isFunction(c[b].promise) ? c[b].promise().progress(h(b, j, i)).done(h(b, k, c)).fail(g.reject) : --f; return f || g.resolveWith(k, c), g.promise() } }); var I; n.fn.ready = function (a) { return n.ready.promise().done(a), this }, n.extend({ isReady: !1, readyWait: 1, holdReady: function (a) { a ? n.readyWait++ : n.ready(!0) }, ready: function (a) { (a === !0 ? --n.readyWait : n.isReady) || (n.isReady = !0, a !== !0 && --n.readyWait > 0 || (I.resolveWith(d, [n]), n.fn.triggerHandler && (n(d).triggerHandler("ready"), n(d).off("ready")))) } }); function J() { d.addEventListener ? (d.removeEventListener("DOMContentLoaded", K), a.removeEventListener("load", K)) : (d.detachEvent("onreadystatechange", K), a.detachEvent("onload", K)) } function K() { (d.addEventListener || "load" === a.event.type || "complete" === d.readyState) && (J(), n.ready()) } n.ready.promise = function (b) { if (!I) if (I = n.Deferred(), "complete" === d.readyState || "loading" !== d.readyState && !d.documentElement.doScroll) a.setTimeout(n.ready); else if (d.addEventListener) d.addEventListener("DOMContentLoaded", K), a.addEventListener("load", K); else { d.attachEvent("onreadystatechange", K), a.attachEvent("onload", K); var c = !1; try { c = null == a.frameElement && d.documentElement } catch (e) { } c && c.doScroll && !function f() { if (!n.isReady) { try { c.doScroll("left") } catch (b) { return a.setTimeout(f, 50) } J(), n.ready() } }() } return I.promise(b) }, n.ready.promise(); var L; for (L in n(l)) break; l.ownFirst = "0" === L, l.inlineBlockNeedsLayout = !1, n(function () { var a, b, c, e; c = d.getElementsByTagName("body")[0], c && c.style && (b = d.createElement("div"), e = d.createElement("div"), e.style.cssText = "position:absolute;border:0;width:0;height:0;top:0;left:-9999px", c.appendChild(e).appendChild(b), "undefined" != typeof b.style.zoom && (b.style.cssText = "display:inline;margin:0;border:0;padding:1px;width:1px;zoom:1", l.inlineBlockNeedsLayout = a = 3 === b.offsetWidth, a && (c.style.zoom = 1)), c.removeChild(e)) }), function () { var a = d.createElement("div"); l.deleteExpando = !0; try { delete a.test } catch (b) { l.deleteExpando = !1 } a = null }(); var M = function (a) { var b = n.noData[(a.nodeName + " ").toLowerCase()], c = +a.nodeType || 1; return 1 !== c && 9 !== c ? !1 : !b || b !== !0 && a.getAttribute("classid") === b }, N = /^(?:\{[\w\W]*\}|\[[\w\W]*\])$/, O = /([A-Z])/g; function P(a, b, c) {
    if (void 0 === c && 1 === a.nodeType) {
      var d = "data-" + b.replace(O, "-$1").toLowerCase(); if (c = a.getAttribute(d), "string" == typeof c) { try { c = "true" === c ? !0 : "false" === c ? !1 : "null" === c ? null : +c + "" === c ? +c : N.test(c) ? n.parseJSON(c) : c } catch (e) { } n.data(a, b, c) } else c = void 0;
    } return c
  } function Q(a) { var b; for (b in a) if (("data" !== b || !n.isEmptyObject(a[b])) && "toJSON" !== b) return !1; return !0 } function R(a, b, d, e) { if (M(a)) { var f, g, h = n.expando, i = a.nodeType, j = i ? n.cache : a, k = i ? a[h] : a[h] && h; if (k && j[k] && (e || j[k].data) || void 0 !== d || "string" != typeof b) return k || (k = i ? a[h] = c.pop() || n.guid++ : h), j[k] || (j[k] = i ? {} : { toJSON: n.noop }), ("object" == typeof b || "function" == typeof b) && (e ? j[k] = n.extend(j[k], b) : j[k].data = n.extend(j[k].data, b)), g = j[k], e || (g.data || (g.data = {}), g = g.data), void 0 !== d && (g[n.camelCase(b)] = d), "string" == typeof b ? (f = g[b], null == f && (f = g[n.camelCase(b)])) : f = g, f } } function S(a, b, c) { if (M(a)) { var d, e, f = a.nodeType, g = f ? n.cache : a, h = f ? a[n.expando] : n.expando; if (g[h]) { if (b && (d = c ? g[h] : g[h].data)) { n.isArray(b) ? b = b.concat(n.map(b, n.camelCase)) : b in d ? b = [b] : (b = n.camelCase(b), b = b in d ? [b] : b.split(" ")), e = b.length; while (e--) delete d[b[e]]; if (c ? !Q(d) : !n.isEmptyObject(d)) return } (c || (delete g[h].data, Q(g[h]))) && (f ? n.cleanData([a], !0) : l.deleteExpando || g != g.window ? delete g[h] : g[h] = void 0) } } } n.extend({ cache: {}, noData: { "applet ": !0, "embed ": !0, "object ": "clsid:D27CDB6E-AE6D-11cf-96B8-444553540000" }, hasData: function (a) { return a = a.nodeType ? n.cache[a[n.expando]] : a[n.expando], !!a && !Q(a) }, data: function (a, b, c) { return R(a, b, c) }, removeData: function (a, b) { return S(a, b) }, _data: function (a, b, c) { return R(a, b, c, !0) }, _removeData: function (a, b) { return S(a, b, !0) } }), n.fn.extend({ data: function (a, b) { var c, d, e, f = this[0], g = f && f.attributes; if (void 0 === a) { if (this.length && (e = n.data(f), 1 === f.nodeType && !n._data(f, "parsedAttrs"))) { c = g.length; while (c--) g[c] && (d = g[c].name, 0 === d.indexOf("data-") && (d = n.camelCase(d.slice(5)), P(f, d, e[d]))); n._data(f, "parsedAttrs", !0) } return e } return "object" == typeof a ? this.each(function () { n.data(this, a) }) : arguments.length > 1 ? this.each(function () { n.data(this, a, b) }) : f ? P(f, a, n.data(f, a)) : void 0 }, removeData: function (a) { return this.each(function () { n.removeData(this, a) }) } }), n.extend({ queue: function (a, b, c) { var d; return a ? (b = (b || "fx") + "queue", d = n._data(a, b), c && (!d || n.isArray(c) ? d = n._data(a, b, n.makeArray(c)) : d.push(c)), d || []) : void 0 }, dequeue: function (a, b) { b = b || "fx"; var c = n.queue(a, b), d = c.length, e = c.shift(), f = n._queueHooks(a, b), g = function () { n.dequeue(a, b) }; "inprogress" === e && (e = c.shift(), d--), e && ("fx" === b && c.unshift("inprogress"), delete f.stop, e.call(a, g, f)), !d && f && f.empty.fire() }, _queueHooks: function (a, b) { var c = b + "queueHooks"; return n._data(a, c) || n._data(a, c, { empty: n.Callbacks("once memory").add(function () { n._removeData(a, b + "queue"), n._removeData(a, c) }) }) } }), n.fn.extend({ queue: function (a, b) { var c = 2; return "string" != typeof a && (b = a, a = "fx", c--), arguments.length < c ? n.queue(this[0], a) : void 0 === b ? this : this.each(function () { var c = n.queue(this, a, b); n._queueHooks(this, a), "fx" === a && "inprogress" !== c[0] && n.dequeue(this, a) }) }, dequeue: function (a) { return this.each(function () { n.dequeue(this, a) }) }, clearQueue: function (a) { return this.queue(a || "fx", []) }, promise: function (a, b) { var c, d = 1, e = n.Deferred(), f = this, g = this.length, h = function () { --d || e.resolveWith(f, [f]) }; "string" != typeof a && (b = a, a = void 0), a = a || "fx"; while (g--) c = n._data(f[g], a + "queueHooks"), c && c.empty && (d++, c.empty.add(h)); return h(), e.promise(b) } }), function () { var a; l.shrinkWrapBlocks = function () { if (null != a) return a; a = !1; var b, c, e; return c = d.getElementsByTagName("body")[0], c && c.style ? (b = d.createElement("div"), e = d.createElement("div"), e.style.cssText = "position:absolute;border:0;width:0;height:0;top:0;left:-9999px", c.appendChild(e).appendChild(b), "undefined" != typeof b.style.zoom && (b.style.cssText = "-webkit-box-sizing:content-box;-moz-box-sizing:content-box;box-sizing:content-box;display:block;margin:0;border:0;padding:1px;width:1px;zoom:1", b.appendChild(d.createElement("div")).style.width = "5px", a = 3 !== b.offsetWidth), c.removeChild(e), a) : void 0 } }(); var T = /[+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|)/.source, U = new RegExp("^(?:([+-])=|)(" + T + ")([a-z%]*)$", "i"), V = ["Top", "Right", "Bottom", "Left"], W = function (a, b) { return a = b || a, "none" === n.css(a, "display") || !n.contains(a.ownerDocument, a) }; function X(a, b, c, d) { var e, f = 1, g = 20, h = d ? function () { return d.cur() } : function () { return n.css(a, b, "") }, i = h(), j = c && c[3] || (n.cssNumber[b] ? "" : "px"), k = (n.cssNumber[b] || "px" !== j && +i) && U.exec(n.css(a, b)); if (k && k[3] !== j) { j = j || k[3], c = c || [], k = +i || 1; do f = f || ".5", k /= f, n.style(a, b, k + j); while (f !== (f = h() / i) && 1 !== f && --g) } return c && (k = +k || +i || 0, e = c[1] ? k + (c[1] + 1) * c[2] : +c[2], d && (d.unit = j, d.start = k, d.end = e)), e } var Y = function (a, b, c, d, e, f, g) { var h = 0, i = a.length, j = null == c; if ("object" === n.type(c)) { e = !0; for (h in c) Y(a, b, h, c[h], !0, f, g) } else if (void 0 !== d && (e = !0, n.isFunction(d) || (g = !0), j && (g ? (b.call(a, d), b = null) : (j = b, b = function (a, b, c) { return j.call(n(a), c) })), b)) for (; i > h; h++)b(a[h], c, g ? d : d.call(a[h], h, b(a[h], c))); return e ? a : j ? b.call(a) : i ? b(a[0], c) : f }, Z = /^(?:checkbox|radio)$/i, $ = /<([\w:-]+)/, _ = /^$|\/(?:java|ecma)script/i, aa = /^\s+/, ba = "abbr|article|aside|audio|bdi|canvas|data|datalist|details|dialog|figcaption|figure|footer|header|hgroup|main|mark|meter|nav|output|picture|progress|section|summary|template|time|video"; function ca(a) { var b = ba.split("|"), c = a.createDocumentFragment(); if (c.createElement) while (b.length) c.createElement(b.pop()); return c } !function () { var a = d.createElement("div"), b = d.createDocumentFragment(), c = d.createElement("input"); a.innerHTML = "  <link/><table></table><a href='/a'>a</a><input type='checkbox'/>", l.leadingWhitespace = 3 === a.firstChild.nodeType, l.tbody = !a.getElementsByTagName("tbody").length, l.htmlSerialize = !!a.getElementsByTagName("link").length, l.html5Clone = "<:nav></:nav>" !== d.createElement("nav").cloneNode(!0).outerHTML, c.type = "checkbox", c.checked = !0, b.appendChild(c), l.appendChecked = c.checked, a.innerHTML = "<textarea>x</textarea>", l.noCloneChecked = !!a.cloneNode(!0).lastChild.defaultValue, b.appendChild(a), c = d.createElement("input"), c.setAttribute("type", "radio"), c.setAttribute("checked", "checked"), c.setAttribute("name", "t"), a.appendChild(c), l.checkClone = a.cloneNode(!0).cloneNode(!0).lastChild.checked, l.noCloneEvent = !!a.addEventListener, a[n.expando] = 1, l.attributes = !a.getAttribute(n.expando) }(); var da = { option: [1, "<select multiple='multiple'>", "</select>"], legend: [1, "<fieldset>", "</fieldset>"], area: [1, "<map>", "</map>"], param: [1, "<object>", "</object>"], thead: [1, "<table>", "</table>"], tr: [2, "<table><tbody>", "</tbody></table>"], col: [2, "<table><tbody></tbody><colgroup>", "</colgroup></table>"], td: [3, "<table><tbody><tr>", "</tr></tbody></table>"], _default: l.htmlSerialize ? [0, "", ""] : [1, "X<div>", "</div>"] }; da.optgroup = da.option, da.tbody = da.tfoot = da.colgroup = da.caption = da.thead, da.th = da.td; function ea(a, b) { var c, d, e = 0, f = "undefined" != typeof a.getElementsByTagName ? a.getElementsByTagName(b || "*") : "undefined" != typeof a.querySelectorAll ? a.querySelectorAll(b || "*") : void 0; if (!f) for (f = [], c = a.childNodes || a; null != (d = c[e]); e++)!b || n.nodeName(d, b) ? f.push(d) : n.merge(f, ea(d, b)); return void 0 === b || b && n.nodeName(a, b) ? n.merge([a], f) : f } function fa(a, b) { for (var c, d = 0; null != (c = a[d]); d++)n._data(c, "globalEval", !b || n._data(b[d], "globalEval")) } var ga = /<|&#?\w+;/, ha = /<tbody/i; function ia(a) { Z.test(a.type) && (a.defaultChecked = a.checked) } function ja(a, b, c, d, e) { for (var f, g, h, i, j, k, m, o = a.length, p = ca(b), q = [], r = 0; o > r; r++)if (g = a[r], g || 0 === g) if ("object" === n.type(g)) n.merge(q, g.nodeType ? [g] : g); else if (ga.test(g)) { i = i || p.appendChild(b.createElement("div")), j = ($.exec(g) || ["", ""])[1].toLowerCase(), m = da[j] || da._default, i.innerHTML = m[1] + n.htmlPrefilter(g) + m[2], f = m[0]; while (f--) i = i.lastChild; if (!l.leadingWhitespace && aa.test(g) && q.push(b.createTextNode(aa.exec(g)[0])), !l.tbody) { g = "table" !== j || ha.test(g) ? "<table>" !== m[1] || ha.test(g) ? 0 : i : i.firstChild, f = g && g.childNodes.length; while (f--) n.nodeName(k = g.childNodes[f], "tbody") && !k.childNodes.length && g.removeChild(k) } n.merge(q, i.childNodes), i.textContent = ""; while (i.firstChild) i.removeChild(i.firstChild); i = p.lastChild } else q.push(b.createTextNode(g)); i && p.removeChild(i), l.appendChecked || n.grep(ea(q, "input"), ia), r = 0; while (g = q[r++]) if (d && n.inArray(g, d) > -1) e && e.push(g); else if (h = n.contains(g.ownerDocument, g), i = ea(p.appendChild(g), "script"), h && fa(i), c) { f = 0; while (g = i[f++]) _.test(g.type || "") && c.push(g) } return i = null, p } !function () { var b, c, e = d.createElement("div"); for (b in { submit: !0, change: !0, focusin: !0 }) c = "on" + b, (l[b] = c in a) || (e.setAttribute(c, "t"), l[b] = e.attributes[c].expando === !1); e = null }(); var ka = /^(?:input|select|textarea)$/i, la = /^key/, ma = /^(?:mouse|pointer|contextmenu|drag|drop)|click/, na = /^(?:focusinfocus|focusoutblur)$/, oa = /^([^.]*)(?:\.(.+)|)/; function pa() { return !0 } function qa() { return !1 } function ra() { try { return d.activeElement } catch (a) { } } function sa(a, b, c, d, e, f) { var g, h; if ("object" == typeof b) { "string" != typeof c && (d = d || c, c = void 0); for (h in b) sa(a, h, c, d, b[h], f); return a } if (null == d && null == e ? (e = c, d = c = void 0) : null == e && ("string" == typeof c ? (e = d, d = void 0) : (e = d, d = c, c = void 0)), e === !1) e = qa; else if (!e) return a; return 1 === f && (g = e, e = function (a) { return n().off(a), g.apply(this, arguments) }, e.guid = g.guid || (g.guid = n.guid++)), a.each(function () { n.event.add(this, b, e, d, c) }) } n.event = { global: {}, add: function (a, b, c, d, e) { var f, g, h, i, j, k, l, m, o, p, q, r = n._data(a); if (r) { c.handler && (i = c, c = i.handler, e = i.selector), c.guid || (c.guid = n.guid++), (g = r.events) || (g = r.events = {}), (k = r.handle) || (k = r.handle = function (a) { return "undefined" == typeof n || a && n.event.triggered === a.type ? void 0 : n.event.dispatch.apply(k.elem, arguments) }, k.elem = a), b = (b || "").match(G) || [""], h = b.length; while (h--) f = oa.exec(b[h]) || [], o = q = f[1], p = (f[2] || "").split(".").sort(), o && (j = n.event.special[o] || {}, o = (e ? j.delegateType : j.bindType) || o, j = n.event.special[o] || {}, l = n.extend({ type: o, origType: q, data: d, handler: c, guid: c.guid, selector: e, needsContext: e && n.expr.match.needsContext.test(e), namespace: p.join(".") }, i), (m = g[o]) || (m = g[o] = [], m.delegateCount = 0, j.setup && j.setup.call(a, d, p, k) !== !1 || (a.addEventListener ? a.addEventListener(o, k, !1) : a.attachEvent && a.attachEvent("on" + o, k))), j.add && (j.add.call(a, l), l.handler.guid || (l.handler.guid = c.guid)), e ? m.splice(m.delegateCount++, 0, l) : m.push(l), n.event.global[o] = !0); a = null } }, remove: function (a, b, c, d, e) { var f, g, h, i, j, k, l, m, o, p, q, r = n.hasData(a) && n._data(a); if (r && (k = r.events)) { b = (b || "").match(G) || [""], j = b.length; while (j--) if (h = oa.exec(b[j]) || [], o = q = h[1], p = (h[2] || "").split(".").sort(), o) { l = n.event.special[o] || {}, o = (d ? l.delegateType : l.bindType) || o, m = k[o] || [], h = h[2] && new RegExp("(^|\\.)" + p.join("\\.(?:.*\\.|)") + "(\\.|$)"), i = f = m.length; while (f--) g = m[f], !e && q !== g.origType || c && c.guid !== g.guid || h && !h.test(g.namespace) || d && d !== g.selector && ("**" !== d || !g.selector) || (m.splice(f, 1), g.selector && m.delegateCount--, l.remove && l.remove.call(a, g)); i && !m.length && (l.teardown && l.teardown.call(a, p, r.handle) !== !1 || n.removeEvent(a, o, r.handle), delete k[o]) } else for (o in k) n.event.remove(a, o + b[j], c, d, !0); n.isEmptyObject(k) && (delete r.handle, n._removeData(a, "events")) } }, trigger: function (b, c, e, f) { var g, h, i, j, l, m, o, p = [e || d], q = k.call(b, "type") ? b.type : b, r = k.call(b, "namespace") ? b.namespace.split(".") : []; if (i = m = e = e || d, 3 !== e.nodeType && 8 !== e.nodeType && !na.test(q + n.event.triggered) && (q.indexOf(".") > -1 && (r = q.split("."), q = r.shift(), r.sort()), h = q.indexOf(":") < 0 && "on" + q, b = b[n.expando] ? b : new n.Event(q, "object" == typeof b && b), b.isTrigger = f ? 2 : 3, b.namespace = r.join("."), b.rnamespace = b.namespace ? new RegExp("(^|\\.)" + r.join("\\.(?:.*\\.|)") + "(\\.|$)") : null, b.result = void 0, b.target || (b.target = e), c = null == c ? [b] : n.makeArray(c, [b]), l = n.event.special[q] || {}, f || !l.trigger || l.trigger.apply(e, c) !== !1)) { if (!f && !l.noBubble && !n.isWindow(e)) { for (j = l.delegateType || q, na.test(j + q) || (i = i.parentNode); i; i = i.parentNode)p.push(i), m = i; m === (e.ownerDocument || d) && p.push(m.defaultView || m.parentWindow || a) } o = 0; while ((i = p[o++]) && !b.isPropagationStopped()) b.type = o > 1 ? j : l.bindType || q, g = (n._data(i, "events") || {})[b.type] && n._data(i, "handle"), g && g.apply(i, c), g = h && i[h], g && g.apply && M(i) && (b.result = g.apply(i, c), b.result === !1 && b.preventDefault()); if (b.type = q, !f && !b.isDefaultPrevented() && (!l._default || l._default.apply(p.pop(), c) === !1) && M(e) && h && e[q] && !n.isWindow(e)) { m = e[h], m && (e[h] = null), n.event.triggered = q; try { e[q]() } catch (s) { } n.event.triggered = void 0, m && (e[h] = m) } return b.result } }, dispatch: function (a) { a = n.event.fix(a); var b, c, d, f, g, h = [], i = e.call(arguments), j = (n._data(this, "events") || {})[a.type] || [], k = n.event.special[a.type] || {}; if (i[0] = a, a.delegateTarget = this, !k.preDispatch || k.preDispatch.call(this, a) !== !1) { h = n.event.handlers.call(this, a, j), b = 0; while ((f = h[b++]) && !a.isPropagationStopped()) { a.currentTarget = f.elem, c = 0; while ((g = f.handlers[c++]) && !a.isImmediatePropagationStopped()) (!a.rnamespace || a.rnamespace.test(g.namespace)) && (a.handleObj = g, a.data = g.data, d = ((n.event.special[g.origType] || {}).handle || g.handler).apply(f.elem, i), void 0 !== d && (a.result = d) === !1 && (a.preventDefault(), a.stopPropagation())) } return k.postDispatch && k.postDispatch.call(this, a), a.result } }, handlers: function (a, b) { var c, d, e, f, g = [], h = b.delegateCount, i = a.target; if (h && i.nodeType && ("click" !== a.type || isNaN(a.button) || a.button < 1)) for (; i != this; i = i.parentNode || this)if (1 === i.nodeType && (i.disabled !== !0 || "click" !== a.type)) { for (d = [], c = 0; h > c; c++)f = b[c], e = f.selector + " ", void 0 === d[e] && (d[e] = f.needsContext ? n(e, this).index(i) > -1 : n.find(e, this, null, [i]).length), d[e] && d.push(f); d.length && g.push({ elem: i, handlers: d }) } return h < b.length && g.push({ elem: this, handlers: b.slice(h) }), g }, fix: function (a) { if (a[n.expando]) return a; var b, c, e, f = a.type, g = a, h = this.fixHooks[f]; h || (this.fixHooks[f] = h = ma.test(f) ? this.mouseHooks : la.test(f) ? this.keyHooks : {}), e = h.props ? this.props.concat(h.props) : this.props, a = new n.Event(g), b = e.length; while (b--) c = e[b], a[c] = g[c]; return a.target || (a.target = g.srcElement || d), 3 === a.target.nodeType && (a.target = a.target.parentNode), a.metaKey = !!a.metaKey, h.filter ? h.filter(a, g) : a }, props: "altKey bubbles cancelable ctrlKey currentTarget detail eventPhase metaKey relatedTarget shiftKey target timeStamp view which".split(" "), fixHooks: {}, keyHooks: { props: "char charCode key keyCode".split(" "), filter: function (a, b) { return null == a.which && (a.which = null != b.charCode ? b.charCode : b.keyCode), a } }, mouseHooks: { props: "button buttons clientX clientY fromElement offsetX offsetY pageX pageY screenX screenY toElement".split(" "), filter: function (a, b) { var c, e, f, g = b.button, h = b.fromElement; return null == a.pageX && null != b.clientX && (e = a.target.ownerDocument || d, f = e.documentElement, c = e.body, a.pageX = b.clientX + (f && f.scrollLeft || c && c.scrollLeft || 0) - (f && f.clientLeft || c && c.clientLeft || 0), a.pageY = b.clientY + (f && f.scrollTop || c && c.scrollTop || 0) - (f && f.clientTop || c && c.clientTop || 0)), !a.relatedTarget && h && (a.relatedTarget = h === a.target ? b.toElement : h), a.which || void 0 === g || (a.which = 1 & g ? 1 : 2 & g ? 3 : 4 & g ? 2 : 0), a } }, special: { load: { noBubble: !0 }, focus: { trigger: function () { if (this !== ra() && this.focus) try { return this.focus(), !1 } catch (a) { } }, delegateType: "focusin" }, blur: { trigger: function () { return this === ra() && this.blur ? (this.blur(), !1) : void 0 }, delegateType: "focusout" }, click: { trigger: function () { return n.nodeName(this, "input") && "checkbox" === this.type && this.click ? (this.click(), !1) : void 0 }, _default: function (a) { return n.nodeName(a.target, "a") } }, beforeunload: { postDispatch: function (a) { void 0 !== a.result && a.originalEvent && (a.originalEvent.returnValue = a.result) } } }, simulate: function (a, b, c) { var d = n.extend(new n.Event, c, { type: a, isSimulated: !0 }); n.event.trigger(d, null, b), d.isDefaultPrevented() && c.preventDefault() } }, n.removeEvent = d.removeEventListener ? function (a, b, c) { a.removeEventListener && a.removeEventListener(b, c) } : function (a, b, c) { var d = "on" + b; a.detachEvent && ("undefined" == typeof a[d] && (a[d] = null), a.detachEvent(d, c)) }, n.Event = function (a, b) { return this instanceof n.Event ? (a && a.type ? (this.originalEvent = a, this.type = a.type, this.isDefaultPrevented = a.defaultPrevented || void 0 === a.defaultPrevented && a.returnValue === !1 ? pa : qa) : this.type = a, b && n.extend(this, b), this.timeStamp = a && a.timeStamp || n.now(), void (this[n.expando] = !0)) : new n.Event(a, b) }, n.Event.prototype = { constructor: n.Event, isDefaultPrevented: qa, isPropagationStopped: qa, isImmediatePropagationStopped: qa, preventDefault: function () { var a = this.originalEvent; this.isDefaultPrevented = pa, a && (a.preventDefault ? a.preventDefault() : a.returnValue = !1) }, stopPropagation: function () { var a = this.originalEvent; this.isPropagationStopped = pa, a && !this.isSimulated && (a.stopPropagation && a.stopPropagation(), a.cancelBubble = !0) }, stopImmediatePropagation: function () { var a = this.originalEvent; this.isImmediatePropagationStopped = pa, a && a.stopImmediatePropagation && a.stopImmediatePropagation(), this.stopPropagation() } }, n.each({ mouseenter: "mouseover", mouseleave: "mouseout", pointerenter: "pointerover", pointerleave: "pointerout" }, function (a, b) { n.event.special[a] = { delegateType: b, bindType: b, handle: function (a) { var c, d = this, e = a.relatedTarget, f = a.handleObj; return (!e || e !== d && !n.contains(d, e)) && (a.type = f.origType, c = f.handler.apply(this, arguments), a.type = b), c } } }), l.submit || (n.event.special.submit = { setup: function () { return n.nodeName(this, "form") ? !1 : void n.event.add(this, "click._submit keypress._submit", function (a) { var b = a.target, c = n.nodeName(b, "input") || n.nodeName(b, "button") ? n.prop(b, "form") : void 0; c && !n._data(c, "submit") && (n.event.add(c, "submit._submit", function (a) { a._submitBubble = !0 }), n._data(c, "submit", !0)) }) }, postDispatch: function (a) { a._submitBubble && (delete a._submitBubble, this.parentNode && !a.isTrigger && n.event.simulate("submit", this.parentNode, a)) }, teardown: function () { return n.nodeName(this, "form") ? !1 : void n.event.remove(this, "._submit") } }), l.change || (n.event.special.change = { setup: function () { return ka.test(this.nodeName) ? (("checkbox" === this.type || "radio" === this.type) && (n.event.add(this, "propertychange._change", function (a) { "checked" === a.originalEvent.propertyName && (this._justChanged = !0) }), n.event.add(this, "click._change", function (a) { this._justChanged && !a.isTrigger && (this._justChanged = !1), n.event.simulate("change", this, a) })), !1) : void n.event.add(this, "beforeactivate._change", function (a) { var b = a.target; ka.test(b.nodeName) && !n._data(b, "change") && (n.event.add(b, "change._change", function (a) { !this.parentNode || a.isSimulated || a.isTrigger || n.event.simulate("change", this.parentNode, a) }), n._data(b, "change", !0)) }) }, handle: function (a) { var b = a.target; return this !== b || a.isSimulated || a.isTrigger || "radio" !== b.type && "checkbox" !== b.type ? a.handleObj.handler.apply(this, arguments) : void 0 }, teardown: function () { return n.event.remove(this, "._change"), !ka.test(this.nodeName) } }), l.focusin || n.each({ focus: "focusin", blur: "focusout" }, function (a, b) { var c = function (a) { n.event.simulate(b, a.target, n.event.fix(a)) }; n.event.special[b] = { setup: function () { var d = this.ownerDocument || this, e = n._data(d, b); e || d.addEventListener(a, c, !0), n._data(d, b, (e || 0) + 1) }, teardown: function () { var d = this.ownerDocument || this, e = n._data(d, b) - 1; e ? n._data(d, b, e) : (d.removeEventListener(a, c, !0), n._removeData(d, b)) } } }), n.fn.extend({ on: function (a, b, c, d) { return sa(this, a, b, c, d) }, one: function (a, b, c, d) { return sa(this, a, b, c, d, 1) }, off: function (a, b, c) { var d, e; if (a && a.preventDefault && a.handleObj) return d = a.handleObj, n(a.delegateTarget).off(d.namespace ? d.origType + "." + d.namespace : d.origType, d.selector, d.handler), this; if ("object" == typeof a) { for (e in a) this.off(e, b, a[e]); return this } return (b === !1 || "function" == typeof b) && (c = b, b = void 0), c === !1 && (c = qa), this.each(function () { n.event.remove(this, a, c, b) }) }, trigger: function (a, b) { return this.each(function () { n.event.trigger(a, b, this) }) }, triggerHandler: function (a, b) { var c = this[0]; return c ? n.event.trigger(a, b, c, !0) : void 0 } }); var ta = / jQuery\d+="(?:null|\d+)"/g, ua = new RegExp("<(?:" + ba + ")[\\s/>]", "i"), va = /<(?!area|br|col|embed|hr|img|input|link|meta|param)(([\w:-]+)[^>]*)\/>/gi, wa = /<script|<style|<link/i, xa = /checked\s*(?:[^=]|=\s*.checked.)/i, ya = /^true\/(.*)/, za = /^\s*<!(?:\[CDATA\[|--)|(?:\]\]|--)>\s*$/g, Aa = ca(d), Ba = Aa.appendChild(d.createElement("div")); function Ca(a, b) { return n.nodeName(a, "table") && n.nodeName(11 !== b.nodeType ? b : b.firstChild, "tr") ? a.getElementsByTagName("tbody")[0] || a.appendChild(a.ownerDocument.createElement("tbody")) : a } function Da(a) { return a.type = (null !== n.find.attr(a, "type")) + "/" + a.type, a } function Ea(a) { var b = ya.exec(a.type); return b ? a.type = b[1] : a.removeAttribute("type"), a } function Fa(a, b) { if (1 === b.nodeType && n.hasData(a)) { var c, d, e, f = n._data(a), g = n._data(b, f), h = f.events; if (h) { delete g.handle, g.events = {}; for (c in h) for (d = 0, e = h[c].length; e > d; d++)n.event.add(b, c, h[c][d]) } g.data && (g.data = n.extend({}, g.data)) } } function Ga(a, b) { var c, d, e; if (1 === b.nodeType) { if (c = b.nodeName.toLowerCase(), !l.noCloneEvent && b[n.expando]) { e = n._data(b); for (d in e.events) n.removeEvent(b, d, e.handle); b.removeAttribute(n.expando) } "script" === c && b.text !== a.text ? (Da(b).text = a.text, Ea(b)) : "object" === c ? (b.parentNode && (b.outerHTML = a.outerHTML), l.html5Clone && a.innerHTML && !n.trim(b.innerHTML) && (b.innerHTML = a.innerHTML)) : "input" === c && Z.test(a.type) ? (b.defaultChecked = b.checked = a.checked, b.value !== a.value && (b.value = a.value)) : "option" === c ? b.defaultSelected = b.selected = a.defaultSelected : ("input" === c || "textarea" === c) && (b.defaultValue = a.defaultValue) } } function Ha(a, b, c, d) { b = f.apply([], b); var e, g, h, i, j, k, m = 0, o = a.length, p = o - 1, q = b[0], r = n.isFunction(q); if (r || o > 1 && "string" == typeof q && !l.checkClone && xa.test(q)) return a.each(function (e) { var f = a.eq(e); r && (b[0] = q.call(this, e, f.html())), Ha(f, b, c, d) }); if (o && (k = ja(b, a[0].ownerDocument, !1, a, d), e = k.firstChild, 1 === k.childNodes.length && (k = e), e || d)) { for (i = n.map(ea(k, "script"), Da), h = i.length; o > m; m++)g = k, m !== p && (g = n.clone(g, !0, !0), h && n.merge(i, ea(g, "script"))), c.call(a[m], g, m); if (h) for (j = i[i.length - 1].ownerDocument, n.map(i, Ea), m = 0; h > m; m++)g = i[m], _.test(g.type || "") && !n._data(g, "globalEval") && n.contains(j, g) && (g.src ? n._evalUrl && n._evalUrl(g.src) : n.globalEval((g.text || g.textContent || g.innerHTML || "").replace(za, ""))); k = e = null } return a } function Ia(a, b, c) { for (var d, e = b ? n.filter(b, a) : a, f = 0; null != (d = e[f]); f++)c || 1 !== d.nodeType || n.cleanData(ea(d)), d.parentNode && (c && n.contains(d.ownerDocument, d) && fa(ea(d, "script")), d.parentNode.removeChild(d)); return a } n.extend({ htmlPrefilter: function (a) { return a.replace(va, "<$1></$2>") }, clone: function (a, b, c) { var d, e, f, g, h, i = n.contains(a.ownerDocument, a); if (l.html5Clone || n.isXMLDoc(a) || !ua.test("<" + a.nodeName + ">") ? f = a.cloneNode(!0) : (Ba.innerHTML = a.outerHTML, Ba.removeChild(f = Ba.firstChild)), !(l.noCloneEvent && l.noCloneChecked || 1 !== a.nodeType && 11 !== a.nodeType || n.isXMLDoc(a))) for (d = ea(f), h = ea(a), g = 0; null != (e = h[g]); ++g)d[g] && Ga(e, d[g]); if (b) if (c) for (h = h || ea(a), d = d || ea(f), g = 0; null != (e = h[g]); g++)Fa(e, d[g]); else Fa(a, f); return d = ea(f, "script"), d.length > 0 && fa(d, !i && ea(a, "script")), d = h = e = null, f }, cleanData: function (a, b) { for (var d, e, f, g, h = 0, i = n.expando, j = n.cache, k = l.attributes, m = n.event.special; null != (d = a[h]); h++)if ((b || M(d)) && (f = d[i], g = f && j[f])) { if (g.events) for (e in g.events) m[e] ? n.event.remove(d, e) : n.removeEvent(d, e, g.handle); j[f] && (delete j[f], k || "undefined" == typeof d.removeAttribute ? d[i] = void 0 : d.removeAttribute(i), c.push(f)) } } }), n.fn.extend({ domManip: Ha, detach: function (a) { return Ia(this, a, !0) }, remove: function (a) { return Ia(this, a) }, text: function (a) { return Y(this, function (a) { return void 0 === a ? n.text(this) : this.empty().append((this[0] && this[0].ownerDocument || d).createTextNode(a)) }, null, a, arguments.length) }, append: function () { return Ha(this, arguments, function (a) { if (1 === this.nodeType || 11 === this.nodeType || 9 === this.nodeType) { var b = Ca(this, a); b.appendChild(a) } }) }, prepend: function () { return Ha(this, arguments, function (a) { if (1 === this.nodeType || 11 === this.nodeType || 9 === this.nodeType) { var b = Ca(this, a); b.insertBefore(a, b.firstChild) } }) }, before: function () { return Ha(this, arguments, function (a) { this.parentNode && this.parentNode.insertBefore(a, this) }) }, after: function () { return Ha(this, arguments, function (a) { this.parentNode && this.parentNode.insertBefore(a, this.nextSibling) }) }, empty: function () { for (var a, b = 0; null != (a = this[b]); b++) { 1 === a.nodeType && n.cleanData(ea(a, !1)); while (a.firstChild) a.removeChild(a.firstChild); a.options && n.nodeName(a, "select") && (a.options.length = 0) } return this }, clone: function (a, b) { return a = null == a ? !1 : a, b = null == b ? a : b, this.map(function () { return n.clone(this, a, b) }) }, html: function (a) { return Y(this, function (a) { var b = this[0] || {}, c = 0, d = this.length; if (void 0 === a) return 1 === b.nodeType ? b.innerHTML.replace(ta, "") : void 0; if ("string" == typeof a && !wa.test(a) && (l.htmlSerialize || !ua.test(a)) && (l.leadingWhitespace || !aa.test(a)) && !da[($.exec(a) || ["", ""])[1].toLowerCase()]) { a = n.htmlPrefilter(a); try { for (; d > c; c++)b = this[c] || {}, 1 === b.nodeType && (n.cleanData(ea(b, !1)), b.innerHTML = a); b = 0 } catch (e) { } } b && this.empty().append(a) }, null, a, arguments.length) }, replaceWith: function () { var a = []; return Ha(this, arguments, function (b) { var c = this.parentNode; n.inArray(this, a) < 0 && (n.cleanData(ea(this)), c && c.replaceChild(b, this)) }, a) } }), n.each({ appendTo: "append", prependTo: "prepend", insertBefore: "before", insertAfter: "after", replaceAll: "replaceWith" }, function (a, b) { n.fn[a] = function (a) { for (var c, d = 0, e = [], f = n(a), h = f.length - 1; h >= d; d++)c = d === h ? this : this.clone(!0), n(f[d])[b](c), g.apply(e, c.get()); return this.pushStack(e) } }); var Ja, Ka = { HTML: "block", BODY: "block" }; function La(a, b) { var c = n(b.createElement(a)).appendTo(b.body), d = n.css(c[0], "display"); return c.detach(), d } function Ma(a) { var b = d, c = Ka[a]; return c || (c = La(a, b), "none" !== c && c || (Ja = (Ja || n("<iframe frameborder='0' width='0' height='0'/>")).appendTo(b.documentElement), b = (Ja[0].contentWindow || Ja[0].contentDocument).document, b.write(), b.close(), c = La(a, b), Ja.detach()), Ka[a] = c), c } var Na = /^margin/, Oa = new RegExp("^(" + T + ")(?!px)[a-z%]+$", "i"), Pa = function (a, b, c, d) { var e, f, g = {}; for (f in b) g[f] = a.style[f], a.style[f] = b[f]; e = c.apply(a, d || []); for (f in b) a.style[f] = g[f]; return e }, Qa = d.documentElement; !function () { var b, c, e, f, g, h, i = d.createElement("div"), j = d.createElement("div"); if (j.style) { j.style.cssText = "float:left;opacity:.5", l.opacity = "0.5" === j.style.opacity, l.cssFloat = !!j.style.cssFloat, j.style.backgroundClip = "content-box", j.cloneNode(!0).style.backgroundClip = "", l.clearCloneStyle = "content-box" === j.style.backgroundClip, i = d.createElement("div"), i.style.cssText = "border:0;width:8px;height:0;top:0;left:-9999px;padding:0;margin-top:1px;position:absolute", j.innerHTML = "", i.appendChild(j), l.boxSizing = "" === j.style.boxSizing || "" === j.style.MozBoxSizing || "" === j.style.WebkitBoxSizing, n.extend(l, { reliableHiddenOffsets: function () { return null == b && k(), f }, boxSizingReliable: function () { return null == b && k(), e }, pixelMarginRight: function () { return null == b && k(), c }, pixelPosition: function () { return null == b && k(), b }, reliableMarginRight: function () { return null == b && k(), g }, reliableMarginLeft: function () { return null == b && k(), h } }); function k() { var k, l, m = d.documentElement; m.appendChild(i), j.style.cssText = "-webkit-box-sizing:border-box;box-sizing:border-box;position:relative;display:block;margin:auto;border:1px;padding:1px;top:1%;width:50%", b = e = h = !1, c = g = !0, a.getComputedStyle && (l = a.getComputedStyle(j), b = "1%" !== (l || {}).top, h = "2px" === (l || {}).marginLeft, e = "4px" === (l || { width: "4px" }).width, j.style.marginRight = "50%", c = "4px" === (l || { marginRight: "4px" }).marginRight, k = j.appendChild(d.createElement("div")), k.style.cssText = j.style.cssText = "-webkit-box-sizing:content-box;-moz-box-sizing:content-box;box-sizing:content-box;display:block;margin:0;border:0;padding:0", k.style.marginRight = k.style.width = "0", j.style.width = "1px", g = !parseFloat((a.getComputedStyle(k) || {}).marginRight), j.removeChild(k)), j.style.display = "none", f = 0 === j.getClientRects().length, f && (j.style.display = "", j.innerHTML = "<table><tr><td></td><td>t</td></tr></table>", k = j.getElementsByTagName("td"), k[0].style.cssText = "margin:0;border:0;padding:0;display:none", f = 0 === k[0].offsetHeight, f && (k[0].style.display = "", k[1].style.display = "none", f = 0 === k[0].offsetHeight)), m.removeChild(i) } } }(); var Ra, Sa, Ta = /^(top|right|bottom|left)$/; a.getComputedStyle ? (Ra = function (b) { var c = b.ownerDocument.defaultView; return c && c.opener || (c = a), c.getComputedStyle(b) }, Sa = function (a, b, c) { var d, e, f, g, h = a.style; return c = c || Ra(a), g = c ? c.getPropertyValue(b) || c[b] : void 0, "" !== g && void 0 !== g || n.contains(a.ownerDocument, a) || (g = n.style(a, b)), c && !l.pixelMarginRight() && Oa.test(g) && Na.test(b) && (d = h.width, e = h.minWidth, f = h.maxWidth, h.minWidth = h.maxWidth = h.width = g, g = c.width, h.width = d, h.minWidth = e, h.maxWidth = f), void 0 === g ? g : g + "" }) : Qa.currentStyle && (Ra = function (a) { return a.currentStyle }, Sa = function (a, b, c) { var d, e, f, g, h = a.style; return c = c || Ra(a), g = c ? c[b] : void 0, null == g && h && h[b] && (g = h[b]), Oa.test(g) && !Ta.test(b) && (d = h.left, e = a.runtimeStyle, f = e && e.left, f && (e.left = a.currentStyle.left), h.left = "fontSize" === b ? "1em" : g, g = h.pixelLeft + "px", h.left = d, f && (e.left = f)), void 0 === g ? g : g + "" || "auto" }); function Ua(a, b) { return { get: function () { return a() ? void delete this.get : (this.get = b).apply(this, arguments) } } } var Va = /alpha\([^)]*\)/i, Wa = /opacity\s*=\s*([^)]*)/i, Xa = /^(none|table(?!-c[ea]).+)/, Ya = new RegExp("^(" + T + ")(.*)$", "i"), Za = { position: "absolute", visibility: "hidden", display: "block" }, $a = { letterSpacing: "0", fontWeight: "400" }, _a = ["Webkit", "O", "Moz", "ms"], ab = d.createElement("div").style; function bb(a) { if (a in ab) return a; var b = a.charAt(0).toUpperCase() + a.slice(1), c = _a.length; while (c--) if (a = _a[c] + b, a in ab) return a } function cb(a, b) { for (var c, d, e, f = [], g = 0, h = a.length; h > g; g++)d = a[g], d.style && (f[g] = n._data(d, "olddisplay"), c = d.style.display, b ? (f[g] || "none" !== c || (d.style.display = ""), "" === d.style.display && W(d) && (f[g] = n._data(d, "olddisplay", Ma(d.nodeName)))) : (e = W(d), (c && "none" !== c || !e) && n._data(d, "olddisplay", e ? c : n.css(d, "display")))); for (g = 0; h > g; g++)d = a[g], d.style && (b && "none" !== d.style.display && "" !== d.style.display || (d.style.display = b ? f[g] || "" : "none")); return a } function db(a, b, c) { var d = Ya.exec(b); return d ? Math.max(0, d[1] - (c || 0)) + (d[2] || "px") : b } function eb(a, b, c, d, e) { for (var f = c === (d ? "border" : "content") ? 4 : "width" === b ? 1 : 0, g = 0; 4 > f; f += 2)"margin" === c && (g += n.css(a, c + V[f], !0, e)), d ? ("content" === c && (g -= n.css(a, "padding" + V[f], !0, e)), "margin" !== c && (g -= n.css(a, "border" + V[f] + "Width", !0, e))) : (g += n.css(a, "padding" + V[f], !0, e), "padding" !== c && (g += n.css(a, "border" + V[f] + "Width", !0, e))); return g } function fb(b, c, e) { var f = !0, g = "width" === c ? b.offsetWidth : b.offsetHeight, h = Ra(b), i = l.boxSizing && "border-box" === n.css(b, "boxSizing", !1, h); if (d.msFullscreenElement && a.top !== a && b.getClientRects().length && (g = Math.round(100 * b.getBoundingClientRect()[c])), 0 >= g || null == g) { if (g = Sa(b, c, h), (0 > g || null == g) && (g = b.style[c]), Oa.test(g)) return g; f = i && (l.boxSizingReliable() || g === b.style[c]), g = parseFloat(g) || 0 } return g + eb(b, c, e || (i ? "border" : "content"), f, h) + "px" } n.extend({ cssHooks: { opacity: { get: function (a, b) { if (b) { var c = Sa(a, "opacity"); return "" === c ? "1" : c } } } }, cssNumber: { animationIterationCount: !0, columnCount: !0, fillOpacity: !0, flexGrow: !0, flexShrink: !0, fontWeight: !0, lineHeight: !0, opacity: !0, order: !0, orphans: !0, widows: !0, zIndex: !0, zoom: !0 }, cssProps: { "float": l.cssFloat ? "cssFloat" : "styleFloat" }, style: function (a, b, c, d) { if (a && 3 !== a.nodeType && 8 !== a.nodeType && a.style) { var e, f, g, h = n.camelCase(b), i = a.style; if (b = n.cssProps[h] || (n.cssProps[h] = bb(h) || h), g = n.cssHooks[b] || n.cssHooks[h], void 0 === c) return g && "get" in g && void 0 !== (e = g.get(a, !1, d)) ? e : i[b]; if (f = typeof c, "string" === f && (e = U.exec(c)) && e[1] && (c = X(a, b, e), f = "number"), null != c && c === c && ("number" === f && (c += e && e[3] || (n.cssNumber[h] ? "" : "px")), l.clearCloneStyle || "" !== c || 0 !== b.indexOf("background") || (i[b] = "inherit"), !(g && "set" in g && void 0 === (c = g.set(a, c, d))))) try { i[b] = c } catch (j) { } } }, css: function (a, b, c, d) { var e, f, g, h = n.camelCase(b); return b = n.cssProps[h] || (n.cssProps[h] = bb(h) || h), g = n.cssHooks[b] || n.cssHooks[h], g && "get" in g && (f = g.get(a, !0, c)), void 0 === f && (f = Sa(a, b, d)), "normal" === f && b in $a && (f = $a[b]), "" === c || c ? (e = parseFloat(f), c === !0 || isFinite(e) ? e || 0 : f) : f } }), n.each(["height", "width"], function (a, b) { n.cssHooks[b] = { get: function (a, c, d) { return c ? Xa.test(n.css(a, "display")) && 0 === a.offsetWidth ? Pa(a, Za, function () { return fb(a, b, d) }) : fb(a, b, d) : void 0 }, set: function (a, c, d) { var e = d && Ra(a); return db(a, c, d ? eb(a, b, d, l.boxSizing && "border-box" === n.css(a, "boxSizing", !1, e), e) : 0) } } }), l.opacity || (n.cssHooks.opacity = { get: function (a, b) { return Wa.test((b && a.currentStyle ? a.currentStyle.filter : a.style.filter) || "") ? .01 * parseFloat(RegExp.$1) + "" : b ? "1" : "" }, set: function (a, b) { var c = a.style, d = a.currentStyle, e = n.isNumeric(b) ? "alpha(opacity=" + 100 * b + ")" : "", f = d && d.filter || c.filter || ""; c.zoom = 1, (b >= 1 || "" === b) && "" === n.trim(f.replace(Va, "")) && c.removeAttribute && (c.removeAttribute("filter"), "" === b || d && !d.filter) || (c.filter = Va.test(f) ? f.replace(Va, e) : f + " " + e) } }), n.cssHooks.marginRight = Ua(l.reliableMarginRight, function (a, b) { return b ? Pa(a, { display: "inline-block" }, Sa, [a, "marginRight"]) : void 0 }), n.cssHooks.marginLeft = Ua(l.reliableMarginLeft, function (a, b) {
    return b ? (parseFloat(Sa(a, "marginLeft")) || (n.contains(a.ownerDocument, a) ? a.getBoundingClientRect().left - Pa(a, { marginLeft: 0 }, function () { return a.getBoundingClientRect().left }) : 0)) + "px" : void 0
  }), n.each({ margin: "", padding: "", border: "Width" }, function (a, b) { n.cssHooks[a + b] = { expand: function (c) { for (var d = 0, e = {}, f = "string" == typeof c ? c.split(" ") : [c]; 4 > d; d++)e[a + V[d] + b] = f[d] || f[d - 2] || f[0]; return e } }, Na.test(a) || (n.cssHooks[a + b].set = db) }), n.fn.extend({ css: function (a, b) { return Y(this, function (a, b, c) { var d, e, f = {}, g = 0; if (n.isArray(b)) { for (d = Ra(a), e = b.length; e > g; g++)f[b[g]] = n.css(a, b[g], !1, d); return f } return void 0 !== c ? n.style(a, b, c) : n.css(a, b) }, a, b, arguments.length > 1) }, show: function () { return cb(this, !0) }, hide: function () { return cb(this) }, toggle: function (a) { return "boolean" == typeof a ? a ? this.show() : this.hide() : this.each(function () { W(this) ? n(this).show() : n(this).hide() }) } }); function gb(a, b, c, d, e) { return new gb.prototype.init(a, b, c, d, e) } n.Tween = gb, gb.prototype = { constructor: gb, init: function (a, b, c, d, e, f) { this.elem = a, this.prop = c, this.easing = e || n.easing._default, this.options = b, this.start = this.now = this.cur(), this.end = d, this.unit = f || (n.cssNumber[c] ? "" : "px") }, cur: function () { var a = gb.propHooks[this.prop]; return a && a.get ? a.get(this) : gb.propHooks._default.get(this) }, run: function (a) { var b, c = gb.propHooks[this.prop]; return this.options.duration ? this.pos = b = n.easing[this.easing](a, this.options.duration * a, 0, 1, this.options.duration) : this.pos = b = a, this.now = (this.end - this.start) * b + this.start, this.options.step && this.options.step.call(this.elem, this.now, this), c && c.set ? c.set(this) : gb.propHooks._default.set(this), this } }, gb.prototype.init.prototype = gb.prototype, gb.propHooks = { _default: { get: function (a) { var b; return 1 !== a.elem.nodeType || null != a.elem[a.prop] && null == a.elem.style[a.prop] ? a.elem[a.prop] : (b = n.css(a.elem, a.prop, ""), b && "auto" !== b ? b : 0) }, set: function (a) { n.fx.step[a.prop] ? n.fx.step[a.prop](a) : 1 !== a.elem.nodeType || null == a.elem.style[n.cssProps[a.prop]] && !n.cssHooks[a.prop] ? a.elem[a.prop] = a.now : n.style(a.elem, a.prop, a.now + a.unit) } } }, gb.propHooks.scrollTop = gb.propHooks.scrollLeft = { set: function (a) { a.elem.nodeType && a.elem.parentNode && (a.elem[a.prop] = a.now) } }, n.easing = { linear: function (a) { return a }, swing: function (a) { return .5 - Math.cos(a * Math.PI) / 2 }, _default: "swing" }, n.fx = gb.prototype.init, n.fx.step = {}; var hb, ib, jb = /^(?:toggle|show|hide)$/, kb = /queueHooks$/; function lb() { return a.setTimeout(function () { hb = void 0 }), hb = n.now() } function mb(a, b) { var c, d = { height: a }, e = 0; for (b = b ? 1 : 0; 4 > e; e += 2 - b)c = V[e], d["margin" + c] = d["padding" + c] = a; return b && (d.opacity = d.width = a), d } function nb(a, b, c) { for (var d, e = (qb.tweeners[b] || []).concat(qb.tweeners["*"]), f = 0, g = e.length; g > f; f++)if (d = e[f].call(c, b, a)) return d } function ob(a, b, c) { var d, e, f, g, h, i, j, k, m = this, o = {}, p = a.style, q = a.nodeType && W(a), r = n._data(a, "fxshow"); c.queue || (h = n._queueHooks(a, "fx"), null == h.unqueued && (h.unqueued = 0, i = h.empty.fire, h.empty.fire = function () { h.unqueued || i() }), h.unqueued++, m.always(function () { m.always(function () { h.unqueued--, n.queue(a, "fx").length || h.empty.fire() }) })), 1 === a.nodeType && ("height" in b || "width" in b) && (c.overflow = [p.overflow, p.overflowX, p.overflowY], j = n.css(a, "display"), k = "none" === j ? n._data(a, "olddisplay") || Ma(a.nodeName) : j, "inline" === k && "none" === n.css(a, "float") && (l.inlineBlockNeedsLayout && "inline" !== Ma(a.nodeName) ? p.zoom = 1 : p.display = "inline-block")), c.overflow && (p.overflow = "hidden", l.shrinkWrapBlocks() || m.always(function () { p.overflow = c.overflow[0], p.overflowX = c.overflow[1], p.overflowY = c.overflow[2] })); for (d in b) if (e = b[d], jb.exec(e)) { if (delete b[d], f = f || "toggle" === e, e === (q ? "hide" : "show")) { if ("show" !== e || !r || void 0 === r[d]) continue; q = !0 } o[d] = r && r[d] || n.style(a, d) } else j = void 0; if (n.isEmptyObject(o)) "inline" === ("none" === j ? Ma(a.nodeName) : j) && (p.display = j); else { r ? "hidden" in r && (q = r.hidden) : r = n._data(a, "fxshow", {}), f && (r.hidden = !q), q ? n(a).show() : m.done(function () { n(a).hide() }), m.done(function () { var b; n._removeData(a, "fxshow"); for (b in o) n.style(a, b, o[b]) }); for (d in o) g = nb(q ? r[d] : 0, d, m), d in r || (r[d] = g.start, q && (g.end = g.start, g.start = "width" === d || "height" === d ? 1 : 0)) } } function pb(a, b) { var c, d, e, f, g; for (c in a) if (d = n.camelCase(c), e = b[d], f = a[c], n.isArray(f) && (e = f[1], f = a[c] = f[0]), c !== d && (a[d] = f, delete a[c]), g = n.cssHooks[d], g && "expand" in g) { f = g.expand(f), delete a[d]; for (c in f) c in a || (a[c] = f[c], b[c] = e) } else b[d] = e } function qb(a, b, c) { var d, e, f = 0, g = qb.prefilters.length, h = n.Deferred().always(function () { delete i.elem }), i = function () { if (e) return !1; for (var b = hb || lb(), c = Math.max(0, j.startTime + j.duration - b), d = c / j.duration || 0, f = 1 - d, g = 0, i = j.tweens.length; i > g; g++)j.tweens[g].run(f); return h.notifyWith(a, [j, f, c]), 1 > f && i ? c : (h.resolveWith(a, [j]), !1) }, j = h.promise({ elem: a, props: n.extend({}, b), opts: n.extend(!0, { specialEasing: {}, easing: n.easing._default }, c), originalProperties: b, originalOptions: c, startTime: hb || lb(), duration: c.duration, tweens: [], createTween: function (b, c) { var d = n.Tween(a, j.opts, b, c, j.opts.specialEasing[b] || j.opts.easing); return j.tweens.push(d), d }, stop: function (b) { var c = 0, d = b ? j.tweens.length : 0; if (e) return this; for (e = !0; d > c; c++)j.tweens[c].run(1); return b ? (h.notifyWith(a, [j, 1, 0]), h.resolveWith(a, [j, b])) : h.rejectWith(a, [j, b]), this } }), k = j.props; for (pb(k, j.opts.specialEasing); g > f; f++)if (d = qb.prefilters[f].call(j, a, k, j.opts)) return n.isFunction(d.stop) && (n._queueHooks(j.elem, j.opts.queue).stop = n.proxy(d.stop, d)), d; return n.map(k, nb, j), n.isFunction(j.opts.start) && j.opts.start.call(a, j), n.fx.timer(n.extend(i, { elem: a, anim: j, queue: j.opts.queue })), j.progress(j.opts.progress).done(j.opts.done, j.opts.complete).fail(j.opts.fail).always(j.opts.always) } n.Animation = n.extend(qb, { tweeners: { "*": [function (a, b) { var c = this.createTween(a, b); return X(c.elem, a, U.exec(b), c), c }] }, tweener: function (a, b) { n.isFunction(a) ? (b = a, a = ["*"]) : a = a.match(G); for (var c, d = 0, e = a.length; e > d; d++)c = a[d], qb.tweeners[c] = qb.tweeners[c] || [], qb.tweeners[c].unshift(b) }, prefilters: [ob], prefilter: function (a, b) { b ? qb.prefilters.unshift(a) : qb.prefilters.push(a) } }), n.speed = function (a, b, c) { var d = a && "object" == typeof a ? n.extend({}, a) : { complete: c || !c && b || n.isFunction(a) && a, duration: a, easing: c && b || b && !n.isFunction(b) && b }; return d.duration = n.fx.off ? 0 : "number" == typeof d.duration ? d.duration : d.duration in n.fx.speeds ? n.fx.speeds[d.duration] : n.fx.speeds._default, (null == d.queue || d.queue === !0) && (d.queue = "fx"), d.old = d.complete, d.complete = function () { n.isFunction(d.old) && d.old.call(this), d.queue && n.dequeue(this, d.queue) }, d }, n.fn.extend({ fadeTo: function (a, b, c, d) { return this.filter(W).css("opacity", 0).show().end().animate({ opacity: b }, a, c, d) }, animate: function (a, b, c, d) { var e = n.isEmptyObject(a), f = n.speed(b, c, d), g = function () { var b = qb(this, n.extend({}, a), f); (e || n._data(this, "finish")) && b.stop(!0) }; return g.finish = g, e || f.queue === !1 ? this.each(g) : this.queue(f.queue, g) }, stop: function (a, b, c) { var d = function (a) { var b = a.stop; delete a.stop, b(c) }; return "string" != typeof a && (c = b, b = a, a = void 0), b && a !== !1 && this.queue(a || "fx", []), this.each(function () { var b = !0, e = null != a && a + "queueHooks", f = n.timers, g = n._data(this); if (e) g[e] && g[e].stop && d(g[e]); else for (e in g) g[e] && g[e].stop && kb.test(e) && d(g[e]); for (e = f.length; e--;)f[e].elem !== this || null != a && f[e].queue !== a || (f[e].anim.stop(c), b = !1, f.splice(e, 1)); (b || !c) && n.dequeue(this, a) }) }, finish: function (a) { return a !== !1 && (a = a || "fx"), this.each(function () { var b, c = n._data(this), d = c[a + "queue"], e = c[a + "queueHooks"], f = n.timers, g = d ? d.length : 0; for (c.finish = !0, n.queue(this, a, []), e && e.stop && e.stop.call(this, !0), b = f.length; b--;)f[b].elem === this && f[b].queue === a && (f[b].anim.stop(!0), f.splice(b, 1)); for (b = 0; g > b; b++)d[b] && d[b].finish && d[b].finish.call(this); delete c.finish }) } }), n.each(["toggle", "show", "hide"], function (a, b) { var c = n.fn[b]; n.fn[b] = function (a, d, e) { return null == a || "boolean" == typeof a ? c.apply(this, arguments) : this.animate(mb(b, !0), a, d, e) } }), n.each({ slideDown: mb("show"), slideUp: mb("hide"), slideToggle: mb("toggle"), fadeIn: { opacity: "show" }, fadeOut: { opacity: "hide" }, fadeToggle: { opacity: "toggle" } }, function (a, b) { n.fn[a] = function (a, c, d) { return this.animate(b, a, c, d) } }), n.timers = [], n.fx.tick = function () { var a, b = n.timers, c = 0; for (hb = n.now(); c < b.length; c++)a = b[c], a() || b[c] !== a || b.splice(c--, 1); b.length || n.fx.stop(), hb = void 0 }, n.fx.timer = function (a) { n.timers.push(a), a() ? n.fx.start() : n.timers.pop() }, n.fx.interval = 13, n.fx.start = function () { ib || (ib = a.setInterval(n.fx.tick, n.fx.interval)) }, n.fx.stop = function () { a.clearInterval(ib), ib = null }, n.fx.speeds = { slow: 600, fast: 200, _default: 400 }, n.fn.delay = function (b, c) { return b = n.fx ? n.fx.speeds[b] || b : b, c = c || "fx", this.queue(c, function (c, d) { var e = a.setTimeout(c, b); d.stop = function () { a.clearTimeout(e) } }) }, function () { var a, b = d.createElement("input"), c = d.createElement("div"), e = d.createElement("select"), f = e.appendChild(d.createElement("option")); c = d.createElement("div"), c.setAttribute("className", "t"), c.innerHTML = "  <link/><table></table><a href='/a'>a</a><input type='checkbox'/>", a = c.getElementsByTagName("a")[0], b.setAttribute("type", "checkbox"), c.appendChild(b), a = c.getElementsByTagName("a")[0], a.style.cssText = "top:1px", l.getSetAttribute = "t" !== c.className, l.style = /top/.test(a.getAttribute("style")), l.hrefNormalized = "/a" === a.getAttribute("href"), l.checkOn = !!b.value, l.optSelected = f.selected, l.enctype = !!d.createElement("form").enctype, e.disabled = !0, l.optDisabled = !f.disabled, b = d.createElement("input"), b.setAttribute("value", ""), l.input = "" === b.getAttribute("value"), b.value = "t", b.setAttribute("type", "radio"), l.radioValue = "t" === b.value }(); var rb = /\r/g; n.fn.extend({ val: function (a) { var b, c, d, e = this[0]; { if (arguments.length) return d = n.isFunction(a), this.each(function (c) { var e; 1 === this.nodeType && (e = d ? a.call(this, c, n(this).val()) : a, null == e ? e = "" : "number" == typeof e ? e += "" : n.isArray(e) && (e = n.map(e, function (a) { return null == a ? "" : a + "" })), b = n.valHooks[this.type] || n.valHooks[this.nodeName.toLowerCase()], b && "set" in b && void 0 !== b.set(this, e, "value") || (this.value = e)) }); if (e) return b = n.valHooks[e.type] || n.valHooks[e.nodeName.toLowerCase()], b && "get" in b && void 0 !== (c = b.get(e, "value")) ? c : (c = e.value, "string" == typeof c ? c.replace(rb, "") : null == c ? "" : c) } } }), n.extend({ valHooks: { option: { get: function (a) { var b = n.find.attr(a, "value"); return null != b ? b : n.trim(n.text(a)) } }, select: { get: function (a) { for (var b, c, d = a.options, e = a.selectedIndex, f = "select-one" === a.type || 0 > e, g = f ? null : [], h = f ? e + 1 : d.length, i = 0 > e ? h : f ? e : 0; h > i; i++)if (c = d[i], (c.selected || i === e) && (l.optDisabled ? !c.disabled : null === c.getAttribute("disabled")) && (!c.parentNode.disabled || !n.nodeName(c.parentNode, "optgroup"))) { if (b = n(c).val(), f) return b; g.push(b) } return g }, set: function (a, b) { var c, d, e = a.options, f = n.makeArray(b), g = e.length; while (g--) if (d = e[g], n.inArray(n.valHooks.option.get(d), f) >= 0) try { d.selected = c = !0 } catch (h) { d.scrollHeight } else d.selected = !1; return c || (a.selectedIndex = -1), e } } } }), n.each(["radio", "checkbox"], function () { n.valHooks[this] = { set: function (a, b) { return n.isArray(b) ? a.checked = n.inArray(n(a).val(), b) > -1 : void 0 } }, l.checkOn || (n.valHooks[this].get = function (a) { return null === a.getAttribute("value") ? "on" : a.value }) }); var sb, tb, ub = n.expr.attrHandle, vb = /^(?:checked|selected)$/i, wb = l.getSetAttribute, xb = l.input; n.fn.extend({ attr: function (a, b) { return Y(this, n.attr, a, b, arguments.length > 1) }, removeAttr: function (a) { return this.each(function () { n.removeAttr(this, a) }) } }), n.extend({ attr: function (a, b, c) { var d, e, f = a.nodeType; if (3 !== f && 8 !== f && 2 !== f) return "undefined" == typeof a.getAttribute ? n.prop(a, b, c) : (1 === f && n.isXMLDoc(a) || (b = b.toLowerCase(), e = n.attrHooks[b] || (n.expr.match.bool.test(b) ? tb : sb)), void 0 !== c ? null === c ? void n.removeAttr(a, b) : e && "set" in e && void 0 !== (d = e.set(a, c, b)) ? d : (a.setAttribute(b, c + ""), c) : e && "get" in e && null !== (d = e.get(a, b)) ? d : (d = n.find.attr(a, b), null == d ? void 0 : d)) }, attrHooks: { type: { set: function (a, b) { if (!l.radioValue && "radio" === b && n.nodeName(a, "input")) { var c = a.value; return a.setAttribute("type", b), c && (a.value = c), b } } } }, removeAttr: function (a, b) { var c, d, e = 0, f = b && b.match(G); if (f && 1 === a.nodeType) while (c = f[e++]) d = n.propFix[c] || c, n.expr.match.bool.test(c) ? xb && wb || !vb.test(c) ? a[d] = !1 : a[n.camelCase("default-" + c)] = a[d] = !1 : n.attr(a, c, ""), a.removeAttribute(wb ? c : d) } }), tb = { set: function (a, b, c) { return b === !1 ? n.removeAttr(a, c) : xb && wb || !vb.test(c) ? a.setAttribute(!wb && n.propFix[c] || c, c) : a[n.camelCase("default-" + c)] = a[c] = !0, c } }, n.each(n.expr.match.bool.source.match(/\w+/g), function (a, b) { var c = ub[b] || n.find.attr; xb && wb || !vb.test(b) ? ub[b] = function (a, b, d) { var e, f; return d || (f = ub[b], ub[b] = e, e = null != c(a, b, d) ? b.toLowerCase() : null, ub[b] = f), e } : ub[b] = function (a, b, c) { return c ? void 0 : a[n.camelCase("default-" + b)] ? b.toLowerCase() : null } }), xb && wb || (n.attrHooks.value = { set: function (a, b, c) { return n.nodeName(a, "input") ? void (a.defaultValue = b) : sb && sb.set(a, b, c) } }), wb || (sb = { set: function (a, b, c) { var d = a.getAttributeNode(c); return d || a.setAttributeNode(d = a.ownerDocument.createAttribute(c)), d.value = b += "", "value" === c || b === a.getAttribute(c) ? b : void 0 } }, ub.id = ub.name = ub.coords = function (a, b, c) { var d; return c ? void 0 : (d = a.getAttributeNode(b)) && "" !== d.value ? d.value : null }, n.valHooks.button = { get: function (a, b) { var c = a.getAttributeNode(b); return c && c.specified ? c.value : void 0 }, set: sb.set }, n.attrHooks.contenteditable = { set: function (a, b, c) { sb.set(a, "" === b ? !1 : b, c) } }, n.each(["width", "height"], function (a, b) { n.attrHooks[b] = { set: function (a, c) { return "" === c ? (a.setAttribute(b, "auto"), c) : void 0 } } })), l.style || (n.attrHooks.style = { get: function (a) { return a.style.cssText || void 0 }, set: function (a, b) { return a.style.cssText = b + "" } }); var yb = /^(?:input|select|textarea|button|object)$/i, zb = /^(?:a|area)$/i; n.fn.extend({ prop: function (a, b) { return Y(this, n.prop, a, b, arguments.length > 1) }, removeProp: function (a) { return a = n.propFix[a] || a, this.each(function () { try { this[a] = void 0, delete this[a] } catch (b) { } }) } }), n.extend({ prop: function (a, b, c) { var d, e, f = a.nodeType; if (3 !== f && 8 !== f && 2 !== f) return 1 === f && n.isXMLDoc(a) || (b = n.propFix[b] || b, e = n.propHooks[b]), void 0 !== c ? e && "set" in e && void 0 !== (d = e.set(a, c, b)) ? d : a[b] = c : e && "get" in e && null !== (d = e.get(a, b)) ? d : a[b] }, propHooks: { tabIndex: { get: function (a) { var b = n.find.attr(a, "tabindex"); return b ? parseInt(b, 10) : yb.test(a.nodeName) || zb.test(a.nodeName) && a.href ? 0 : -1 } } }, propFix: { "for": "htmlFor", "class": "className" } }), l.hrefNormalized || n.each(["href", "src"], function (a, b) { n.propHooks[b] = { get: function (a) { return a.getAttribute(b, 4) } } }), l.optSelected || (n.propHooks.selected = { get: function (a) { var b = a.parentNode; return b && (b.selectedIndex, b.parentNode && b.parentNode.selectedIndex), null } }), n.each(["tabIndex", "readOnly", "maxLength", "cellSpacing", "cellPadding", "rowSpan", "colSpan", "useMap", "frameBorder", "contentEditable"], function () { n.propFix[this.toLowerCase()] = this }), l.enctype || (n.propFix.enctype = "encoding"); var Ab = /[\t\r\n\f]/g; function Bb(a) { return n.attr(a, "class") || "" } n.fn.extend({ addClass: function (a) { var b, c, d, e, f, g, h, i = 0; if (n.isFunction(a)) return this.each(function (b) { n(this).addClass(a.call(this, b, Bb(this))) }); if ("string" == typeof a && a) { b = a.match(G) || []; while (c = this[i++]) if (e = Bb(c), d = 1 === c.nodeType && (" " + e + " ").replace(Ab, " ")) { g = 0; while (f = b[g++]) d.indexOf(" " + f + " ") < 0 && (d += f + " "); h = n.trim(d), e !== h && n.attr(c, "class", h) } } return this }, removeClass: function (a) { var b, c, d, e, f, g, h, i = 0; if (n.isFunction(a)) return this.each(function (b) { n(this).removeClass(a.call(this, b, Bb(this))) }); if (!arguments.length) return this.attr("class", ""); if ("string" == typeof a && a) { b = a.match(G) || []; while (c = this[i++]) if (e = Bb(c), d = 1 === c.nodeType && (" " + e + " ").replace(Ab, " ")) { g = 0; while (f = b[g++]) while (d.indexOf(" " + f + " ") > -1) d = d.replace(" " + f + " ", " "); h = n.trim(d), e !== h && n.attr(c, "class", h) } } return this }, toggleClass: function (a, b) { var c = typeof a; return "boolean" == typeof b && "string" === c ? b ? this.addClass(a) : this.removeClass(a) : n.isFunction(a) ? this.each(function (c) { n(this).toggleClass(a.call(this, c, Bb(this), b), b) }) : this.each(function () { var b, d, e, f; if ("string" === c) { d = 0, e = n(this), f = a.match(G) || []; while (b = f[d++]) e.hasClass(b) ? e.removeClass(b) : e.addClass(b) } else (void 0 === a || "boolean" === c) && (b = Bb(this), b && n._data(this, "__className__", b), n.attr(this, "class", b || a === !1 ? "" : n._data(this, "__className__") || "")) }) }, hasClass: function (a) { var b, c, d = 0; b = " " + a + " "; while (c = this[d++]) if (1 === c.nodeType && (" " + Bb(c) + " ").replace(Ab, " ").indexOf(b) > -1) return !0; return !1 } }), n.each("blur focus focusin focusout load resize scroll unload click dblclick mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave change select submit keydown keypress keyup error contextmenu".split(" "), function (a, b) { n.fn[b] = function (a, c) { return arguments.length > 0 ? this.on(b, null, a, c) : this.trigger(b) } }), n.fn.extend({ hover: function (a, b) { return this.mouseenter(a).mouseleave(b || a) } }); var Cb = a.location, Db = n.now(), Eb = /\?/, Fb = /(,)|(\[|{)|(}|])|"(?:[^"\\\r\n]|\\["\\\/bfnrt]|\\u[\da-fA-F]{4})*"\s*:?|true|false|null|-?(?!0\d)\d+(?:\.\d+|)(?:[eE][+-]?\d+|)/g; n.parseJSON = function (b) { if (a.JSON && a.JSON.parse) return a.JSON.parse(b + ""); var c, d = null, e = n.trim(b + ""); return e && !n.trim(e.replace(Fb, function (a, b, e, f) { return c && b && (d = 0), 0 === d ? a : (c = e || b, d += !f - !e, "") })) ? Function("return " + e)() : n.error("Invalid JSON: " + b) }, n.parseXML = function (b) { var c, d; if (!b || "string" != typeof b) return null; try { a.DOMParser ? (d = new a.DOMParser, c = d.parseFromString(b, "text/xml")) : (c = new a.ActiveXObject("Microsoft.XMLDOM"), c.async = "false", c.loadXML(b)) } catch (e) { c = void 0 } return c && c.documentElement && !c.getElementsByTagName("parsererror").length || n.error("Invalid XML: " + b), c }; var Gb = /#.*$/, Hb = /([?&])_=[^&]*/, Ib = /^(.*?):[ \t]*([^\r\n]*)\r?$/gm, Jb = /^(?:about|app|app-storage|.+-extension|file|res|widget):$/, Kb = /^(?:GET|HEAD)$/, Lb = /^\/\//, Mb = /^([\w.+-]+:)(?:\/\/(?:[^\/?#]*@|)([^\/?#:]*)(?::(\d+)|)|)/, Nb = {}, Ob = {}, Pb = "*/".concat("*"), Qb = Cb.href, Rb = Mb.exec(Qb.toLowerCase()) || []; function Sb(a) { return function (b, c) { "string" != typeof b && (c = b, b = "*"); var d, e = 0, f = b.toLowerCase().match(G) || []; if (n.isFunction(c)) while (d = f[e++]) "+" === d.charAt(0) ? (d = d.slice(1) || "*", (a[d] = a[d] || []).unshift(c)) : (a[d] = a[d] || []).push(c) } } function Tb(a, b, c, d) { var e = {}, f = a === Ob; function g(h) { var i; return e[h] = !0, n.each(a[h] || [], function (a, h) { var j = h(b, c, d); return "string" != typeof j || f || e[j] ? f ? !(i = j) : void 0 : (b.dataTypes.unshift(j), g(j), !1) }), i } return g(b.dataTypes[0]) || !e["*"] && g("*") } function Ub(a, b) { var c, d, e = n.ajaxSettings.flatOptions || {}; for (d in b) void 0 !== b[d] && ((e[d] ? a : c || (c = {}))[d] = b[d]); return c && n.extend(!0, a, c), a } function Vb(a, b, c) { var d, e, f, g, h = a.contents, i = a.dataTypes; while ("*" === i[0]) i.shift(), void 0 === e && (e = a.mimeType || b.getResponseHeader("Content-Type")); if (e) for (g in h) if (h[g] && h[g].test(e)) { i.unshift(g); break } if (i[0] in c) f = i[0]; else { for (g in c) { if (!i[0] || a.converters[g + " " + i[0]]) { f = g; break } d || (d = g) } f = f || d } return f ? (f !== i[0] && i.unshift(f), c[f]) : void 0 } function Wb(a, b, c, d) { var e, f, g, h, i, j = {}, k = a.dataTypes.slice(); if (k[1]) for (g in a.converters) j[g.toLowerCase()] = a.converters[g]; f = k.shift(); while (f) if (a.responseFields[f] && (c[a.responseFields[f]] = b), !i && d && a.dataFilter && (b = a.dataFilter(b, a.dataType)), i = f, f = k.shift()) if ("*" === f) f = i; else if ("*" !== i && i !== f) { if (g = j[i + " " + f] || j["* " + f], !g) for (e in j) if (h = e.split(" "), h[1] === f && (g = j[i + " " + h[0]] || j["* " + h[0]])) { g === !0 ? g = j[e] : j[e] !== !0 && (f = h[0], k.unshift(h[1])); break } if (g !== !0) if (g && a["throws"]) b = g(b); else try { b = g(b) } catch (l) { return { state: "parsererror", error: g ? l : "No conversion from " + i + " to " + f } } } return { state: "success", data: b } } n.extend({ active: 0, lastModified: {}, etag: {}, ajaxSettings: { url: Qb, type: "GET", isLocal: Jb.test(Rb[1]), global: !0, processData: !0, async: !0, contentType: "application/x-www-form-urlencoded; charset=UTF-8", accepts: { "*": Pb, text: "text/plain", html: "text/html", xml: "application/xml, text/xml", json: "application/json, text/javascript" }, contents: { xml: /\bxml\b/, html: /\bhtml/, json: /\bjson\b/ }, responseFields: { xml: "responseXML", text: "responseText", json: "responseJSON" }, converters: { "* text": String, "text html": !0, "text json": n.parseJSON, "text xml": n.parseXML }, flatOptions: { url: !0, context: !0 } }, ajaxSetup: function (a, b) { return b ? Ub(Ub(a, n.ajaxSettings), b) : Ub(n.ajaxSettings, a) }, ajaxPrefilter: Sb(Nb), ajaxTransport: Sb(Ob), ajax: function (b, c) { "object" == typeof b && (c = b, b = void 0), c = c || {}; var d, e, f, g, h, i, j, k, l = n.ajaxSetup({}, c), m = l.context || l, o = l.context && (m.nodeType || m.jquery) ? n(m) : n.event, p = n.Deferred(), q = n.Callbacks("once memory"), r = l.statusCode || {}, s = {}, t = {}, u = 0, v = "canceled", w = { readyState: 0, getResponseHeader: function (a) { var b; if (2 === u) { if (!k) { k = {}; while (b = Ib.exec(g)) k[b[1].toLowerCase()] = b[2] } b = k[a.toLowerCase()] } return null == b ? null : b }, getAllResponseHeaders: function () { return 2 === u ? g : null }, setRequestHeader: function (a, b) { var c = a.toLowerCase(); return u || (a = t[c] = t[c] || a, s[a] = b), this }, overrideMimeType: function (a) { return u || (l.mimeType = a), this }, statusCode: function (a) { var b; if (a) if (2 > u) for (b in a) r[b] = [r[b], a[b]]; else w.always(a[w.status]); return this }, abort: function (a) { var b = a || v; return j && j.abort(b), y(0, b), this } }; if (p.promise(w).complete = q.add, w.success = w.done, w.error = w.fail, l.url = ((b || l.url || Qb) + "").replace(Gb, "").replace(Lb, Rb[1] + "//"), l.type = c.method || c.type || l.method || l.type, l.dataTypes = n.trim(l.dataType || "*").toLowerCase().match(G) || [""], null == l.crossDomain && (d = Mb.exec(l.url.toLowerCase()), l.crossDomain = !(!d || d[1] === Rb[1] && d[2] === Rb[2] && (d[3] || ("http:" === d[1] ? "80" : "443")) === (Rb[3] || ("http:" === Rb[1] ? "80" : "443")))), l.data && l.processData && "string" != typeof l.data && (l.data = n.param(l.data, l.traditional)), Tb(Nb, l, c, w), 2 === u) return w; i = n.event && l.global, i && 0 === n.active++ && n.event.trigger("ajaxStart"), l.type = l.type.toUpperCase(), l.hasContent = !Kb.test(l.type), f = l.url, l.hasContent || (l.data && (f = l.url += (Eb.test(f) ? "&" : "?") + l.data, delete l.data), l.cache === !1 && (l.url = Hb.test(f) ? f.replace(Hb, "$1_=" + Db++) : f + (Eb.test(f) ? "&" : "?") + "_=" + Db++)), l.ifModified && (n.lastModified[f] && w.setRequestHeader("If-Modified-Since", n.lastModified[f]), n.etag[f] && w.setRequestHeader("If-None-Match", n.etag[f])), (l.data && l.hasContent && l.contentType !== !1 || c.contentType) && w.setRequestHeader("Content-Type", l.contentType), w.setRequestHeader("Accept", l.dataTypes[0] && l.accepts[l.dataTypes[0]] ? l.accepts[l.dataTypes[0]] + ("*" !== l.dataTypes[0] ? ", " + Pb + "; q=0.01" : "") : l.accepts["*"]); for (e in l.headers) w.setRequestHeader(e, l.headers[e]); if (l.beforeSend && (l.beforeSend.call(m, w, l) === !1 || 2 === u)) return w.abort(); v = "abort"; for (e in { success: 1, error: 1, complete: 1 }) w[e](l[e]); if (j = Tb(Ob, l, c, w)) { if (w.readyState = 1, i && o.trigger("ajaxSend", [w, l]), 2 === u) return w; l.async && l.timeout > 0 && (h = a.setTimeout(function () { w.abort("timeout") }, l.timeout)); try { u = 1, j.send(s, y) } catch (x) { if (!(2 > u)) throw x; y(-1, x) } } else y(-1, "No Transport"); function y(b, c, d, e) { var k, s, t, v, x, y = c; 2 !== u && (u = 2, h && a.clearTimeout(h), j = void 0, g = e || "", w.readyState = b > 0 ? 4 : 0, k = b >= 200 && 300 > b || 304 === b, d && (v = Vb(l, w, d)), v = Wb(l, v, w, k), k ? (l.ifModified && (x = w.getResponseHeader("Last-Modified"), x && (n.lastModified[f] = x), x = w.getResponseHeader("etag"), x && (n.etag[f] = x)), 204 === b || "HEAD" === l.type ? y = "nocontent" : 304 === b ? y = "notmodified" : (y = v.state, s = v.data, t = v.error, k = !t)) : (t = y, (b || !y) && (y = "error", 0 > b && (b = 0))), w.status = b, w.statusText = (c || y) + "", k ? p.resolveWith(m, [s, y, w]) : p.rejectWith(m, [w, y, t]), w.statusCode(r), r = void 0, i && o.trigger(k ? "ajaxSuccess" : "ajaxError", [w, l, k ? s : t]), q.fireWith(m, [w, y]), i && (o.trigger("ajaxComplete", [w, l]), --n.active || n.event.trigger("ajaxStop"))) } return w }, getJSON: function (a, b, c) { return n.get(a, b, c, "json") }, getScript: function (a, b) { return n.get(a, void 0, b, "script") } }), n.each(["get", "post"], function (a, b) { n[b] = function (a, c, d, e) { return n.isFunction(c) && (e = e || d, d = c, c = void 0), n.ajax(n.extend({ url: a, type: b, dataType: e, data: c, success: d }, n.isPlainObject(a) && a)) } }), n._evalUrl = function (a) { return n.ajax({ url: a, type: "GET", dataType: "script", cache: !0, async: !1, global: !1, "throws": !0 }) }, n.fn.extend({ wrapAll: function (a) { if (n.isFunction(a)) return this.each(function (b) { n(this).wrapAll(a.call(this, b)) }); if (this[0]) { var b = n(a, this[0].ownerDocument).eq(0).clone(!0); this[0].parentNode && b.insertBefore(this[0]), b.map(function () { var a = this; while (a.firstChild && 1 === a.firstChild.nodeType) a = a.firstChild; return a }).append(this) } return this }, wrapInner: function (a) { return n.isFunction(a) ? this.each(function (b) { n(this).wrapInner(a.call(this, b)) }) : this.each(function () { var b = n(this), c = b.contents(); c.length ? c.wrapAll(a) : b.append(a) }) }, wrap: function (a) { var b = n.isFunction(a); return this.each(function (c) { n(this).wrapAll(b ? a.call(this, c) : a) }) }, unwrap: function () { return this.parent().each(function () { n.nodeName(this, "body") || n(this).replaceWith(this.childNodes) }).end() } }); function Xb(a) { return a.style && a.style.display || n.css(a, "display") } function Yb(a) { while (a && 1 === a.nodeType) { if ("none" === Xb(a) || "hidden" === a.type) return !0; a = a.parentNode } return !1 } n.expr.filters.hidden = function (a) { return l.reliableHiddenOffsets() ? a.offsetWidth <= 0 && a.offsetHeight <= 0 && !a.getClientRects().length : Yb(a) }, n.expr.filters.visible = function (a) { return !n.expr.filters.hidden(a) }; var Zb = /%20/g, $b = /\[\]$/, _b = /\r?\n/g, ac = /^(?:submit|button|image|reset|file)$/i, bc = /^(?:input|select|textarea|keygen)/i; function cc(a, b, c, d) { var e; if (n.isArray(b)) n.each(b, function (b, e) { c || $b.test(a) ? d(a, e) : cc(a + "[" + ("object" == typeof e && null != e ? b : "") + "]", e, c, d) }); else if (c || "object" !== n.type(b)) d(a, b); else for (e in b) cc(a + "[" + e + "]", b[e], c, d) } n.param = function (a, b) { var c, d = [], e = function (a, b) { b = n.isFunction(b) ? b() : null == b ? "" : b, d[d.length] = encodeURIComponent(a) + "=" + encodeURIComponent(b) }; if (void 0 === b && (b = n.ajaxSettings && n.ajaxSettings.traditional), n.isArray(a) || a.jquery && !n.isPlainObject(a)) n.each(a, function () { e(this.name, this.value) }); else for (c in a) cc(c, a[c], b, e); return d.join("&").replace(Zb, "+") }, n.fn.extend({ serialize: function () { return n.param(this.serializeArray()) }, serializeArray: function () { return this.map(function () { var a = n.prop(this, "elements"); return a ? n.makeArray(a) : this }).filter(function () { var a = this.type; return this.name && !n(this).is(":disabled") && bc.test(this.nodeName) && !ac.test(a) && (this.checked || !Z.test(a)) }).map(function (a, b) { var c = n(this).val(); return null == c ? null : n.isArray(c) ? n.map(c, function (a) { return { name: b.name, value: a.replace(_b, "\r\n") } }) : { name: b.name, value: c.replace(_b, "\r\n") } }).get() } }), n.ajaxSettings.xhr = void 0 !== a.ActiveXObject ? function () { return this.isLocal ? hc() : d.documentMode > 8 ? gc() : /^(get|post|head|put|delete|options)$/i.test(this.type) && gc() || hc() } : gc; var dc = 0, ec = {}, fc = n.ajaxSettings.xhr(); a.attachEvent && a.attachEvent("onunload", function () { for (var a in ec) ec[a](void 0, !0) }), l.cors = !!fc && "withCredentials" in fc, fc = l.ajax = !!fc, fc && n.ajaxTransport(function (b) { if (!b.crossDomain || l.cors) { var c; return { send: function (d, e) { var f, g = b.xhr(), h = ++dc; if (g.open(b.type, b.url, b.async, b.username, b.password), b.xhrFields) for (f in b.xhrFields) g[f] = b.xhrFields[f]; b.mimeType && g.overrideMimeType && g.overrideMimeType(b.mimeType), b.crossDomain || d["X-Requested-With"] || (d["X-Requested-With"] = "XMLHttpRequest"); for (f in d) void 0 !== d[f] && g.setRequestHeader(f, d[f] + ""); g.send(b.hasContent && b.data || null), c = function (a, d) { var f, i, j; if (c && (d || 4 === g.readyState)) if (delete ec[h], c = void 0, g.onreadystatechange = n.noop, d) 4 !== g.readyState && g.abort(); else { j = {}, f = g.status, "string" == typeof g.responseText && (j.text = g.responseText); try { i = g.statusText } catch (k) { i = "" } f || !b.isLocal || b.crossDomain ? 1223 === f && (f = 204) : f = j.text ? 200 : 404 } j && e(f, i, j, g.getAllResponseHeaders()) }, b.async ? 4 === g.readyState ? a.setTimeout(c) : g.onreadystatechange = ec[h] = c : c() }, abort: function () { c && c(void 0, !0) } } } }); function gc() { try { return new a.XMLHttpRequest } catch (b) { } } function hc() { try { return new a.ActiveXObject("Microsoft.XMLHTTP") } catch (b) { } } n.ajaxPrefilter(function (a) { a.crossDomain && (a.contents.script = !1) }), n.ajaxSetup({ accepts: { script: "text/javascript, application/javascript, application/ecmascript, application/x-ecmascript" }, contents: { script: /\b(?:java|ecma)script\b/ }, converters: { "text script": function (a) { return n.globalEval(a), a } } }), n.ajaxPrefilter("script", function (a) { void 0 === a.cache && (a.cache = !1), a.crossDomain && (a.type = "GET", a.global = !1) }), n.ajaxTransport("script", function (a) { if (a.crossDomain) { var b, c = d.head || n("head")[0] || d.documentElement; return { send: function (e, f) { b = d.createElement("script"), b.async = !0, a.scriptCharset && (b.charset = a.scriptCharset), b.src = a.url, b.onload = b.onreadystatechange = function (a, c) { (c || !b.readyState || /loaded|complete/.test(b.readyState)) && (b.onload = b.onreadystatechange = null, b.parentNode && b.parentNode.removeChild(b), b = null, c || f(200, "success")) }, c.insertBefore(b, c.firstChild) }, abort: function () { b && b.onload(void 0, !0) } } } }); var ic = [], jc = /(=)\?(?=&|$)|\?\?/; n.ajaxSetup({ jsonp: "callback", jsonpCallback: function () { var a = ic.pop() || n.expando + "_" + Db++; return this[a] = !0, a } }), n.ajaxPrefilter("json jsonp", function (b, c, d) { var e, f, g, h = b.jsonp !== !1 && (jc.test(b.url) ? "url" : "string" == typeof b.data && 0 === (b.contentType || "").indexOf("application/x-www-form-urlencoded") && jc.test(b.data) && "data"); return h || "jsonp" === b.dataTypes[0] ? (e = b.jsonpCallback = n.isFunction(b.jsonpCallback) ? b.jsonpCallback() : b.jsonpCallback, h ? b[h] = b[h].replace(jc, "$1" + e) : b.jsonp !== !1 && (b.url += (Eb.test(b.url) ? "&" : "?") + b.jsonp + "=" + e), b.converters["script json"] = function () { return g || n.error(e + " was not called"), g[0] }, b.dataTypes[0] = "json", f = a[e], a[e] = function () { g = arguments }, d.always(function () { void 0 === f ? n(a).removeProp(e) : a[e] = f, b[e] && (b.jsonpCallback = c.jsonpCallback, ic.push(e)), g && n.isFunction(f) && f(g[0]), g = f = void 0 }), "script") : void 0 }), l.createHTMLDocument = function () { if (!d.implementation.createHTMLDocument) return !1; var a = d.implementation.createHTMLDocument(""); return a.body.innerHTML = "<form></form><form></form>", 2 === a.body.childNodes.length }(), n.parseHTML = function (a, b, c) { if (!a || "string" != typeof a) return null; "boolean" == typeof b && (c = b, b = !1), b = b || (l.createHTMLDocument ? d.implementation.createHTMLDocument("") : d); var e = x.exec(a), f = !c && []; return e ? [b.createElement(e[1])] : (e = ja([a], b, f), f && f.length && n(f).remove(), n.merge([], e.childNodes)) }; var kc = n.fn.load; n.fn.load = function (a, b, c) { if ("string" != typeof a && kc) return kc.apply(this, arguments); var d, e, f, g = this, h = a.indexOf(" "); return h > -1 && (d = n.trim(a.slice(h, a.length)), a = a.slice(0, h)), n.isFunction(b) ? (c = b, b = void 0) : b && "object" == typeof b && (e = "POST"), g.length > 0 && n.ajax({ url: a, type: e || "GET", dataType: "html", data: b }).done(function (a) { f = arguments, g.html(d ? n("<div>").append(n.parseHTML(a)).find(d) : a) }).always(c && function (a, b) { g.each(function () { c.apply(g, f || [a.responseText, b, a]) }) }), this }, n.each(["ajaxStart", "ajaxStop", "ajaxComplete", "ajaxError", "ajaxSuccess", "ajaxSend"], function (a, b) { n.fn[b] = function (a) { return this.on(b, a) } }), n.expr.filters.animated = function (a) { return n.grep(n.timers, function (b) { return a === b.elem }).length }; function lc(a) { return n.isWindow(a) ? a : 9 === a.nodeType ? a.defaultView || a.parentWindow : !1 } n.offset = { setOffset: function (a, b, c) { var d, e, f, g, h, i, j, k = n.css(a, "position"), l = n(a), m = {}; "static" === k && (a.style.position = "relative"), h = l.offset(), f = n.css(a, "top"), i = n.css(a, "left"), j = ("absolute" === k || "fixed" === k) && n.inArray("auto", [f, i]) > -1, j ? (d = l.position(), g = d.top, e = d.left) : (g = parseFloat(f) || 0, e = parseFloat(i) || 0), n.isFunction(b) && (b = b.call(a, c, n.extend({}, h))), null != b.top && (m.top = b.top - h.top + g), null != b.left && (m.left = b.left - h.left + e), "using" in b ? b.using.call(a, m) : l.css(m) } }, n.fn.extend({ offset: function (a) { if (arguments.length) return void 0 === a ? this : this.each(function (b) { n.offset.setOffset(this, a, b) }); var b, c, d = { top: 0, left: 0 }, e = this[0], f = e && e.ownerDocument; if (f) return b = f.documentElement, n.contains(b, e) ? ("undefined" != typeof e.getBoundingClientRect && (d = e.getBoundingClientRect()), c = lc(f), { top: d.top + (c.pageYOffset || b.scrollTop) - (b.clientTop || 0), left: d.left + (c.pageXOffset || b.scrollLeft) - (b.clientLeft || 0) }) : d }, position: function () { if (this[0]) { var a, b, c = { top: 0, left: 0 }, d = this[0]; return "fixed" === n.css(d, "position") ? b = d.getBoundingClientRect() : (a = this.offsetParent(), b = this.offset(), n.nodeName(a[0], "html") || (c = a.offset()), c.top += n.css(a[0], "borderTopWidth", !0), c.left += n.css(a[0], "borderLeftWidth", !0)), { top: b.top - c.top - n.css(d, "marginTop", !0), left: b.left - c.left - n.css(d, "marginLeft", !0) } } }, offsetParent: function () { return this.map(function () { var a = this.offsetParent; while (a && !n.nodeName(a, "html") && "static" === n.css(a, "position")) a = a.offsetParent; return a || Qa }) } }), n.each({ scrollLeft: "pageXOffset", scrollTop: "pageYOffset" }, function (a, b) {
    var c = /Y/.test(b); n.fn[a] = function (d) {
      return Y(this, function (a, d, e) {
        var f = lc(a); return void 0 === e ? f ? b in f ? f[b] : f.document.documentElement[d] : a[d] : void (f ? f.scrollTo(c ? n(f).scrollLeft() : e, c ? e : n(f).scrollTop()) : a[d] = e);
      }, a, d, arguments.length, null)
    }
  }), n.each(["top", "left"], function (a, b) { n.cssHooks[b] = Ua(l.pixelPosition, function (a, c) { return c ? (c = Sa(a, b), Oa.test(c) ? n(a).position()[b] + "px" : c) : void 0 }) }), n.each({ Height: "height", Width: "width" }, function (a, b) { n.each({ padding: "inner" + a, content: b, "": "outer" + a }, function (c, d) { n.fn[d] = function (d, e) { var f = arguments.length && (c || "boolean" != typeof d), g = c || (d === !0 || e === !0 ? "margin" : "border"); return Y(this, function (b, c, d) { var e; return n.isWindow(b) ? b.document.documentElement["client" + a] : 9 === b.nodeType ? (e = b.documentElement, Math.max(b.body["scroll" + a], e["scroll" + a], b.body["offset" + a], e["offset" + a], e["client" + a])) : void 0 === d ? n.css(b, c, g) : n.style(b, c, d, g) }, b, f ? d : void 0, f, null) } }) }), n.fn.extend({ bind: function (a, b, c) { return this.on(a, null, b, c) }, unbind: function (a, b) { return this.off(a, null, b) }, delegate: function (a, b, c, d) { return this.on(b, a, c, d) }, undelegate: function (a, b, c) { return 1 === arguments.length ? this.off(a, "**") : this.off(b, a || "**", c) } }), n.fn.size = function () { return this.length }, n.fn.andSelf = n.fn.addBack, "function" == typeof define && define.amd && define("jquery", [], function () { return n }); var mc = a.jQuery, nc = a.$; return n.noConflict = function (b) { return a.$ === n && (a.$ = nc), b && a.jQuery === n && (a.jQuery = mc), n }, b || (a.jQuery = a.$ = n), n
});

//Avoid PrototypeJS conflicts, assign jQuery to $j instead of $
var $j = jQuery.noConflict();
"function" !== typeof Object.create && (Object.create = function (f) { function g() { } g.prototype = f; return new g });
(function (f, g, k) {
  var l = {
    init: function (a, b) { this.$elem = f(b); this.options = f.extend({}, f.fn.owlCarousel.options, this.$elem.data(), a); this.userOptions = a; this.loadContent() }, loadContent: function () {
      function a(a) { var d, e = ""; if ("function" === typeof b.options.jsonSuccess) b.options.jsonSuccess.apply(this, [a]); else { for (d in a.owl) a.owl.hasOwnProperty(d) && (e += a.owl[d].item); b.$elem.html(e) } b.logIn() } var b = this, e; "function" === typeof b.options.beforeInit && b.options.beforeInit.apply(this, [b.$elem]); "string" === typeof b.options.jsonPath ?
        (e = b.options.jsonPath, f.getJSON(e, a)) : b.logIn()
    }, logIn: function () { this.$elem.data("owl-originalStyles", this.$elem.attr("style")); this.$elem.data("owl-originalClasses", this.$elem.attr("class")); this.$elem.css({ opacity: 0 }); this.orignalItems = this.options.items; this.checkBrowser(); this.wrapperWidth = 0; this.checkVisible = null; this.setVars() }, setVars: function () {
      if (0 === this.$elem.children().length) return !1; this.baseClass(); this.eventTypes(); this.$userItems = this.$elem.children(); this.itemsAmount = this.$userItems.length;
      this.wrapItems(); this.$owlItems = this.$elem.find(".owl-item"); this.$owlWrapper = this.$elem.find(".owl-wrapper"); this.playDirection = "next"; this.prevItem = 0; this.prevArr = [0]; this.currentItem = 0; this.customEvents(); this.onStartup()
    }, onStartup: function () {
      this.updateItems(); this.calculateAll(); this.buildControls(); this.updateControls(); this.response(); this.moveEvents(); this.stopOnHover(); this.owlStatus(); !1 !== this.options.transitionStyle && this.transitionTypes(this.options.transitionStyle); !0 === this.options.autoPlay &&
        (this.options.autoPlay = 5E3); this.play(); this.$elem.find(".owl-wrapper").css("display", "block"); this.$elem.is(":visible") ? this.$elem.css("opacity", 1) : this.watchVisibility(); this.onstartup = !1; this.eachMoveUpdate(); "function" === typeof this.options.afterInit && this.options.afterInit.apply(this, [this.$elem])
    }, eachMoveUpdate: function () {
      !0 === this.options.lazyLoad && this.lazyLoad(); !0 === this.options.autoHeight && this.autoHeight(); this.onVisibleItems(); "function" === typeof this.options.afterAction && this.options.afterAction.apply(this,
        [this.$elem])
    }, updateVars: function () { "function" === typeof this.options.beforeUpdate && this.options.beforeUpdate.apply(this, [this.$elem]); this.watchVisibility(); this.updateItems(); this.calculateAll(); this.updatePosition(); this.updateControls(); this.eachMoveUpdate(); "function" === typeof this.options.afterUpdate && this.options.afterUpdate.apply(this, [this.$elem]) }, reload: function () { var a = this; g.setTimeout(function () { a.updateVars() }, 0) }, watchVisibility: function () {
      var a = this; if (!1 === a.$elem.is(":visible")) a.$elem.css({ opacity: 0 }),
        g.clearInterval(a.autoPlayInterval), g.clearInterval(a.checkVisible); else return !1; a.checkVisible = g.setInterval(function () { a.$elem.is(":visible") && (a.reload(), a.$elem.animate({ opacity: 1 }, 200), g.clearInterval(a.checkVisible)) }, 500)
    }, wrapItems: function () { this.$userItems.wrapAll('<div class="owl-wrapper">').wrap('<div class="owl-item"></div>'); this.$elem.find(".owl-wrapper").wrap('<div class="owl-wrapper-outer">'); this.wrapperOuter = this.$elem.find(".owl-wrapper-outer"); this.$elem.css("display", "block") },
    baseClass: function () { var a = this.$elem.hasClass(this.options.baseClass), b = this.$elem.hasClass(this.options.theme); a || this.$elem.addClass(this.options.baseClass); b || this.$elem.addClass(this.options.theme) }, updateItems: function () {
      var a, b; if (!1 === this.options.responsive) return !1; if (!0 === this.options.singleItem) return this.options.items = this.orignalItems = 1, this.options.itemsCustom = !1, this.options.itemsDesktop = !1, this.options.itemsDesktopSmall = !1, this.options.itemsTablet = !1, this.options.itemsTabletSmall =
        !1, this.options.itemsMobile = !1; a = f(this.options.responsiveBaseWidth).width(); a > (this.options.itemsDesktop[0] || this.orignalItems) && (this.options.items = this.orignalItems); if (!1 !== this.options.itemsCustom) for (this.options.itemsCustom.sort(function (a, b) { return a[0] - b[0] }), b = 0; b < this.options.itemsCustom.length; b += 1)this.options.itemsCustom[b][0] <= a && (this.options.items = this.options.itemsCustom[b][1]); else a <= this.options.itemsDesktop[0] && !1 !== this.options.itemsDesktop && (this.options.items = this.options.itemsDesktop[1]),
          a <= this.options.itemsDesktopSmall[0] && !1 !== this.options.itemsDesktopSmall && (this.options.items = this.options.itemsDesktopSmall[1]), a <= this.options.itemsTablet[0] && !1 !== this.options.itemsTablet && (this.options.items = this.options.itemsTablet[1]), a <= this.options.itemsTabletSmall[0] && !1 !== this.options.itemsTabletSmall && (this.options.items = this.options.itemsTabletSmall[1]), a <= this.options.itemsMobile[0] && !1 !== this.options.itemsMobile && (this.options.items = this.options.itemsMobile[1]); this.options.items > this.itemsAmount &&
            !0 === this.options.itemsScaleUp && (this.options.items = this.itemsAmount)
    }, response: function () { var a = this, b, e; if (!0 !== a.options.responsive) return !1; e = f(g).width(); a.resizer = function () { f(g).width() !== e && (!1 !== a.options.autoPlay && g.clearInterval(a.autoPlayInterval), g.clearTimeout(b), b = g.setTimeout(function () { e = f(g).width(); a.updateVars() }, a.options.responsiveRefreshRate)) }; f(g).resize(a.resizer) }, updatePosition: function () { this.jumpTo(this.currentItem); !1 !== this.options.autoPlay && this.checkAp() }, appendItemsSizes: function () {
      var a =
        this, b = 0, e = a.itemsAmount - a.options.items; a.$owlItems.each(function (c) { var d = f(this); d.css({ width: a.itemWidth }).data("owl-item", Number(c)); if (0 === c % a.options.items || c === e) c > e || (b += 1); d.data("owl-roundPages", b) })
    }, appendWrapperSizes: function () { this.$owlWrapper.css({ width: this.$owlItems.length * this.itemWidth * 2, left: 0 }); this.appendItemsSizes() }, calculateAll: function () { this.calculateWidth(); this.appendWrapperSizes(); this.loops(); this.max() }, calculateWidth: function () {
      this.itemWidth = Math.round(this.$elem.width() /
        this.options.items)
    }, max: function () { var a = -1 * (this.itemsAmount * this.itemWidth - this.options.items * this.itemWidth); this.options.items > this.itemsAmount ? this.maximumPixels = a = this.maximumItem = 0 : (this.maximumItem = this.itemsAmount - this.options.items, this.maximumPixels = a); return a }, min: function () { return 0 }, loops: function () {
      var a = 0, b = 0, e, c; this.positionsInArray = [0]; this.pagesInArray = []; for (e = 0; e < this.itemsAmount; e += 1)b += this.itemWidth, this.positionsInArray.push(-b), !0 === this.options.scrollPerPage && (c = f(this.$owlItems[e]),
        c = c.data("owl-roundPages"), c !== a && (this.pagesInArray[a] = this.positionsInArray[e], a = c))
    }, buildControls: function () { if (!0 === this.options.navigation || !0 === this.options.pagination) this.owlControls = f('<div class="owl-controls"/>').toggleClass("clickable", !this.browser.isTouch).appendTo(this.$elem); !0 === this.options.pagination && this.buildPagination(); !0 === this.options.navigation && this.buildButtons() }, buildButtons: function () {
      var a = this, b = f('<div class="owl-buttons"/>'); a.owlControls.append(b); a.buttonPrev =
        f("<div/>", { "class": "owl-prev", html: a.options.navigationText[0] || "" }); a.buttonNext = f("<div/>", { "class": "owl-next", html: a.options.navigationText[1] || "" }); b.append(a.buttonPrev).append(a.buttonNext); b.on("touchstart.owlControls mousedown.owlControls", 'div[class^="owl"]', function (a) { a.preventDefault() }); b.on("touchend.owlControls mouseup.owlControls", 'div[class^="owl"]', function (b) { b.preventDefault(); f(this).hasClass("owl-next") ? a.next() : a.prev() })
    }, buildPagination: function () {
      var a = this; a.paginationWrapper =
        f('<div class="owl-pagination"/>'); a.owlControls.append(a.paginationWrapper); a.paginationWrapper.on("touchend.owlControls mouseup.owlControls", ".owl-page", function (b) { b.preventDefault(); Number(f(this).data("owl-page")) !== a.currentItem && a.goTo(Number(f(this).data("owl-page")), !0) })
    }, updatePagination: function () {
      var a, b, e, c, d, g; if (!1 === this.options.pagination) return !1; this.paginationWrapper.html(""); a = 0; b = this.itemsAmount - this.itemsAmount % this.options.items; for (c = 0; c < this.itemsAmount; c += 1)0 === c % this.options.items &&
        (a += 1, b === c && (e = this.itemsAmount - this.options.items), d = f("<div/>", { "class": "owl-page" }), g = f("<span></span>", { text: !0 === this.options.paginationNumbers ? a : "", "class": !0 === this.options.paginationNumbers ? "owl-numbers" : "" }), d.append(g), d.data("owl-page", b === c ? e : c), d.data("owl-roundPages", a), this.paginationWrapper.append(d)); this.checkPagination()
    }, checkPagination: function () {
      var a = this; if (!1 === a.options.pagination) return !1; a.paginationWrapper.find(".owl-page").each(function () {
        f(this).data("owl-roundPages") ===
          f(a.$owlItems[a.currentItem]).data("owl-roundPages") && (a.paginationWrapper.find(".owl-page").removeClass("active"), f(this).addClass("active"))
      })
    }, checkNavigation: function () {
      if (!1 === this.options.navigation) return !1; !1 === this.options.rewindNav && (0 === this.currentItem && 0 === this.maximumItem ? (this.buttonPrev.addClass("disabled"), this.buttonNext.addClass("disabled")) : 0 === this.currentItem && 0 !== this.maximumItem ? (this.buttonPrev.addClass("disabled"), this.buttonNext.removeClass("disabled")) : this.currentItem ===
        this.maximumItem ? (this.buttonPrev.removeClass("disabled"), this.buttonNext.addClass("disabled")) : 0 !== this.currentItem && this.currentItem !== this.maximumItem && (this.buttonPrev.removeClass("disabled"), this.buttonNext.removeClass("disabled")))
    }, updateControls: function () { this.updatePagination(); this.checkNavigation(); this.owlControls && (this.options.items >= this.itemsAmount ? this.owlControls.hide() : this.owlControls.show()) }, destroyControls: function () { this.owlControls && this.owlControls.remove() }, next: function (a) {
      if (this.isTransition) return !1;
      this.currentItem += !0 === this.options.scrollPerPage ? this.options.items : 1; if (this.currentItem > this.maximumItem + (!0 === this.options.scrollPerPage ? this.options.items - 1 : 0)) if (!0 === this.options.rewindNav) this.currentItem = 0, a = "rewind"; else return this.currentItem = this.maximumItem, !1; this.goTo(this.currentItem, a)
    }, prev: function (a) {
      if (this.isTransition) return !1; this.currentItem = !0 === this.options.scrollPerPage && 0 < this.currentItem && this.currentItem < this.options.items ? 0 : this.currentItem - (!0 === this.options.scrollPerPage ?
        this.options.items : 1); if (0 > this.currentItem) if (!0 === this.options.rewindNav) this.currentItem = this.maximumItem, a = "rewind"; else return this.currentItem = 0, !1; this.goTo(this.currentItem, a)
    }, goTo: function (a, b, e) {
      var c = this; if (c.isTransition) return !1; "function" === typeof c.options.beforeMove && c.options.beforeMove.apply(this, [c.$elem]); a >= c.maximumItem ? a = c.maximumItem : 0 >= a && (a = 0); c.currentItem = c.owl.currentItem = a; if (!1 !== c.options.transitionStyle && "drag" !== e && 1 === c.options.items && !0 === c.browser.support3d) return c.swapSpeed(0),
        !0 === c.browser.support3d ? c.transition3d(c.positionsInArray[a]) : c.css2slide(c.positionsInArray[a], 1), c.afterGo(), c.singleItemTransition(), !1; a = c.positionsInArray[a]; !0 === c.browser.support3d ? (c.isCss3Finish = !1, !0 === b ? (c.swapSpeed("paginationSpeed"), g.setTimeout(function () { c.isCss3Finish = !0 }, c.options.paginationSpeed)) : "rewind" === b ? (c.swapSpeed(c.options.rewindSpeed), g.setTimeout(function () { c.isCss3Finish = !0 }, c.options.rewindSpeed)) : (c.swapSpeed("slideSpeed"), g.setTimeout(function () { c.isCss3Finish = !0 },
          c.options.slideSpeed)), c.transition3d(a)) : !0 === b ? c.css2slide(a, c.options.paginationSpeed) : "rewind" === b ? c.css2slide(a, c.options.rewindSpeed) : c.css2slide(a, c.options.slideSpeed); c.afterGo()
    }, jumpTo: function (a) {
      "function" === typeof this.options.beforeMove && this.options.beforeMove.apply(this, [this.$elem]); a >= this.maximumItem || -1 === a ? a = this.maximumItem : 0 >= a && (a = 0); this.swapSpeed(0); !0 === this.browser.support3d ? this.transition3d(this.positionsInArray[a]) : this.css2slide(this.positionsInArray[a], 1); this.currentItem =
        this.owl.currentItem = a; this.afterGo()
    }, afterGo: function () { this.prevArr.push(this.currentItem); this.prevItem = this.owl.prevItem = this.prevArr[this.prevArr.length - 2]; this.prevArr.shift(0); this.prevItem !== this.currentItem && (this.checkPagination(), this.checkNavigation(), this.eachMoveUpdate(), !1 !== this.options.autoPlay && this.checkAp()); "function" === typeof this.options.afterMove && this.prevItem !== this.currentItem && this.options.afterMove.apply(this, [this.$elem]) }, stop: function () { this.apStatus = "stop"; g.clearInterval(this.autoPlayInterval) },
    checkAp: function () { "stop" !== this.apStatus && this.play() }, play: function () { var a = this; a.apStatus = "play"; if (!1 === a.options.autoPlay) return !1; g.clearInterval(a.autoPlayInterval); a.autoPlayInterval = g.setInterval(function () { a.next(!0) }, a.options.autoPlay) }, swapSpeed: function (a) { "slideSpeed" === a ? this.$owlWrapper.css(this.addCssSpeed(this.options.slideSpeed)) : "paginationSpeed" === a ? this.$owlWrapper.css(this.addCssSpeed(this.options.paginationSpeed)) : "string" !== typeof a && this.$owlWrapper.css(this.addCssSpeed(a)) },
    addCssSpeed: function (a) { return { "-webkit-transition": "all " + a + "ms ease", "-moz-transition": "all " + a + "ms ease", "-o-transition": "all " + a + "ms ease", transition: "all " + a + "ms ease" } }, removeTransition: function () { return { "-webkit-transition": "", "-moz-transition": "", "-o-transition": "", transition: "" } }, doTranslate: function (a) {
      return {
        "-webkit-transform": "translate3d(" + a + "px, 0px, 0px)", "-moz-transform": "translate3d(" + a + "px, 0px, 0px)", "-o-transform": "translate3d(" + a + "px, 0px, 0px)", "-ms-transform": "translate3d(" +
          a + "px, 0px, 0px)", transform: "translate3d(" + a + "px, 0px,0px)"
      }
    }, transition3d: function (a) { this.$owlWrapper.css(this.doTranslate(a)) }, css2move: function (a) { this.$owlWrapper.css({ left: a }) }, css2slide: function (a, b) { var e = this; e.isCssFinish = !1; e.$owlWrapper.stop(!0, !0).animate({ left: a }, { duration: b || e.options.slideSpeed, complete: function () { e.isCssFinish = !0 } }) }, checkBrowser: function () {
      var a = k.createElement("div"); a.style.cssText = "  -moz-transform:translate3d(0px, 0px, 0px); -ms-transform:translate3d(0px, 0px, 0px); -o-transform:translate3d(0px, 0px, 0px); -webkit-transform:translate3d(0px, 0px, 0px); transform:translate3d(0px, 0px, 0px)";
      var a = a.style.cssText.match(/translate3d\(0px, 0px, 0px\)/g), a = null !== a && 1 <= a.length && 2 >= a.length, b = /MSIE ([0-9]+)/.exec(navigator.userAgent); null !== b && 10 >= b[1] ? 10 == b[1] ? a = !0 : 10 > b[1] && (a = !1) : (b = /Trident.*rv[ :]*([0-9]+)/.exec(navigator.userAgent), null !== b && 11 <= b[1] && (a = !0)); this.browser = { support3d: a, isTouch: "ontouchstart" in g || g.navigator.msMaxTouchPoints }
    }, moveEvents: function () { if (!1 !== this.options.mouseDrag || !1 !== this.options.touchDrag) this.gestures(), this.disabledEvents() }, eventTypes: function () {
      var a =
        ["s", "e", "x"]; this.ev_types = {}; !0 === this.options.mouseDrag && !0 === this.options.touchDrag ? a = ["touchstart.owl mousedown.owl", "touchmove.owl mousemove.owl", "touchend.owl touchcancel.owl mouseup.owl"] : !1 === this.options.mouseDrag && !0 === this.options.touchDrag ? a = ["touchstart.owl", "touchmove.owl", "touchend.owl touchcancel.owl"] : !0 === this.options.mouseDrag && !1 === this.options.touchDrag && (a = ["mousedown.owl", "mousemove.owl", "mouseup.owl"]); this.ev_types.start = a[0]; this.ev_types.move = a[1]; this.ev_types.end = a[2]
    },
    disabledEvents: function () { this.$elem.on("dragstart.owl", function (a) { a.preventDefault() }); this.$elem.on("mousedown.disableTextSelect", function (a) { return f(a.target).is("input, textarea, select, option") }) }, gestures: function () {
      function a(a) { if (void 0 !== a.touches) return { x: a.touches[0].pageX, y: a.touches[0].pageY }; if (void 0 === a.touches) { if (void 0 !== a.pageX) return { x: a.pageX, y: a.pageY }; if (void 0 === a.pageX) return { x: a.clientX, y: a.clientY } } } function b(a) {
        "on" === a ? (f(k).on(d.ev_types.move, e), f(k).on(d.ev_types.end,
          c)) : "off" === a && (f(k).off(d.ev_types.move), f(k).off(d.ev_types.end))
      } function e(b) {
        b = b.originalEvent || b || g.event; d.newPosX = a(b).x - h.offsetX; d.newPosY = a(b).y - h.offsetY; d.newRelativeX = d.newPosX - h.relativePos; "function" === typeof d.options.startDragging && !0 !== h.dragging && 0 !== d.newRelativeX && (h.dragging = !0, d.options.startDragging.apply(d, [d.$elem])); (8 < d.newRelativeX || -8 > d.newRelativeX) && !0 === d.browser.isTouch && (void 0 !== b.preventDefault ? b.preventDefault() : b.returnValue = !1, h.sliding = !0); (10 < d.newPosY ||
          -10 > d.newPosY) && !1 === h.sliding && f(k).off("touchmove.owl"); d.newPosX = Math.max(Math.min(d.newPosX, d.newRelativeX / 5), d.maximumPixels + d.newRelativeX / 5); !0 === d.browser.support3d ? d.transition3d(d.newPosX) : d.css2move(d.newPosX)
      } function c(a) {
        a = a.originalEvent || a || g.event; var c; a.target = a.target || a.srcElement; h.dragging = !1; !0 !== d.browser.isTouch && d.$owlWrapper.removeClass("grabbing"); d.dragDirection = 0 > d.newRelativeX ? d.owl.dragDirection = "left" : d.owl.dragDirection = "right"; 0 !== d.newRelativeX && (c = d.getNewPosition(),
          d.goTo(c, !1, "drag"), h.targetElement === a.target && !0 !== d.browser.isTouch && (f(a.target).on("click.disable", function (a) { a.stopImmediatePropagation(); a.stopPropagation(); a.preventDefault(); f(a.target).off("click.disable") }), a = f._data(a.target, "events").click, c = a.pop(), a.splice(0, 0, c))); b("off")
      } var d = this, h = { offsetX: 0, offsetY: 0, baseElWidth: 0, relativePos: 0, position: null, minSwipe: null, maxSwipe: null, sliding: null, dargging: null, targetElement: null }; d.isCssFinish = !0; d.$elem.on(d.ev_types.start, ".owl-wrapper",
        function (c) {
          c = c.originalEvent || c || g.event; var e; if (3 === c.which) return !1; if (!(d.itemsAmount <= d.options.items)) {
            if (!1 === d.isCssFinish && !d.options.dragBeforeAnimFinish || !1 === d.isCss3Finish && !d.options.dragBeforeAnimFinish) return !1; !1 !== d.options.autoPlay && g.clearInterval(d.autoPlayInterval); !0 === d.browser.isTouch || d.$owlWrapper.hasClass("grabbing") || d.$owlWrapper.addClass("grabbing"); d.newPosX = 0; d.newRelativeX = 0; f(this).css(d.removeTransition()); e = f(this).position(); h.relativePos = e.left; h.offsetX = a(c).x -
              e.left; h.offsetY = a(c).y - e.top; b("on"); h.sliding = !1; h.targetElement = c.target || c.srcElement
          }
        })
    }, getNewPosition: function () { var a = this.closestItem(); a > this.maximumItem ? a = this.currentItem = this.maximumItem : 0 <= this.newPosX && (this.currentItem = a = 0); return a }, closestItem: function () {
      var a = this, b = !0 === a.options.scrollPerPage ? a.pagesInArray : a.positionsInArray, e = a.newPosX, c = null; f.each(b, function (d, g) {
        e - a.itemWidth / 20 > b[d + 1] && e - a.itemWidth / 20 < g && "left" === a.moveDirection() ? (c = g, a.currentItem = !0 === a.options.scrollPerPage ?
          f.inArray(c, a.positionsInArray) : d) : e + a.itemWidth / 20 < g && e + a.itemWidth / 20 > (b[d + 1] || b[d] - a.itemWidth) && "right" === a.moveDirection() && (!0 === a.options.scrollPerPage ? (c = b[d + 1] || b[b.length - 1], a.currentItem = f.inArray(c, a.positionsInArray)) : (c = b[d + 1], a.currentItem = d + 1))
      }); return a.currentItem
    }, moveDirection: function () { var a; 0 > this.newRelativeX ? (a = "right", this.playDirection = "next") : (a = "left", this.playDirection = "prev"); return a }, customEvents: function () {
      var a = this; a.$elem.on("owl.next", function () { a.next() }); a.$elem.on("owl.prev",
        function () { a.prev() }); a.$elem.on("owl.play", function (b, e) { a.options.autoPlay = e; a.play(); a.hoverStatus = "play" }); a.$elem.on("owl.stop", function () { a.stop(); a.hoverStatus = "stop" }); a.$elem.on("owl.goTo", function (b, e) { a.goTo(e) }); a.$elem.on("owl.jumpTo", function (b, e) { a.jumpTo(e) })
    }, stopOnHover: function () { var a = this; !0 === a.options.stopOnHover && !0 !== a.browser.isTouch && !1 !== a.options.autoPlay && (a.$elem.on("mouseover", function () { a.stop() }), a.$elem.on("mouseout", function () { "stop" !== a.hoverStatus && a.play() })) },
    lazyLoad: function () { var a, b, e, c, d; if (!1 === this.options.lazyLoad) return !1; for (a = 0; a < this.itemsAmount; a += 1)b = f(this.$owlItems[a]), "loaded" !== b.data("owl-loaded") && (e = b.data("owl-item"), c = b.find(".lazyOwl"), "string" !== typeof c.data("src") ? b.data("owl-loaded", "loaded") : (void 0 === b.data("owl-loaded") && (c.hide(), b.addClass("loading").data("owl-loaded", "checked")), (d = !0 === this.options.lazyFollow ? e >= this.currentItem : !0) && e < this.currentItem + this.options.items && c.length && this.lazyPreload(b, c))) }, lazyPreload: function (a,
      b) { function e() { a.data("owl-loaded", "loaded").removeClass("loading"); b.removeAttr("data-src"); "fade" === d.options.lazyEffect ? b.fadeIn(400) : b.show(); "function" === typeof d.options.afterLazyLoad && d.options.afterLazyLoad.apply(this, [d.$elem]) } function c() { f += 1; d.completeImg(b.get(0)) || !0 === k ? e() : 100 >= f ? g.setTimeout(c, 100) : e() } var d = this, f = 0, k; "DIV" === b.prop("tagName") ? (b.css("background-image", "url(" + b.data("src") + ")"), k = !0) : b[0].src = b.data("src"); c() }, autoHeight: function () {
        function a() {
          var a = f(e.$owlItems[e.currentItem]).height();
          e.wrapperOuter.css("height", a + "px"); e.wrapperOuter.hasClass("autoHeight") || g.setTimeout(function () { e.wrapperOuter.addClass("autoHeight") }, 0)
        } function b() { d += 1; e.completeImg(c.get(0)) ? a() : 100 >= d ? g.setTimeout(b, 100) : e.wrapperOuter.css("height", "") } var e = this, c = f(e.$owlItems[e.currentItem]).find("img"), d; void 0 !== c.get(0) ? (d = 0, b()) : a()
      }, completeImg: function (a) { return !a.complete || "undefined" !== typeof a.naturalWidth && 0 === a.naturalWidth ? !1 : !0 }, onVisibleItems: function () {
        var a; !0 === this.options.addClassActive &&
          this.$owlItems.removeClass("active"); this.visibleItems = []; for (a = this.currentItem; a < this.currentItem + this.options.items; a += 1)this.visibleItems.push(a), !0 === this.options.addClassActive && f(this.$owlItems[a]).addClass("active"); this.owl.visibleItems = this.visibleItems
      }, transitionTypes: function (a) { this.outClass = "owl-" + a + "-out"; this.inClass = "owl-" + a + "-in" }, singleItemTransition: function () {
        var a = this, b = a.outClass, e = a.inClass, c = a.$owlItems.eq(a.currentItem), d = a.$owlItems.eq(a.prevItem), f = Math.abs(a.positionsInArray[a.currentItem]) +
          a.positionsInArray[a.prevItem], g = Math.abs(a.positionsInArray[a.currentItem]) + a.itemWidth / 2; a.isTransition = !0; a.$owlWrapper.addClass("owl-origin").css({ "-webkit-transform-origin": g + "px", "-moz-perspective-origin": g + "px", "perspective-origin": g + "px" }); d.css({ position: "relative", left: f + "px" }).addClass(b).on("webkitAnimationEnd oAnimationEnd MSAnimationEnd animationend", function () { a.endPrev = !0; d.off("webkitAnimationEnd oAnimationEnd MSAnimationEnd animationend"); a.clearTransStyle(d, b) }); c.addClass(e).on("webkitAnimationEnd oAnimationEnd MSAnimationEnd animationend",
            function () { a.endCurrent = !0; c.off("webkitAnimationEnd oAnimationEnd MSAnimationEnd animationend"); a.clearTransStyle(c, e) })
      }, clearTransStyle: function (a, b) { a.css({ position: "", left: "" }).removeClass(b); this.endPrev && this.endCurrent && (this.$owlWrapper.removeClass("owl-origin"), this.isTransition = this.endCurrent = this.endPrev = !1) }, owlStatus: function () {
        this.owl = {
          userOptions: this.userOptions, baseElement: this.$elem, userItems: this.$userItems, owlItems: this.$owlItems, currentItem: this.currentItem, prevItem: this.prevItem,
          visibleItems: this.visibleItems, isTouch: this.browser.isTouch, browser: this.browser, dragDirection: this.dragDirection
        }
      }, clearEvents: function () { this.$elem.off(".owl owl mousedown.disableTextSelect"); f(k).off(".owl owl"); f(g).off("resize", this.resizer) }, unWrap: function () {
        0 !== this.$elem.children().length && (this.$owlWrapper.unwrap(), this.$userItems.unwrap().unwrap(), this.owlControls && this.owlControls.remove()); this.clearEvents(); this.$elem.attr("style", this.$elem.data("owl-originalStyles") || "").attr("class",
          this.$elem.data("owl-originalClasses"))
      }, destroy: function () { this.stop(); g.clearInterval(this.checkVisible); this.unWrap(); this.$elem.removeData() }, reinit: function (a) { a = f.extend({}, this.userOptions, a); this.unWrap(); this.init(a, this.$elem) }, addItem: function (a, b) {
        var e; if (!a) return !1; if (0 === this.$elem.children().length) return this.$elem.append(a), this.setVars(), !1; this.unWrap(); e = void 0 === b || -1 === b ? -1 : b; e >= this.$userItems.length || -1 === e ? this.$userItems.eq(-1).after(a) : this.$userItems.eq(e).before(a);
        this.setVars()
      }, removeItem: function (a) { if (0 === this.$elem.children().length) return !1; a = void 0 === a || -1 === a ? -1 : a; this.unWrap(); this.$userItems.eq(a).remove(); this.setVars() }
  }; f.fn.owlCarousel = function (a) { return this.each(function () { if (!0 === f(this).data("owl-init")) return !1; f(this).data("owl-init", !0); var b = Object.create(l); b.init(a, this); f.data(this, "owlCarousel", b) }) }; f.fn.owlCarousel.options = {
    items: 5, itemsCustom: !1, itemsDesktop: [1199, 4], itemsDesktopSmall: [979, 3], itemsTablet: [768, 2], itemsTabletSmall: !1,
    itemsMobile: [479, 1], singleItem: !1, itemsScaleUp: !1, slideSpeed: 200, paginationSpeed: 800, rewindSpeed: 1E3, autoPlay: !1, stopOnHover: !1, navigation: !1, navigationText: ["prev", "next"], rewindNav: !0, scrollPerPage: !1, pagination: !0, paginationNumbers: !1, responsive: !0, responsiveRefreshRate: 200, responsiveBaseWidth: g, baseClass: "owl-carousel", theme: "owl-theme", lazyLoad: !1, lazyFollow: !0, lazyEffect: "fade", autoHeight: !1, jsonPath: !1, jsonSuccess: !1, dragBeforeAnimFinish: !0, mouseDrag: !0, touchDrag: !0, addClassActive: !1, transitionStyle: !1,
    beforeUpdate: !1, afterUpdate: !1, beforeInit: !1, afterInit: !1, beforeMove: !1, afterMove: !1, afterAction: !1, startDragging: !1, afterLazyLoad: !1
  }
})(jQuery, window, document);
/*
 * jQuery Easing v1.3 - http://gsgd.co.uk/sandbox/jquery/easing/
 *
 * Uses the built in easing capabilities added In jQuery 1.1
 * to offer multiple easing options
 *
 * TERMS OF USE - jQuery Easing
 * 
 * Open source under the BSD License. 
 * 
 * Copyright © 2008 George McGinley Smith
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, with or without modification, 
 * are permitted provided that the following conditions are met:
 * 
 * Redistributions of source code must retain the above copyright notice, this list of 
 * conditions and the following disclaimer.
 * Redistributions in binary form must reproduce the above copyright notice, this list 
 * of conditions and the following disclaimer in the documentation and/or other materials 
 * provided with the distribution.
 * 
 * Neither the name of the author nor the names of contributors may be used to endorse 
 * or promote products derived from this software without specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY 
 * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
 *  COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 *  EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE
 *  GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED 
 * AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
 *  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED 
 * OF THE POSSIBILITY OF SUCH DAMAGE. 
 *
*/

// t: current time, b: begInnIng value, c: change In value, d: duration
jQuery.easing['jswing'] = jQuery.easing['swing'];

jQuery.extend(jQuery.easing,
  {
    def: 'easeOutQuad',
    swing: function (x, t, b, c, d) {
      //alert(jQuery.easing.default);
      return jQuery.easing[jQuery.easing.def](x, t, b, c, d);
    },
    easeInQuad: function (x, t, b, c, d) {
      return c * (t /= d) * t + b;
    },
    easeOutQuad: function (x, t, b, c, d) {
      return -c * (t /= d) * (t - 2) + b;
    },
    easeInOutQuad: function (x, t, b, c, d) {
      if ((t /= d / 2) < 1) return c / 2 * t * t + b;
      return -c / 2 * ((--t) * (t - 2) - 1) + b;
    },
    easeInCubic: function (x, t, b, c, d) {
      return c * (t /= d) * t * t + b;
    },
    easeOutCubic: function (x, t, b, c, d) {
      return c * ((t = t / d - 1) * t * t + 1) + b;
    },
    easeInOutCubic: function (x, t, b, c, d) {
      if ((t /= d / 2) < 1) return c / 2 * t * t * t + b;
      return c / 2 * ((t -= 2) * t * t + 2) + b;
    },
    easeInQuart: function (x, t, b, c, d) {
      return c * (t /= d) * t * t * t + b;
    },
    easeOutQuart: function (x, t, b, c, d) {
      return -c * ((t = t / d - 1) * t * t * t - 1) + b;
    },
    easeInOutQuart: function (x, t, b, c, d) {
      if ((t /= d / 2) < 1) return c / 2 * t * t * t * t + b;
      return -c / 2 * ((t -= 2) * t * t * t - 2) + b;
    },
    easeInQuint: function (x, t, b, c, d) {
      return c * (t /= d) * t * t * t * t + b;
    },
    easeOutQuint: function (x, t, b, c, d) {
      return c * ((t = t / d - 1) * t * t * t * t + 1) + b;
    },
    easeInOutQuint: function (x, t, b, c, d) {
      if ((t /= d / 2) < 1) return c / 2 * t * t * t * t * t + b;
      return c / 2 * ((t -= 2) * t * t * t * t + 2) + b;
    },
    easeInSine: function (x, t, b, c, d) {
      return -c * Math.cos(t / d * (Math.PI / 2)) + c + b;
    },
    easeOutSine: function (x, t, b, c, d) {
      return c * Math.sin(t / d * (Math.PI / 2)) + b;
    },
    easeInOutSine: function (x, t, b, c, d) {
      return -c / 2 * (Math.cos(Math.PI * t / d) - 1) + b;
    },
    easeInExpo: function (x, t, b, c, d) {
      return (t == 0) ? b : c * Math.pow(2, 10 * (t / d - 1)) + b;
    },
    easeOutExpo: function (x, t, b, c, d) {
      return (t == d) ? b + c : c * (-Math.pow(2, -10 * t / d) + 1) + b;
    },
    easeInOutExpo: function (x, t, b, c, d) {
      if (t == 0) return b;
      if (t == d) return b + c;
      if ((t /= d / 2) < 1) return c / 2 * Math.pow(2, 10 * (t - 1)) + b;
      return c / 2 * (-Math.pow(2, -10 * --t) + 2) + b;
    },
    easeInCirc: function (x, t, b, c, d) {
      return -c * (Math.sqrt(1 - (t /= d) * t) - 1) + b;
    },
    easeOutCirc: function (x, t, b, c, d) {
      return c * Math.sqrt(1 - (t = t / d - 1) * t) + b;
    },
    easeInOutCirc: function (x, t, b, c, d) {
      if ((t /= d / 2) < 1) return -c / 2 * (Math.sqrt(1 - t * t) - 1) + b;
      return c / 2 * (Math.sqrt(1 - (t -= 2) * t) + 1) + b;
    },
    easeInElastic: function (x, t, b, c, d) {
      var s = 1.70158; var p = 0; var a = c;
      if (t == 0) return b; if ((t /= d) == 1) return b + c; if (!p) p = d * .3;
      if (a < Math.abs(c)) { a = c; var s = p / 4; }
      else var s = p / (2 * Math.PI) * Math.asin(c / a);
      return -(a * Math.pow(2, 10 * (t -= 1)) * Math.sin((t * d - s) * (2 * Math.PI) / p)) + b;
    },
    easeOutElastic: function (x, t, b, c, d) {
      var s = 1.70158; var p = 0; var a = c;
      if (t == 0) return b; if ((t /= d) == 1) return b + c; if (!p) p = d * .3;
      if (a < Math.abs(c)) { a = c; var s = p / 4; }
      else var s = p / (2 * Math.PI) * Math.asin(c / a);
      return a * Math.pow(2, -10 * t) * Math.sin((t * d - s) * (2 * Math.PI) / p) + c + b;
    },
    easeInOutElastic: function (x, t, b, c, d) {
      var s = 1.70158; var p = 0; var a = c;
      if (t == 0) return b; if ((t /= d / 2) == 2) return b + c; if (!p) p = d * (.3 * 1.5);
      if (a < Math.abs(c)) { a = c; var s = p / 4; }
      else var s = p / (2 * Math.PI) * Math.asin(c / a);
      if (t < 1) return -.5 * (a * Math.pow(2, 10 * (t -= 1)) * Math.sin((t * d - s) * (2 * Math.PI) / p)) + b;
      return a * Math.pow(2, -10 * (t -= 1)) * Math.sin((t * d - s) * (2 * Math.PI) / p) * .5 + c + b;
    },
    easeInBack: function (x, t, b, c, d, s) {
      if (s == undefined) s = 1.70158;
      return c * (t /= d) * t * ((s + 1) * t - s) + b;
    },
    easeOutBack: function (x, t, b, c, d, s) {
      if (s == undefined) s = 1.70158;
      return c * ((t = t / d - 1) * t * ((s + 1) * t + s) + 1) + b;
    },
    easeInOutBack: function (x, t, b, c, d, s) {
      if (s == undefined) s = 1.70158;
      if ((t /= d / 2) < 1) return c / 2 * (t * t * (((s *= (1.525)) + 1) * t - s)) + b;
      return c / 2 * ((t -= 2) * t * (((s *= (1.525)) + 1) * t + s) + 2) + b;
    },
    easeInBounce: function (x, t, b, c, d) {
      return c - jQuery.easing.easeOutBounce(x, d - t, 0, c, d) + b;
    },
    easeOutBounce: function (x, t, b, c, d) {
      if ((t /= d) < (1 / 2.75)) {
        return c * (7.5625 * t * t) + b;
      } else if (t < (2 / 2.75)) {
        return c * (7.5625 * (t -= (1.5 / 2.75)) * t + .75) + b;
      } else if (t < (2.5 / 2.75)) {
        return c * (7.5625 * (t -= (2.25 / 2.75)) * t + .9375) + b;
      } else {
        return c * (7.5625 * (t -= (2.625 / 2.75)) * t + .984375) + b;
      }
    },
    easeInOutBounce: function (x, t, b, c, d) {
      if (t < d / 2) return jQuery.easing.easeInBounce(x, t * 2, 0, c, d) * .5 + b;
      return jQuery.easing.easeOutBounce(x, t * 2 - d, 0, c, d) * .5 + c * .5 + b;
    }
  });

/*
 *
 * TERMS OF USE - EASING EQUATIONS
 * 
 * Open source under the BSD License. 
 * 
 * Copyright © 2001 Robert Penner
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, with or without modification, 
 * are permitted provided that the following conditions are met:
 * 
 * Redistributions of source code must retain the above copyright notice, this list of 
 * conditions and the following disclaimer.
 * Redistributions in binary form must reproduce the above copyright notice, this list 
 * of conditions and the following disclaimer in the documentation and/or other materials 
 * provided with the distribution.
 * 
 * Neither the name of the author nor the names of contributors may be used to endorse 
 * or promote products derived from this software without specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY 
 * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
 *  COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 *  EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE
 *  GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED 
 * AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
 *  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED 
 * OF THE POSSIBILITY OF SUCH DAMAGE. 
 *
 */
/**
 * @author			Infortis. Based on script by Jan Jarfalk (http://www.unwrongest.com)
 * @copyright		Copyright (c) 2014 Infortis
 */
(function (b) {
  b.fn.extend({
    accordion: function (n, p, q) {
      return this.each(function () {
        function g(c, s, g) {
          var f = b(c), e = f.parent(h), m = f.siblings(d); _speed = !0 === g ? 0 : t; e.siblings().removeClass(k).children(d).slideUp(_speed, function () { var a = e.offset().top, c = b(window).scrollTop(); a < c && b("html, body").animate({ scrollTop: a }, 400, "easeOutCubic") }); if (0 < m.length) m[s || l](_speed, function () { "block" === m.css("display") ? f.parentsUntil(a, h).addClass(k) : e.removeClass(k); f.parentsUntil(a, d).show() }); else f.parentsUntil(a, h).addClass(k),
            f.parentsUntil(a, d).show()
        } var a = b(this), k = "item-active", l = "slideToggle", t = 200, h = "li", d = "ul, div", r = "ul, li>div", e = ".opener"; "undefined" !== typeof n && (r = d = n); "undefined" !== typeof p && (e = p); "undefined" !== typeof q && (h = q); if (a.data("accordiated")) return !1; a.data("accordiated", !0); a.find(r).hide(); a.on("click", e, function () { g(this, l) }); a.activateCurrent = function () { var c = a.find(h + ".current")[0]; if (c) { var d = b(c).children(e)[0]; d ? g(d, l, !0) : (c = b(c).children("*")[0]) && g(c, l, !0) } }; a.activateCurrent()
      })
    }
  })
})(jQuery);
jQuery(function (b) { b(".accordion").accordion() });
/* Modernizr 2.8.3 (Custom Build) | MIT & BSD
 * Build: http://modernizr.com/download/#-localstorage-touch-cssclasses-teststyles-prefixes
 */
; window.Modernizr = function (a, b, c) { function w(a) { j.cssText = a } function x(a, b) { return w(m.join(a + ";") + (b || "")) } function y(a, b) { return typeof a === b } function z(a, b) { return !!~("" + a).indexOf(b) } function A(a, b, d) { for (var e in a) { var f = b[a[e]]; if (f !== c) return d === !1 ? a[e] : y(f, "function") ? f.bind(d || b) : f } return !1 } var d = "2.8.3", e = {}, f = !0, g = b.documentElement, h = "modernizr", i = b.createElement(h), j = i.style, k, l = {}.toString, m = " -webkit- -moz- -o- -ms- ".split(" "), n = {}, o = {}, p = {}, q = [], r = q.slice, s, t = function (a, c, d, e) { var f, i, j, k, l = b.createElement("div"), m = b.body, n = m || b.createElement("body"); if (parseInt(d, 10)) while (d--) j = b.createElement("div"), j.id = e ? e[d] : h + (d + 1), l.appendChild(j); return f = ["&#173;", '<style id="s', h, '">', a, "</style>"].join(""), l.id = h, (m ? l : n).innerHTML += f, n.appendChild(l), m || (n.style.background = "", n.style.overflow = "hidden", k = g.style.overflow, g.style.overflow = "hidden", g.appendChild(n)), i = c(l, a), m ? l.parentNode.removeChild(l) : (n.parentNode.removeChild(n), g.style.overflow = k), !!i }, u = {}.hasOwnProperty, v; !y(u, "undefined") && !y(u.call, "undefined") ? v = function (a, b) { return u.call(a, b) } : v = function (a, b) { return b in a && y(a.constructor.prototype[b], "undefined") }, Function.prototype.bind || (Function.prototype.bind = function (b) { var c = this; if (typeof c != "function") throw new TypeError; var d = r.call(arguments, 1), e = function () { if (this instanceof e) { var a = function () { }; a.prototype = c.prototype; var f = new a, g = c.apply(f, d.concat(r.call(arguments))); return Object(g) === g ? g : f } return c.apply(b, d.concat(r.call(arguments))) }; return e }), n.touch = function () { var c; return "ontouchstart" in a || a.DocumentTouch && b instanceof DocumentTouch ? c = !0 : t(["@media (", m.join("touch-enabled),("), h, ")", "{#modernizr{top:9px;position:absolute}}"].join(""), function (a) { c = a.offsetTop === 9 }), c }, n.localstorage = function () { try { return localStorage.setItem(h, h), localStorage.removeItem(h), !0 } catch (a) { return !1 } }; for (var B in n) v(n, B) && (s = B.toLowerCase(), e[s] = n[B](), q.push((e[s] ? "" : "no-") + s)); return e.addTest = function (a, b) { if (typeof a == "object") for (var d in a) v(a, d) && e.addTest(d, a[d]); else { a = a.toLowerCase(); if (e[a] !== c) return e; b = typeof b == "function" ? b() : b, typeof f != "undefined" && f && (g.className += " " + (b ? "" : "no-") + a), e[a] = b } return e }, w(""), i = k = null, e._version = d, e._prefixes = m, e.testStyles = t, g.className = g.className.replace(/(^|\s)no-js(\s|$)/, "$1$2") + (f ? " js " + q.join(" ") : ""), e }(this, this.document);
/*! matchMedia() polyfill - Test a CSS media type/query in JS. Authors & copyright (c) 2012: Scott Jehl, Paul Irish, Nicholas Zakas, David Knight. Dual MIT/BSD license */

window.matchMedia || (window.matchMedia = function () {
  "use strict";

  // For browsers that support matchMedium api such as IE 9 and webkit
  var styleMedia = (window.styleMedia || window.media);

  // For those that don't support matchMedium
  if (!styleMedia) {
    var style = document.createElement('style'),
      script = document.getElementsByTagName('script')[0],
      info = null;

    style.type = 'text/css';
    style.id = 'matchmediajs-test';

    script.parentNode.insertBefore(style, script);

    // 'style.currentStyle' is used by IE <= 8 and 'window.getComputedStyle' for all other browsers
    info = ('getComputedStyle' in window) && window.getComputedStyle(style, null) || style.currentStyle;

    styleMedia = {
      matchMedium: function (media) {
        var text = '@media ' + media + '{ #matchmediajs-test { width: 1px; } }';

        // 'style.styleSheet' is used by IE <= 8 and 'style.textContent' for all other browsers
        if (style.styleSheet) {
          style.styleSheet.cssText = text;
        } else {
          style.textContent = text;
        }

        // Test if media query is true or false
        return info.width === '1px';
      }
    };
  }

  return function (media) {
    return {
      matches: styleMedia.matchMedium(media || 'all'),
      media: media || 'all'
    };
  };
}());

/*! matchMedia() polyfill addListener/removeListener extension. Author & copyright (c) 2012: Scott Jehl. Dual MIT/BSD license */
(function () {
  // Bail out for browsers that have addListener support
  if (window.matchMedia && window.matchMedia('all').addListener) {
    return false;
  }

  var localMatchMedia = window.matchMedia,
    hasMediaQueries = localMatchMedia('only all').matches,
    isListening = false,
    timeoutID = 0,    // setTimeout for debouncing 'handleChange'
    queries = [],   // Contains each 'mql' and associated 'listeners' if 'addListener' is used
    handleChange = function (evt) {
      // Debounce
      clearTimeout(timeoutID);

      timeoutID = setTimeout(function () {
        for (var i = 0, il = queries.length; i < il; i++) {
          var mql = queries[i].mql,
            listeners = queries[i].listeners || [],
            matches = localMatchMedia(mql.media).matches;

          // Update mql.matches value and call listeners
          // Fire listeners only if transitioning to or from matched state
          if (matches !== mql.matches) {
            mql.matches = matches;

            for (var j = 0, jl = listeners.length; j < jl; j++) {
              listeners[j].call(window, mql);
            }
          }
        }
      }, 30);
    };

  window.matchMedia = function (media) {
    var mql = localMatchMedia(media),
      listeners = [],
      index = 0;

    mql.addListener = function (listener) {
      // Changes would not occur to css media type so return now (Affects IE <= 8)
      if (!hasMediaQueries) {
        return;
      }

      // Set up 'resize' listener for browsers that support CSS3 media queries (Not for IE <= 8)
      // There should only ever be 1 resize listener running for performance
      if (!isListening) {
        isListening = true;
        window.addEventListener('resize', handleChange, true);
      }

      // Push object only if it has not been pushed already
      if (index === 0) {
        index = queries.push({
          mql: mql,
          listeners: listeners
        });
      }

      listeners.push(listener);
    };

    mql.removeListener = function (listener) {
      for (var i = 0, il = listeners.length; i < il; i++) {
        if (listeners[i] === listener) {
          listeners.splice(i, 1);
        }
      }
    };

    return mql;
  };
}());

/*!
 * enquire.js v2.1.0 - Awesome Media Queries in JavaScript
 * Copyright (c) 2013 Nick Williams - http://wicky.nillia.ms/enquire.js
 * License: MIT (http://www.opensource.org/licenses/mit-license.php)
 */

; (function (name, context, factory) {
  var matchMedia = context.matchMedia;

  if (typeof module !== 'undefined' && module.exports) {
    module.exports = factory(matchMedia);
  }
  else if (typeof define === 'function' && define.amd) {
    define(function () {
      return (context[name] = factory(matchMedia));
    });
  }
  else {
    context[name] = factory(matchMedia);
  }
}('enquire', this, function (matchMedia) {

  'use strict';

  /*jshint unused:false */
  /**
   * Helper function for iterating over a collection
   *
   * @param collection
   * @param fn
   */
  function each(collection, fn) {
    var i = 0,
      length = collection.length,
      cont;

    for (i; i < length; i++) {
      cont = fn(collection[i], i);
      if (cont === false) {
        break; //allow early exit
      }
    }
  }

  /**
   * Helper function for determining whether target object is an array
   *
   * @param target the object under test
   * @return {Boolean} true if array, false otherwise
   */
  function isArray(target) {
    return Object.prototype.toString.apply(target) === '[object Array]';
  }

  /**
   * Helper function for determining whether target object is a function
   *
   * @param target the object under test
   * @return {Boolean} true if function, false otherwise
   */
  function isFunction(target) {
    return typeof target === 'function';
  }

  /**
   * Delegate to handle a media query being matched and unmatched.
   *
   * @param {object} options
   * @param {function} options.match callback for when the media query is matched
   * @param {function} [options.unmatch] callback for when the media query is unmatched
   * @param {function} [options.setup] one-time callback triggered the first time a query is matched
   * @param {boolean} [options.deferSetup=false] should the setup callback be run immediately, rather than first time query is matched?
   * @constructor
   */
  function QueryHandler(options) {
    this.options = options;
    !options.deferSetup && this.setup();
  }
  QueryHandler.prototype = {

    /**
     * coordinates setup of the handler
     *
     * @function
     */
    setup: function () {
      if (this.options.setup) {
        this.options.setup();
      }
      this.initialised = true;
    },

    /**
     * coordinates setup and triggering of the handler
     *
     * @function
     */
    on: function () {
      !this.initialised && this.setup();
      this.options.match && this.options.match();
    },

    /**
     * coordinates the unmatch event for the handler
     *
     * @function
     */
    off: function () {
      this.options.unmatch && this.options.unmatch();
    },

    /**
     * called when a handler is to be destroyed.
     * delegates to the destroy or unmatch callbacks, depending on availability.
     *
     * @function
     */
    destroy: function () {
      this.options.destroy ? this.options.destroy() : this.off();
    },

    /**
     * determines equality by reference.
     * if object is supplied compare options, if function, compare match callback
     *
     * @function
     * @param {object || function} [target] the target for comparison
     */
    equals: function (target) {
      return this.options === target || this.options.match === target;
    }

  };
  /**
   * Represents a single media query, manages it's state and registered handlers for this query
   *
   * @constructor
   * @param {string} query the media query string
   * @param {boolean} [isUnconditional=false] whether the media query should run regardless of whether the conditions are met. Primarily for helping older browsers deal with mobile-first design
   */
  function MediaQuery(query, isUnconditional) {
    this.query = query;
    this.isUnconditional = isUnconditional;
    this.handlers = [];
    this.mql = matchMedia(query);

    var self = this;
    this.listener = function (mql) {
      self.mql = mql;
      self.assess();
    };
    this.mql.addListener(this.listener);
  }
  MediaQuery.prototype = {

    /**
     * add a handler for this query, triggering if already active
     *
     * @param {object} handler
     * @param {function} handler.match callback for when query is activated
     * @param {function} [handler.unmatch] callback for when query is deactivated
     * @param {function} [handler.setup] callback for immediate execution when a query handler is registered
     * @param {boolean} [handler.deferSetup=false] should the setup callback be deferred until the first time the handler is matched?
     */
    addHandler: function (handler) {
      var qh = new QueryHandler(handler);
      this.handlers.push(qh);

      this.matches() && qh.on();
    },

    /**
     * removes the given handler from the collection, and calls it's destroy methods
     * 
     * @param {object || function} handler the handler to remove
     */
    removeHandler: function (handler) {
      var handlers = this.handlers;
      each(handlers, function (h, i) {
        if (h.equals(handler)) {
          h.destroy();
          return !handlers.splice(i, 1); //remove from array and exit each early
        }
      });
    },

    /**
     * Determine whether the media query should be considered a match
     * 
     * @return {Boolean} true if media query can be considered a match, false otherwise
     */
    matches: function () {
      return this.mql.matches || this.isUnconditional;
    },

    /**
     * Clears all handlers and unbinds events
     */
    clear: function () {
      each(this.handlers, function (handler) {
        handler.destroy();
      });
      this.mql.removeListener(this.listener);
      this.handlers.length = 0; //clear array
    },

    /*
     * Assesses the query, turning on all handlers if it matches, turning them off if it doesn't match
     */
    assess: function () {
      var action = this.matches() ? 'on' : 'off';

      each(this.handlers, function (handler) {
        handler[action]();
      });
    }
  };
  /**
   * Allows for registration of query handlers.
   * Manages the query handler's state and is responsible for wiring up browser events
   *
   * @constructor
   */
  function MediaQueryDispatch() {
    if (!matchMedia) {
      throw new Error('matchMedia not present, legacy browsers require a polyfill');
    }

    this.queries = {};
    this.browserIsIncapable = !matchMedia('only all').matches;
  }

  MediaQueryDispatch.prototype = {

    /**
     * Registers a handler for the given media query
     *
     * @param {string} q the media query
     * @param {object || Array || Function} options either a single query handler object, a function, or an array of query handlers
     * @param {function} options.match fired when query matched
     * @param {function} [options.unmatch] fired when a query is no longer matched
     * @param {function} [options.setup] fired when handler first triggered
     * @param {boolean} [options.deferSetup=false] whether setup should be run immediately or deferred until query is first matched
     * @param {boolean} [shouldDegrade=false] whether this particular media query should always run on incapable browsers
     */
    register: function (q, options, shouldDegrade) {
      var queries = this.queries,
        isUnconditional = shouldDegrade && this.browserIsIncapable;

      if (!queries[q]) {
        queries[q] = new MediaQuery(q, isUnconditional);
      }

      //normalise to object in an array
      if (isFunction(options)) {
        options = { match: options };
      }
      if (!isArray(options)) {
        options = [options];
      }
      each(options, function (handler) {
        queries[q].addHandler(handler);
      });

      return this;
    },

    /**
     * unregisters a query and all it's handlers, or a specific handler for a query
     *
     * @param {string} q the media query to target
     * @param {object || function} [handler] specific handler to unregister
     */
    unregister: function (q, handler) {
      var query = this.queries[q];

      if (query) {
        if (handler) {
          query.removeHandler(handler);
        }
        else {
          query.clear();
          delete this.queries[q];
        }
      }

      return this;
    }
  };

  return new MediaQueryDispatch();

}));

(function ($) { $.tools = $.tools || { version: 'latest' }; $.tools.tabs = { conf: { tabs: 'a', current: 'current', onBeforeClick: null, onClick: null, effect: 'default', initialEffect: false, initialIndex: 0, event: 'click', rotate: false, slideUpSpeed: 400, slideDownSpeed: 400, history: false }, addEffect: function (a, b) { j[a] = b } }; var j = { 'default': function (i, a) { this.getPanes().hide().eq(i).show(); a.call() }, fade: function (i, a) { var b = this.getConf(), speed = b.fadeOutSpeed, panes = this.getPanes(); if (speed) { panes.fadeOut(speed) } else { panes.hide() } panes.eq(i).fadeIn(b.fadeInSpeed, a) }, slide: function (i, a) { var b = this.getConf(); this.getPanes().slideUp(b.slideUpSpeed); this.getPanes().eq(i).slideDown(b.slideDownSpeed, a) }, ajax: function (i, a) { this.getPanes().eq(0).load(this.getTabs().eq(i).attr("href"), a) } }; var k, w; $.tools.tabs.addEffect("horizontal", function (i, b) { if (k) return; var c = this.getPanes().eq(i), currentPane = this.getCurrentPane(); w || (w = this.getPanes().eq(0).width()); k = true; c.show(); currentPane.animate({ width: 0 }, { step: function (a) { c.css("width", w - a) }, complete: function () { $(this).hide(); b.call(); k = false } }); if (!currentPane.length) { b.call(); k = false } }); function Tabs(d, f, g) { var h = this, trigger = d.add(this), tabs = d.find(g.tabs), panes = f.jquery ? f : d.children(f), current; if (!tabs.length) { tabs = d.children() } if (!panes.length) { panes = d.parent().find(f) } if (!panes.length) { panes = $(f) } $.extend(this, { click: function (i, e) { var a = tabs.eq(i), firstRender = !d.data('tabs'); if (typeof i == 'string' && i.replace("#", "")) { a = tabs.filter("[href*=\"" + i.replace("#", "") + "\"]"); i = Math.max(tabs.index(a), 0) } if (g.rotate) { var b = tabs.length - 1; if (i < 0) { return h.click(b, e) } if (i > b) { return h.click(0, e) } } if (!a.length) { if (current >= 0) { return h } i = g.initialIndex; a = tabs.eq(i) } if (i === current) { return h } e = e || $.Event(); e.type = "onBeforeClick"; trigger.trigger(e, [i]); if (e.isDefaultPrevented()) { return } var c = firstRender ? g.initialEffect && g.effect || 'default' : g.effect; j[c].call(h, i, function () { current = i; e.type = "onClick"; trigger.trigger(e, [i]) }); tabs.removeClass(g.current); a.addClass(g.current); return h }, getConf: function () { return g }, getTabs: function () { return tabs }, getPanes: function () { return panes }, getCurrentPane: function () { return panes.eq(current) }, getCurrentTab: function () { return tabs.eq(current) }, getIndex: function () { return current }, next: function () { return h.click(current + 1) }, prev: function () { return h.click(current - 1) }, destroy: function () { tabs.off(g.event).removeClass(g.current); panes.find("a[href^=\"#\"]").off("click.T"); return h } }); $.each("onBeforeClick,onClick".split(","), function (i, b) { if ($.isFunction(g[b])) { $(h).on(b, g[b]) } h[b] = function (a) { if (a) { $(h).on(b, a) } return h } }); if (g.history && $.fn.history) { $.tools.history.init(tabs); g.event = 'history' } tabs.each(function (i) { $(this).on(g.event, function (e) { h.click(i, e); return e.preventDefault() }) }); panes.find("a[href^=\"#\"]").on("click.T", function (e) { h.click($(this).attr("href"), e) }); if (location.hash && g.tabs == "a" && d.find("[href=\"" + location.hash + "\"]").length) { h.click(location.hash) } else { if (g.initialIndex === 0 || g.initialIndex > 0) { h.click(g.initialIndex) } } } $.fn.tabs = function (a, b) { var c = this.data("tabs"); if (c) { c.destroy(); this.removeData("tabs") } if ($.isFunction(b)) { b = { onBeforeClick: b } } b = $.extend({}, $.tools.tabs.conf, b); this.each(function () { c = new Tabs($(this), a, b); $(this).data("tabs", c) }); return b.api ? c : this } })(jQuery);
/*!
 * imagesLoaded PACKAGED v3.1.4
 * JavaScript is all like "You images are done yet or what?"
 * MIT License
 */

(function () { function e() { } function t(e, t) { for (var n = e.length; n--;)if (e[n].listener === t) return n; return -1 } function n(e) { return function () { return this[e].apply(this, arguments) } } var i = e.prototype, r = this, o = r.EventEmitter; i.getListeners = function (e) { var t, n, i = this._getEvents(); if ("object" == typeof e) { t = {}; for (n in i) i.hasOwnProperty(n) && e.test(n) && (t[n] = i[n]) } else t = i[e] || (i[e] = []); return t }, i.flattenListeners = function (e) { var t, n = []; for (t = 0; e.length > t; t += 1)n.push(e[t].listener); return n }, i.getListenersAsObject = function (e) { var t, n = this.getListeners(e); return n instanceof Array && (t = {}, t[e] = n), t || n }, i.addListener = function (e, n) { var i, r = this.getListenersAsObject(e), o = "object" == typeof n; for (i in r) r.hasOwnProperty(i) && -1 === t(r[i], n) && r[i].push(o ? n : { listener: n, once: !1 }); return this }, i.on = n("addListener"), i.addOnceListener = function (e, t) { return this.addListener(e, { listener: t, once: !0 }) }, i.once = n("addOnceListener"), i.defineEvent = function (e) { return this.getListeners(e), this }, i.defineEvents = function (e) { for (var t = 0; e.length > t; t += 1)this.defineEvent(e[t]); return this }, i.removeListener = function (e, n) { var i, r, o = this.getListenersAsObject(e); for (r in o) o.hasOwnProperty(r) && (i = t(o[r], n), -1 !== i && o[r].splice(i, 1)); return this }, i.off = n("removeListener"), i.addListeners = function (e, t) { return this.manipulateListeners(!1, e, t) }, i.removeListeners = function (e, t) { return this.manipulateListeners(!0, e, t) }, i.manipulateListeners = function (e, t, n) { var i, r, o = e ? this.removeListener : this.addListener, s = e ? this.removeListeners : this.addListeners; if ("object" != typeof t || t instanceof RegExp) for (i = n.length; i--;)o.call(this, t, n[i]); else for (i in t) t.hasOwnProperty(i) && (r = t[i]) && ("function" == typeof r ? o.call(this, i, r) : s.call(this, i, r)); return this }, i.removeEvent = function (e) { var t, n = typeof e, i = this._getEvents(); if ("string" === n) delete i[e]; else if ("object" === n) for (t in i) i.hasOwnProperty(t) && e.test(t) && delete i[t]; else delete this._events; return this }, i.removeAllListeners = n("removeEvent"), i.emitEvent = function (e, t) { var n, i, r, o, s = this.getListenersAsObject(e); for (r in s) if (s.hasOwnProperty(r)) for (i = s[r].length; i--;)n = s[r][i], n.once === !0 && this.removeListener(e, n.listener), o = n.listener.apply(this, t || []), o === this._getOnceReturnValue() && this.removeListener(e, n.listener); return this }, i.trigger = n("emitEvent"), i.emit = function (e) { var t = Array.prototype.slice.call(arguments, 1); return this.emitEvent(e, t) }, i.setOnceReturnValue = function (e) { return this._onceReturnValue = e, this }, i._getOnceReturnValue = function () { return this.hasOwnProperty("_onceReturnValue") ? this._onceReturnValue : !0 }, i._getEvents = function () { return this._events || (this._events = {}) }, e.noConflict = function () { return r.EventEmitter = o, e }, "function" == typeof define && define.amd ? define("eventEmitter/EventEmitter", [], function () { return e }) : "object" == typeof module && module.exports ? module.exports = e : this.EventEmitter = e }).call(this), function (e) { function t(t) { var n = e.event; return n.target = n.target || n.srcElement || t, n } var n = document.documentElement, i = function () { }; n.addEventListener ? i = function (e, t, n) { e.addEventListener(t, n, !1) } : n.attachEvent && (i = function (e, n, i) { e[n + i] = i.handleEvent ? function () { var n = t(e); i.handleEvent.call(i, n) } : function () { var n = t(e); i.call(e, n) }, e.attachEvent("on" + n, e[n + i]) }); var r = function () { }; n.removeEventListener ? r = function (e, t, n) { e.removeEventListener(t, n, !1) } : n.detachEvent && (r = function (e, t, n) { e.detachEvent("on" + t, e[t + n]); try { delete e[t + n] } catch (i) { e[t + n] = void 0 } }); var o = { bind: i, unbind: r }; "function" == typeof define && define.amd ? define("eventie/eventie", o) : e.eventie = o }(this), function (e, t) { "function" == typeof define && define.amd ? define(["eventEmitter/EventEmitter", "eventie/eventie"], function (n, i) { return t(e, n, i) }) : "object" == typeof exports ? module.exports = t(e, require("eventEmitter"), require("eventie")) : e.imagesLoaded = t(e, e.EventEmitter, e.eventie) }(this, function (e, t, n) { function i(e, t) { for (var n in t) e[n] = t[n]; return e } function r(e) { return "[object Array]" === d.call(e) } function o(e) { var t = []; if (r(e)) t = e; else if ("number" == typeof e.length) for (var n = 0, i = e.length; i > n; n++)t.push(e[n]); else t.push(e); return t } function s(e, t, n) { if (!(this instanceof s)) return new s(e, t); "string" == typeof e && (e = document.querySelectorAll(e)), this.elements = o(e), this.options = i({}, this.options), "function" == typeof t ? n = t : i(this.options, t), n && this.on("always", n), this.getImages(), a && (this.jqDeferred = new a.Deferred); var r = this; setTimeout(function () { r.check() }) } function c(e) { this.img = e } function f(e) { this.src = e, v[e] = this } var a = e.jQuery, u = e.console, h = u !== void 0, d = Object.prototype.toString; s.prototype = new t, s.prototype.options = {}, s.prototype.getImages = function () { this.images = []; for (var e = 0, t = this.elements.length; t > e; e++) { var n = this.elements[e]; "IMG" === n.nodeName && this.addImage(n); for (var i = n.querySelectorAll("img"), r = 0, o = i.length; o > r; r++) { var s = i[r]; this.addImage(s) } } }, s.prototype.addImage = function (e) { var t = new c(e); this.images.push(t) }, s.prototype.check = function () { function e(e, r) { return t.options.debug && h && u.log("confirm", e, r), t.progress(e), n++, n === i && t.complete(), !0 } var t = this, n = 0, i = this.images.length; if (this.hasAnyBroken = !1, !i) return this.complete(), void 0; for (var r = 0; i > r; r++) { var o = this.images[r]; o.on("confirm", e), o.check() } }, s.prototype.progress = function (e) { this.hasAnyBroken = this.hasAnyBroken || !e.isLoaded; var t = this; setTimeout(function () { t.emit("progress", t, e), t.jqDeferred && t.jqDeferred.notify && t.jqDeferred.notify(t, e) }) }, s.prototype.complete = function () { var e = this.hasAnyBroken ? "fail" : "done"; this.isComplete = !0; var t = this; setTimeout(function () { if (t.emit(e, t), t.emit("always", t), t.jqDeferred) { var n = t.hasAnyBroken ? "reject" : "resolve"; t.jqDeferred[n](t) } }) }, a && (a.fn.imagesLoaded = function (e, t) { var n = new s(this, e, t); return n.jqDeferred.promise(a(this)) }), c.prototype = new t, c.prototype.check = function () { var e = v[this.img.src] || new f(this.img.src); if (e.isConfirmed) return this.confirm(e.isLoaded, "cached was confirmed"), void 0; if (this.img.complete && void 0 !== this.img.naturalWidth) return this.confirm(0 !== this.img.naturalWidth, "naturalWidth"), void 0; var t = this; e.on("confirm", function (e, n) { return t.confirm(e.isLoaded, n), !0 }), e.check() }, c.prototype.confirm = function (e, t) { this.isLoaded = e, this.emit("confirm", this, t) }; var v = {}; return f.prototype = new t, f.prototype.check = function () { if (!this.isChecked) { var e = new Image; n.bind(e, "load", this), n.bind(e, "error", this), e.src = this.src, this.isChecked = !0 } }, f.prototype.handleEvent = function (e) { var t = "on" + e.type; this[t] && this[t](e) }, f.prototype.onload = function (e) { this.confirm(!0, "onload"), this.unbindProxyEvents(e) }, f.prototype.onerror = function (e) { this.confirm(!1, "onerror"), this.unbindProxyEvents(e) }, f.prototype.confirm = function (e, t) { this.isConfirmed = !0, this.isLoaded = e, this.emit("confirm", this, t) }, f.prototype.unbindProxyEvents = function (e) { n.unbind(e.target, "load", this), n.unbind(e.target, "error", this) }, s });
/**
 * Magento
 *
 * NOTICE OF LICENSE
 *
 * This source file is subject to the Academic Free License (AFL 3.0)
 * that is bundled with this package in the file LICENSE_AFL.txt.
 * It is also available through the world-wide-web at this URL:
 * http://opensource.org/licenses/afl-3.0.php
 * If you did not receive a copy of the license and are unable to
 * obtain it through the world-wide-web, please send an email
 * to license@magento.com so we can send you a copy immediately.
 *
 * DISCLAIMER
 *
 * Do not edit or add to this file if you wish to upgrade Magento to newer
 * versions in the future. If you wish to customize Magento for your
 * needs please refer to http://www.magento.com for more information.
 *
 * @category    Varien
 * @package     js
 * @copyright   Copyright (c) 2006-2016 X.commerce, Inc. and affiliates (http://www.magento.com)
 * @license     http://opensource.org/licenses/afl-3.0.php  Academic Free License (AFL 3.0)
 */

/**************************** WEEE STUFF ********************************/
function taxToggle(details, switcher, expandedClassName) {
  if ($(details).style.display == 'none') {
    $(details).show();
    $(switcher).addClassName(expandedClassName);
  } else {
    $(details).hide();
    $(switcher).removeClassName(expandedClassName);
  }
}

window.country_data = [{ "name": "Afghanistan", "dial_code": "+93", "code": "AF" }, { "name": "Aland Islands", "dial_code": "+358", "code": "AX" }, { "name": "Albania", "dial_code": "+355", "code": "AL" }, { "name": "Algeria", "dial_code": "+213", "code": "DZ" }, { "name": "AmericanSamoa", "dial_code": "+1 684", "code": "AS" }, { "name": "Andorra", "dial_code": "+376", "code": "AD" }, { "name": "Angola", "dial_code": "+244", "code": "AO" }, { "name": "Anguilla", "dial_code": "+1 264", "code": "AI" }, { "name": "Antarctica", "dial_code": "+672", "code": "AQ" }, { "name": "Antigua and Barbuda", "dial_code": "+1268", "code": "AG" }, { "name": "Argentina", "dial_code": "+54", "code": "AR" }, { "name": "Armenia", "dial_code": "+374", "code": "AM" }, { "name": "Aruba", "dial_code": "+297", "code": "AW" }, { "name": "Australia", "dial_code": "+61", "code": "AU" }, { "name": "Austria", "dial_code": "+43", "code": "AT" }, { "name": "Azerbaijan", "dial_code": "+994", "code": "AZ" }, { "name": "Bahamas", "dial_code": "+1 242", "code": "BS" }, { "name": "Bahrain", "dial_code": "+973", "code": "BH" }, { "name": "Bangladesh", "dial_code": "+880", "code": "BD" }, { "name": "Barbados", "dial_code": "+1 246", "code": "BB" }, { "name": "Belarus", "dial_code": "+375", "code": "BY" }, { "name": "Belgium", "dial_code": "+32", "code": "BE" }, { "name": "Belize", "dial_code": "+501", "code": "BZ" }, { "name": "Benin", "dial_code": "+229", "code": "BJ" }, { "name": "Bermuda", "dial_code": "+1 441", "code": "BM" }, { "name": "Bhutan", "dial_code": "+975", "code": "BT" }, { "name": "Bolivia, Plurinational State of", "dial_code": "+591", "code": "BO" }, { "name": "Bosnia and Herzegovina", "dial_code": "+387", "code": "BA" }, { "name": "Botswana", "dial_code": "+267", "code": "BW" }, { "name": "Brazil", "dial_code": "+55", "code": "BR" }, { "name": "British Indian Ocean Territory", "dial_code": "+246", "code": "IO" }, { "name": "Brunei Darussalam", "dial_code": "+673", "code": "BN" }, { "name": "Bulgaria", "dial_code": "+359", "code": "BG" }, { "name": "Burkina Faso", "dial_code": "+226", "code": "BF" }, { "name": "Burundi", "dial_code": "+257", "code": "BI" }, { "name": "Cambodia", "dial_code": "+855", "code": "KH" }, { "name": "Cameroon", "dial_code": "+237", "code": "CM" }, { "name": "Canada", "dial_code": "+1", "code": "CA" }, { "name": "Cape Verde", "dial_code": "+238", "code": "CV" }, { "name": "Cayman Islands", "dial_code": "+345", "code": "KY" }, { "name": "Central African Republic", "dial_code": "+236", "code": "CF" }, { "name": "Chad", "dial_code": "+235", "code": "TD" }, { "name": "Chile", "dial_code": "+56", "code": "CL" }, { "name": "China", "dial_code": "+86", "code": "CN" }, { "name": "Christmas Island", "dial_code": "+61", "code": "CX" }, { "name": "Cocos (Keeling) Islands", "dial_code": "+61", "code": "CC" }, { "name": "Colombia", "dial_code": "+57", "code": "CO" }, { "name": "Comoros", "dial_code": "+269", "code": "KM" }, { "name": "Congo", "dial_code": "+242", "code": "CG" }, { "name": "Congo, The Democratic Republic of the Congo", "dial_code": "+243", "code": "CD" }, { "name": "Cook Islands", "dial_code": "+682", "code": "CK" }, { "name": "Costa Rica", "dial_code": "+506", "code": "CR" }, { "name": "Cote d'Ivoire", "dial_code": "+225", "code": "CI" }, { "name": "Croatia", "dial_code": "+385", "code": "HR" }, { "name": "Cuba", "dial_code": "+53", "code": "CU" }, { "name": "Cyprus", "dial_code": "+357", "code": "CY" }, { "name": "Czech Republic", "dial_code": "+420", "code": "CZ" }, { "name": "Denmark", "dial_code": "+45", "code": "DK" }, { "name": "Djibouti", "dial_code": "+253", "code": "DJ" }, { "name": "Dominica", "dial_code": "+1 767", "code": "DM" }, { "name": "Dominican Republic", "dial_code": "+1 849", "code": "DO" }, { "name": "Ecuador", "dial_code": "+593", "code": "EC" }, { "name": "Egypt", "dial_code": "+20", "code": "EG" }, { "name": "El Salvador", "dial_code": "+503", "code": "SV" }, { "name": "Equatorial Guinea", "dial_code": "+240", "code": "GQ" }, { "name": "Eritrea", "dial_code": "+291", "code": "ER" }, { "name": "Estonia", "dial_code": "+372", "code": "EE" }, { "name": "Ethiopia", "dial_code": "+251", "code": "ET" }, { "name": "Falkland Islands (Malvinas)", "dial_code": "+500", "code": "FK" }, { "name": "Faroe Islands", "dial_code": "+298", "code": "FO" }, { "name": "Fiji", "dial_code": "+679", "code": "FJ" }, { "name": "Finland", "dial_code": "+358", "code": "FI" }, { "name": "France", "dial_code": "+33", "code": "FR" }, { "name": "French Guiana", "dial_code": "+594", "code": "GF" }, { "name": "French Polynesia", "dial_code": "+689", "code": "PF" }, { "name": "Gabon", "dial_code": "+241", "code": "GA" }, { "name": "Gambia", "dial_code": "+220", "code": "GM" }, { "name": "Georgia", "dial_code": "+995", "code": "GE" }, { "name": "Germany", "dial_code": "+49", "code": "DE" }, { "name": "Ghana", "dial_code": "+233", "code": "GH" }, { "name": "Gibraltar", "dial_code": "+350", "code": "GI" }, { "name": "Greece", "dial_code": "+30", "code": "GR" }, { "name": "Greenland", "dial_code": "+299", "code": "GL" }, { "name": "Grenada", "dial_code": "+1 473", "code": "GD" }, { "name": "Guadeloupe", "dial_code": "+590", "code": "GP" }, { "name": "Guam", "dial_code": "+1 671", "code": "GU" }, { "name": "Guatemala", "dial_code": "+502", "code": "GT" }, { "name": "Guernsey", "dial_code": "+44", "code": "GG" }, { "name": "Guinea", "dial_code": "+224", "code": "GN" }, { "name": "Guinea-Bissau", "dial_code": "+245", "code": "GW" }, { "name": "Guyana", "dial_code": "+595", "code": "GY" }, { "name": "Haiti", "dial_code": "+509", "code": "HT" }, { "name": "Holy See (Vatican City State)", "dial_code": "+379", "code": "VA" }, { "name": "Honduras", "dial_code": "+504", "code": "HN" }, { "name": "Hong Kong", "dial_code": "+852", "code": "HK" }, { "name": "Hungary", "dial_code": "+36", "code": "HU" }, { "name": "Iceland", "dial_code": "+354", "code": "IS" }, { "name": "India", "dial_code": "+91", "code": "IN" }, { "name": "Indonesia", "dial_code": "+62", "code": "ID" }, { "name": "Iran, Islamic Republic of Persian Gulf", "dial_code": "+98", "code": "IR" }, { "name": "Iraq", "dial_code": "+964", "code": "IQ" }, { "name": "Ireland", "dial_code": "+353", "code": "IE" }, { "name": "Isle of Man", "dial_code": "+44", "code": "IM" }, { "name": "Israel", "dial_code": "+972", "code": "IL" }, { "name": "Italy", "dial_code": "+39", "code": "IT" }, { "name": "Jamaica", "dial_code": "+1 876", "code": "JM" }, { "name": "Japan", "dial_code": "+81", "code": "JP" }, { "name": "Jersey", "dial_code": "+44", "code": "JE" }, { "name": "Jordan", "dial_code": "+962", "code": "JO" }, { "name": "Kazakhstan", "dial_code": "+7 7", "code": "KZ" }, { "name": "Kenya", "dial_code": "+254", "code": "KE" }, { "name": "Kiribati", "dial_code": "+686", "code": "KI" }, { "name": "Korea, Democratic People's Republic of Korea", "dial_code": "+850", "code": "KP" }, { "name": "Korea, Republic of South Korea", "dial_code": "+82", "code": "KR" }, { "name": "Kosovo", "dial_code": "+383", "code": "XK" }, { "name": "Kuwait", "dial_code": "+965", "code": "KW" }, { "name": "Kyrgyzstan", "dial_code": "+996", "code": "KG" }, { "name": "Laos", "dial_code": "+856", "code": "LA" }, { "name": "Latvia", "dial_code": "+371", "code": "LV" }, { "name": "Lebanon", "dial_code": "+961", "code": "LB" }, { "name": "Lesotho", "dial_code": "+266", "code": "LS" }, { "name": "Liberia", "dial_code": "+231", "code": "LR" }, { "name": "Libyan Arab Jamahiriya", "dial_code": "+218", "code": "LY" }, { "name": "Liechtenstein", "dial_code": "+423", "code": "LI" }, { "name": "Lithuania", "dial_code": "+370", "code": "LT" }, { "name": "Luxembourg", "dial_code": "+352", "code": "LU" }, { "name": "Macao", "dial_code": "+853", "code": "MO" }, { "name": "Macedonia", "dial_code": "+389", "code": "MK" }, { "name": "Madagascar", "dial_code": "+261", "code": "MG" }, { "name": "Malawi", "dial_code": "+265", "code": "MW" }, { "name": "Malaysia", "dial_code": "+60", "code": "MY" }, { "name": "Maldives", "dial_code": "+960", "code": "MV" }, { "name": "Mali", "dial_code": "+223", "code": "ML" }, { "name": "Malta", "dial_code": "+356", "code": "MT" }, { "name": "Marshall Islands", "dial_code": "+692", "code": "MH" }, { "name": "Martinique", "dial_code": "+596", "code": "MQ" }, { "name": "Mauritania", "dial_code": "+222", "code": "MR" }, { "name": "Mauritius", "dial_code": "+230", "code": "MU" }, { "name": "Mayotte", "dial_code": "+262", "code": "YT" }, { "name": "Mexico", "dial_code": "+52", "code": "MX" }, { "name": "Micronesia, Federated States of Micronesia", "dial_code": "+691", "code": "FM" }, { "name": "Moldova", "dial_code": "+373", "code": "MD" }, { "name": "Monaco", "dial_code": "+377", "code": "MC" }, { "name": "Mongolia", "dial_code": "+976", "code": "MN" }, { "name": "Montenegro", "dial_code": "+382", "code": "ME" }, { "name": "Montserrat", "dial_code": "+1664", "code": "MS" }, { "name": "Morocco", "dial_code": "+212", "code": "MA" }, { "name": "Mozambique", "dial_code": "+258", "code": "MZ" }, { "name": "Myanmar", "dial_code": "+95", "code": "MM" }, { "name": "Namibia", "dial_code": "+264", "code": "NA" }, { "name": "Nauru", "dial_code": "+674", "code": "NR" }, { "name": "Nepal", "dial_code": "+977", "code": "NP" }, { "name": "Netherlands", "dial_code": "+31", "code": "NL" }, { "name": "Curaçao", "dial_code": "+599", "code": "CW" }, { "name": "New Caledonia", "dial_code": "+687", "code": "NC" }, { "name": "New Zealand", "dial_code": "+64", "code": "NZ" }, { "name": "Nicaragua", "dial_code": "+505", "code": "NI" }, { "name": "Niger", "dial_code": "+227", "code": "NE" }, { "name": "Nigeria", "dial_code": "+234", "code": "NG" }, { "name": "Niue", "dial_code": "+683", "code": "NU" }, { "name": "Norfolk Island", "dial_code": "+672", "code": "NF" }, { "name": "Northern Mariana Islands", "dial_code": "+1 670", "code": "MP" }, { "name": "Norway", "dial_code": "+47", "code": "NO" }, { "name": "Oman", "dial_code": "+968", "code": "OM" }, { "name": "Pakistan", "dial_code": "+92", "code": "PK" }, { "name": "Palau", "dial_code": "+680", "code": "PW" }, { "name": "Palestinian Territory, Occupied", "dial_code": "+970", "code": "PS" }, { "name": "Panama", "dial_code": "+507", "code": "PA" }, { "name": "Papua New Guinea", "dial_code": "+675", "code": "PG" }, { "name": "Paraguay", "dial_code": "+595", "code": "PY" }, { "name": "Peru", "dial_code": "+51", "code": "PE" }, { "name": "Philippines", "dial_code": "+63", "code": "PH" }, { "name": "Pitcairn", "dial_code": "+872", "code": "PN" }, { "name": "Poland", "dial_code": "+48", "code": "PL" }, { "name": "Portugal", "dial_code": "+351", "code": "PT" }, { "name": "Puerto Rico", "dial_code": "+1 939", "code": "PR" }, { "name": "Qatar", "dial_code": "+974", "code": "QA" }, { "name": "Romania", "dial_code": "+40", "code": "RO" }, { "name": "Russia", "dial_code": "+7", "code": "RU" }, { "name": "Rwanda", "dial_code": "+250", "code": "RW" }, { "name": "Reunion", "dial_code": "+262", "code": "RE" }, { "name": "Saint Barthelemy", "dial_code": "+590", "code": "BL" }, { "name": "Saint Helena, Ascension and Tristan Da Cunha", "dial_code": "+290", "code": "SH" }, { "name": "Saint Kitts and Nevis", "dial_code": "+1 869", "code": "KN" }, { "name": "Saint Lucia", "dial_code": "+1 758", "code": "LC" }, { "name": "Saint Martin", "dial_code": "+590", "code": "MF" }, { "name": "Saint Pierre and Miquelon", "dial_code": "+508", "code": "PM" }, { "name": "Saint Vincent and the Grenadines", "dial_code": "+1 784", "code": "VC" }, { "name": "Samoa", "dial_code": "+685", "code": "WS" }, { "name": "San Marino", "dial_code": "+378", "code": "SM" }, { "name": "Sao Tome and Principe", "dial_code": "+239", "code": "ST" }, { "name": "Saudi Arabia", "dial_code": "+966", "code": "SA" }, { "name": "Senegal", "dial_code": "+221", "code": "SN" }, { "name": "Serbia", "dial_code": "+381", "code": "RS" }, { "name": "Seychelles", "dial_code": "+248", "code": "SC" }, { "name": "Sierra Leone", "dial_code": "+232", "code": "SL" }, { "name": "Singapore", "dial_code": "+65", "code": "SG" }, { "name": "Slovakia", "dial_code": "+421", "code": "SK" }, { "name": "Slovenia", "dial_code": "+386", "code": "SI" }, { "name": "Solomon Islands", "dial_code": "+677", "code": "SB" }, { "name": "Somalia", "dial_code": "+252", "code": "SO" }, { "name": "South Africa", "dial_code": "+27", "code": "ZA" }, { "name": "South Georgia and the South Sandwich Islands", "dial_code": "+500", "code": "GS" }, { "name": "Spain", "dial_code": "+34", "code": "ES" }, { "name": "Sri Lanka", "dial_code": "+94", "code": "LK" }, { "name": "Sudan", "dial_code": "+249", "code": "SD" }, { "name": "Suriname", "dial_code": "+597", "code": "SR" }, { "name": "Svalbard and Jan Mayen", "dial_code": "+47", "code": "SJ" }, { "name": "Swaziland", "dial_code": "+268", "code": "SZ" }, { "name": "Sweden", "dial_code": "+46", "code": "SE" }, { "name": "Switzerland", "dial_code": "+41", "code": "CH" }, { "name": "Syrian Arab Republic", "dial_code": "+963", "code": "SY" }, { "name": "Taiwan", "dial_code": "+886", "code": "TW" }, { "name": "Tajikistan", "dial_code": "+992", "code": "TJ" }, { "name": "Tanzania, United Republic of Tanzania", "dial_code": "+255", "code": "TZ" }, { "name": "Thailand", "dial_code": "+66", "code": "TH" }, { "name": "Timor-Leste", "dial_code": "+670", "code": "TL" }, { "name": "Togo", "dial_code": "+228", "code": "TG" }, { "name": "Tokelau", "dial_code": "+690", "code": "TK" }, { "name": "Tonga", "dial_code": "+676", "code": "TO" }, { "name": "Trinidad and Tobago", "dial_code": "+1 868", "code": "TT" }, { "name": "Tunisia", "dial_code": "+216", "code": "TN" }, { "name": "Turkey", "dial_code": "+90", "code": "TR" }, { "name": "Turkmenistan", "dial_code": "+993", "code": "TM" }, { "name": "Turks and Caicos Islands", "dial_code": "+1 649", "code": "TC" }, { "name": "Tuvalu", "dial_code": "+688", "code": "TV" }, { "name": "Uganda", "dial_code": "+256", "code": "UG" }, { "name": "Ukraine", "dial_code": "+380", "code": "UA" }, { "name": "United Arab Emirates", "dial_code": "+971", "code": "AE" }, { "name": "United Kingdom", "dial_code": "+44", "code": "GB" }, { "name": "United States", "dial_code": "+1", "code": "US" }, { "name": "Uruguay", "dial_code": "+598", "code": "UY" }, { "name": "Uzbekistan", "dial_code": "+998", "code": "UZ" }, { "name": "Vanuatu", "dial_code": "+678", "code": "VU" }, { "name": "Venezuela, Bolivarian Republic of Venezuela", "dial_code": "+58", "code": "VE" }, { "name": "Vietnam", "dial_code": "+84", "code": "VN" }, { "name": "Virgin Islands, British", "dial_code": "+1 284", "code": "VG" }, { "name": "Virgin Islands, U.S.", "dial_code": "+1 340", "code": "VI" }, { "name": "Wallis and Futuna", "dial_code": "+681", "code": "WF" }, { "name": "Yemen", "dial_code": "+967", "code": "YE" }, { "name": "Zambia", "dial_code": "+260", "code": "ZM" }, { "name": "Zimbabwe", "dial_code": "+263", "code": "ZW" }];

$j(document).ready(function () {
  $j('.passenger').WT_phone_prefixes('.country-pp', '.phone-pp', '.mobile-pp'); //passenger
  $j('.account-create').WT_phone_prefixes('#country', '#mobile_phone', '#telephone'); //register
  $j('#address_form_container').WT_phone_prefixes('[id*=country_id]', '[id*=telephone]'); //admin
  $j('.customer-account-edit').WT_phone_prefixes('#country', '#mobile_phone', '#telephone'); //admin
});

$j.fn.WT_phone_prefixes = function (country_class, phone_class, mobile_class) {
  "use strict";
  $j(this).each(function () {
    var $this = $j(this),
      country = $j(country_class, $this),
      phone = $j(phone_class, $this),
      mobile = $j(mobile_class, $this),
      phone_and_mobile = $j(phone_class + ',' + mobile_class, $this);
    if (country.length > 0) {
      //sets index on page load
      for (var i = 0; i < country_data.length; i++) {
        if (country.val() && (country_data[i].code).toLowerCase() == country.val().toLowerCase()) {
          if (phone.val() == '') {
            if (phone.intlTelInput) {
              phone.intlTelInput('setNumber', country_data[i].dial_code);
            } else {
              phone.val(country_data[i].dial_code);
            }
          }

          if (mobile.val() == '') {
            if (mobile.intlTelInput) {
              mobile.intlTelInput('setNumber', country_data[i].dial_code);
            } else {
              mobile.val(country_data[i].dial_code);
            }
          }
        }
      }
      //sets prefix before country changes
      country.on('focus', function () {
        for (var i = 0; i < country_data.length; i++) {
          if ($j(this).val() && (country_data[i].code).toLowerCase() == $j(this).val().toLowerCase()) {
            phone_and_mobile.data('prefix', country_data[i].dial_code);
          }
        }

      });
      //does other magic
      country.on('change', function (e) {
        for (var i = 0; i < country_data.length; i++) {
          if ($j(this).val() && (country_data[i].code).toLowerCase() == $j(this).val().toLowerCase()) {
            updatePrefixes(phone);
            updatePrefixes(mobile);
            return;
          }
        }
        function updatePrefixes(el) {
          var val = el.val(),
            str = '',
            prefix = country_data[i].dial_code,
            data_prefix = el.data('prefix');
          if (typeof data_prefix == 'undefined') el.data('prefix', prefix);

          if (typeof val !== 'undefined') {
            if (val != '') {
              str = val.indexOf(data_prefix) > -1
                ? val.replace(data_prefix, prefix)
                : prefix + val;
            } else {
              str = prefix;
            }

            if (el.intlTelInput) {
              el.intlTelInput('setNumber', str);
            } else {
              el.val(str).data('prefix', prefix);
            }
          }
        }
      })
    }
  }
  );
};


window.$j = window.$j || jQuery;
// ==============================================
// Pointer abstraction
// ==============================================

/**
 * This class provides an easy and abstracted mechanism to determine the
 * best pointer behavior to use -- that is, is the user currently interacting
 * with their device in a touch manner, or using a mouse.
 *
 * Since devices may use either touch or mouse or both, there is no way to
 * know the user's preferred pointer type until they interact with the site.
 *
 * To accommodate this, this class provides a method and two events
 * to determine the user's preferred pointer type.
 *
 * - getPointer() returns the last used pointer type, or, if the user has
 *   not yet interacted with the site, falls back to a Modernizr test.
 *
 * - The mouse-detected event is triggered on the window object when the user
 *   is using a mouse pointer input, or has switched from touch to mouse input.
 *   It can be observed in this manner: $j(window).on('mouse-detected', function(event) { // custom code });
 *
 * - The touch-detected event is triggered on the window object when the user
 *   is using touch pointer input, or has switched from mouse to touch input.
 *   It can be observed in this manner: $j(window).on('touch-detected', function(event) { // custom code });
 */
var bp = {
  xsmall: 479,
  small: 599,
  medium: 768,
  large: 960,
  xlarge: 1399,
  xlargesmaller: 1199
}

var PointerManager = {
  MOUSE_POINTER_TYPE: 'mouse',
  TOUCH_POINTER_TYPE: 'touch',
  POINTER_EVENT_TIMEOUT_MS: 500,
  standardTouch: false,
  touchDetectionEvent: null,
  lastTouchType: null,
  pointerTimeout: null,
  pointerEventLock: false,

  getPointerEventsSupported: function () {
    return this.standardTouch;
  },

  getPointerEventsInputTypes: function () {
    if (window.navigator.pointerEnabled) { //IE 11+
      //return string values from http://msdn.microsoft.com/en-us/library/windows/apps/hh466130.aspx
      return {
        MOUSE: 'mouse',
        TOUCH: 'touch',
        PEN: 'pen'
      };
    } else if (window.navigator.msPointerEnabled) { //IE 10
      //return numeric values from http://msdn.microsoft.com/en-us/library/windows/apps/hh466130.aspx
      return {
        MOUSE: 0x00000004,
        TOUCH: 0x00000002,
        PEN: 0x00000003
      };
    } else { //other browsers don't support pointer events
      return {}; //return empty object
    }
  },

  /**
   * If called before init(), get best guess of input pointer type
   * using Modernizr test.
   * If called after init(), get current pointer in use.
   */
  getPointer: function () {
    // On iOS devices, always default to touch, as this.lastTouchType will intermittently return 'mouse' if
    // multiple touches are triggered in rapid succession in Safari on iOS
    if (Modernizr.ios) {
      return this.TOUCH_POINTER_TYPE;
    }

    if (this.lastTouchType) {
      return this.lastTouchType;
    }

    return Modernizr.touch ? this.TOUCH_POINTER_TYPE : this.MOUSE_POINTER_TYPE;
  },

  setPointerEventLock: function () {
    this.pointerEventLock = true;
  },
  clearPointerEventLock: function () {
    this.pointerEventLock = false;
  },
  setPointerEventLockTimeout: function () {
    var that = this;

    if (this.pointerTimeout) {
      clearTimeout(this.pointerTimeout);
    }

    this.setPointerEventLock();
    this.pointerTimeout = setTimeout(function () { that.clearPointerEventLock(); }, this.POINTER_EVENT_TIMEOUT_MS);
  },

  triggerMouseEvent: function (originalEvent) {
    if (this.lastTouchType == this.MOUSE_POINTER_TYPE) {
      return; //prevent duplicate events
    }

    this.lastTouchType = this.MOUSE_POINTER_TYPE;
    $j(window).trigger('mouse-detected', originalEvent);
  },
  triggerTouchEvent: function (originalEvent) {
    if (this.lastTouchType == this.TOUCH_POINTER_TYPE) {
      return; //prevent duplicate events
    }

    this.lastTouchType = this.TOUCH_POINTER_TYPE;
    $j(window).trigger('touch-detected', originalEvent);
  },

  initEnv: function () {
    if (window.navigator.pointerEnabled) {
      this.standardTouch = true;
      this.touchDetectionEvent = 'pointermove';
    } else if (window.navigator.msPointerEnabled) {
      this.standardTouch = true;
      this.touchDetectionEvent = 'MSPointerMove';
    } else {
      this.touchDetectionEvent = 'touchstart';
    }
  },

  wirePointerDetection: function () {
    var that = this;

    if (this.standardTouch) { //standard-based touch events. Wire only one event.
      //detect pointer event
      $j(window).on(this.touchDetectionEvent, function (e) {
        switch (e.originalEvent.pointerType) {
          case that.getPointerEventsInputTypes().MOUSE:
            that.triggerMouseEvent(e);
            break;
          case that.getPointerEventsInputTypes().TOUCH:
          case that.getPointerEventsInputTypes().PEN:
            // intentionally group pen and touch together
            that.triggerTouchEvent(e);
            break;
        }
      });
    } else { //non-standard touch events. Wire touch and mouse competing events.
      //detect first touch
      $j(window).on(this.touchDetectionEvent, function (e) {
        if (that.pointerEventLock) {
          return;
        }

        that.setPointerEventLockTimeout();
        that.triggerTouchEvent(e);
      });

      //detect mouse usage
      $j(document).on('mouseover', function (e) {
        if (that.pointerEventLock) {
          return;
        }

        that.setPointerEventLockTimeout();
        that.triggerMouseEvent(e);
      });
    }
  },

  init: function () {
    this.initEnv();
    this.wirePointerDetection();
  }
};

// ==============================================
// jQuery Init
// ==============================================

// Use $j(document).ready() because Magento executes Prototype inline
$j(document).ready(function () {

  // ==============================================
  // Basic variables
  // ==============================================

  var breakpointMedium = bp.medium;
  var isResponsive = $j('body').hasClass('responsive');

  // ==============================================
  // UI Pattern - ToggleSingle
  // ==============================================

  // Use this plugin to toggle the visibility of content based on a toggle link/element.
  // This pattern differs from the accordion functionality in the Toggle pattern in that each toggle group acts
  // independently of the others. It is named so as not to be confused with the Toggle pattern below
  //
  // This plugin requires a specific markup structure. The plugin expects a set of elements that it
  // will use as the toggle link. It then hides all immediately following siblings and toggles the sibling's
  // visibility when the toggle link is clicked.
  //
  // Example markup:
  // <div class="block">
  //     <div class="block-title">Trigger</div>
  //     <div class="block-content">Content that should show when </div>
  // </div>
  //
  // JS: jQuery('.block-title').toggleSingle();
  //
  // Options:
  //     destruct: defaults to false, but if true, the plugin will remove itself, display content, and remove event handlers

  jQuery.fn.toggleSingle = function (options) {

    // passing destruct: true allows
    var settings = $j.extend({
      destruct: false
    }, options);

    return this.each(function () {
      if (!settings.destruct) {
        $j(this).on('click', function () {
          $j(this)
            .toggleClass('active')
            .next()
            .toggleClass('no-display');
        });
        // Hide the content
        $this = $j(this);
        if (!$this.hasClass('active')) {
          $this.next().addClass('no-display');
        }
        //$j(this).next().addClass('no-display');
      } else {
        // Remove event handler so that the toggle link can no longer be used
        $j(this).off('click');
        // Remove all classes that were added by this plugin
        $j(this)
          .removeClass('active')
          .next()
          .removeClass('no-display');
      }

    });
  }

  // ==============================================
  // UI Pattern - Toggle Content (tabs and accordions in one setup)
  // ==============================================

  $j('.toggle-content').each(function () {
    var wrapper = jQuery(this);

    var hasTabs = wrapper.hasClass('tabs');
    var hasAccordion = wrapper.hasClass('accordion');
    var startOpen = wrapper.hasClass('open');

    var dl = wrapper.children('dl:first');
    var dts = dl.children('dt');
    var panes = dl.children('dd');
    var groups = new Array(dts, panes);

    //Create a ul for tabs if necessary.
    if (hasTabs) {
      var ul = jQuery('<ul class="toggle-tabs"></ul>');
      dts.each(function () {
        var dt = jQuery(this);
        var li = jQuery('<li></li>');
        li.html(dt.html());
        ul.append(li);
      });
      ul.insertBefore(dl);
      var lis = ul.children();
      groups.push(lis);
    }

    //Add "last" classes.
    var i;
    for (i = 0; i < groups.length; i++) {
      groups[i].filter(':last').addClass('last');
    }

    function toggleClasses(clickedItem, group) {
      var index = group.index(clickedItem);
      var i;
      for (i = 0; i < groups.length; i++) {
        groups[i].removeClass('current');
        groups[i].eq(index).addClass('current');
      }
    }

    //Toggle on tab (dt) click.
    dts.on('click', function (e) {
      //They clicked the current dt to close it. Restore the wrapper to unclicked state.
      if (jQuery(this).hasClass('current') && wrapper.hasClass('accordion-open')) {
        wrapper.removeClass('accordion-open');
      } else {
        //They're clicking something new. Reflect the explicit user interaction.
        wrapper.addClass('accordion-open');
      }
      toggleClasses(jQuery(this), dts);
    });

    //Toggle on tab (li) click.
    if (hasTabs) {
      lis.on('click', function (e) {
        toggleClasses(jQuery(this), lis);
      });
      //Open the first tab.
      lis.eq(0).trigger('click');
    }

    //Open the first accordion if desired.
    if (startOpen) {
      dts.eq(0).trigger('click');
    }

  });

  // ==============================================
  // Layered Navigation Block
  // ==============================================

  // On product list pages, we want to show the layered nav/category menu immediately above the product list
  if (isResponsive) {
    if ($j('.block-layered-nav').length && $j('.category-products').length) {
      enquire.register('screen and (max-width: ' + (breakpointMedium - 1) + 'px)', {
        match: function () {
          $j('.block-layered-nav').insertBefore($j('.category-products'))
        },
        unmatch: function () {
          // Move layered nav back to left column
          $j('.block-layered-nav').insertAfter($j('#layered-nav-marker'))
        }
      });
    }
  }

  // ==============================================
  // Blocks collapsing (on smaller viewports)
  // ==============================================

  if (isResponsive) {
    enquire.register('(max-width: ' + (breakpointMedium - 1) + 'px)', {
      setup: function () {
        this.toggleElements = $j(
          '.sidebar .block:not(.block-layered-nav) .block-title, ' +
          '.block-layered-nav .block-subtitle--filter, ' +
          //'.block-layered-nav .block-title, ' + //Currently this element is hidden in mobile view
          '.mobile-collapsible .block-title'
        );
      },
      match: function () {
        this.toggleElements.toggleSingle();
      },
      unmatch: function () {
        this.toggleElements.toggleSingle({ destruct: true });
      }
    });
  }

  // ==============================================
  // Blocks collapsing on all viewports
  // ==============================================

  //Exclude elements with ".mobile-collapsible" for backward compatibility
  $j('.collapsible:not(.mobile-collapsible) .block-title').toggleSingle();


}); //end: on document ready

// ==============================================
// PDP - image zoom - needs to be available outside document.ready scope
// ==============================================

var ProductMediaManager = {
  IMAGE_ZOOM_THRESHOLD: 20,
  imageWrapper: null,

  destroyZoom: function () {
    //Custom modification. Code not needed if elevateZoom plugin not being used.
    //$j('.zoomContainer').remove();
    //$j('.product-image-gallery .gallery-image').removeData('elevateZoom');
  },

  createZoom: function (image) {
    // Destroy since zoom shouldn't be enabled under certain conditions
    ProductMediaManager.destroyZoom();

    //Custom modification
    //To use this part, required: PointerManager, Modernizr.mq, bp variable
    /*
    if(
        // Don't use zoom on devices where touch has been used
        PointerManager.getPointer() == PointerManager.TOUCH_POINTER_TYPE
        // Don't use zoom when screen is small, or else zoom window shows outside body
        || Modernizr.mq("screen and (max-width:" + bp.medium + "px)")
    ) {
        return; // zoom not enabled
    }
    */

    if (image.length <= 0) { //no image found
      return;
    }

    if (image[0].naturalWidth && image[0].naturalHeight) {
      var widthDiff = image[0].naturalWidth - image.width() - ProductMediaManager.IMAGE_ZOOM_THRESHOLD;
      var heightDiff = image[0].naturalHeight - image.height() - ProductMediaManager.IMAGE_ZOOM_THRESHOLD;

      if (widthDiff < 0 && heightDiff < 0) {
        //image not big enough

        image.parents('.product-image').removeClass('zoom-available');

        return;
      } else {
        image.parents('.product-image').addClass('zoom-available');
      }
    }

    //Custom modification. Code not needed if elevateZoom plugin not being used.
    //image.elevateZoom();
  },

  swapImage: function (targetImage) {
    targetImage = $j(targetImage);
    targetImage.addClass('gallery-image');

    //Custom modification. Code not needed if elevateZoom plugin not being used.
    //ProductMediaManager.destroyZoom();

    var imageGallery = $j('.product-image-gallery');

    if (targetImage[0].complete) { //image already loaded -- swap immediately

      imageGallery.find('.gallery-image').removeClass('visible');

      //move target image to correct place, in case it's necessary
      imageGallery.append(targetImage);

      //reveal new image
      targetImage.addClass('visible');

      //Custom modification. Code not needed if elevateZoom plugin not being used.
      //wire zoom on new image
      //ProductMediaManager.createZoom(targetImage);

      //Custom modification
      //Trigger event to know when image was changed
      $j(document).trigger('product-media-manager-image-updated', { img: targetImage });

    } else { //need to wait for image to load

      //add spinner
      imageGallery.addClass('loading');

      //move target image to correct place, in case it's necessary
      imageGallery.append(targetImage);

      //wait until image is loaded
      imagesLoaded(targetImage, function () {
        //remove spinner
        imageGallery.removeClass('loading');

        //hide old image
        imageGallery.find('.gallery-image').removeClass('visible');

        //reveal new image
        targetImage.addClass('visible');

        //Custom modification. Code not needed if elevateZoom plugin not being used.
        //wire zoom on new image
        //ProductMediaManager.createZoom(targetImage);

        //Custom modification
        //Trigger event to know when image was changed
        $j(document).trigger('product-media-manager-image-updated', { img: targetImage });
      });

    }
  },

  wireThumbnails: function () {
    //Custom modification. Code not needed if elevateZoom plugin not being used.
    /*
    //trigger image change event on thumbnail click
    $j('.product-image-thumbs .thumb-link').click(function(e) {
        e.preventDefault();
        var jlink = $j(this);
        var target = $j('#image-' + jlink.data('image-index'));

        ProductMediaManager.swapImage(target);
    });
    */
  },

  initZoom: function () {
    //Custom modification. Code not needed if elevateZoom plugin not being used.
    //ProductMediaManager.createZoom($j(".gallery-image.visible")); //set zoom on first image
  },

  init: function () {

    //Custom modification. Code not needed if elevateZoom plugin not being used.
    /*
    ProductMediaManager.imageWrapper = $j('.product-img-box');

    // Re-initialize zoom on viewport size change since resizing causes problems with zoom and since smaller
    // viewport sizes shouldn't have zoom
    $j(window).on('delayed-resize', function(e, resizeEvent) {
        ProductMediaManager.initZoom();
    });

    ProductMediaManager.initZoom();

    ProductMediaManager.wireThumbnails();
    */

    $j(document).trigger('product-media-loaded', ProductMediaManager);
  }
};

$j(document).ready(function () {
  ProductMediaManager.init();
});

/*! jQuery UI - v1.11.4 - 2016-04-04
* http://jqueryui.com
* Includes: core.js, widget.js, mouse.js, datepicker.js, slider.js, effect.js, effect-blind.js, effect-bounce.js, effect-clip.js, effect-drop.js, effect-explode.js, effect-fade.js, effect-fold.js, effect-highlight.js, effect-puff.js, effect-pulsate.js, effect-scale.js, effect-shake.js, effect-size.js, effect-slide.js, effect-transfer.js
* Copyright jQuery Foundation and other contributors; Licensed MIT */

(function (e) { "function" == typeof define && define.amd ? define(["jquery"], e) : e(jQuery) })(function (e) {
  function t(t, s) { var n, a, o, r = t.nodeName.toLowerCase(); return "area" === r ? (n = t.parentNode, a = n.name, t.href && a && "map" === n.nodeName.toLowerCase() ? (o = e("img[usemap='#" + a + "']")[0], !!o && i(o)) : !1) : (/^(input|select|textarea|button|object)$/.test(r) ? !t.disabled : "a" === r ? t.href || s : s) && i(t) } function i(t) { return e.expr.filters.visible(t) && !e(t).parents().addBack().filter(function () { return "hidden" === e.css(this, "visibility") }).length } function s(e) { for (var t, i; e.length && e[0] !== document;) { if (t = e.css("position"), ("absolute" === t || "relative" === t || "fixed" === t) && (i = parseInt(e.css("zIndex"), 10), !isNaN(i) && 0 !== i)) return i; e = e.parent() } return 0 } function n() { this._curInst = null, this._keyEvent = !1, this._disabledInputs = [], this._datepickerShowing = !1, this._inDialog = !1, this._mainDivId = "ui-datepicker-div", this._inlineClass = "ui-datepicker-inline", this._appendClass = "ui-datepicker-append", this._triggerClass = "ui-datepicker-trigger", this._dialogClass = "ui-datepicker-dialog", this._disableClass = "ui-datepicker-disabled", this._unselectableClass = "ui-datepicker-unselectable", this._currentClass = "ui-datepicker-current-day", this._dayOverClass = "ui-datepicker-days-cell-over", this.regional = [], this.regional[""] = { closeText: "Done", prevText: "Prev", nextText: "Next", currentText: "Today", monthNames: ["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"], monthNamesShort: ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"], dayNames: ["Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"], dayNamesShort: ["Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"], dayNamesMin: ["Su", "Mo", "Tu", "We", "Th", "Fr", "Sa"], weekHeader: "Wk", dateFormat: "mm/dd/yy", firstDay: 0, isRTL: !1, showMonthAfterYear: !1, yearSuffix: "" }, this._defaults = { showOn: "focus", showAnim: "fadeIn", showOptions: {}, defaultDate: null, appendText: "", buttonText: "...", buttonImage: "", buttonImageOnly: !1, hideIfNoPrevNext: !1, navigationAsDateFormat: !1, gotoCurrent: !1, changeMonth: !1, changeYear: !1, yearRange: "c-10:c+10", showOtherMonths: !1, selectOtherMonths: !1, showWeek: !1, calculateWeek: this.iso8601Week, shortYearCutoff: "+10", minDate: null, maxDate: null, duration: "fast", beforeShowDay: null, beforeShow: null, onSelect: null, onChangeMonthYear: null, onClose: null, numberOfMonths: 1, showCurrentAtPos: 0, stepMonths: 1, stepBigMonths: 12, altField: "", altFormat: "", constrainInput: !0, showButtonPanel: !1, autoSize: !1, disabled: !1 }, e.extend(this._defaults, this.regional[""]), this.regional.en = e.extend(!0, {}, this.regional[""]), this.regional["en-US"] = e.extend(!0, {}, this.regional.en), this.dpDiv = a(e("<div id='" + this._mainDivId + "' class='ui-datepicker ui-widget ui-widget-content ui-helper-clearfix ui-corner-all'></div>")) } function a(t) { var iOS = /iPad|iPhone|iPod/.test(navigator.userAgent) && !window.MSStream; var i = iOS ? "button, .ui-datepicker-prev, .ui-datepicker-next" : "button, .ui-datepicker-prev, .ui-datepicker-next, .ui-datepicker-calendar td a"; return t.delegate(i, "mouseout", function () { e(this).removeClass("ui-state-hover"), -1 !== this.className.indexOf("ui-datepicker-prev") && e(this).removeClass("ui-datepicker-prev-hover"), -1 !== this.className.indexOf("ui-datepicker-next") && e(this).removeClass("ui-datepicker-next-hover") }).delegate(i, "mouseover", o) } function o() { e.datepicker._isDisabledDatepicker(c.inline ? c.dpDiv.parent()[0] : c.input[0]) || (e(this).parents(".ui-datepicker-calendar").find("a").removeClass("ui-state-hover"), e(this).addClass("ui-state-hover"), -1 !== this.className.indexOf("ui-datepicker-prev") && e(this).addClass("ui-datepicker-prev-hover"), -1 !== this.className.indexOf("ui-datepicker-next") && e(this).addClass("ui-datepicker-next-hover")) } function r(t, i) { e.extend(t, i); for (var s in i) null == i[s] && (t[s] = i[s]); return t } e.ui = e.ui || {}, e.extend(e.ui, { version: "1.11.4", keyCode: { BACKSPACE: 8, COMMA: 188, DELETE: 46, DOWN: 40, END: 35, ENTER: 13, ESCAPE: 27, HOME: 36, LEFT: 37, PAGE_DOWN: 34, PAGE_UP: 33, PERIOD: 190, RIGHT: 39, SPACE: 32, TAB: 9, UP: 38 } }), e.fn.extend({ scrollParent: function (t) { var i = this.css("position"), s = "absolute" === i, n = t ? /(auto|scroll|hidden)/ : /(auto|scroll)/, a = this.parents().filter(function () { var t = e(this); return s && "static" === t.css("position") ? !1 : n.test(t.css("overflow") + t.css("overflow-y") + t.css("overflow-x")) }).eq(0); return "fixed" !== i && a.length ? a : e(this[0].ownerDocument || document) }, uniqueId: function () { var e = 0; return function () { return this.each(function () { this.id || (this.id = "ui-id-" + ++e) }) } }(), removeUniqueId: function () { return this.each(function () { /^ui-id-\d+$/.test(this.id) && e(this).removeAttr("id") }) } }), e.extend(e.expr[":"], { data: e.expr.createPseudo ? e.expr.createPseudo(function (t) { return function (i) { return !!e.data(i, t) } }) : function (t, i, s) { return !!e.data(t, s[3]) }, focusable: function (i) { return t(i, !isNaN(e.attr(i, "tabindex"))) }, tabbable: function (i) { var s = e.attr(i, "tabindex"), n = isNaN(s); return (n || s >= 0) && t(i, !n) } }), e("<a>").outerWidth(1).jquery || e.each(["Width", "Height"], function (t, i) { function s(t, i, s, a) { return e.each(n, function () { i -= parseFloat(e.css(t, "padding" + this)) || 0, s && (i -= parseFloat(e.css(t, "border" + this + "Width")) || 0), a && (i -= parseFloat(e.css(t, "margin" + this)) || 0) }), i } var n = "Width" === i ? ["Left", "Right"] : ["Top", "Bottom"], a = i.toLowerCase(), o = { innerWidth: e.fn.innerWidth, innerHeight: e.fn.innerHeight, outerWidth: e.fn.outerWidth, outerHeight: e.fn.outerHeight }; e.fn["inner" + i] = function (t) { return void 0 === t ? o["inner" + i].call(this) : this.each(function () { e(this).css(a, s(this, t) + "px") }) }, e.fn["outer" + i] = function (t, n) { return "number" != typeof t ? o["outer" + i].call(this, t) : this.each(function () { e(this).css(a, s(this, t, !0, n) + "px") }) } }), e.fn.addBack || (e.fn.addBack = function (e) { return this.add(null == e ? this.prevObject : this.prevObject.filter(e)) }), e("<a>").data("a-b", "a").removeData("a-b").data("a-b") && (e.fn.removeData = function (t) { return function (i) { return arguments.length ? t.call(this, e.camelCase(i)) : t.call(this) } }(e.fn.removeData)), e.ui.ie = !!/msie [\w.]+/.exec(navigator.userAgent.toLowerCase()), e.fn.extend({ focus: function (t) { return function (i, s) { return "number" == typeof i ? this.each(function () { var t = this; setTimeout(function () { e(t).focus(), s && s.call(t) }, i) }) : t.apply(this, arguments) } }(e.fn.focus), disableSelection: function () { var e = "onselectstart" in document.createElement("div") ? "selectstart" : "mousedown"; return function () { return this.bind(e + ".ui-disableSelection", function (e) { e.preventDefault() }) } }(), enableSelection: function () { return this.unbind(".ui-disableSelection") }, zIndex: function (t) { if (void 0 !== t) return this.css("zIndex", t); if (this.length) for (var i, s, n = e(this[0]); n.length && n[0] !== document;) { if (i = n.css("position"), ("absolute" === i || "relative" === i || "fixed" === i) && (s = parseInt(n.css("zIndex"), 10), !isNaN(s) && 0 !== s)) return s; n = n.parent() } return 0 } }), e.ui.plugin = { add: function (t, i, s) { var n, a = e.ui[t].prototype; for (n in s) a.plugins[n] = a.plugins[n] || [], a.plugins[n].push([i, s[n]]) }, call: function (e, t, i, s) { var n, a = e.plugins[t]; if (a && (s || e.element[0].parentNode && 11 !== e.element[0].parentNode.nodeType)) for (n = 0; a.length > n; n++)e.options[a[n][0]] && a[n][1].apply(e.element, i) } }; var h = 0, l = Array.prototype.slice; e.cleanData = function (t) { return function (i) { var s, n, a; for (a = 0; null != (n = i[a]); a++)try { s = e._data(n, "events"), s && s.remove && e(n).triggerHandler("remove") } catch (o) { } t(i) } }(e.cleanData), e.widget = function (t, i, s) { var n, a, o, r, h = {}, l = t.split(".")[0]; return t = t.split(".")[1], n = l + "-" + t, s || (s = i, i = e.Widget), e.expr[":"][n.toLowerCase()] = function (t) { return !!e.data(t, n) }, e[l] = e[l] || {}, a = e[l][t], o = e[l][t] = function (e, t) { return this._createWidget ? (arguments.length && this._createWidget(e, t), void 0) : new o(e, t) }, e.extend(o, a, { version: s.version, _proto: e.extend({}, s), _childConstructors: [] }), r = new i, r.options = e.widget.extend({}, r.options), e.each(s, function (t, s) { return e.isFunction(s) ? (h[t] = function () { var e = function () { return i.prototype[t].apply(this, arguments) }, n = function (e) { return i.prototype[t].apply(this, e) }; return function () { var t, i = this._super, a = this._superApply; return this._super = e, this._superApply = n, t = s.apply(this, arguments), this._super = i, this._superApply = a, t } }(), void 0) : (h[t] = s, void 0) }), o.prototype = e.widget.extend(r, { widgetEventPrefix: a ? r.widgetEventPrefix || t : t }, h, { constructor: o, namespace: l, widgetName: t, widgetFullName: n }), a ? (e.each(a._childConstructors, function (t, i) { var s = i.prototype; e.widget(s.namespace + "." + s.widgetName, o, i._proto) }), delete a._childConstructors) : i._childConstructors.push(o), e.widget.bridge(t, o), o }, e.widget.extend = function (t) { for (var i, s, n = l.call(arguments, 1), a = 0, o = n.length; o > a; a++)for (i in n[a]) s = n[a][i], n[a].hasOwnProperty(i) && void 0 !== s && (t[i] = e.isPlainObject(s) ? e.isPlainObject(t[i]) ? e.widget.extend({}, t[i], s) : e.widget.extend({}, s) : s); return t }, e.widget.bridge = function (t, i) { var s = i.prototype.widgetFullName || t; e.fn[t] = function (n) { var a = "string" == typeof n, o = l.call(arguments, 1), r = this; return a ? this.each(function () { var i, a = e.data(this, s); return "instance" === n ? (r = a, !1) : a ? e.isFunction(a[n]) && "_" !== n.charAt(0) ? (i = a[n].apply(a, o), i !== a && void 0 !== i ? (r = i && i.jquery ? r.pushStack(i.get()) : i, !1) : void 0) : e.error("no such method '" + n + "' for " + t + " widget instance") : e.error("cannot call methods on " + t + " prior to initialization; " + "attempted to call method '" + n + "'") }) : (o.length && (n = e.widget.extend.apply(null, [n].concat(o))), this.each(function () { var t = e.data(this, s); t ? (t.option(n || {}), t._init && t._init()) : e.data(this, s, new i(n, this)) })), r } }, e.Widget = function () { }, e.Widget._childConstructors = [], e.Widget.prototype = { widgetName: "widget", widgetEventPrefix: "", defaultElement: "<div>", options: { disabled: !1, create: null }, _createWidget: function (t, i) { i = e(i || this.defaultElement || this)[0], this.element = e(i), this.uuid = h++, this.eventNamespace = "." + this.widgetName + this.uuid, this.bindings = e(), this.hoverable = e(), this.focusable = e(), i !== this && (e.data(i, this.widgetFullName, this), this._on(!0, this.element, { remove: function (e) { e.target === i && this.destroy() } }), this.document = e(i.style ? i.ownerDocument : i.document || i), this.window = e(this.document[0].defaultView || this.document[0].parentWindow)), this.options = e.widget.extend({}, this.options, this._getCreateOptions(), t), this._create(), this._trigger("create", null, this._getCreateEventData()), this._init() }, _getCreateOptions: e.noop, _getCreateEventData: e.noop, _create: e.noop, _init: e.noop, destroy: function () { this._destroy(), this.element.unbind(this.eventNamespace).removeData(this.widgetFullName).removeData(e.camelCase(this.widgetFullName)), this.widget().unbind(this.eventNamespace).removeAttr("aria-disabled").removeClass(this.widgetFullName + "-disabled " + "ui-state-disabled"), this.bindings.unbind(this.eventNamespace), this.hoverable.removeClass("ui-state-hover"), this.focusable.removeClass("ui-state-focus") }, _destroy: e.noop, widget: function () { return this.element }, option: function (t, i) { var s, n, a, o = t; if (0 === arguments.length) return e.widget.extend({}, this.options); if ("string" == typeof t) if (o = {}, s = t.split("."), t = s.shift(), s.length) { for (n = o[t] = e.widget.extend({}, this.options[t]), a = 0; s.length - 1 > a; a++)n[s[a]] = n[s[a]] || {}, n = n[s[a]]; if (t = s.pop(), 1 === arguments.length) return void 0 === n[t] ? null : n[t]; n[t] = i } else { if (1 === arguments.length) return void 0 === this.options[t] ? null : this.options[t]; o[t] = i } return this._setOptions(o), this }, _setOptions: function (e) { var t; for (t in e) this._setOption(t, e[t]); return this }, _setOption: function (e, t) { return this.options[e] = t, "disabled" === e && (this.widget().toggleClass(this.widgetFullName + "-disabled", !!t), t && (this.hoverable.removeClass("ui-state-hover"), this.focusable.removeClass("ui-state-focus"))), this }, enable: function () { return this._setOptions({ disabled: !1 }) }, disable: function () { return this._setOptions({ disabled: !0 }) }, _on: function (t, i, s) { var n, a = this; "boolean" != typeof t && (s = i, i = t, t = !1), s ? (i = n = e(i), this.bindings = this.bindings.add(i)) : (s = i, i = this.element, n = this.widget()), e.each(s, function (s, o) { function r() { return t || a.options.disabled !== !0 && !e(this).hasClass("ui-state-disabled") ? ("string" == typeof o ? a[o] : o).apply(a, arguments) : void 0 } "string" != typeof o && (r.guid = o.guid = o.guid || r.guid || e.guid++); var h = s.match(/^([\w:-]*)\s*(.*)$/), l = h[1] + a.eventNamespace, u = h[2]; u ? n.delegate(u, l, r) : i.bind(l, r) }) }, _off: function (t, i) { i = (i || "").split(" ").join(this.eventNamespace + " ") + this.eventNamespace, t.unbind(i).undelegate(i), this.bindings = e(this.bindings.not(t).get()), this.focusable = e(this.focusable.not(t).get()), this.hoverable = e(this.hoverable.not(t).get()) }, _delay: function (e, t) { function i() { return ("string" == typeof e ? s[e] : e).apply(s, arguments) } var s = this; return setTimeout(i, t || 0) }, _hoverable: function (t) { this.hoverable = this.hoverable.add(t), this._on(t, { mouseenter: function (t) { e(t.currentTarget).addClass("ui-state-hover") }, mouseleave: function (t) { e(t.currentTarget).removeClass("ui-state-hover") } }) }, _focusable: function (t) { this.focusable = this.focusable.add(t), this._on(t, { focusin: function (t) { e(t.currentTarget).addClass("ui-state-focus") }, focusout: function (t) { e(t.currentTarget).removeClass("ui-state-focus") } }) }, _trigger: function (t, i, s) { var n, a, o = this.options[t]; if (s = s || {}, i = e.Event(i), i.type = (t === this.widgetEventPrefix ? t : this.widgetEventPrefix + t).toLowerCase(), i.target = this.element[0], a = i.originalEvent) for (n in a) n in i || (i[n] = a[n]); return this.element.trigger(i, s), !(e.isFunction(o) && o.apply(this.element[0], [i].concat(s)) === !1 || i.isDefaultPrevented()) } }, e.each({ show: "fadeIn", hide: "fadeOut" }, function (t, i) { e.Widget.prototype["_" + t] = function (s, n, a) { "string" == typeof n && (n = { effect: n }); var o, r = n ? n === !0 || "number" == typeof n ? i : n.effect || i : t; n = n || {}, "number" == typeof n && (n = { duration: n }), o = !e.isEmptyObject(n), n.complete = a, n.delay && s.delay(n.delay), o && e.effects && e.effects.effect[r] ? s[t](n) : r !== t && s[r] ? s[r](n.duration, n.easing, a) : s.queue(function (i) { e(this)[t](), a && a.call(s[0]), i() }) } }), e.widget; var u = !1; e(document).mouseup(function () { u = !1 }), e.widget("ui.mouse", { version: "1.11.4", options: { cancel: "input,textarea,button,select,option", distance: 1, delay: 0 }, _mouseInit: function () { var t = this; this.element.bind("mousedown." + this.widgetName, function (e) { return t._mouseDown(e) }).bind("click." + this.widgetName, function (i) { return !0 === e.data(i.target, t.widgetName + ".preventClickEvent") ? (e.removeData(i.target, t.widgetName + ".preventClickEvent"), i.stopImmediatePropagation(), !1) : void 0 }), this.started = !1 }, _mouseDestroy: function () { this.element.unbind("." + this.widgetName), this._mouseMoveDelegate && this.document.unbind("mousemove." + this.widgetName, this._mouseMoveDelegate).unbind("mouseup." + this.widgetName, this._mouseUpDelegate) }, _mouseDown: function (t) { if (!u) { this._mouseMoved = !1, this._mouseStarted && this._mouseUp(t), this._mouseDownEvent = t; var i = this, s = 1 === t.which, n = "string" == typeof this.options.cancel && t.target.nodeName ? e(t.target).closest(this.options.cancel).length : !1; return s && !n && this._mouseCapture(t) ? (this.mouseDelayMet = !this.options.delay, this.mouseDelayMet || (this._mouseDelayTimer = setTimeout(function () { i.mouseDelayMet = !0 }, this.options.delay)), this._mouseDistanceMet(t) && this._mouseDelayMet(t) && (this._mouseStarted = this._mouseStart(t) !== !1, !this._mouseStarted) ? (t.preventDefault(), !0) : (!0 === e.data(t.target, this.widgetName + ".preventClickEvent") && e.removeData(t.target, this.widgetName + ".preventClickEvent"), this._mouseMoveDelegate = function (e) { return i._mouseMove(e) }, this._mouseUpDelegate = function (e) { return i._mouseUp(e) }, this.document.bind("mousemove." + this.widgetName, this._mouseMoveDelegate).bind("mouseup." + this.widgetName, this._mouseUpDelegate), t.preventDefault(), u = !0, !0)) : !0 } }, _mouseMove: function (t) { if (this._mouseMoved) { if (e.ui.ie && (!document.documentMode || 9 > document.documentMode) && !t.button) return this._mouseUp(t); if (!t.which) return this._mouseUp(t) } return (t.which || t.button) && (this._mouseMoved = !0), this._mouseStarted ? (this._mouseDrag(t), t.preventDefault()) : (this._mouseDistanceMet(t) && this._mouseDelayMet(t) && (this._mouseStarted = this._mouseStart(this._mouseDownEvent, t) !== !1, this._mouseStarted ? this._mouseDrag(t) : this._mouseUp(t)), !this._mouseStarted) }, _mouseUp: function (t) { return this.document.unbind("mousemove." + this.widgetName, this._mouseMoveDelegate).unbind("mouseup." + this.widgetName, this._mouseUpDelegate), this._mouseStarted && (this._mouseStarted = !1, t.target === this._mouseDownEvent.target && e.data(t.target, this.widgetName + ".preventClickEvent", !0), this._mouseStop(t)), u = !1, !1 }, _mouseDistanceMet: function (e) { return Math.max(Math.abs(this._mouseDownEvent.pageX - e.pageX), Math.abs(this._mouseDownEvent.pageY - e.pageY)) >= this.options.distance }, _mouseDelayMet: function () { return this.mouseDelayMet }, _mouseStart: function () { }, _mouseDrag: function () { }, _mouseStop: function () { }, _mouseCapture: function () { return !0 } }), e.extend(e.ui, { datepicker: { version: "1.11.4" } }); var c; e.extend(n.prototype, {
    markerClassName: "hasDatepicker", maxRows: 4, _widgetDatepicker: function () { return this.dpDiv }, setDefaults: function (e) { return r(this._defaults, e || {}), this }, _attachDatepicker: function (t, i) { var s, n, a; s = t.nodeName.toLowerCase(), n = "div" === s || "span" === s, t.id || (this.uuid += 1, t.id = "dp" + this.uuid), a = this._newInst(e(t), n), a.settings = e.extend({}, i || {}), "input" === s ? this._connectDatepicker(t, a) : n && this._inlineDatepicker(t, a) }, _newInst: function (t, i) { var s = t[0].id.replace(/([^A-Za-z0-9_\-])/g, "\\\\$1"); return { id: s, input: t, selectedDay: 0, selectedMonth: 0, selectedYear: 0, drawMonth: 0, drawYear: 0, inline: i, dpDiv: i ? a(e("<div class='" + this._inlineClass + " ui-datepicker ui-widget ui-widget-content ui-helper-clearfix ui-corner-all'></div>")) : this.dpDiv } }, _connectDatepicker: function (t, i) { var s = e(t); i.append = e([]), i.trigger = e([]), s.hasClass(this.markerClassName) || (this._attachments(s, i), s.addClass(this.markerClassName).keydown(this._doKeyDown).keypress(this._doKeyPress).keyup(this._doKeyUp), this._autoSize(i), e.data(t, "datepicker", i), i.settings.disabled && this._disableDatepicker(t)) }, _attachments: function (t, i) { var s, n, a, o = this._get(i, "appendText"), r = this._get(i, "isRTL"); i.append && i.append.remove(), o && (i.append = e("<span class='" + this._appendClass + "'>" + o + "</span>"), t[r ? "before" : "after"](i.append)), t.unbind("focus", this._showDatepicker), i.trigger && i.trigger.remove(), s = this._get(i, "showOn"), ("focus" === s || "both" === s) && t.focus(this._showDatepicker), ("button" === s || "both" === s) && (n = this._get(i, "buttonText"), a = this._get(i, "buttonImage"), i.trigger = e(this._get(i, "buttonImageOnly") ? e("<img/>").addClass(this._triggerClass).attr({ src: a, alt: n, title: n }) : e("<button type='button'></button>").addClass(this._triggerClass).html(a ? e("<img/>").attr({ src: a, alt: n, title: n }) : n)), t[r ? "before" : "after"](i.trigger), i.trigger.click(function () { return e.datepicker._datepickerShowing && e.datepicker._lastInput === t[0] ? e.datepicker._hideDatepicker() : e.datepicker._datepickerShowing && e.datepicker._lastInput !== t[0] ? (e.datepicker._hideDatepicker(), e.datepicker._showDatepicker(t[0])) : e.datepicker._showDatepicker(t[0]), !1 })) }, _autoSize: function (e) { if (this._get(e, "autoSize") && !e.inline) { var t, i, s, n, a = new Date(2009, 11, 20), o = this._get(e, "dateFormat"); o.match(/[DM]/) && (t = function (e) { for (i = 0, s = 0, n = 0; e.length > n; n++)e[n].length > i && (i = e[n].length, s = n); return s }, a.setMonth(t(this._get(e, o.match(/MM/) ? "monthNames" : "monthNamesShort"))), a.setDate(t(this._get(e, o.match(/DD/) ? "dayNames" : "dayNamesShort")) + 20 - a.getDay())), e.input.attr("size", this._formatDate(e, a).length) } }, _inlineDatepicker: function (t, i) { var s = e(t); s.hasClass(this.markerClassName) || (s.addClass(this.markerClassName).append(i.dpDiv), e.data(t, "datepicker", i), this._setDate(i, this._getDefaultDate(i), !0), this._updateDatepicker(i), this._updateAlternate(i), i.settings.disabled && this._disableDatepicker(t), i.dpDiv.css("display", "block")) }, _dialogDatepicker: function (t, i, s, n, a) { var o, h, l, u, c, d = this._dialogInst; return d || (this.uuid += 1, o = "dp" + this.uuid, this._dialogInput = e("<input type='text' id='" + o + "' style='position: absolute; top: -100px; width: 0px;'/>"), this._dialogInput.keydown(this._doKeyDown), e("body").append(this._dialogInput), d = this._dialogInst = this._newInst(this._dialogInput, !1), d.settings = {}, e.data(this._dialogInput[0], "datepicker", d)), r(d.settings, n || {}), i = i && i.constructor === Date ? this._formatDate(d, i) : i, this._dialogInput.val(i), this._pos = a ? a.length ? a : [a.pageX, a.pageY] : null, this._pos || (h = document.documentElement.clientWidth, l = document.documentElement.clientHeight, u = document.documentElement.scrollLeft || document.body.scrollLeft, c = document.documentElement.scrollTop || document.body.scrollTop, this._pos = [h / 2 - 100 + u, l / 2 - 150 + c]), this._dialogInput.css("left", this._pos[0] + 20 + "px").css("top", this._pos[1] + "px"), d.settings.onSelect = s, this._inDialog = !0, this.dpDiv.addClass(this._dialogClass), this._showDatepicker(this._dialogInput[0]), e.blockUI && e.blockUI(this.dpDiv), e.data(this._dialogInput[0], "datepicker", d), this }, _destroyDatepicker: function (t) { var i, s = e(t), n = e.data(t, "datepicker"); s.hasClass(this.markerClassName) && (i = t.nodeName.toLowerCase(), e.removeData(t, "datepicker"), "input" === i ? (n.append.remove(), n.trigger.remove(), s.removeClass(this.markerClassName).unbind("focus", this._showDatepicker).unbind("keydown", this._doKeyDown).unbind("keypress", this._doKeyPress).unbind("keyup", this._doKeyUp)) : ("div" === i || "span" === i) && s.removeClass(this.markerClassName).empty(), c === n && (c = null)) }, _enableDatepicker: function (t) { var i, s, n = e(t), a = e.data(t, "datepicker"); n.hasClass(this.markerClassName) && (i = t.nodeName.toLowerCase(), "input" === i ? (t.disabled = !1, a.trigger.filter("button").each(function () { this.disabled = !1 }).end().filter("img").css({ opacity: "1.0", cursor: "" })) : ("div" === i || "span" === i) && (s = n.children("." + this._inlineClass), s.children().removeClass("ui-state-disabled"), s.find("select.ui-datepicker-month, select.ui-datepicker-year").prop("disabled", !1)), this._disabledInputs = e.map(this._disabledInputs, function (e) { return e === t ? null : e })) }, _disableDatepicker: function (t) { var i, s, n = e(t), a = e.data(t, "datepicker"); n.hasClass(this.markerClassName) && (i = t.nodeName.toLowerCase(), "input" === i ? (t.disabled = !0, a.trigger.filter("button").each(function () { this.disabled = !0 }).end().filter("img").css({ opacity: "0.5", cursor: "default" })) : ("div" === i || "span" === i) && (s = n.children("." + this._inlineClass), s.children().addClass("ui-state-disabled"), s.find("select.ui-datepicker-month, select.ui-datepicker-year").prop("disabled", !0)), this._disabledInputs = e.map(this._disabledInputs, function (e) { return e === t ? null : e }), this._disabledInputs[this._disabledInputs.length] = t) }, _isDisabledDatepicker: function (e) { if (!e) return !1; for (var t = 0; this._disabledInputs.length > t; t++)if (this._disabledInputs[t] === e) return !0; return !1 }, _getInst: function (t) { try { return e.data(t, "datepicker") } catch (i) { throw "Missing instance data for this datepicker" } }, _optionDatepicker: function (t, i, s) { var n, a, o, h, l = this._getInst(t); return 2 === arguments.length && "string" == typeof i ? "defaults" === i ? e.extend({}, e.datepicker._defaults) : l ? "all" === i ? e.extend({}, l.settings) : this._get(l, i) : null : (n = i || {}, "string" == typeof i && (n = {}, n[i] = s), l && (this._curInst === l && this._hideDatepicker(), a = this._getDateDatepicker(t, !0), o = this._getMinMaxDate(l, "min"), h = this._getMinMaxDate(l, "max"), r(l.settings, n), null !== o && void 0 !== n.dateFormat && void 0 === n.minDate && (l.settings.minDate = this._formatDate(l, o)), null !== h && void 0 !== n.dateFormat && void 0 === n.maxDate && (l.settings.maxDate = this._formatDate(l, h)), "disabled" in n && (n.disabled ? this._disableDatepicker(t) : this._enableDatepicker(t)), this._attachments(e(t), l), this._autoSize(l), this._setDate(l, a), this._updateAlternate(l), this._updateDatepicker(l)), void 0) }, _changeDatepicker: function (e, t, i) { this._optionDatepicker(e, t, i) }, _refreshDatepicker: function (e) { var t = this._getInst(e); t && this._updateDatepicker(t) }, _setDateDatepicker: function (e, t) { var i = this._getInst(e); i && (this._setDate(i, t), this._updateDatepicker(i), this._updateAlternate(i)) }, _getDateDatepicker: function (e, t) { var i = this._getInst(e); return i && !i.inline && this._setDateFromField(i, t), i ? this._getDate(i) : null }, _doKeyDown: function (t) { var i, s, n, a = e.datepicker._getInst(t.target), o = !0, r = a.dpDiv.is(".ui-datepicker-rtl"); if (a._keyEvent = !0, e.datepicker._datepickerShowing) switch (t.keyCode) { case 9: e.datepicker._hideDatepicker(), o = !1; break; case 13: return n = e("td." + e.datepicker._dayOverClass + ":not(." + e.datepicker._currentClass + ")", a.dpDiv), n[0] && e.datepicker._selectDay(t.target, a.selectedMonth, a.selectedYear, n[0]), i = e.datepicker._get(a, "onSelect"), i ? (s = e.datepicker._formatDate(a), i.apply(a.input ? a.input[0] : null, [s, a])) : e.datepicker._hideDatepicker(), !1; case 27: e.datepicker._hideDatepicker(); break; case 33: e.datepicker._adjustDate(t.target, t.ctrlKey ? -e.datepicker._get(a, "stepBigMonths") : -e.datepicker._get(a, "stepMonths"), "M"); break; case 34: e.datepicker._adjustDate(t.target, t.ctrlKey ? +e.datepicker._get(a, "stepBigMonths") : +e.datepicker._get(a, "stepMonths"), "M"); break; case 35: (t.ctrlKey || t.metaKey) && e.datepicker._clearDate(t.target), o = t.ctrlKey || t.metaKey; break; case 36: (t.ctrlKey || t.metaKey) && e.datepicker._gotoToday(t.target), o = t.ctrlKey || t.metaKey; break; case 37: (t.ctrlKey || t.metaKey) && e.datepicker._adjustDate(t.target, r ? 1 : -1, "D"), o = t.ctrlKey || t.metaKey, t.originalEvent.altKey && e.datepicker._adjustDate(t.target, t.ctrlKey ? -e.datepicker._get(a, "stepBigMonths") : -e.datepicker._get(a, "stepMonths"), "M"); break; case 38: (t.ctrlKey || t.metaKey) && e.datepicker._adjustDate(t.target, -7, "D"), o = t.ctrlKey || t.metaKey; break; case 39: (t.ctrlKey || t.metaKey) && e.datepicker._adjustDate(t.target, r ? -1 : 1, "D"), o = t.ctrlKey || t.metaKey, t.originalEvent.altKey && e.datepicker._adjustDate(t.target, t.ctrlKey ? +e.datepicker._get(a, "stepBigMonths") : +e.datepicker._get(a, "stepMonths"), "M"); break; case 40: (t.ctrlKey || t.metaKey) && e.datepicker._adjustDate(t.target, 7, "D"), o = t.ctrlKey || t.metaKey; break; default: o = !1 } else 36 === t.keyCode && t.ctrlKey ? e.datepicker._showDatepicker(this) : o = !1; o && (t.preventDefault(), t.stopPropagation()) }, _doKeyPress: function (t) { var i, s, n = e.datepicker._getInst(t.target); return e.datepicker._get(n, "constrainInput") ? (i = e.datepicker._possibleChars(e.datepicker._get(n, "dateFormat")), s = String.fromCharCode(null == t.charCode ? t.keyCode : t.charCode), t.ctrlKey || t.metaKey || " " > s || !i || i.indexOf(s) > -1) : void 0 }, _doKeyUp: function (t) { var i, s = e.datepicker._getInst(t.target); if (s.input.val() !== s.lastVal) try { i = e.datepicker.parseDate(e.datepicker._get(s, "dateFormat"), s.input ? s.input.val() : null, e.datepicker._getFormatConfig(s)), i && (e.datepicker._setDateFromField(s), e.datepicker._updateAlternate(s), e.datepicker._updateDatepicker(s)) } catch (n) { } return !0 }, _showDatepicker: function (t) { if (t = t.target || t, "input" !== t.nodeName.toLowerCase() && (t = e("input", t.parentNode)[0]), !e.datepicker._isDisabledDatepicker(t) && e.datepicker._lastInput !== t) { var i, n, a, o, h, l, u; i = e.datepicker._getInst(t), e.datepicker._curInst && e.datepicker._curInst !== i && (e.datepicker._curInst.dpDiv.stop(!0, !0), i && e.datepicker._datepickerShowing && e.datepicker._hideDatepicker(e.datepicker._curInst.input[0])), n = e.datepicker._get(i, "beforeShow"), a = n ? n.apply(t, [t, i]) : {}, a !== !1 && (r(i.settings, a), i.lastVal = null, e.datepicker._lastInput = t, e.datepicker._setDateFromField(i), e.datepicker._inDialog && (t.value = ""), e.datepicker._pos || (e.datepicker._pos = e.datepicker._findPos(t), e.datepicker._pos[1] += t.offsetHeight), o = !1, e(t).parents().each(function () { return o |= "fixed" === e(this).css("position"), !o }), h = { left: e.datepicker._pos[0], top: e.datepicker._pos[1] }, e.datepicker._pos = null, i.dpDiv.empty(), i.dpDiv.css({ position: "absolute", display: "block", top: "-1000px" }), e.datepicker._updateDatepicker(i), h = e.datepicker._checkOffset(i, h, o), i.dpDiv.css({ position: e.datepicker._inDialog && e.blockUI ? "static" : o ? "fixed" : "absolute", display: "none", left: h.left + "px", top: h.top + "px" }), i.inline || (l = e.datepicker._get(i, "showAnim"), u = e.datepicker._get(i, "duration"), i.dpDiv.css("z-index", s(e(t)) + 1), e.datepicker._datepickerShowing = !0, e.effects && e.effects.effect[l] ? i.dpDiv.show(l, e.datepicker._get(i, "showOptions"), u) : i.dpDiv[l || "show"](l ? u : null), e.datepicker._shouldFocusInput(i) && i.input.focus(), e.datepicker._curInst = i)) } }, _updateDatepicker: function (t) { this.maxRows = 4, c = t, t.dpDiv.empty().append(this._generateHTML(t)), this._attachHandlers(t); var i, s = this._getNumberOfMonths(t), n = s[1], a = 17, r = t.dpDiv.find("." + this._dayOverClass + " a"); r.length > 0 && o.apply(r.get(0)), t.dpDiv.removeClass("ui-datepicker-multi-2 ui-datepicker-multi-3 ui-datepicker-multi-4").width(""), n > 1 && t.dpDiv.addClass("ui-datepicker-multi-" + n).css("width", a * n + "em"), t.dpDiv[(1 !== s[0] || 1 !== s[1] ? "add" : "remove") + "Class"]("ui-datepicker-multi"), t.dpDiv[(this._get(t, "isRTL") ? "add" : "remove") + "Class"]("ui-datepicker-rtl"), t === e.datepicker._curInst && e.datepicker._datepickerShowing && e.datepicker._shouldFocusInput(t) && t.input.focus(), t.yearshtml && (i = t.yearshtml, setTimeout(function () { i === t.yearshtml && t.yearshtml && t.dpDiv.find("select.ui-datepicker-year:first").replaceWith(t.yearshtml), i = t.yearshtml = null }, 0)) }, _shouldFocusInput: function (e) { return e.input && e.input.is(":visible") && !e.input.is(":disabled") && !e.input.is(":focus") }, _checkOffset: function (t, i, s) { var n = t.dpDiv.outerWidth(), a = t.dpDiv.outerHeight(), o = t.input ? t.input.outerWidth() : 0, r = t.input ? t.input.outerHeight() : 0, h = document.documentElement.clientWidth + (s ? 0 : e(document).scrollLeft()), l = document.documentElement.clientHeight + (s ? 0 : e(document).scrollTop()); return i.left -= this._get(t, "isRTL") ? n - o : 0, i.left -= s && i.left === t.input.offset().left ? e(document).scrollLeft() : 0, i.top -= s && i.top === t.input.offset().top + r ? e(document).scrollTop() : 0, i.left -= Math.min(i.left, i.left + n > h && h > n ? Math.abs(i.left + n - h) : 0), i.top -= Math.min(i.top, i.top + a > l && l > a ? Math.abs(a + r) : 0), i }, _findPos: function (t) { for (var i, s = this._getInst(t), n = this._get(s, "isRTL"); t && ("hidden" === t.type || 1 !== t.nodeType || e.expr.filters.hidden(t));)t = t[n ? "previousSibling" : "nextSibling"]; return i = e(t).offset(), [i.left, i.top] }, _hideDatepicker: function (t) { var i, s, n, a, o = this._curInst; !o || t && o !== e.data(t, "datepicker") || this._datepickerShowing && (i = this._get(o, "showAnim"), s = this._get(o, "duration"), n = function () { e.datepicker._tidyDialog(o) }, e.effects && (e.effects.effect[i] || e.effects[i]) ? o.dpDiv.hide(i, e.datepicker._get(o, "showOptions"), s, n) : o.dpDiv["slideDown" === i ? "slideUp" : "fadeIn" === i ? "fadeOut" : "hide"](i ? s : null, n), i || n(), this._datepickerShowing = !1, a = this._get(o, "onClose"), a && a.apply(o.input ? o.input[0] : null, [o.input ? o.input.val() : "", o]), this._lastInput = null, this._inDialog && (this._dialogInput.css({ position: "absolute", left: "0", top: "-100px" }), e.blockUI && (e.unblockUI(), e("body").append(this.dpDiv))), this._inDialog = !1) }, _tidyDialog: function (e) { e.dpDiv.removeClass(this._dialogClass).unbind(".ui-datepicker-calendar") }, _checkExternalClick: function (t) { if (e.datepicker._curInst) { var i = e(t.target), s = e.datepicker._getInst(i[0]); (i[0].id !== e.datepicker._mainDivId && 0 === i.parents("#" + e.datepicker._mainDivId).length && !i.hasClass(e.datepicker.markerClassName) && !i.closest("." + e.datepicker._triggerClass).length && e.datepicker._datepickerShowing && (!e.datepicker._inDialog || !e.blockUI) || i.hasClass(e.datepicker.markerClassName) && e.datepicker._curInst !== s) && e.datepicker._hideDatepicker() } }, _adjustDate: function (t, i, s) { var n = e(t), a = this._getInst(n[0]); this._isDisabledDatepicker(n[0]) || (this._adjustInstDate(a, i + ("M" === s ? this._get(a, "showCurrentAtPos") : 0), s), this._updateDatepicker(a)) }, _gotoToday: function (t) { var i, s = e(t), n = this._getInst(s[0]); this._get(n, "gotoCurrent") && n.currentDay ? (n.selectedDay = n.currentDay, n.drawMonth = n.selectedMonth = n.currentMonth, n.drawYear = n.selectedYear = n.currentYear) : (i = new Date, n.selectedDay = i.getDate(), n.drawMonth = n.selectedMonth = i.getMonth(), n.drawYear = n.selectedYear = i.getFullYear()), this._notifyChange(n), this._adjustDate(s) }, _selectMonthYear: function (t, i, s) { var n = e(t), a = this._getInst(n[0]); a["selected" + ("M" === s ? "Month" : "Year")] = a["draw" + ("M" === s ? "Month" : "Year")] = parseInt(i.options[i.selectedIndex].value, 10), this._notifyChange(a), this._adjustDate(n) }, _selectDay: function (t, i, s, n) { var a, o = e(t); e(n).hasClass(this._unselectableClass) || this._isDisabledDatepicker(o[0]) || (a = this._getInst(o[0]), a.selectedDay = a.currentDay = e("a", n).html(), a.selectedMonth = a.currentMonth = i, a.selectedYear = a.currentYear = s, this._selectDate(t, this._formatDate(a, a.currentDay, a.currentMonth, a.currentYear))) }, _clearDate: function (t) { var i = e(t); this._selectDate(i, "") }, _selectDate: function (t, i) {
      var s, n = e(t), a = this._getInst(n[0]); i = null != i ? i : this._formatDate(a), a.input && a.input.val(i), this._updateAlternate(a), s = this._get(a, "onSelect"), s ? s.apply(a.input ? a.input[0] : null, [i, a]) : a.input && a.input.trigger("change"), a.inline ? this._updateDatepicker(a) : (this._hideDatepicker(), this._lastInput = a.input[0], "object" != typeof a.input[0] && a.input.focus(), this._lastInput = null)
    }, _updateAlternate: function (t) { var i, s, n, a = this._get(t, "altField"); a && (i = this._get(t, "altFormat") || this._get(t, "dateFormat"), s = this._getDate(t), n = this.formatDate(i, s, this._getFormatConfig(t)), e(a).each(function () { e(this).val(n) })) }, noWeekends: function (e) { var t = e.getDay(); return [t > 0 && 6 > t, ""] }, iso8601Week: function (e) { var t, i = new Date(e.getTime()); return i.setDate(i.getDate() + 4 - (i.getDay() || 7)), t = i.getTime(), i.setMonth(0), i.setDate(1), Math.floor(Math.round((t - i) / 864e5) / 7) + 1 }, parseDate: function (t, i, s) { if (null == t || null == i) throw "Invalid arguments"; if (i = "object" == typeof i ? "" + i : i + "", "" === i) return null; var n, a, o, r, h = 0, l = (s ? s.shortYearCutoff : null) || this._defaults.shortYearCutoff, u = "string" != typeof l ? l : (new Date).getFullYear() % 100 + parseInt(l, 10), c = (s ? s.dayNamesShort : null) || this._defaults.dayNamesShort, d = (s ? s.dayNames : null) || this._defaults.dayNames, p = (s ? s.monthNamesShort : null) || this._defaults.monthNamesShort, f = (s ? s.monthNames : null) || this._defaults.monthNames, m = -1, g = -1, v = -1, _ = -1, b = !1, y = function (e) { var i = t.length > n + 1 && t.charAt(n + 1) === e; return i && n++, i }, x = function (e) { var t = y(e), s = "@" === e ? 14 : "!" === e ? 20 : "y" === e && t ? 4 : "o" === e ? 3 : 2, n = "y" === e ? s : 1, a = RegExp("^\\d{" + n + "," + s + "}"), o = i.substring(h).match(a); if (!o) throw "Missing number at position " + h; return h += o[0].length, parseInt(o[0], 10) }, w = function (t, s, n) { var a = -1, o = e.map(y(t) ? n : s, function (e, t) { return [[t, e]] }).sort(function (e, t) { return -(e[1].length - t[1].length) }); if (e.each(o, function (e, t) { var s = t[1]; return i.substr(h, s.length).toLowerCase() === s.toLowerCase() ? (a = t[0], h += s.length, !1) : void 0 }), -1 !== a) return a + 1; throw "Unknown name at position " + h }, k = function () { if (i.charAt(h) !== t.charAt(n)) throw "Unexpected literal at position " + h; h++ }; for (n = 0; t.length > n; n++)if (b) "'" !== t.charAt(n) || y("'") ? k() : b = !1; else switch (t.charAt(n)) { case "d": v = x("d"); break; case "D": w("D", c, d); break; case "o": _ = x("o"); break; case "m": g = x("m"); break; case "M": g = w("M", p, f); break; case "y": m = x("y"); break; case "@": r = new Date(x("@")), m = r.getFullYear(), g = r.getMonth() + 1, v = r.getDate(); break; case "!": r = new Date((x("!") - this._ticksTo1970) / 1e4), m = r.getFullYear(), g = r.getMonth() + 1, v = r.getDate(); break; case "'": y("'") ? k() : b = !0; break; default: k() }if (i.length > h && (o = i.substr(h), !/^\s+/.test(o))) throw "Extra/unparsed characters found in date: " + o; if (-1 === m ? m = (new Date).getFullYear() : 100 > m && (m += (new Date).getFullYear() - (new Date).getFullYear() % 100 + (u >= m ? 0 : -100)), _ > -1) for (g = 1, v = _; ;) { if (a = this._getDaysInMonth(m, g - 1), a >= v) break; g++, v -= a } if (r = this._daylightSavingAdjust(new Date(m, g - 1, v)), r.getFullYear() !== m || r.getMonth() + 1 !== g || r.getDate() !== v) throw "Invalid date"; return r }, ATOM: "yy-mm-dd", COOKIE: "D, dd M yy", ISO_8601: "yy-mm-dd", RFC_822: "D, d M y", RFC_850: "DD, dd-M-y", RFC_1036: "D, d M y", RFC_1123: "D, d M yy", RFC_2822: "D, d M yy", RSS: "D, d M y", TICKS: "!", TIMESTAMP: "@", W3C: "yy-mm-dd", _ticksTo1970: 1e7 * 60 * 60 * 24 * (718685 + Math.floor(492.5) - Math.floor(19.7) + Math.floor(4.925)), formatDate: function (e, t, i) { if (!t) return ""; var s, n = (i ? i.dayNamesShort : null) || this._defaults.dayNamesShort, a = (i ? i.dayNames : null) || this._defaults.dayNames, o = (i ? i.monthNamesShort : null) || this._defaults.monthNamesShort, r = (i ? i.monthNames : null) || this._defaults.monthNames, h = function (t) { var i = e.length > s + 1 && e.charAt(s + 1) === t; return i && s++, i }, l = function (e, t, i) { var s = "" + t; if (h(e)) for (; i > s.length;)s = "0" + s; return s }, u = function (e, t, i, s) { return h(e) ? s[t] : i[t] }, c = "", d = !1; if (t) for (s = 0; e.length > s; s++)if (d) "'" !== e.charAt(s) || h("'") ? c += e.charAt(s) : d = !1; else switch (e.charAt(s)) { case "d": c += l("d", t.getDate(), 2); break; case "D": c += u("D", t.getDay(), n, a); break; case "o": c += l("o", Math.round((new Date(t.getFullYear(), t.getMonth(), t.getDate()).getTime() - new Date(t.getFullYear(), 0, 0).getTime()) / 864e5), 3); break; case "m": c += l("m", t.getMonth() + 1, 2); break; case "M": c += u("M", t.getMonth(), o, r); break; case "y": c += h("y") ? t.getFullYear() : (10 > t.getYear() % 100 ? "0" : "") + t.getYear() % 100; break; case "@": c += t.getTime(); break; case "!": c += 1e4 * t.getTime() + this._ticksTo1970; break; case "'": h("'") ? c += "'" : d = !0; break; default: c += e.charAt(s) }return c }, _possibleChars: function (e) { var t, i = "", s = !1, n = function (i) { var s = e.length > t + 1 && e.charAt(t + 1) === i; return s && t++, s }; for (t = 0; e.length > t; t++)if (s) "'" !== e.charAt(t) || n("'") ? i += e.charAt(t) : s = !1; else switch (e.charAt(t)) { case "d": case "m": case "y": case "@": i += "0123456789"; break; case "D": case "M": return null; case "'": n("'") ? i += "'" : s = !0; break; default: i += e.charAt(t) }return i }, _get: function (e, t) { return void 0 !== e.settings[t] ? e.settings[t] : this._defaults[t] }, _setDateFromField: function (e, t) { if (e.input.val() !== e.lastVal) { var i = this._get(e, "dateFormat"), s = e.lastVal = e.input ? e.input.val() : null, n = this._getDefaultDate(e), a = n, o = this._getFormatConfig(e); try { a = this.parseDate(i, s, o) || n } catch (r) { s = t ? "" : s } e.selectedDay = a.getDate(), e.drawMonth = e.selectedMonth = a.getMonth(), e.drawYear = e.selectedYear = a.getFullYear(), e.currentDay = s ? a.getDate() : 0, e.currentMonth = s ? a.getMonth() : 0, e.currentYear = s ? a.getFullYear() : 0, this._adjustInstDate(e) } }, _getDefaultDate: function (e) { return this._restrictMinMax(e, this._determineDate(e, this._get(e, "defaultDate"), new Date)) }, _determineDate: function (t, i, s) { var n = function (e) { var t = new Date; return t.setDate(t.getDate() + e), t }, a = function (i) { try { return e.datepicker.parseDate(e.datepicker._get(t, "dateFormat"), i, e.datepicker._getFormatConfig(t)) } catch (s) { } for (var n = (i.toLowerCase().match(/^c/) ? e.datepicker._getDate(t) : null) || new Date, a = n.getFullYear(), o = n.getMonth(), r = n.getDate(), h = /([+\-]?[0-9]+)\s*(d|D|w|W|m|M|y|Y)?/g, l = h.exec(i); l;) { switch (l[2] || "d") { case "d": case "D": r += parseInt(l[1], 10); break; case "w": case "W": r += 7 * parseInt(l[1], 10); break; case "m": case "M": o += parseInt(l[1], 10), r = Math.min(r, e.datepicker._getDaysInMonth(a, o)); break; case "y": case "Y": a += parseInt(l[1], 10), r = Math.min(r, e.datepicker._getDaysInMonth(a, o)) }l = h.exec(i) } return new Date(a, o, r) }, o = null == i || "" === i ? s : "string" == typeof i ? a(i) : "number" == typeof i ? isNaN(i) ? s : n(i) : new Date(i.getTime()); return o = o && "Invalid Date" == "" + o ? s : o, o && (o.setHours(0), o.setMinutes(0), o.setSeconds(0), o.setMilliseconds(0)), this._daylightSavingAdjust(o) }, _daylightSavingAdjust: function (e) { return e ? (e.setHours(e.getHours() > 12 ? e.getHours() + 2 : 0), e) : null }, _setDate: function (e, t, i) { var s = !t, n = e.selectedMonth, a = e.selectedYear, o = this._restrictMinMax(e, this._determineDate(e, t, new Date)); e.selectedDay = e.currentDay = o.getDate(), e.drawMonth = e.selectedMonth = e.currentMonth = o.getMonth(), e.drawYear = e.selectedYear = e.currentYear = o.getFullYear(), n === e.selectedMonth && a === e.selectedYear || i || this._notifyChange(e), this._adjustInstDate(e), e.input && e.input.val(s ? "" : this._formatDate(e)) }, _getDate: function (e) { var t = !e.currentYear || e.input && "" === e.input.val() ? null : this._daylightSavingAdjust(new Date(e.currentYear, e.currentMonth, e.currentDay)); return t }, _attachHandlers: function (t) { var i = this._get(t, "stepMonths"), s = "#" + t.id.replace(/\\\\/g, "\\"); t.dpDiv.find("[data-handler]").map(function () { var t = { prev: function () { e.datepicker._adjustDate(s, -i, "M") }, next: function () { e.datepicker._adjustDate(s, +i, "M") }, hide: function () { e.datepicker._hideDatepicker() }, today: function () { e.datepicker._gotoToday(s) }, selectDay: function () { return e.datepicker._selectDay(s, +this.getAttribute("data-month"), +this.getAttribute("data-year"), this), !1 }, selectMonth: function () { return e.datepicker._selectMonthYear(s, this, "M"), !1 }, selectYear: function () { return e.datepicker._selectMonthYear(s, this, "Y"), !1 } }; e(this).bind(this.getAttribute("data-event"), t[this.getAttribute("data-handler")]) }) }, _generateHTML: function (e) { var t, i, s, n, a, o, r, h, l, u, c, d, p, f, m, g, v, _, b, y, x, w, k, D, T, S, M, N, C, P, I, A, H, z, E, F, W, O, L, R = new Date, j = this._daylightSavingAdjust(new Date(R.getFullYear(), R.getMonth(), R.getDate())), Y = this._get(e, "isRTL"), B = this._get(e, "showButtonPanel"), J = this._get(e, "hideIfNoPrevNext"), K = this._get(e, "navigationAsDateFormat"), U = this._getNumberOfMonths(e), V = this._get(e, "showCurrentAtPos"), q = this._get(e, "stepMonths"), G = 1 !== U[0] || 1 !== U[1], X = this._daylightSavingAdjust(e.currentDay ? new Date(e.currentYear, e.currentMonth, e.currentDay) : new Date(9999, 9, 9)), $ = this._getMinMaxDate(e, "min"), Q = this._getMinMaxDate(e, "max"), Z = e.drawMonth - V, et = e.drawYear; if (0 > Z && (Z += 12, et--), Q) for (t = this._daylightSavingAdjust(new Date(Q.getFullYear(), Q.getMonth() - U[0] * U[1] + 1, Q.getDate())), t = $ && $ > t ? $ : t; this._daylightSavingAdjust(new Date(et, Z, 1)) > t;)Z--, 0 > Z && (Z = 11, et--); for (e.drawMonth = Z, e.drawYear = et, i = this._get(e, "prevText"), i = K ? this.formatDate(i, this._daylightSavingAdjust(new Date(et, Z - q, 1)), this._getFormatConfig(e)) : i, s = this._canAdjustMonth(e, -1, et, Z) ? "<a class='ui-datepicker-prev ui-corner-all' data-handler='prev' data-event='click' title='" + i + "'><span class='ui-icon ui-icon-circle-triangle-" + (Y ? "e" : "w") + "'>" + i + "</span></a>" : J ? "" : "<a class='ui-datepicker-prev ui-corner-all ui-state-disabled' title='" + i + "'><span class='ui-icon ui-icon-circle-triangle-" + (Y ? "e" : "w") + "'>" + i + "</span></a>", n = this._get(e, "nextText"), n = K ? this.formatDate(n, this._daylightSavingAdjust(new Date(et, Z + q, 1)), this._getFormatConfig(e)) : n, a = this._canAdjustMonth(e, 1, et, Z) ? "<a class='ui-datepicker-next ui-corner-all' data-handler='next' data-event='click' title='" + n + "'><span class='ui-icon ui-icon-circle-triangle-" + (Y ? "w" : "e") + "'>" + n + "</span></a>" : J ? "" : "<a class='ui-datepicker-next ui-corner-all ui-state-disabled' title='" + n + "'><span class='ui-icon ui-icon-circle-triangle-" + (Y ? "w" : "e") + "'>" + n + "</span></a>", o = this._get(e, "currentText"), r = this._get(e, "gotoCurrent") && e.currentDay ? X : j, o = K ? this.formatDate(o, r, this._getFormatConfig(e)) : o, h = e.inline ? "" : "<button type='button' class='ui-datepicker-close ui-state-default ui-priority-primary ui-corner-all' data-handler='hide' data-event='click'>" + this._get(e, "closeText") + "</button>", l = B ? "<div class='ui-datepicker-buttonpane ui-widget-content'>" + (Y ? h : "") + (this._isInRange(e, r) ? "<button type='button' class='ui-datepicker-current ui-state-default ui-priority-secondary ui-corner-all' data-handler='today' data-event='click'>" + o + "</button>" : "") + (Y ? "" : h) + "</div>" : "", u = parseInt(this._get(e, "firstDay"), 10), u = isNaN(u) ? 0 : u, c = this._get(e, "showWeek"), d = this._get(e, "dayNames"), p = this._get(e, "dayNamesMin"), f = this._get(e, "monthNames"), m = this._get(e, "monthNamesShort"), g = this._get(e, "beforeShowDay"), v = this._get(e, "showOtherMonths"), _ = this._get(e, "selectOtherMonths"), b = this._getDefaultDate(e), y = "", w = 0; U[0] > w; w++) { for (k = "", this.maxRows = 4, D = 0; U[1] > D; D++) { if (T = this._daylightSavingAdjust(new Date(et, Z, e.selectedDay)), S = " ui-corner-all", M = "", G) { if (M += "<div class='ui-datepicker-group", U[1] > 1) switch (D) { case 0: M += " ui-datepicker-group-first", S = " ui-corner-" + (Y ? "right" : "left"); break; case U[1] - 1: M += " ui-datepicker-group-last", S = " ui-corner-" + (Y ? "left" : "right"); break; default: M += " ui-datepicker-group-middle", S = "" }M += "'>" } for (M += "<div class='ui-datepicker-header ui-widget-header ui-helper-clearfix" + S + "'>" + (/all|left/.test(S) && 0 === w ? Y ? a : s : "") + (/all|right/.test(S) && 0 === w ? Y ? s : a : "") + this._generateMonthYearHeader(e, Z, et, $, Q, w > 0 || D > 0, f, m) + "</div><table class='ui-datepicker-calendar'><thead>" + "<tr>", N = c ? "<th class='ui-datepicker-week-col'>" + this._get(e, "weekHeader") + "</th>" : "", x = 0; 7 > x; x++)C = (x + u) % 7, N += "<th scope='col'" + ((x + u + 6) % 7 >= 5 ? " class='ui-datepicker-week-end'" : "") + ">" + "<span title='" + d[C] + "'>" + p[C] + "</span></th>"; for (M += N + "</tr></thead><tbody>", P = this._getDaysInMonth(et, Z), et === e.selectedYear && Z === e.selectedMonth && (e.selectedDay = Math.min(e.selectedDay, P)), I = (this._getFirstDayOfMonth(et, Z) - u + 7) % 7, A = Math.ceil((I + P) / 7), H = G ? this.maxRows > A ? this.maxRows : A : A, this.maxRows = H, z = this._daylightSavingAdjust(new Date(et, Z, 1 - I)), E = 0; H > E; E++) { for (M += "<tr>", F = c ? "<td class='ui-datepicker-week-col'>" + this._get(e, "calculateWeek")(z) + "</td>" : "", x = 0; 7 > x; x++)W = g ? g.apply(e.input ? e.input[0] : null, [z]) : [!0, ""], O = z.getMonth() !== Z, L = O && !_ || !W[0] || $ && $ > z || Q && z > Q, F += "<td class='" + ((x + u + 6) % 7 >= 5 ? " ui-datepicker-week-end" : "") + (O ? " ui-datepicker-other-month" : "") + (z.getTime() === T.getTime() && Z === e.selectedMonth && e._keyEvent || b.getTime() === z.getTime() && b.getTime() === T.getTime() ? " " + this._dayOverClass : "") + (L ? " " + this._unselectableClass + " ui-state-disabled" : "") + (O && !v ? "" : " " + W[1] + (z.getTime() === X.getTime() ? " " + this._currentClass : "") + (z.getTime() === j.getTime() ? " ui-datepicker-today" : "")) + "'" + (O && !v || !W[2] ? "" : " title='" + W[2].replace(/'/g, "&#39;") + "'") + (L ? "" : " data-handler='selectDay' data-event='click' data-month='" + z.getMonth() + "' data-year='" + z.getFullYear() + "'") + ">" + (O && !v ? "&#xa0;" : L ? "<span class='ui-state-default'>" + z.getDate() + "</span>" : "<a class='ui-state-default" + (z.getTime() === j.getTime() ? " ui-state-highlight" : "") + (z.getTime() === X.getTime() ? " ui-state-active" : "") + (O ? " ui-priority-secondary" : "") + "' href='#'>" + z.getDate() + "</a>") + "</td>", z.setDate(z.getDate() + 1), z = this._daylightSavingAdjust(z); M += F + "</tr>" } Z++, Z > 11 && (Z = 0, et++), M += "</tbody></table>" + (G ? "</div>" + (U[0] > 0 && D === U[1] - 1 ? "<div class='ui-datepicker-row-break'></div>" : "") : ""), k += M } y += k } return y += l, e._keyEvent = !1, y }, _generateMonthYearHeader: function (e, t, i, s, n, a, o, r) { var h, l, u, c, d, p, f, m, g = this._get(e, "changeMonth"), v = this._get(e, "changeYear"), _ = this._get(e, "showMonthAfterYear"), b = "<div class='ui-datepicker-title'>", y = ""; if (a || !g) y += "<span class='ui-datepicker-month'>" + o[t] + "</span>"; else { for (h = s && s.getFullYear() === i, l = n && n.getFullYear() === i, y += "<select class='ui-datepicker-month' data-handler='selectMonth' data-event='change'>", u = 0; 12 > u; u++)(!h || u >= s.getMonth()) && (!l || n.getMonth() >= u) && (y += "<option value='" + u + "'" + (u === t ? " selected='selected'" : "") + ">" + r[u] + "</option>"); y += "</select>" } if (_ || (b += y + (!a && g && v ? "" : "&#xa0;")), !e.yearshtml) if (e.yearshtml = "", a || !v) b += "<span class='ui-datepicker-year'>" + i + "</span>"; else { for (c = this._get(e, "yearRange").split(":"), d = (new Date).getFullYear(), p = function (e) { var t = e.match(/c[+\-].*/) ? i + parseInt(e.substring(1), 10) : e.match(/[+\-].*/) ? d + parseInt(e, 10) : parseInt(e, 10); return isNaN(t) ? d : t }, f = p(c[0]), m = Math.max(f, p(c[1] || "")), f = s ? Math.max(f, s.getFullYear()) : f, m = n ? Math.min(m, n.getFullYear()) : m, e.yearshtml += "<select class='ui-datepicker-year' data-handler='selectYear' data-event='change'>"; m >= f; f++)e.yearshtml += "<option value='" + f + "'" + (f === i ? " selected='selected'" : "") + ">" + f + "</option>"; e.yearshtml += "</select>", b += e.yearshtml, e.yearshtml = null } return b += this._get(e, "yearSuffix"), _ && (b += (!a && g && v ? "" : "&#xa0;") + y), b += "</div>" }, _adjustInstDate: function (e, t, i) { var s = e.drawYear + ("Y" === i ? t : 0), n = e.drawMonth + ("M" === i ? t : 0), a = Math.min(e.selectedDay, this._getDaysInMonth(s, n)) + ("D" === i ? t : 0), o = this._restrictMinMax(e, this._daylightSavingAdjust(new Date(s, n, a))); e.selectedDay = o.getDate(), e.drawMonth = e.selectedMonth = o.getMonth(), e.drawYear = e.selectedYear = o.getFullYear(), ("M" === i || "Y" === i) && this._notifyChange(e) }, _restrictMinMax: function (e, t) { var i = this._getMinMaxDate(e, "min"), s = this._getMinMaxDate(e, "max"), n = i && i > t ? i : t; return s && n > s ? s : n }, _notifyChange: function (e) { var t = this._get(e, "onChangeMonthYear"); t && t.apply(e.input ? e.input[0] : null, [e.selectedYear, e.selectedMonth + 1, e]) }, _getNumberOfMonths: function (e) { var t = this._get(e, "numberOfMonths"); return null == t ? [1, 1] : "number" == typeof t ? [1, t] : t }, _getMinMaxDate: function (e, t) { return this._determineDate(e, this._get(e, t + "Date"), null) }, _getDaysInMonth: function (e, t) { return 32 - this._daylightSavingAdjust(new Date(e, t, 32)).getDate() }, _getFirstDayOfMonth: function (e, t) { return new Date(e, t, 1).getDay() }, _canAdjustMonth: function (e, t, i, s) { var n = this._getNumberOfMonths(e), a = this._daylightSavingAdjust(new Date(i, s + (0 > t ? t : n[0] * n[1]), 1)); return 0 > t && a.setDate(this._getDaysInMonth(a.getFullYear(), a.getMonth())), this._isInRange(e, a) }, _isInRange: function (e, t) { var i, s, n = this._getMinMaxDate(e, "min"), a = this._getMinMaxDate(e, "max"), o = null, r = null, h = this._get(e, "yearRange"); return h && (i = h.split(":"), s = (new Date).getFullYear(), o = parseInt(i[0], 10), r = parseInt(i[1], 10), i[0].match(/[+\-].*/) && (o += s), i[1].match(/[+\-].*/) && (r += s)), (!n || t.getTime() >= n.getTime()) && (!a || t.getTime() <= a.getTime()) && (!o || t.getFullYear() >= o) && (!r || r >= t.getFullYear()) }, _getFormatConfig: function (e) { var t = this._get(e, "shortYearCutoff"); return t = "string" != typeof t ? t : (new Date).getFullYear() % 100 + parseInt(t, 10), { shortYearCutoff: t, dayNamesShort: this._get(e, "dayNamesShort"), dayNames: this._get(e, "dayNames"), monthNamesShort: this._get(e, "monthNamesShort"), monthNames: this._get(e, "monthNames") } }, _formatDate: function (e, t, i, s) { t || (e.currentDay = e.selectedDay, e.currentMonth = e.selectedMonth, e.currentYear = e.selectedYear); var n = t ? "object" == typeof t ? t : this._daylightSavingAdjust(new Date(s, i, t)) : this._daylightSavingAdjust(new Date(e.currentYear, e.currentMonth, e.currentDay)); return this.formatDate(this._get(e, "dateFormat"), n, this._getFormatConfig(e)) }
  }), e.fn.datepicker = function (t) { if (!this.length) return this; e.datepicker.initialized || (e(document).mousedown(e.datepicker._checkExternalClick), e.datepicker.initialized = !0), 0 === e("#" + e.datepicker._mainDivId).length && e("body").append(e.datepicker.dpDiv); var i = Array.prototype.slice.call(arguments, 1); return "string" != typeof t || "isDisabled" !== t && "getDate" !== t && "widget" !== t ? "option" === t && 2 === arguments.length && "string" == typeof arguments[1] ? e.datepicker["_" + t + "Datepicker"].apply(e.datepicker, [this[0]].concat(i)) : this.each(function () { "string" == typeof t ? e.datepicker["_" + t + "Datepicker"].apply(e.datepicker, [this].concat(i)) : e.datepicker._attachDatepicker(this, t) }) : e.datepicker["_" + t + "Datepicker"].apply(e.datepicker, [this[0]].concat(i)) }, e.datepicker = new n, e.datepicker.initialized = !1, e.datepicker.uuid = (new Date).getTime(), e.datepicker.version = "1.11.4", e.datepicker, e.widget("ui.slider", e.ui.mouse, { version: "1.11.4", widgetEventPrefix: "slide", options: { animate: !1, distance: 0, max: 100, min: 0, orientation: "horizontal", range: !1, step: 1, value: 0, values: null, change: null, slide: null, start: null, stop: null }, numPages: 5, _create: function () { this._keySliding = !1, this._mouseSliding = !1, this._animateOff = !0, this._handleIndex = null, this._detectOrientation(), this._mouseInit(), this._calculateNewMax(), this.element.addClass("ui-slider ui-slider-" + this.orientation + " ui-widget" + " ui-widget-content" + " ui-corner-all"), this._refresh(), this._setOption("disabled", this.options.disabled), this._animateOff = !1 }, _refresh: function () { this._createRange(), this._createHandles(), this._setupEvents(), this._refreshValue() }, _createHandles: function () { var t, i, s = this.options, n = this.element.find(".ui-slider-handle").addClass("ui-state-default ui-corner-all"), a = "<span class='ui-slider-handle ui-state-default ui-corner-all' tabindex='0'></span>", o = []; for (i = s.values && s.values.length || 1, n.length > i && (n.slice(i).remove(), n = n.slice(0, i)), t = n.length; i > t; t++)o.push(a); this.handles = n.add(e(o.join("")).appendTo(this.element)), this.handle = this.handles.eq(0), this.handles.each(function (t) { e(this).data("ui-slider-handle-index", t) }) }, _createRange: function () { var t = this.options, i = ""; t.range ? (t.range === !0 && (t.values ? t.values.length && 2 !== t.values.length ? t.values = [t.values[0], t.values[0]] : e.isArray(t.values) && (t.values = t.values.slice(0)) : t.values = [this._valueMin(), this._valueMin()]), this.range && this.range.length ? this.range.removeClass("ui-slider-range-min ui-slider-range-max").css({ left: "", bottom: "" }) : (this.range = e("<div></div>").appendTo(this.element), i = "ui-slider-range ui-widget-header ui-corner-all"), this.range.addClass(i + ("min" === t.range || "max" === t.range ? " ui-slider-range-" + t.range : ""))) : (this.range && this.range.remove(), this.range = null) }, _setupEvents: function () { this._off(this.handles), this._on(this.handles, this._handleEvents), this._hoverable(this.handles), this._focusable(this.handles) }, _destroy: function () { this.handles.remove(), this.range && this.range.remove(), this.element.removeClass("ui-slider ui-slider-horizontal ui-slider-vertical ui-widget ui-widget-content ui-corner-all"), this._mouseDestroy() }, _mouseCapture: function (t) { var i, s, n, a, o, r, h, l, u = this, c = this.options; return c.disabled ? !1 : (this.elementSize = { width: this.element.outerWidth(), height: this.element.outerHeight() }, this.elementOffset = this.element.offset(), i = { x: t.pageX, y: t.pageY }, s = this._normValueFromMouse(i), n = this._valueMax() - this._valueMin() + 1, this.handles.each(function (t) { var i = Math.abs(s - u.values(t)); (n > i || n === i && (t === u._lastChangedValue || u.values(t) === c.min)) && (n = i, a = e(this), o = t) }), r = this._start(t, o), r === !1 ? !1 : (this._mouseSliding = !0, this._handleIndex = o, a.addClass("ui-state-active").focus(), h = a.offset(), l = !e(t.target).parents().addBack().is(".ui-slider-handle"), this._clickOffset = l ? { left: 0, top: 0 } : { left: t.pageX - h.left - a.width() / 2, top: t.pageY - h.top - a.height() / 2 - (parseInt(a.css("borderTopWidth"), 10) || 0) - (parseInt(a.css("borderBottomWidth"), 10) || 0) + (parseInt(a.css("marginTop"), 10) || 0) }, this.handles.hasClass("ui-state-hover") || this._slide(t, o, s), this._animateOff = !0, !0)) }, _mouseStart: function () { return !0 }, _mouseDrag: function (e) { var t = { x: e.pageX, y: e.pageY }, i = this._normValueFromMouse(t); return this._slide(e, this._handleIndex, i), !1 }, _mouseStop: function (e) { return this.handles.removeClass("ui-state-active"), this._mouseSliding = !1, this._stop(e, this._handleIndex), this._change(e, this._handleIndex), this._handleIndex = null, this._clickOffset = null, this._animateOff = !1, !1 }, _detectOrientation: function () { this.orientation = "vertical" === this.options.orientation ? "vertical" : "horizontal" }, _normValueFromMouse: function (e) { var t, i, s, n, a; return "horizontal" === this.orientation ? (t = this.elementSize.width, i = e.x - this.elementOffset.left - (this._clickOffset ? this._clickOffset.left : 0)) : (t = this.elementSize.height, i = e.y - this.elementOffset.top - (this._clickOffset ? this._clickOffset.top : 0)), s = i / t, s > 1 && (s = 1), 0 > s && (s = 0), "vertical" === this.orientation && (s = 1 - s), n = this._valueMax() - this._valueMin(), a = this._valueMin() + s * n, this._trimAlignValue(a) }, _start: function (e, t) { var i = { handle: this.handles[t], value: this.value() }; return this.options.values && this.options.values.length && (i.value = this.values(t), i.values = this.values()), this._trigger("start", e, i) }, _slide: function (e, t, i) { var s, n, a; this.options.values && this.options.values.length ? (s = this.values(t ? 0 : 1), 2 === this.options.values.length && this.options.range === !0 && (0 === t && i > s || 1 === t && s > i) && (i = s), i !== this.values(t) && (n = this.values(), n[t] = i, a = this._trigger("slide", e, { handle: this.handles[t], value: i, values: n }), s = this.values(t ? 0 : 1), a !== !1 && this.values(t, i))) : i !== this.value() && (a = this._trigger("slide", e, { handle: this.handles[t], value: i }), a !== !1 && this.value(i)) }, _stop: function (e, t) { var i = { handle: this.handles[t], value: this.value() }; this.options.values && this.options.values.length && (i.value = this.values(t), i.values = this.values()), this._trigger("stop", e, i) }, _change: function (e, t) { if (!this._keySliding && !this._mouseSliding) { var i = { handle: this.handles[t], value: this.value() }; this.options.values && this.options.values.length && (i.value = this.values(t), i.values = this.values()), this._lastChangedValue = t, this._trigger("change", e, i) } }, value: function (e) { return arguments.length ? (this.options.value = this._trimAlignValue(e), this._refreshValue(), this._change(null, 0), void 0) : this._value() }, values: function (t, i) { var s, n, a; if (arguments.length > 1) return this.options.values[t] = this._trimAlignValue(i), this._refreshValue(), this._change(null, t), void 0; if (!arguments.length) return this._values(); if (!e.isArray(arguments[0])) return this.options.values && this.options.values.length ? this._values(t) : this.value(); for (s = this.options.values, n = arguments[0], a = 0; s.length > a; a += 1)s[a] = this._trimAlignValue(n[a]), this._change(null, a); this._refreshValue() }, _setOption: function (t, i) { var s, n = 0; switch ("range" === t && this.options.range === !0 && ("min" === i ? (this.options.value = this._values(0), this.options.values = null) : "max" === i && (this.options.value = this._values(this.options.values.length - 1), this.options.values = null)), e.isArray(this.options.values) && (n = this.options.values.length), "disabled" === t && this.element.toggleClass("ui-state-disabled", !!i), this._super(t, i), t) { case "orientation": this._detectOrientation(), this.element.removeClass("ui-slider-horizontal ui-slider-vertical").addClass("ui-slider-" + this.orientation), this._refreshValue(), this.handles.css("horizontal" === i ? "bottom" : "left", ""); break; case "value": this._animateOff = !0, this._refreshValue(), this._change(null, 0), this._animateOff = !1; break; case "values": for (this._animateOff = !0, this._refreshValue(), s = 0; n > s; s += 1)this._change(null, s); this._animateOff = !1; break; case "step": case "min": case "max": this._animateOff = !0, this._calculateNewMax(), this._refreshValue(), this._animateOff = !1; break; case "range": this._animateOff = !0, this._refresh(), this._animateOff = !1 } }, _value: function () { var e = this.options.value; return e = this._trimAlignValue(e) }, _values: function (e) { var t, i, s; if (arguments.length) return t = this.options.values[e], t = this._trimAlignValue(t); if (this.options.values && this.options.values.length) { for (i = this.options.values.slice(), s = 0; i.length > s; s += 1)i[s] = this._trimAlignValue(i[s]); return i } return [] }, _trimAlignValue: function (e) { if (this._valueMin() >= e) return this._valueMin(); if (e >= this._valueMax()) return this._valueMax(); var t = this.options.step > 0 ? this.options.step : 1, i = (e - this._valueMin()) % t, s = e - i; return 2 * Math.abs(i) >= t && (s += i > 0 ? t : -t), parseFloat(s.toFixed(5)) }, _calculateNewMax: function () { var e = this.options.max, t = this._valueMin(), i = this.options.step, s = Math.floor(+(e - t).toFixed(this._precision()) / i) * i; e = s + t, this.max = parseFloat(e.toFixed(this._precision())) }, _precision: function () { var e = this._precisionOf(this.options.step); return null !== this.options.min && (e = Math.max(e, this._precisionOf(this.options.min))), e }, _precisionOf: function (e) { var t = "" + e, i = t.indexOf("."); return -1 === i ? 0 : t.length - i - 1 }, _valueMin: function () { return this.options.min }, _valueMax: function () { return this.max }, _refreshValue: function () { var t, i, s, n, a, o = this.options.range, r = this.options, h = this, l = this._animateOff ? !1 : r.animate, u = {}; this.options.values && this.options.values.length ? this.handles.each(function (s) { i = 100 * ((h.values(s) - h._valueMin()) / (h._valueMax() - h._valueMin())), u["horizontal" === h.orientation ? "left" : "bottom"] = i + "%", e(this).stop(1, 1)[l ? "animate" : "css"](u, r.animate), h.options.range === !0 && ("horizontal" === h.orientation ? (0 === s && h.range.stop(1, 1)[l ? "animate" : "css"]({ left: i + "%" }, r.animate), 1 === s && h.range[l ? "animate" : "css"]({ width: i - t + "%" }, { queue: !1, duration: r.animate })) : (0 === s && h.range.stop(1, 1)[l ? "animate" : "css"]({ bottom: i + "%" }, r.animate), 1 === s && h.range[l ? "animate" : "css"]({ height: i - t + "%" }, { queue: !1, duration: r.animate }))), t = i }) : (s = this.value(), n = this._valueMin(), a = this._valueMax(), i = a !== n ? 100 * ((s - n) / (a - n)) : 0, u["horizontal" === this.orientation ? "left" : "bottom"] = i + "%", this.handle.stop(1, 1)[l ? "animate" : "css"](u, r.animate), "min" === o && "horizontal" === this.orientation && this.range.stop(1, 1)[l ? "animate" : "css"]({ width: i + "%" }, r.animate), "max" === o && "horizontal" === this.orientation && this.range[l ? "animate" : "css"]({ width: 100 - i + "%" }, { queue: !1, duration: r.animate }), "min" === o && "vertical" === this.orientation && this.range.stop(1, 1)[l ? "animate" : "css"]({ height: i + "%" }, r.animate), "max" === o && "vertical" === this.orientation && this.range[l ? "animate" : "css"]({ height: 100 - i + "%" }, { queue: !1, duration: r.animate })) }, _handleEvents: { keydown: function (t) { var i, s, n, a, o = e(t.target).data("ui-slider-handle-index"); switch (t.keyCode) { case e.ui.keyCode.HOME: case e.ui.keyCode.END: case e.ui.keyCode.PAGE_UP: case e.ui.keyCode.PAGE_DOWN: case e.ui.keyCode.UP: case e.ui.keyCode.RIGHT: case e.ui.keyCode.DOWN: case e.ui.keyCode.LEFT: if (t.preventDefault(), !this._keySliding && (this._keySliding = !0, e(t.target).addClass("ui-state-active"), i = this._start(t, o), i === !1)) return }switch (a = this.options.step, s = n = this.options.values && this.options.values.length ? this.values(o) : this.value(), t.keyCode) { case e.ui.keyCode.HOME: n = this._valueMin(); break; case e.ui.keyCode.END: n = this._valueMax(); break; case e.ui.keyCode.PAGE_UP: n = this._trimAlignValue(s + (this._valueMax() - this._valueMin()) / this.numPages); break; case e.ui.keyCode.PAGE_DOWN: n = this._trimAlignValue(s - (this._valueMax() - this._valueMin()) / this.numPages); break; case e.ui.keyCode.UP: case e.ui.keyCode.RIGHT: if (s === this._valueMax()) return; n = this._trimAlignValue(s + a); break; case e.ui.keyCode.DOWN: case e.ui.keyCode.LEFT: if (s === this._valueMin()) return; n = this._trimAlignValue(s - a) }this._slide(t, o, n) }, keyup: function (t) { var i = e(t.target).data("ui-slider-handle-index"); this._keySliding && (this._keySliding = !1, this._stop(t, i), this._change(t, i), e(t.target).removeClass("ui-state-active")) } } }); var d = "ui-effects-", p = e; e.effects = { effect: {} }, function (e, t) {
    function i(e, t, i) { var s = c[t.type] || {}; return null == e ? i || !t.def ? null : t.def : (e = s.floor ? ~~e : parseFloat(e), isNaN(e) ? t.def : s.mod ? (e + s.mod) % s.mod : 0 > e ? 0 : e > s.max ? s.max : e) } function s(i) { var s = l(), n = s._rgba = []; return i = i.toLowerCase(), f(h, function (e, a) { var o, r = a.re.exec(i), h = r && a.parse(r), l = a.space || "rgba"; return h ? (o = s[l](h), s[u[l].cache] = o[u[l].cache], n = s._rgba = o._rgba, !1) : t }), n.length ? ("0,0,0,0" === n.join() && e.extend(n, a.transparent), s) : a[i] } function n(e, t, i) { return i = (i + 1) % 1, 1 > 6 * i ? e + 6 * (t - e) * i : 1 > 2 * i ? t : 2 > 3 * i ? e + 6 * (t - e) * (2 / 3 - i) : e } var a, o = "backgroundColor borderBottomColor borderLeftColor borderRightColor borderTopColor color columnRuleColor outlineColor textDecorationColor textEmphasisColor", r = /^([\-+])=\s*(\d+\.?\d*)/, h = [{ re: /rgba?\(\s*(\d{1,3})\s*,\s*(\d{1,3})\s*,\s*(\d{1,3})\s*(?:,\s*(\d?(?:\.\d+)?)\s*)?\)/, parse: function (e) { return [e[1], e[2], e[3], e[4]] } }, { re: /rgba?\(\s*(\d+(?:\.\d+)?)\%\s*,\s*(\d+(?:\.\d+)?)\%\s*,\s*(\d+(?:\.\d+)?)\%\s*(?:,\s*(\d?(?:\.\d+)?)\s*)?\)/, parse: function (e) { return [2.55 * e[1], 2.55 * e[2], 2.55 * e[3], e[4]] } }, { re: /#([a-f0-9]{2})([a-f0-9]{2})([a-f0-9]{2})/, parse: function (e) { return [parseInt(e[1], 16), parseInt(e[2], 16), parseInt(e[3], 16)] } }, { re: /#([a-f0-9])([a-f0-9])([a-f0-9])/, parse: function (e) { return [parseInt(e[1] + e[1], 16), parseInt(e[2] + e[2], 16), parseInt(e[3] + e[3], 16)] } }, { re: /hsla?\(\s*(\d+(?:\.\d+)?)\s*,\s*(\d+(?:\.\d+)?)\%\s*,\s*(\d+(?:\.\d+)?)\%\s*(?:,\s*(\d?(?:\.\d+)?)\s*)?\)/, space: "hsla", parse: function (e) { return [e[1], e[2] / 100, e[3] / 100, e[4]] } }], l = e.Color = function (t, i, s, n) { return new e.Color.fn.parse(t, i, s, n) }, u = { rgba: { props: { red: { idx: 0, type: "byte" }, green: { idx: 1, type: "byte" }, blue: { idx: 2, type: "byte" } } }, hsla: { props: { hue: { idx: 0, type: "degrees" }, saturation: { idx: 1, type: "percent" }, lightness: { idx: 2, type: "percent" } } } }, c = { "byte": { floor: !0, max: 255 }, percent: { max: 1 }, degrees: { mod: 360, floor: !0 } }, d = l.support = {}, p = e("<p>")[0], f = e.each; p.style.cssText = "background-color:rgba(1,1,1,.5)", d.rgba = p.style.backgroundColor.indexOf("rgba") > -1, f(u, function (e, t) { t.cache = "_" + e, t.props.alpha = { idx: 3, type: "percent", def: 1 } }), l.fn = e.extend(l.prototype, {
      parse: function (n, o, r, h) { if (n === t) return this._rgba = [null, null, null, null], this; (n.jquery || n.nodeType) && (n = e(n).css(o), o = t); var c = this, d = e.type(n), p = this._rgba = []; return o !== t && (n = [n, o, r, h], d = "array"), "string" === d ? this.parse(s(n) || a._default) : "array" === d ? (f(u.rgba.props, function (e, t) { p[t.idx] = i(n[t.idx], t) }), this) : "object" === d ? (n instanceof l ? f(u, function (e, t) { n[t.cache] && (c[t.cache] = n[t.cache].slice()) }) : f(u, function (t, s) { var a = s.cache; f(s.props, function (e, t) { if (!c[a] && s.to) { if ("alpha" === e || null == n[e]) return; c[a] = s.to(c._rgba) } c[a][t.idx] = i(n[e], t, !0) }), c[a] && 0 > e.inArray(null, c[a].slice(0, 3)) && (c[a][3] = 1, s.from && (c._rgba = s.from(c[a]))) }), this) : t }, is: function (e) { var i = l(e), s = !0, n = this; return f(u, function (e, a) { var o, r = i[a.cache]; return r && (o = n[a.cache] || a.to && a.to(n._rgba) || [], f(a.props, function (e, i) { return null != r[i.idx] ? s = r[i.idx] === o[i.idx] : t })), s }), s }, _space: function () { var e = [], t = this; return f(u, function (i, s) { t[s.cache] && e.push(i) }), e.pop() }, transition: function (e, t) { var s = l(e), n = s._space(), a = u[n], o = 0 === this.alpha() ? l("transparent") : this, r = o[a.cache] || a.to(o._rgba), h = r.slice(); return s = s[a.cache], f(a.props, function (e, n) { var a = n.idx, o = r[a], l = s[a], u = c[n.type] || {}; null !== l && (null === o ? h[a] = l : (u.mod && (l - o > u.mod / 2 ? o += u.mod : o - l > u.mod / 2 && (o -= u.mod)), h[a] = i((l - o) * t + o, n))) }), this[n](h) }, blend: function (t) { if (1 === this._rgba[3]) return this; var i = this._rgba.slice(), s = i.pop(), n = l(t)._rgba; return l(e.map(i, function (e, t) { return (1 - s) * n[t] + s * e })) }, toRgbaString: function () { var t = "rgba(", i = e.map(this._rgba, function (e, t) { return null == e ? t > 2 ? 1 : 0 : e }); return 1 === i[3] && (i.pop(), t = "rgb("), t + i.join() + ")" }, toHslaString: function () { var t = "hsla(", i = e.map(this.hsla(), function (e, t) { return null == e && (e = t > 2 ? 1 : 0), t && 3 > t && (e = Math.round(100 * e) + "%"), e }); return 1 === i[3] && (i.pop(), t = "hsl("), t + i.join() + ")" }, toHexString: function (t) {
        var i = this._rgba.slice(), s = i.pop(); return t && i.push(~~(255 * s)), "#" + e.map(i, function (e) { return e = (e || 0).toString(16), 1 === e.length ? "0" + e : e }).join("")
      }, toString: function () { return 0 === this._rgba[3] ? "transparent" : this.toRgbaString() }
    }), l.fn.parse.prototype = l.fn, u.hsla.to = function (e) { if (null == e[0] || null == e[1] || null == e[2]) return [null, null, null, e[3]]; var t, i, s = e[0] / 255, n = e[1] / 255, a = e[2] / 255, o = e[3], r = Math.max(s, n, a), h = Math.min(s, n, a), l = r - h, u = r + h, c = .5 * u; return t = h === r ? 0 : s === r ? 60 * (n - a) / l + 360 : n === r ? 60 * (a - s) / l + 120 : 60 * (s - n) / l + 240, i = 0 === l ? 0 : .5 >= c ? l / u : l / (2 - u), [Math.round(t) % 360, i, c, null == o ? 1 : o] }, u.hsla.from = function (e) { if (null == e[0] || null == e[1] || null == e[2]) return [null, null, null, e[3]]; var t = e[0] / 360, i = e[1], s = e[2], a = e[3], o = .5 >= s ? s * (1 + i) : s + i - s * i, r = 2 * s - o; return [Math.round(255 * n(r, o, t + 1 / 3)), Math.round(255 * n(r, o, t)), Math.round(255 * n(r, o, t - 1 / 3)), a] }, f(u, function (s, n) { var a = n.props, o = n.cache, h = n.to, u = n.from; l.fn[s] = function (s) { if (h && !this[o] && (this[o] = h(this._rgba)), s === t) return this[o].slice(); var n, r = e.type(s), c = "array" === r || "object" === r ? s : arguments, d = this[o].slice(); return f(a, function (e, t) { var s = c["object" === r ? e : t.idx]; null == s && (s = d[t.idx]), d[t.idx] = i(s, t) }), u ? (n = l(u(d)), n[o] = d, n) : l(d) }, f(a, function (t, i) { l.fn[t] || (l.fn[t] = function (n) { var a, o = e.type(n), h = "alpha" === t ? this._hsla ? "hsla" : "rgba" : s, l = this[h](), u = l[i.idx]; return "undefined" === o ? u : ("function" === o && (n = n.call(this, u), o = e.type(n)), null == n && i.empty ? this : ("string" === o && (a = r.exec(n), a && (n = u + parseFloat(a[2]) * ("+" === a[1] ? 1 : -1))), l[i.idx] = n, this[h](l))) }) }) }), l.hook = function (t) { var i = t.split(" "); f(i, function (t, i) { e.cssHooks[i] = { set: function (t, n) { var a, o, r = ""; if ("transparent" !== n && ("string" !== e.type(n) || (a = s(n)))) { if (n = l(a || n), !d.rgba && 1 !== n._rgba[3]) { for (o = "backgroundColor" === i ? t.parentNode : t; ("" === r || "transparent" === r) && o && o.style;)try { r = e.css(o, "backgroundColor"), o = o.parentNode } catch (h) { } n = n.blend(r && "transparent" !== r ? r : "_default") } n = n.toRgbaString() } try { t.style[i] = n } catch (h) { } } }, e.fx.step[i] = function (t) { t.colorInit || (t.start = l(t.elem, i), t.end = l(t.end), t.colorInit = !0), e.cssHooks[i].set(t.elem, t.start.transition(t.end, t.pos)) } }) }, l.hook(o), e.cssHooks.borderColor = { expand: function (e) { var t = {}; return f(["Top", "Right", "Bottom", "Left"], function (i, s) { t["border" + s + "Color"] = e }), t } }, a = e.Color.names = { aqua: "#00ffff", black: "#000000", blue: "#0000ff", fuchsia: "#ff00ff", gray: "#808080", green: "#008000", lime: "#00ff00", maroon: "#800000", navy: "#000080", olive: "#808000", purple: "#800080", red: "#ff0000", silver: "#c0c0c0", teal: "#008080", white: "#ffffff", yellow: "#ffff00", transparent: [null, null, null, 0], _default: "#ffffff" }
  }(p), function () { function t(t) { var i, s, n = t.ownerDocument.defaultView ? t.ownerDocument.defaultView.getComputedStyle(t, null) : t.currentStyle, a = {}; if (n && n.length && n[0] && n[n[0]]) for (s = n.length; s--;)i = n[s], "string" == typeof n[i] && (a[e.camelCase(i)] = n[i]); else for (i in n) "string" == typeof n[i] && (a[i] = n[i]); return a } function i(t, i) { var s, a, o = {}; for (s in i) a = i[s], t[s] !== a && (n[s] || (e.fx.step[s] || !isNaN(parseFloat(a))) && (o[s] = a)); return o } var s = ["add", "remove", "toggle"], n = { border: 1, borderBottom: 1, borderColor: 1, borderLeft: 1, borderRight: 1, borderTop: 1, borderWidth: 1, margin: 1, padding: 1 }; e.each(["borderLeftStyle", "borderRightStyle", "borderBottomStyle", "borderTopStyle"], function (t, i) { e.fx.step[i] = function (e) { ("none" !== e.end && !e.setAttr || 1 === e.pos && !e.setAttr) && (p.style(e.elem, i, e.end), e.setAttr = !0) } }), e.fn.addBack || (e.fn.addBack = function (e) { return this.add(null == e ? this.prevObject : this.prevObject.filter(e)) }), e.effects.animateClass = function (n, a, o, r) { var h = e.speed(a, o, r); return this.queue(function () { var a, o = e(this), r = o.attr("class") || "", l = h.children ? o.find("*").addBack() : o; l = l.map(function () { var i = e(this); return { el: i, start: t(this) } }), a = function () { e.each(s, function (e, t) { n[t] && o[t + "Class"](n[t]) }) }, a(), l = l.map(function () { return this.end = t(this.el[0]), this.diff = i(this.start, this.end), this }), o.attr("class", r), l = l.map(function () { var t = this, i = e.Deferred(), s = e.extend({}, h, { queue: !1, complete: function () { i.resolve(t) } }); return this.el.animate(this.diff, s), i.promise() }), e.when.apply(e, l.get()).done(function () { a(), e.each(arguments, function () { var t = this.el; e.each(this.diff, function (e) { t.css(e, "") }) }), h.complete.call(o[0]) }) }) }, e.fn.extend({ addClass: function (t) { return function (i, s, n, a) { return s ? e.effects.animateClass.call(this, { add: i }, s, n, a) : t.apply(this, arguments) } }(e.fn.addClass), removeClass: function (t) { return function (i, s, n, a) { return arguments.length > 1 ? e.effects.animateClass.call(this, { remove: i }, s, n, a) : t.apply(this, arguments) } }(e.fn.removeClass), toggleClass: function (t) { return function (i, s, n, a, o) { return "boolean" == typeof s || void 0 === s ? n ? e.effects.animateClass.call(this, s ? { add: i } : { remove: i }, n, a, o) : t.apply(this, arguments) : e.effects.animateClass.call(this, { toggle: i }, s, n, a) } }(e.fn.toggleClass), switchClass: function (t, i, s, n, a) { return e.effects.animateClass.call(this, { add: i, remove: t }, s, n, a) } }) }(), function () { function t(t, i, s, n) { return e.isPlainObject(t) && (i = t, t = t.effect), t = { effect: t }, null == i && (i = {}), e.isFunction(i) && (n = i, s = null, i = {}), ("number" == typeof i || e.fx.speeds[i]) && (n = s, s = i, i = {}), e.isFunction(s) && (n = s, s = null), i && e.extend(t, i), s = s || i.duration, t.duration = e.fx.off ? 0 : "number" == typeof s ? s : s in e.fx.speeds ? e.fx.speeds[s] : e.fx.speeds._default, t.complete = n || i.complete, t } function i(t) { return !t || "number" == typeof t || e.fx.speeds[t] ? !0 : "string" != typeof t || e.effects.effect[t] ? e.isFunction(t) ? !0 : "object" != typeof t || t.effect ? !1 : !0 : !0 } e.extend(e.effects, { version: "1.11.4", save: function (e, t) { for (var i = 0; t.length > i; i++)null !== t[i] && e.data(d + t[i], e[0].style[t[i]]) }, restore: function (e, t) { var i, s; for (s = 0; t.length > s; s++)null !== t[s] && (i = e.data(d + t[s]), void 0 === i && (i = ""), e.css(t[s], i)) }, setMode: function (e, t) { return "toggle" === t && (t = e.is(":hidden") ? "show" : "hide"), t }, getBaseline: function (e, t) { var i, s; switch (e[0]) { case "top": i = 0; break; case "middle": i = .5; break; case "bottom": i = 1; break; default: i = e[0] / t.height }switch (e[1]) { case "left": s = 0; break; case "center": s = .5; break; case "right": s = 1; break; default: s = e[1] / t.width }return { x: s, y: i } }, createWrapper: function (t) { if (t.parent().is(".ui-effects-wrapper")) return t.parent(); var i = { width: t.outerWidth(!0), height: t.outerHeight(!0), "float": t.css("float") }, s = e("<div></div>").addClass("ui-effects-wrapper").css({ fontSize: "100%", background: "transparent", border: "none", margin: 0, padding: 0 }), n = { width: t.width(), height: t.height() }, a = document.activeElement; try { a.id } catch (o) { a = document.body } return t.wrap(s), (t[0] === a || e.contains(t[0], a)) && e(a).focus(), s = t.parent(), "static" === t.css("position") ? (s.css({ position: "relative" }), t.css({ position: "relative" })) : (e.extend(i, { position: t.css("position"), zIndex: t.css("z-index") }), e.each(["top", "left", "bottom", "right"], function (e, s) { i[s] = t.css(s), isNaN(parseInt(i[s], 10)) && (i[s] = "auto") }), t.css({ position: "relative", top: 0, left: 0, right: "auto", bottom: "auto" })), t.css(n), s.css(i).show() }, removeWrapper: function (t) { var i = document.activeElement; return t.parent().is(".ui-effects-wrapper") && (t.parent().replaceWith(t), (t[0] === i || e.contains(t[0], i)) && e(i).focus()), t }, setTransition: function (t, i, s, n) { return n = n || {}, e.each(i, function (e, i) { var a = t.cssUnit(i); a[0] > 0 && (n[i] = a[0] * s + a[1]) }), n } }), e.fn.extend({ effect: function () { function i(t) { function i() { e.isFunction(a) && a.call(n[0]), e.isFunction(t) && t() } var n = e(this), a = s.complete, r = s.mode; (n.is(":hidden") ? "hide" === r : "show" === r) ? (n[r](), i()) : o.call(n[0], s, i) } var s = t.apply(this, arguments), n = s.mode, a = s.queue, o = e.effects.effect[s.effect]; return e.fx.off || !o ? n ? this[n](s.duration, s.complete) : this.each(function () { s.complete && s.complete.call(this) }) : a === !1 ? this.each(i) : this.queue(a || "fx", i) }, show: function (e) { return function (s) { if (i(s)) return e.apply(this, arguments); var n = t.apply(this, arguments); return n.mode = "show", this.effect.call(this, n) } }(e.fn.show), hide: function (e) { return function (s) { if (i(s)) return e.apply(this, arguments); var n = t.apply(this, arguments); return n.mode = "hide", this.effect.call(this, n) } }(e.fn.hide), toggle: function (e) { return function (s) { if (i(s) || "boolean" == typeof s) return e.apply(this, arguments); var n = t.apply(this, arguments); return n.mode = "toggle", this.effect.call(this, n) } }(e.fn.toggle), cssUnit: function (t) { var i = this.css(t), s = []; return e.each(["em", "px", "%", "pt"], function (e, t) { i.indexOf(t) > 0 && (s = [parseFloat(i), t]) }), s } }) }(), function () { var t = {}; e.each(["Quad", "Cubic", "Quart", "Quint", "Expo"], function (e, i) { t[i] = function (t) { return Math.pow(t, e + 2) } }), e.extend(t, { Sine: function (e) { return 1 - Math.cos(e * Math.PI / 2) }, Circ: function (e) { return 1 - Math.sqrt(1 - e * e) }, Elastic: function (e) { return 0 === e || 1 === e ? e : -Math.pow(2, 8 * (e - 1)) * Math.sin((80 * (e - 1) - 7.5) * Math.PI / 15) }, Back: function (e) { return e * e * (3 * e - 2) }, Bounce: function (e) { for (var t, i = 4; ((t = Math.pow(2, --i)) - 1) / 11 > e;); return 1 / Math.pow(4, 3 - i) - 7.5625 * Math.pow((3 * t - 2) / 22 - e, 2) } }), e.each(t, function (t, i) { e.easing["easeIn" + t] = i, e.easing["easeOut" + t] = function (e) { return 1 - i(1 - e) }, e.easing["easeInOut" + t] = function (e) { return .5 > e ? i(2 * e) / 2 : 1 - i(-2 * e + 2) / 2 } }) }(), e.effects, e.effects.effect.blind = function (t, i) { var s, n, a, o = e(this), r = /up|down|vertical/, h = /up|left|vertical|horizontal/, l = ["position", "top", "bottom", "left", "right", "height", "width"], u = e.effects.setMode(o, t.mode || "hide"), c = t.direction || "up", d = r.test(c), p = d ? "height" : "width", f = d ? "top" : "left", m = h.test(c), g = {}, v = "show" === u; o.parent().is(".ui-effects-wrapper") ? e.effects.save(o.parent(), l) : e.effects.save(o, l), o.show(), s = e.effects.createWrapper(o).css({ overflow: "hidden" }), n = s[p](), a = parseFloat(s.css(f)) || 0, g[p] = v ? n : 0, m || (o.css(d ? "bottom" : "right", 0).css(d ? "top" : "left", "auto").css({ position: "absolute" }), g[f] = v ? a : n + a), v && (s.css(p, 0), m || s.css(f, a + n)), s.animate(g, { duration: t.duration, easing: t.easing, queue: !1, complete: function () { "hide" === u && o.hide(), e.effects.restore(o, l), e.effects.removeWrapper(o), i() } }) }, e.effects.effect.bounce = function (t, i) { var s, n, a, o = e(this), r = ["position", "top", "bottom", "left", "right", "height", "width"], h = e.effects.setMode(o, t.mode || "effect"), l = "hide" === h, u = "show" === h, c = t.direction || "up", d = t.distance, p = t.times || 5, f = 2 * p + (u || l ? 1 : 0), m = t.duration / f, g = t.easing, v = "up" === c || "down" === c ? "top" : "left", _ = "up" === c || "left" === c, b = o.queue(), y = b.length; for ((u || l) && r.push("opacity"), e.effects.save(o, r), o.show(), e.effects.createWrapper(o), d || (d = o["top" === v ? "outerHeight" : "outerWidth"]() / 3), u && (a = { opacity: 1 }, a[v] = 0, o.css("opacity", 0).css(v, _ ? 2 * -d : 2 * d).animate(a, m, g)), l && (d /= Math.pow(2, p - 1)), a = {}, a[v] = 0, s = 0; p > s; s++)n = {}, n[v] = (_ ? "-=" : "+=") + d, o.animate(n, m, g).animate(a, m, g), d = l ? 2 * d : d / 2; l && (n = { opacity: 0 }, n[v] = (_ ? "-=" : "+=") + d, o.animate(n, m, g)), o.queue(function () { l && o.hide(), e.effects.restore(o, r), e.effects.removeWrapper(o), i() }), y > 1 && b.splice.apply(b, [1, 0].concat(b.splice(y, f + 1))), o.dequeue() }, e.effects.effect.clip = function (t, i) { var s, n, a, o = e(this), r = ["position", "top", "bottom", "left", "right", "height", "width"], h = e.effects.setMode(o, t.mode || "hide"), l = "show" === h, u = t.direction || "vertical", c = "vertical" === u, d = c ? "height" : "width", p = c ? "top" : "left", f = {}; e.effects.save(o, r), o.show(), s = e.effects.createWrapper(o).css({ overflow: "hidden" }), n = "IMG" === o[0].tagName ? s : o, a = n[d](), l && (n.css(d, 0), n.css(p, a / 2)), f[d] = l ? a : 0, f[p] = l ? 0 : a / 2, n.animate(f, { queue: !1, duration: t.duration, easing: t.easing, complete: function () { l || o.hide(), e.effects.restore(o, r), e.effects.removeWrapper(o), i() } }) }, e.effects.effect.drop = function (t, i) { var s, n = e(this), a = ["position", "top", "bottom", "left", "right", "opacity", "height", "width"], o = e.effects.setMode(n, t.mode || "hide"), r = "show" === o, h = t.direction || "left", l = "up" === h || "down" === h ? "top" : "left", u = "up" === h || "left" === h ? "pos" : "neg", c = { opacity: r ? 1 : 0 }; e.effects.save(n, a), n.show(), e.effects.createWrapper(n), s = t.distance || n["top" === l ? "outerHeight" : "outerWidth"](!0) / 2, r && n.css("opacity", 0).css(l, "pos" === u ? -s : s), c[l] = (r ? "pos" === u ? "+=" : "-=" : "pos" === u ? "-=" : "+=") + s, n.animate(c, { queue: !1, duration: t.duration, easing: t.easing, complete: function () { "hide" === o && n.hide(), e.effects.restore(n, a), e.effects.removeWrapper(n), i() } }) }, e.effects.effect.explode = function (t, i) { function s() { b.push(this), b.length === c * d && n() } function n() { p.css({ visibility: "visible" }), e(b).remove(), m || p.hide(), i() } var a, o, r, h, l, u, c = t.pieces ? Math.round(Math.sqrt(t.pieces)) : 3, d = c, p = e(this), f = e.effects.setMode(p, t.mode || "hide"), m = "show" === f, g = p.show().css("visibility", "hidden").offset(), v = Math.ceil(p.outerWidth() / d), _ = Math.ceil(p.outerHeight() / c), b = []; for (a = 0; c > a; a++)for (h = g.top + a * _, u = a - (c - 1) / 2, o = 0; d > o; o++)r = g.left + o * v, l = o - (d - 1) / 2, p.clone().appendTo("body").wrap("<div></div>").css({ position: "absolute", visibility: "visible", left: -o * v, top: -a * _ }).parent().addClass("ui-effects-explode").css({ position: "absolute", overflow: "hidden", width: v, height: _, left: r + (m ? l * v : 0), top: h + (m ? u * _ : 0), opacity: m ? 0 : 1 }).animate({ left: r + (m ? 0 : l * v), top: h + (m ? 0 : u * _), opacity: m ? 1 : 0 }, t.duration || 500, t.easing, s) }, e.effects.effect.fade = function (t, i) { var s = e(this), n = e.effects.setMode(s, t.mode || "toggle"); s.animate({ opacity: n }, { queue: !1, duration: t.duration, easing: t.easing, complete: i }) }, e.effects.effect.fold = function (t, i) { var s, n, a = e(this), o = ["position", "top", "bottom", "left", "right", "height", "width"], r = e.effects.setMode(a, t.mode || "hide"), h = "show" === r, l = "hide" === r, u = t.size || 15, c = /([0-9]+)%/.exec(u), d = !!t.horizFirst, p = h !== d, f = p ? ["width", "height"] : ["height", "width"], m = t.duration / 2, g = {}, v = {}; e.effects.save(a, o), a.show(), s = e.effects.createWrapper(a).css({ overflow: "hidden" }), n = p ? [s.width(), s.height()] : [s.height(), s.width()], c && (u = parseInt(c[1], 10) / 100 * n[l ? 0 : 1]), h && s.css(d ? { height: 0, width: u } : { height: u, width: 0 }), g[f[0]] = h ? n[0] : u, v[f[1]] = h ? n[1] : 0, s.animate(g, m, t.easing).animate(v, m, t.easing, function () { l && a.hide(), e.effects.restore(a, o), e.effects.removeWrapper(a), i() }) }, e.effects.effect.highlight = function (t, i) { var s = e(this), n = ["backgroundImage", "backgroundColor", "opacity"], a = e.effects.setMode(s, t.mode || "show"), o = { backgroundColor: s.css("backgroundColor") }; "hide" === a && (o.opacity = 0), e.effects.save(s, n), s.show().css({ backgroundImage: "none", backgroundColor: t.color || "#ffff99" }).animate(o, { queue: !1, duration: t.duration, easing: t.easing, complete: function () { "hide" === a && s.hide(), e.effects.restore(s, n), i() } }) }, e.effects.effect.size = function (t, i) { var s, n, a, o = e(this), r = ["position", "top", "bottom", "left", "right", "width", "height", "overflow", "opacity"], h = ["position", "top", "bottom", "left", "right", "overflow", "opacity"], l = ["width", "height", "overflow"], u = ["fontSize"], c = ["borderTopWidth", "borderBottomWidth", "paddingTop", "paddingBottom"], d = ["borderLeftWidth", "borderRightWidth", "paddingLeft", "paddingRight"], p = e.effects.setMode(o, t.mode || "effect"), f = t.restore || "effect" !== p, m = t.scale || "both", g = t.origin || ["middle", "center"], v = o.css("position"), _ = f ? r : h, b = { height: 0, width: 0, outerHeight: 0, outerWidth: 0 }; "show" === p && o.show(), s = { height: o.height(), width: o.width(), outerHeight: o.outerHeight(), outerWidth: o.outerWidth() }, "toggle" === t.mode && "show" === p ? (o.from = t.to || b, o.to = t.from || s) : (o.from = t.from || ("show" === p ? b : s), o.to = t.to || ("hide" === p ? b : s)), a = { from: { y: o.from.height / s.height, x: o.from.width / s.width }, to: { y: o.to.height / s.height, x: o.to.width / s.width } }, ("box" === m || "both" === m) && (a.from.y !== a.to.y && (_ = _.concat(c), o.from = e.effects.setTransition(o, c, a.from.y, o.from), o.to = e.effects.setTransition(o, c, a.to.y, o.to)), a.from.x !== a.to.x && (_ = _.concat(d), o.from = e.effects.setTransition(o, d, a.from.x, o.from), o.to = e.effects.setTransition(o, d, a.to.x, o.to))), ("content" === m || "both" === m) && a.from.y !== a.to.y && (_ = _.concat(u).concat(l), o.from = e.effects.setTransition(o, u, a.from.y, o.from), o.to = e.effects.setTransition(o, u, a.to.y, o.to)), e.effects.save(o, _), o.show(), e.effects.createWrapper(o), o.css("overflow", "hidden").css(o.from), g && (n = e.effects.getBaseline(g, s), o.from.top = (s.outerHeight - o.outerHeight()) * n.y, o.from.left = (s.outerWidth - o.outerWidth()) * n.x, o.to.top = (s.outerHeight - o.to.outerHeight) * n.y, o.to.left = (s.outerWidth - o.to.outerWidth) * n.x), o.css(o.from), ("content" === m || "both" === m) && (c = c.concat(["marginTop", "marginBottom"]).concat(u), d = d.concat(["marginLeft", "marginRight"]), l = r.concat(c).concat(d), o.find("*[width]").each(function () { var i = e(this), s = { height: i.height(), width: i.width(), outerHeight: i.outerHeight(), outerWidth: i.outerWidth() }; f && e.effects.save(i, l), i.from = { height: s.height * a.from.y, width: s.width * a.from.x, outerHeight: s.outerHeight * a.from.y, outerWidth: s.outerWidth * a.from.x }, i.to = { height: s.height * a.to.y, width: s.width * a.to.x, outerHeight: s.height * a.to.y, outerWidth: s.width * a.to.x }, a.from.y !== a.to.y && (i.from = e.effects.setTransition(i, c, a.from.y, i.from), i.to = e.effects.setTransition(i, c, a.to.y, i.to)), a.from.x !== a.to.x && (i.from = e.effects.setTransition(i, d, a.from.x, i.from), i.to = e.effects.setTransition(i, d, a.to.x, i.to)), i.css(i.from), i.animate(i.to, t.duration, t.easing, function () { f && e.effects.restore(i, l) }) })), o.animate(o.to, { queue: !1, duration: t.duration, easing: t.easing, complete: function () { 0 === o.to.opacity && o.css("opacity", o.from.opacity), "hide" === p && o.hide(), e.effects.restore(o, _), f || ("static" === v ? o.css({ position: "relative", top: o.to.top, left: o.to.left }) : e.each(["top", "left"], function (e, t) { o.css(t, function (t, i) { var s = parseInt(i, 10), n = e ? o.to.left : o.to.top; return "auto" === i ? n + "px" : s + n + "px" }) })), e.effects.removeWrapper(o), i() } }) }, e.effects.effect.scale = function (t, i) { var s = e(this), n = e.extend(!0, {}, t), a = e.effects.setMode(s, t.mode || "effect"), o = parseInt(t.percent, 10) || (0 === parseInt(t.percent, 10) ? 0 : "hide" === a ? 0 : 100), r = t.direction || "both", h = t.origin, l = { height: s.height(), width: s.width(), outerHeight: s.outerHeight(), outerWidth: s.outerWidth() }, u = { y: "horizontal" !== r ? o / 100 : 1, x: "vertical" !== r ? o / 100 : 1 }; n.effect = "size", n.queue = !1, n.complete = i, "effect" !== a && (n.origin = h || ["middle", "center"], n.restore = !0), n.from = t.from || ("show" === a ? { height: 0, width: 0, outerHeight: 0, outerWidth: 0 } : l), n.to = { height: l.height * u.y, width: l.width * u.x, outerHeight: l.outerHeight * u.y, outerWidth: l.outerWidth * u.x }, n.fade && ("show" === a && (n.from.opacity = 0, n.to.opacity = 1), "hide" === a && (n.from.opacity = 1, n.to.opacity = 0)), s.effect(n) }, e.effects.effect.puff = function (t, i) { var s = e(this), n = e.effects.setMode(s, t.mode || "hide"), a = "hide" === n, o = parseInt(t.percent, 10) || 150, r = o / 100, h = { height: s.height(), width: s.width(), outerHeight: s.outerHeight(), outerWidth: s.outerWidth() }; e.extend(t, { effect: "scale", queue: !1, fade: !0, mode: n, complete: i, percent: a ? o : 100, from: a ? h : { height: h.height * r, width: h.width * r, outerHeight: h.outerHeight * r, outerWidth: h.outerWidth * r } }), s.effect(t) }, e.effects.effect.pulsate = function (t, i) { var s, n = e(this), a = e.effects.setMode(n, t.mode || "show"), o = "show" === a, r = "hide" === a, h = o || "hide" === a, l = 2 * (t.times || 5) + (h ? 1 : 0), u = t.duration / l, c = 0, d = n.queue(), p = d.length; for ((o || !n.is(":visible")) && (n.css("opacity", 0).show(), c = 1), s = 1; l > s; s++)n.animate({ opacity: c }, u, t.easing), c = 1 - c; n.animate({ opacity: c }, u, t.easing), n.queue(function () { r && n.hide(), i() }), p > 1 && d.splice.apply(d, [1, 0].concat(d.splice(p, l + 1))), n.dequeue() }, e.effects.effect.shake = function (t, i) { var s, n = e(this), a = ["position", "top", "bottom", "left", "right", "height", "width"], o = e.effects.setMode(n, t.mode || "effect"), r = t.direction || "left", h = t.distance || 20, l = t.times || 3, u = 2 * l + 1, c = Math.round(t.duration / u), d = "up" === r || "down" === r ? "top" : "left", p = "up" === r || "left" === r, f = {}, m = {}, g = {}, v = n.queue(), _ = v.length; for (e.effects.save(n, a), n.show(), e.effects.createWrapper(n), f[d] = (p ? "-=" : "+=") + h, m[d] = (p ? "+=" : "-=") + 2 * h, g[d] = (p ? "-=" : "+=") + 2 * h, n.animate(f, c, t.easing), s = 1; l > s; s++)n.animate(m, c, t.easing).animate(g, c, t.easing); n.animate(m, c, t.easing).animate(f, c / 2, t.easing).queue(function () { "hide" === o && n.hide(), e.effects.restore(n, a), e.effects.removeWrapper(n), i() }), _ > 1 && v.splice.apply(v, [1, 0].concat(v.splice(_, u + 1))), n.dequeue() }, e.effects.effect.slide = function (t, i) { var s, n = e(this), a = ["position", "top", "bottom", "left", "right", "width", "height"], o = e.effects.setMode(n, t.mode || "show"), r = "show" === o, h = t.direction || "left", l = "up" === h || "down" === h ? "top" : "left", u = "up" === h || "left" === h, c = {}; e.effects.save(n, a), n.show(), s = t.distance || n["top" === l ? "outerHeight" : "outerWidth"](!0), e.effects.createWrapper(n).css({ overflow: "hidden" }), r && n.css(l, u ? isNaN(s) ? "-" + s : -s : s), c[l] = (r ? u ? "+=" : "-=" : u ? "-=" : "+=") + s, n.animate(c, { queue: !1, duration: t.duration, easing: t.easing, complete: function () { "hide" === o && n.hide(), e.effects.restore(n, a), e.effects.removeWrapper(n), i() } }) }, e.effects.effect.transfer = function (t, i) { var s = e(this), n = e(t.to), a = "fixed" === n.css("position"), o = e("body"), r = a ? o.scrollTop() : 0, h = a ? o.scrollLeft() : 0, l = n.offset(), u = { top: l.top - r, left: l.left - h, height: n.innerHeight(), width: n.innerWidth() }, c = s.offset(), d = e("<div class='ui-effects-transfer'></div>").appendTo(document.body).addClass(t.className).css({ top: c.top - r, left: c.left - h, height: s.innerHeight(), width: s.innerWidth(), position: a ? "fixed" : "absolute" }).animate(u, t.duration, t.easing, function () { d.remove(), i() }) }
});
/*!
 * jQuery UI Touch Punch 0.2.3
 *
 * Copyright 2011–2014, Dave Furfero
 * Dual licensed under the MIT or GPL Version 2 licenses.
 *
 * Depends:
 *  jquery.ui.widget.js
 *  jquery.ui.mouse.js
 */
(function ($) {

  // Detect touch support
  $.support.touch = 'ontouchend' in document;

  // Ignore browsers without touch support
  if (!$.support.touch) {
    return;
  }

  var mouseProto = $.ui.mouse.prototype,
    _mouseInit = mouseProto._mouseInit,
    _mouseDestroy = mouseProto._mouseDestroy,
    touchHandled;

  /**
   * Simulate a mouse event based on a corresponding touch event
   * @param {Object} event A touch event
   * @param {String} simulatedType The corresponding mouse event
   */
  function simulateMouseEvent(event, simulatedType) {

    // Ignore multi-touch events
    if (event.originalEvent.touches.length > 1) {
      return;
    }

    event.preventDefault();

    var touch = event.originalEvent.changedTouches[0],
      simulatedEvent = document.createEvent('MouseEvents');

    // Initialize the simulated mouse event using the touch event's coordinates
    simulatedEvent.initMouseEvent(
      simulatedType,    // type
      true,             // bubbles                    
      true,             // cancelable                 
      window,           // view                       
      1,                // detail                     
      touch.screenX,    // screenX                    
      touch.screenY,    // screenY                    
      touch.clientX,    // clientX                    
      touch.clientY,    // clientY                    
      false,            // ctrlKey                    
      false,            // altKey                     
      false,            // shiftKey                   
      false,            // metaKey                    
      0,                // button                     
      null              // relatedTarget              
    );

    // Dispatch the simulated event to the target element
    event.target.dispatchEvent(simulatedEvent);
  }

  /**
   * Handle the jQuery UI widget's touchstart events
   * @param {Object} event The widget element's touchstart event
   */
  mouseProto._touchStart = function (event) {

    var self = this;

    // Ignore the event if another widget is already being handled
    if (touchHandled || !self._mouseCapture(event.originalEvent.changedTouches[0])) {
      return;
    }

    // Set the flag to prevent other widgets from inheriting the touch event
    touchHandled = true;

    // Track movement to determine if interaction was a click
    self._touchMoved = false;

    // Simulate the mouseover event
    simulateMouseEvent(event, 'mouseover');

    // Simulate the mousemove event
    simulateMouseEvent(event, 'mousemove');

    // Simulate the mousedown event
    simulateMouseEvent(event, 'mousedown');
  };

  /**
   * Handle the jQuery UI widget's touchmove events
   * @param {Object} event The document's touchmove event
   */
  mouseProto._touchMove = function (event) {

    // Ignore event if not handled
    if (!touchHandled) {
      return;
    }

    // Interaction was not a click
    this._touchMoved = true;

    // Simulate the mousemove event
    simulateMouseEvent(event, 'mousemove');
  };

  /**
   * Handle the jQuery UI widget's touchend events
   * @param {Object} event The document's touchend event
   */
  mouseProto._touchEnd = function (event) {

    // Ignore event if not handled
    if (!touchHandled) {
      return;
    }

    // Simulate the mouseup event
    simulateMouseEvent(event, 'mouseup');

    // Simulate the mouseout event
    simulateMouseEvent(event, 'mouseout');

    // If the touch interaction did not move, it should trigger a click
    if (!this._touchMoved) {

      // Simulate the click event
      simulateMouseEvent(event, 'click');
    }

    // Unset the flag to allow other widgets to inherit the touch event
    touchHandled = false;
  };

  /**
   * A duck punch of the $.ui.mouse _mouseInit method to support touch events.
   * This method extends the widget with bound touch event handlers that
   * translate touch events to mouse events and pass them to the widget's
   * original mouse event handling methods.
   */
  mouseProto._mouseInit = function () {

    var self = this;

    // Delegate the touch handlers to the widget's element
    self.element.bind({
      touchstart: $.proxy(self, '_touchStart'),
      touchmove: $.proxy(self, '_touchMove'),
      touchend: $.proxy(self, '_touchEnd')
    });

    // Call the original $.ui.mouse init method
    _mouseInit.call(self);
  };

  /**
   * Remove the touch event handlers
   */
  mouseProto._mouseDestroy = function () {

    var self = this;

    // Delegate the touch handlers to the widget's element
    self.element.unbind({
      touchstart: $.proxy(self, '_touchStart'),
      touchmove: $.proxy(self, '_touchMove'),
      touchend: $.proxy(self, '_touchEnd')
    });

    // Call the original $.ui.mouse destroy method
    _mouseDestroy.call(self);
  };

})(jQuery);
// extending js/prototype/validation.js
Validation.addAllThese([
  ['validate-one-required-new', 'Please select one of the above options.', function (v, elm) {
    var p = elm.parentNode.parentNode;
    var options = p.getElementsByTagName('INPUT');
    return $A(options).any(function (elm) {
      return $F(elm);
    });
  }],
  ['validate-phoneLax', 'Please enter a valid phone number. Only numbers and spaces are acceptable.', function (v) {
    return Validation.get('IsEmpty').test(v) || /^[0-9 ]+$/.test(v);
  }],
  ['validate-fax', 'Please enter a valid fax number. Only numbers and spaces are acceptable.', function (v) {
    return Validation.get('IsEmpty').test(v) || /^[0-9 ]+$/.test(v);
  }],
  ['validate-email', 'Please enter a valid email address.', function (v) {
    return Validation.get('IsEmpty').test(v) || /^([a-z0-9,!\#\$%&'\*\+\/=\?\^_`\{\|\}~-]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])+(\.([a-z0-9,!\#\$%&'\*\+\/=\?\^_`\{\|\}~-]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])+)*@([a-z0-9-]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])+(\.([a-z0-9-]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])+)*\.(([a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF]){2,})$/i.test(v);
  }],
  ['validate-email-or-ffp', 'Please enter a valid email address or ffp number.', function (v) {
    return Validation.get('IsEmpty').test(v) || Validation.get('validate-email').test(v) || /^[\d\w]+$/.test(v);
  }],
  ['validate-phone-number', 'Please enter a valid phone number.', function (v) {
    return Validation.get('IsEmpty').test(v) || /^\+\d[\d\(\)\ -]{6,16}\d$/.test(v) || /^00\d[\d\(\)\ -]{6,16}\d$/.test(v);
  }],
  ['validate-confirmation-email', 'Email addresses must match.', function (confirmVal, confirmInput) {
    var confirmId = confirmInput.readAttribute('id');
    confirmId = confirmId.split('_');
    confirmId.shift();
    var emailId = confirmId.join('_');
    var emailItem = $(emailId);
    var emailVal = emailItem.getValue();

    emailVal = emailVal.toLowerCase();
    confirmVal = confirmVal.toLowerCase();

    return emailVal === confirmVal;
  }],
  ['validate-latin', 'Please use only latin letters (a-z or A-Z) in this field.', function (v, input) {
    var isNumberInput = (input.name || '').indexOf('number') !== -1,
      numberRegExp = isNumberInput ? '0-9' : '',
      latinSymbols = '^(?=.{1,30}$)[a-z' + numberRegExp + ']+(?:[\\-\\s\\—]{1}[a-z' + numberRegExp + ']+)*$',
      availableSymbols = '[a-z' + numberRegExp + 'ÀÁÂÃÄÅÆĀĂĄÇĆĈĊČÐĎĐÈÉÊËĒĖĘĚƏàáâãäåæāăąçćĉċčðďđèéêëēėęěəĜĞĠĢĤĦÌÍÎÏĪĮİIĲĴĶĻŁÑŃŅŇĝğġģĥħìíîïīįiıĳĵķļłñńņňÒÓÔÕÖØŐŒƠŔŘẞŚŜŞȘŠÞŢŤÙÚÛÜŪŬŮŰŲƯŴÝŶŸŹŻŽòóôõöøőœơŕřßśŝşșšþţťùúûüūŭůűųưŵýŷÿźżžøæåäö]',
      specialSymbols = '^(?=.{1,30}$)' + availableSymbols + '+(?:[\\-\\s\\—]{1}' + availableSymbols + '+)*$',
      regExpRules = WT.Config.validationType === 'latin_specials' ? specialSymbols : latinSymbols;

    if (isNumberInput && !WT.Config.isAllowedSpaceByPassport) {
      return !WT.Utiles.isSpace(v);
    }

    if (!isNumberInput && !WT.Config.isAllowedSpaceByUsername) {
      return !WT.Utiles.isSpace(v);
    }

    return Validation.get('IsEmpty').test(v) || (new RegExp(regExpRules, 'gi').test(v.trim()));
  }],
  ['validate-record-locator', 'Please enter a valid record locator. Only alpha-numeric characters are allowed.', function (v) {
    return Validation.get('IsEmpty').test(v) || /^[a-zA-Z0-9]+$/.test(v);
  }],
  ['validate-max-characters-adult', 'Please enter less characters.', function (v, input) {
    return WT.Utiles.isMaxCharactersByFullNamePassenger(v, input, WT.Options.passengersMaxcharacters_adult);
  }],
  ['validate-max-characters-child', 'Please enter less characters.', function (v, input) {
    return WT.Utiles.isMaxCharactersByFullNamePassenger(v, input, WT.Options.passengersMaxcharacters_child);
  }],
  ['validate-max-characters-infant', 'Please enter less characters.', function (v, input) {
    return WT.Utiles.isMaxCharactersByFullNamePassenger(v, input, WT.Options.passengersMaxcharacters_infant);
  }],
  ['required-entry', 'Required', function (v) {
    return !Validation.get('IsEmpty').test(v);
  }],
  ['min-length-rloc', 'The minimum record locator length is 5', function (v) {
    return Validation.get('IsEmpty').test(v) || /.{5,}/.test(v);
  }],
  ['verification-code-length', 'Wrong number of digits. Try again', function (v) {
    return v.length === 6;
  }],
  ['validate-phone-length', 'Please enter a valid phone number', function (v) {
    return Validation.get('IsEmpty').test(v) || /^[0-9 ]{6,}$/.test(v);
  }],
  ['validate-flight-designator', 'Please enter a valid flight number', function (v) {
    return /^[A-Z\d]{2}[A-Z]?\d{1,4}[A-Z]?$/.test(v);
  }],
  ['validate-confirmation-password', 'Please make sure your passwords match.', function (v, input) {
    var $input = jQuery(input),
      $form = $input.parents('form'),
      passwordFieldId = $input.data('v-field-id'),
      $passwordInput = $form.find('#' + passwordFieldId);

    return v === $passwordInput.val();
  }],
  ['required-autocomplete-select', 'Please select an option from the list of suggestions', function (v) {
    return !Validation.get('IsEmpty').test(v);
  }],
  ['required-autocomplete-select-allow-empty', 'Please select an option from the list of suggestions', function (v, input) {
    var $input = $j(input),
      $form = $input.parents('form'),
      name = $input.attr('name'),
      $autocompleteInput = $form.find('[data-autocomplete-for="' + name + '"]');

    if (!Validation.get('IsEmpty').test(v)) {
      return true;
    }

    if (Validation.get('IsEmpty').test(v) && !$autocompleteInput.val()) {
      return true;
    }

    return false;
  }],
]);

(function ($) {
  function validate() {
    var errorMsg = 'Please use only latin letters (a-z or A-Z) in this field.',
      errorMsgByNumber = 'Please use only latin letters (a-z or A-Z) and numbers (0-9) in this field.',
      idArray = ['firstname', 'lastname', 'second_lastname', 'passenger_firstname',
        'passenger_lastname', 'passenger_secondlastname', 'middlename', 'doco_number',
        'docs_number', 'docid_number', 'contact_firstname', 'contact_lastname'],
      numbersIds = ['doco_number', 'docs_number', 'docid_number'],
      numberPattern = '0-9',
      latinSymbols = 'a-z',
      extraSymbols = [' ', '-'],
      latinSpecialsSymbols = 'a-zÀÁÂÃÄÅÆĀĂĄÇĆĈĊČÐĎĐÈÉÊËĒĖĘĚƏàáâãäåæāăąçćĉċčðďđèéêëēėęěəĜĞĠĢĤĦÌÍÎÏĪĮİIĲĴĶĻŁÑŃŅŇĝğġģĥħìíîïīįiıĳĵķļłñńņňÒÓÔÕÖØŐŒƠŔŘẞŚŜŞȘŠÞŢŤÙÚÛÜŪŬŮŰŲƯŴÝŶŸŹŻŽòóôõöøőœơŕřßśŝşșšþţťùúûüūŭůűųưŵýŷÿźżžøæåäö';

    function validationInputs(inputID) {
      var selector = 'input[name^=' + inputID + ']',
        isNumberInput = numbersIds.indexOf(inputID) !== -1,
        messageError = isNumberInput ? errorMsgByNumber : errorMsg,
        isLatinSpecials = WT.Config.validationType === 'latin_specials',
        textExtraSymbols = WT.Config.isAllowedSpaceByUsername ? extraSymbols.join('') : '',
        numberExtraSymbols = WT.Config.isAllowedSpaceByPassport ? extraSymbols.join('') : '',
        rules = isLatinSpecials ? latinSpecialsSymbols : latinSymbols;

      var regExpRules = isNumberInput ? rules + numberPattern + numberExtraSymbols : rules + textExtraSymbols;
      var regexp = new RegExp('^[' + regExpRules + ']+$', 'i');
      var replaceRegexp = new RegExp('[^' + regExpRules + ']', 'gi');

      $(selector).off('input change').on('input change', function () {
        var $input = $(this),
          currentVal = $input.val();

        extraSymbols.forEach(function (item) {
          var specialRegexp = new RegExp('[' + item + ']+', 'gi');
          currentVal = currentVal.replace(specialRegexp, item);

          $input.val(currentVal);
        });

        if (currentVal && !regexp.test(currentVal)) {
          WT.Utiles.renderMessageTooltip($input, currentVal.replace(replaceRegexp, ''), messageError);
        } else {
          $input.siblings('.validation-error-tooltip').hide();
          if (!isNumberInput) checkPassengerNameLength($input, currentVal);
        }
      });
    }

    function checkPassengerNameLength($input, currentVal) {
      var passengerTypes = ['adult', 'child', 'infant'];

      $(passengerTypes).each(function () {
        var currentClassName = 'validate-max-characters-' + this,
          errorMsg = 'First/Last Name should not exceed %s characters in total';

        if ($input.hasClass(currentClassName)) {
          var siblingId = $input.data('siblingId'),
            $siblingInput = $j('#' + siblingId),
            siblingValue = $siblingInput && $siblingInput.length ? $siblingInput.val() : '',
            configMaxValue = WT.Options['passengersMaxcharacters_' + this]
          maxCharactersLength = WT.Utiles.getMaxCharactersLengthByFullNamePassenger($input, configMaxValue),
            lengthFullName = (currentVal + siblingValue).length;

          if (lengthFullName > maxCharactersLength) {
            $input
              .val(currentVal.slice(0, -1))
              .siblings('.validation-error-tooltip')
              .text(Translator.translate(errorMsg).replace('%s', maxCharactersLength))
              .show();
          } else {
            $input
              .siblings('.validation-error-tooltip')
              .hide();
          }
        }
      })
    }

    idArray.forEach(function (elementId) {
      validationInputs(elementId);
    });

    if (Object.keys(WT)) WT.Utiles.latinValidation = validate;
  }

  $(document).ready(validate);
})(jQuery);
var moment = function (e) { var t = {}; function a(n) { if (t[n]) return t[n].exports; var s = t[n] = { i: n, l: !1, exports: {} }; return e[n].call(s.exports, s, s.exports, a), s.l = !0, s.exports } return a.m = e, a.c = t, a.d = function (e, t, n) { a.o(e, t) || Object.defineProperty(e, t, { enumerable: !0, get: n }) }, a.r = function (e) { "undefined" != typeof Symbol && Symbol.toStringTag && Object.defineProperty(e, Symbol.toStringTag, { value: "Module" }), Object.defineProperty(e, "__esModule", { value: !0 }) }, a.t = function (e, t) { if (1 & t && (e = a(e)), 8 & t) return e; if (4 & t && "object" == typeof e && e && e.__esModule) return e; var n = Object.create(null); if (a.r(n), Object.defineProperty(n, "default", { enumerable: !0, value: e }), 2 & t && "string" != typeof e) for (var s in e) a.d(n, s, function (t) { return e[t] }.bind(null, s)); return n }, a.n = function (e) { var t = e && e.__esModule ? function () { return e.default } : function () { return e }; return a.d(t, "a", t), t }, a.o = function (e, t) { return Object.prototype.hasOwnProperty.call(e, t) }, a.p = "", a(a.s = 124) }([function (e, t, a) { (function (e) { e.exports = function () { "use strict"; var t, n; function s() { return t.apply(null, arguments) } function r(e) { return e instanceof Array || "[object Array]" === Object.prototype.toString.call(e) } function i(e) { return null != e && "[object Object]" === Object.prototype.toString.call(e) } function d(e) { return void 0 === e } function _(e) { return "number" == typeof e || "[object Number]" === Object.prototype.toString.call(e) } function o(e) { return e instanceof Date || "[object Date]" === Object.prototype.toString.call(e) } function u(e, t) { var a, n = []; for (a = 0; a < e.length; ++a)n.push(t(e[a], a)); return n } function m(e, t) { return Object.prototype.hasOwnProperty.call(e, t) } function l(e, t) { for (var a in t) m(t, a) && (e[a] = t[a]); return m(t, "toString") && (e.toString = t.toString), m(t, "valueOf") && (e.valueOf = t.valueOf), e } function c(e, t, a, n) { return bt(e, t, a, n, !0).utc() } function h(e) { return null == e._pf && (e._pf = { empty: !1, unusedTokens: [], unusedInput: [], overflow: -2, charsLeftOver: 0, nullInput: !1, invalidMonth: null, invalidFormat: !1, userInvalidated: !1, iso: !1, parsedDateParts: [], meridiem: null, rfc2822: !1, weekdayMismatch: !1 }), e._pf } function M(e) { if (null == e._isValid) { var t = h(e), a = n.call(t.parsedDateParts, function (e) { return null != e }), s = !isNaN(e._d.getTime()) && t.overflow < 0 && !t.empty && !t.invalidMonth && !t.invalidWeekday && !t.weekdayMismatch && !t.nullInput && !t.invalidFormat && !t.userInvalidated && (!t.meridiem || t.meridiem && a); if (e._strict && (s = s && 0 === t.charsLeftOver && 0 === t.unusedTokens.length && void 0 === t.bigHour), null != Object.isFrozen && Object.isFrozen(e)) return s; e._isValid = s } return e._isValid } function L(e) { var t = c(NaN); return null != e ? l(h(t), e) : h(t).userInvalidated = !0, t } n = Array.prototype.some ? Array.prototype.some : function (e) { for (var t = Object(this), a = t.length >>> 0, n = 0; n < a; n++)if (n in t && e.call(this, t[n], n, t)) return !0; return !1 }; var Y = s.momentProperties = []; function y(e, t) { var a, n, s; if (d(t._isAMomentObject) || (e._isAMomentObject = t._isAMomentObject), d(t._i) || (e._i = t._i), d(t._f) || (e._f = t._f), d(t._l) || (e._l = t._l), d(t._strict) || (e._strict = t._strict), d(t._tzm) || (e._tzm = t._tzm), d(t._isUTC) || (e._isUTC = t._isUTC), d(t._offset) || (e._offset = t._offset), d(t._pf) || (e._pf = h(t)), d(t._locale) || (e._locale = t._locale), Y.length > 0) for (a = 0; a < Y.length; a++)n = Y[a], d(s = t[n]) || (e[n] = s); return e } var f = !1; function p(e) { y(this, e), this._d = new Date(null != e._d ? e._d.getTime() : NaN), this.isValid() || (this._d = new Date(NaN)), !1 === f && (f = !0, s.updateOffset(this), f = !1) } function D(e) { return e instanceof p || null != e && null != e._isAMomentObject } function k(e) { return e < 0 ? Math.ceil(e) || 0 : Math.floor(e) } function T(e) { var t = +e, a = 0; return 0 !== t && isFinite(t) && (a = k(t)), a } function g(e, t, a) { var n, s = Math.min(e.length, t.length), r = Math.abs(e.length - t.length), i = 0; for (n = 0; n < s; n++)(a && e[n] !== t[n] || !a && T(e[n]) !== T(t[n])) && i++; return i + r } function w(e) { !1 === s.suppressDeprecationWarnings && "undefined" != typeof console && console.warn && console.warn("Deprecation warning: " + e) } function v(e, t) { var a = !0; return l(function () { if (null != s.deprecationHandler && s.deprecationHandler(null, e), a) { for (var n, r = [], i = 0; i < arguments.length; i++) { if (n = "", "object" == typeof arguments[i]) { for (var d in n += "\n[" + i + "] ", arguments[0]) n += d + ": " + arguments[0][d] + ", "; n = n.slice(0, -2) } else n = arguments[i]; r.push(n) } w(e + "\nArguments: " + Array.prototype.slice.call(r).join("") + "\n" + (new Error).stack), a = !1 } return t.apply(this, arguments) }, t) } var j, S = {}; function H(e, t) { null != s.deprecationHandler && s.deprecationHandler(e, t), S[e] || (w(t), S[e] = !0) } function b(e) { return e instanceof Function || "[object Function]" === Object.prototype.toString.call(e) } function x(e, t) { var a, n = l({}, e); for (a in t) m(t, a) && (i(e[a]) && i(t[a]) ? (n[a] = {}, l(n[a], e[a]), l(n[a], t[a])) : null != t[a] ? n[a] = t[a] : delete n[a]); for (a in e) m(e, a) && !m(t, a) && i(e[a]) && (n[a] = l({}, n[a])); return n } function O(e) { null != e && this.set(e) } s.suppressDeprecationWarnings = !1, s.deprecationHandler = null, j = Object.keys ? Object.keys : function (e) { var t, a = []; for (t in e) m(e, t) && a.push(t); return a }; var P = {}; function W(e, t) { var a = e.toLowerCase(); P[a] = P[a + "s"] = P[t] = e } function E(e) { return "string" == typeof e ? P[e] || P[e.toLowerCase()] : void 0 } function A(e) { var t, a, n = {}; for (a in e) m(e, a) && (t = E(a)) && (n[t] = e[a]); return n } var F = {}; function z(e, t) { F[e] = t } function J(e, t, a) { var n = "" + Math.abs(e), s = t - n.length, r = e >= 0; return (r ? a ? "+" : "" : "-") + Math.pow(10, Math.max(0, s)).toString().substr(1) + n } var N = /(\[[^\[]*\])|(\\)?([Hh]mm(ss)?|Mo|MM?M?M?|Do|DDDo|DD?D?D?|ddd?d?|do?|w[o|w]?|W[o|W]?|Qo?|YYYYYY|YYYYY|YYYY|YY|gg(ggg?)?|GG(GGG?)?|e|E|a|A|hh?|HH?|kk?|mm?|ss?|S{1,9}|x|X|zz?|ZZ?|.)/g, I = /(\[[^\[]*\])|(\\)?(LTS|LT|LL?L?L?|l{1,4})/g, C = {}, R = {}; function U(e, t, a, n) { var s = n; "string" == typeof n && (s = function () { return this[n]() }), e && (R[e] = s), t && (R[t[0]] = function () { return J(s.apply(this, arguments), t[1], t[2]) }), a && (R[a] = function () { return this.localeData().ordinal(s.apply(this, arguments), e) }) } function G(e) { return e.match(/\[[\s\S]/) ? e.replace(/^\[|\]$/g, "") : e.replace(/\\/g, "") } function V(e, t) { return e.isValid() ? (t = Z(t, e.localeData()), C[t] = C[t] || function (e) { var t, a, n = e.match(N); for (t = 0, a = n.length; t < a; t++)R[n[t]] ? n[t] = R[n[t]] : n[t] = G(n[t]); return function (t) { var s, r = ""; for (s = 0; s < a; s++)r += b(n[s]) ? n[s].call(t, e) : n[s]; return r } }(t), C[t](e)) : e.localeData().invalidDate() } function Z(e, t) { var a = 5; function n(e) { return t.longDateFormat(e) || e } for (I.lastIndex = 0; a >= 0 && I.test(e);)e = e.replace(I, n), I.lastIndex = 0, a -= 1; return e } var B = /\d/, K = /\d\d/, $ = /\d{3}/, q = /\d{4}/, Q = /[+-]?\d{6}/, X = /\d\d?/, ee = /\d\d\d\d?/, te = /\d\d\d\d\d\d?/, ae = /\d{1,3}/, ne = /\d{1,4}/, se = /[+-]?\d{1,6}/, re = /\d+/, ie = /[+-]?\d+/, de = /Z|[+-]\d\d:?\d\d/gi, _e = /Z|[+-]\d\d(?::?\d\d)?/gi, oe = /[0-9]{0,256}['a-z\u00A0-\u05FF\u0700-\uD7FF\uF900-\uFDCF\uFDF0-\uFF07\uFF10-\uFFEF]{1,256}|[\u0600-\u06FF\/]{1,256}(\s*?[\u0600-\u06FF]{1,256}){1,2}/i, ue = {}; function me(e, t, a) { ue[e] = b(t) ? t : function (e, n) { return e && a ? a : t } } function le(e, t) { return m(ue, e) ? ue[e](t._strict, t._locale) : new RegExp(function (e) { return ce(e.replace("\\", "").replace(/\\(\[)|\\(\])|\[([^\]\[]*)\]|\\(.)/g, function (e, t, a, n, s) { return t || a || n || s })) }(e)) } function ce(e) { return e.replace(/[-\/\\^$*+?.()|[\]{}]/g, "\\$&") } var he = {}; function Me(e, t) { var a, n = t; for ("string" == typeof e && (e = [e]), _(t) && (n = function (e, a) { a[t] = T(e) }), a = 0; a < e.length; a++)he[e[a]] = n } function Le(e, t) { Me(e, function (e, a, n, s) { n._w = n._w || {}, t(e, n._w, n, s) }) } function Ye(e, t, a) { null != t && m(he, e) && he[e](t, a._a, a, e) } var ye = 0, fe = 1, pe = 2, De = 3, ke = 4, Te = 5, ge = 6, we = 7, ve = 8; function je(e) { return Se(e) ? 366 : 365 } function Se(e) { return e % 4 == 0 && e % 100 != 0 || e % 400 == 0 } U("Y", 0, 0, function () { var e = this.year(); return e <= 9999 ? "" + e : "+" + e }), U(0, ["YY", 2], 0, function () { return this.year() % 100 }), U(0, ["YYYY", 4], 0, "year"), U(0, ["YYYYY", 5], 0, "year"), U(0, ["YYYYYY", 6, !0], 0, "year"), W("year", "y"), z("year", 1), me("Y", ie), me("YY", X, K), me("YYYY", ne, q), me("YYYYY", se, Q), me("YYYYYY", se, Q), Me(["YYYYY", "YYYYYY"], ye), Me("YYYY", function (e, t) { t[ye] = 2 === e.length ? s.parseTwoDigitYear(e) : T(e) }), Me("YY", function (e, t) { t[ye] = s.parseTwoDigitYear(e) }), Me("Y", function (e, t) { t[ye] = parseInt(e, 10) }), s.parseTwoDigitYear = function (e) { return T(e) + (T(e) > 68 ? 1900 : 2e3) }; var He, be = xe("FullYear", !0); function xe(e, t) { return function (a) { return null != a ? (Pe(this, e, a), s.updateOffset(this, t), this) : Oe(this, e) } } function Oe(e, t) { return e.isValid() ? e._d["get" + (e._isUTC ? "UTC" : "") + t]() : NaN } function Pe(e, t, a) { e.isValid() && !isNaN(a) && ("FullYear" === t && Se(e.year()) && 1 === e.month() && 29 === e.date() ? e._d["set" + (e._isUTC ? "UTC" : "") + t](a, e.month(), We(a, e.month())) : e._d["set" + (e._isUTC ? "UTC" : "") + t](a)) } function We(e, t) { if (isNaN(e) || isNaN(t)) return NaN; var a = function (e, t) { return (e % t + t) % t }(t, 12); return e += (t - a) / 12, 1 === a ? Se(e) ? 29 : 28 : 31 - a % 7 % 2 } He = Array.prototype.indexOf ? Array.prototype.indexOf : function (e) { var t; for (t = 0; t < this.length; ++t)if (this[t] === e) return t; return -1 }, U("M", ["MM", 2], "Mo", function () { return this.month() + 1 }), U("MMM", 0, 0, function (e) { return this.localeData().monthsShort(this, e) }), U("MMMM", 0, 0, function (e) { return this.localeData().months(this, e) }), W("month", "M"), z("month", 8), me("M", X), me("MM", X, K), me("MMM", function (e, t) { return t.monthsShortRegex(e) }), me("MMMM", function (e, t) { return t.monthsRegex(e) }), Me(["M", "MM"], function (e, t) { t[fe] = T(e) - 1 }), Me(["MMM", "MMMM"], function (e, t, a, n) { var s = a._locale.monthsParse(e, n, a._strict); null != s ? t[fe] = s : h(a).invalidMonth = e }); var Ee = /D[oD]?(\[[^\[\]]*\]|\s)+MMMM?/, Ae = "January_February_March_April_May_June_July_August_September_October_November_December".split("_"), Fe = "Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec".split("_"); function ze(e, t) { var a; if (!e.isValid()) return e; if ("string" == typeof t) if (/^\d+$/.test(t)) t = T(t); else if (!_(t = e.localeData().monthsParse(t))) return e; return a = Math.min(e.date(), We(e.year(), t)), e._d["set" + (e._isUTC ? "UTC" : "") + "Month"](t, a), e } function Je(e) { return null != e ? (ze(this, e), s.updateOffset(this, !0), this) : Oe(this, "Month") } var Ne = oe, Ie = oe; function Ce() { function e(e, t) { return t.length - e.length } var t, a, n = [], s = [], r = []; for (t = 0; t < 12; t++)a = c([2e3, t]), n.push(this.monthsShort(a, "")), s.push(this.months(a, "")), r.push(this.months(a, "")), r.push(this.monthsShort(a, "")); for (n.sort(e), s.sort(e), r.sort(e), t = 0; t < 12; t++)n[t] = ce(n[t]), s[t] = ce(s[t]); for (t = 0; t < 24; t++)r[t] = ce(r[t]); this._monthsRegex = new RegExp("^(" + r.join("|") + ")", "i"), this._monthsShortRegex = this._monthsRegex, this._monthsStrictRegex = new RegExp("^(" + s.join("|") + ")", "i"), this._monthsShortStrictRegex = new RegExp("^(" + n.join("|") + ")", "i") } function Re(e) { var t = new Date(Date.UTC.apply(null, arguments)); return e < 100 && e >= 0 && isFinite(t.getUTCFullYear()) && t.setUTCFullYear(e), t } function Ue(e, t, a) { var n = 7 + t - a, s = (7 + Re(e, 0, n).getUTCDay() - t) % 7; return -s + n - 1 } function Ge(e, t, a, n, s) { var r, i, d = (7 + a - n) % 7, _ = Ue(e, n, s), o = 1 + 7 * (t - 1) + d + _; return o <= 0 ? i = je(r = e - 1) + o : o > je(e) ? (r = e + 1, i = o - je(e)) : (r = e, i = o), { year: r, dayOfYear: i } } function Ve(e, t, a) { var n, s, r = Ue(e.year(), t, a), i = Math.floor((e.dayOfYear() - r - 1) / 7) + 1; return i < 1 ? (s = e.year() - 1, n = i + Ze(s, t, a)) : i > Ze(e.year(), t, a) ? (n = i - Ze(e.year(), t, a), s = e.year() + 1) : (s = e.year(), n = i), { week: n, year: s } } function Ze(e, t, a) { var n = Ue(e, t, a), s = Ue(e + 1, t, a); return (je(e) - n + s) / 7 } U("w", ["ww", 2], "wo", "week"), U("W", ["WW", 2], "Wo", "isoWeek"), W("week", "w"), W("isoWeek", "W"), z("week", 5), z("isoWeek", 5), me("w", X), me("ww", X, K), me("W", X), me("WW", X, K), Le(["w", "ww", "W", "WW"], function (e, t, a, n) { t[n.substr(0, 1)] = T(e) }), U("d", 0, "do", "day"), U("dd", 0, 0, function (e) { return this.localeData().weekdaysMin(this, e) }), U("ddd", 0, 0, function (e) { return this.localeData().weekdaysShort(this, e) }), U("dddd", 0, 0, function (e) { return this.localeData().weekdays(this, e) }), U("e", 0, 0, "weekday"), U("E", 0, 0, "isoWeekday"), W("day", "d"), W("weekday", "e"), W("isoWeekday", "E"), z("day", 11), z("weekday", 11), z("isoWeekday", 11), me("d", X), me("e", X), me("E", X), me("dd", function (e, t) { return t.weekdaysMinRegex(e) }), me("ddd", function (e, t) { return t.weekdaysShortRegex(e) }), me("dddd", function (e, t) { return t.weekdaysRegex(e) }), Le(["dd", "ddd", "dddd"], function (e, t, a, n) { var s = a._locale.weekdaysParse(e, n, a._strict); null != s ? t.d = s : h(a).invalidWeekday = e }), Le(["d", "e", "E"], function (e, t, a, n) { t[n] = T(e) }); var Be = "Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday".split("_"), Ke = "Sun_Mon_Tue_Wed_Thu_Fri_Sat".split("_"), $e = "Su_Mo_Tu_We_Th_Fr_Sa".split("_"), qe = oe, Qe = oe, Xe = oe; function et() { function e(e, t) { return t.length - e.length } var t, a, n, s, r, i = [], d = [], _ = [], o = []; for (t = 0; t < 7; t++)a = c([2e3, 1]).day(t), n = this.weekdaysMin(a, ""), s = this.weekdaysShort(a, ""), r = this.weekdays(a, ""), i.push(n), d.push(s), _.push(r), o.push(n), o.push(s), o.push(r); for (i.sort(e), d.sort(e), _.sort(e), o.sort(e), t = 0; t < 7; t++)d[t] = ce(d[t]), _[t] = ce(_[t]), o[t] = ce(o[t]); this._weekdaysRegex = new RegExp("^(" + o.join("|") + ")", "i"), this._weekdaysShortRegex = this._weekdaysRegex, this._weekdaysMinRegex = this._weekdaysRegex, this._weekdaysStrictRegex = new RegExp("^(" + _.join("|") + ")", "i"), this._weekdaysShortStrictRegex = new RegExp("^(" + d.join("|") + ")", "i"), this._weekdaysMinStrictRegex = new RegExp("^(" + i.join("|") + ")", "i") } function tt() { return this.hours() % 12 || 12 } function at(e, t) { U(e, 0, 0, function () { return this.localeData().meridiem(this.hours(), this.minutes(), t) }) } function nt(e, t) { return t._meridiemParse } U("H", ["HH", 2], 0, "hour"), U("h", ["hh", 2], 0, tt), U("k", ["kk", 2], 0, function () { return this.hours() || 24 }), U("hmm", 0, 0, function () { return "" + tt.apply(this) + J(this.minutes(), 2) }), U("hmmss", 0, 0, function () { return "" + tt.apply(this) + J(this.minutes(), 2) + J(this.seconds(), 2) }), U("Hmm", 0, 0, function () { return "" + this.hours() + J(this.minutes(), 2) }), U("Hmmss", 0, 0, function () { return "" + this.hours() + J(this.minutes(), 2) + J(this.seconds(), 2) }), at("a", !0), at("A", !1), W("hour", "h"), z("hour", 13), me("a", nt), me("A", nt), me("H", X), me("h", X), me("k", X), me("HH", X, K), me("hh", X, K), me("kk", X, K), me("hmm", ee), me("hmmss", te), me("Hmm", ee), me("Hmmss", te), Me(["H", "HH"], De), Me(["k", "kk"], function (e, t, a) { var n = T(e); t[De] = 24 === n ? 0 : n }), Me(["a", "A"], function (e, t, a) { a._isPm = a._locale.isPM(e), a._meridiem = e }), Me(["h", "hh"], function (e, t, a) { t[De] = T(e), h(a).bigHour = !0 }), Me("hmm", function (e, t, a) { var n = e.length - 2; t[De] = T(e.substr(0, n)), t[ke] = T(e.substr(n)), h(a).bigHour = !0 }), Me("hmmss", function (e, t, a) { var n = e.length - 4, s = e.length - 2; t[De] = T(e.substr(0, n)), t[ke] = T(e.substr(n, 2)), t[Te] = T(e.substr(s)), h(a).bigHour = !0 }), Me("Hmm", function (e, t, a) { var n = e.length - 2; t[De] = T(e.substr(0, n)), t[ke] = T(e.substr(n)) }), Me("Hmmss", function (e, t, a) { var n = e.length - 4, s = e.length - 2; t[De] = T(e.substr(0, n)), t[ke] = T(e.substr(n, 2)), t[Te] = T(e.substr(s)) }); var st, rt = xe("Hours", !0), it = { calendar: { sameDay: "[Today at] LT", nextDay: "[Tomorrow at] LT", nextWeek: "dddd [at] LT", lastDay: "[Yesterday at] LT", lastWeek: "[Last] dddd [at] LT", sameElse: "L" }, longDateFormat: { LTS: "h:mm:ss A", LT: "h:mm A", L: "MM/DD/YYYY", LL: "MMMM D, YYYY", LLL: "MMMM D, YYYY h:mm A", LLLL: "dddd, MMMM D, YYYY h:mm A" }, invalidDate: "Invalid date", ordinal: "%d", dayOfMonthOrdinalParse: /\d{1,2}/, relativeTime: { future: "in %s", past: "%s ago", s: "a few seconds", ss: "%d seconds", m: "a minute", mm: "%d minutes", h: "an hour", hh: "%d hours", d: "a day", dd: "%d days", M: "a month", MM: "%d months", y: "a year", yy: "%d years" }, months: Ae, monthsShort: Fe, week: { dow: 0, doy: 6 }, weekdays: Be, weekdaysMin: $e, weekdaysShort: Ke, meridiemParse: /[ap]\.?m?\.?/i }, dt = {}, _t = {}; function ot(e) { return e ? e.toLowerCase().replace("_", "-") : e } function ut(t) { var n = null; if (!dt[t] && void 0 !== e && e && e.exports) try { n = st._abbr, a(126)("./" + t), mt(n) } catch (e) { } return dt[t] } function mt(e, t) { var a; return e && ((a = d(t) ? ct(e) : lt(e, t)) ? st = a : "undefined" != typeof console && console.warn && console.warn("Locale " + e + " not found. Did you forget to load it?")), st._abbr } function lt(e, t) { if (null !== t) { var a, n = it; if (t.abbr = e, null != dt[e]) H("defineLocaleOverride", "use moment.updateLocale(localeName, config) to change an existing locale. moment.defineLocale(localeName, config) should only be used for creating a new locale See http://momentjs.com/guides/#/warnings/define-locale/ for more info."), n = dt[e]._config; else if (null != t.parentLocale) if (null != dt[t.parentLocale]) n = dt[t.parentLocale]._config; else { if (null == (a = ut(t.parentLocale))) return _t[t.parentLocale] || (_t[t.parentLocale] = []), _t[t.parentLocale].push({ name: e, config: t }), null; n = a._config } return dt[e] = new O(x(n, t)), _t[e] && _t[e].forEach(function (e) { lt(e.name, e.config) }), mt(e), dt[e] } return delete dt[e], null } function ct(e) { var t; if (e && e._locale && e._locale._abbr && (e = e._locale._abbr), !e) return st; if (!r(e)) { if (t = ut(e)) return t; e = [e] } return function (e) { for (var t, a, n, s, r = 0; r < e.length;) { for (s = ot(e[r]).split("-"), t = s.length, a = (a = ot(e[r + 1])) ? a.split("-") : null; t > 0;) { if (n = ut(s.slice(0, t).join("-"))) return n; if (a && a.length >= t && g(s, a, !0) >= t - 1) break; t-- } r++ } return st }(e) } function ht(e) { var t, a = e._a; return a && -2 === h(e).overflow && (t = a[fe] < 0 || a[fe] > 11 ? fe : a[pe] < 1 || a[pe] > We(a[ye], a[fe]) ? pe : a[De] < 0 || a[De] > 24 || 24 === a[De] && (0 !== a[ke] || 0 !== a[Te] || 0 !== a[ge]) ? De : a[ke] < 0 || a[ke] > 59 ? ke : a[Te] < 0 || a[Te] > 59 ? Te : a[ge] < 0 || a[ge] > 999 ? ge : -1, h(e)._overflowDayOfYear && (t < ye || t > pe) && (t = pe), h(e)._overflowWeeks && -1 === t && (t = we), h(e)._overflowWeekday && -1 === t && (t = ve), h(e).overflow = t), e } function Mt(e, t, a) { return null != e ? e : null != t ? t : a } function Lt(e) { var t, a, n, r, i, d = []; if (!e._d) { for (n = function (e) { var t = new Date(s.now()); return e._useUTC ? [t.getUTCFullYear(), t.getUTCMonth(), t.getUTCDate()] : [t.getFullYear(), t.getMonth(), t.getDate()] }(e), e._w && null == e._a[pe] && null == e._a[fe] && function (e) { var t, a, n, s, r, i, d, _; if (null != (t = e._w).GG || null != t.W || null != t.E) r = 1, i = 4, a = Mt(t.GG, e._a[ye], Ve(xt(), 1, 4).year), n = Mt(t.W, 1), ((s = Mt(t.E, 1)) < 1 || s > 7) && (_ = !0); else { r = e._locale._week.dow, i = e._locale._week.doy; var o = Ve(xt(), r, i); a = Mt(t.gg, e._a[ye], o.year), n = Mt(t.w, o.week), null != t.d ? ((s = t.d) < 0 || s > 6) && (_ = !0) : null != t.e ? (s = t.e + r, (t.e < 0 || t.e > 6) && (_ = !0)) : s = r } n < 1 || n > Ze(a, r, i) ? h(e)._overflowWeeks = !0 : null != _ ? h(e)._overflowWeekday = !0 : (d = Ge(a, n, s, r, i), e._a[ye] = d.year, e._dayOfYear = d.dayOfYear) }(e), null != e._dayOfYear && (i = Mt(e._a[ye], n[ye]), (e._dayOfYear > je(i) || 0 === e._dayOfYear) && (h(e)._overflowDayOfYear = !0), a = Re(i, 0, e._dayOfYear), e._a[fe] = a.getUTCMonth(), e._a[pe] = a.getUTCDate()), t = 0; t < 3 && null == e._a[t]; ++t)e._a[t] = d[t] = n[t]; for (; t < 7; t++)e._a[t] = d[t] = null == e._a[t] ? 2 === t ? 1 : 0 : e._a[t]; 24 === e._a[De] && 0 === e._a[ke] && 0 === e._a[Te] && 0 === e._a[ge] && (e._nextDay = !0, e._a[De] = 0), e._d = (e._useUTC ? Re : function (e, t, a, n, s, r, i) { var d = new Date(e, t, a, n, s, r, i); return e < 100 && e >= 0 && isFinite(d.getFullYear()) && d.setFullYear(e), d }).apply(null, d), r = e._useUTC ? e._d.getUTCDay() : e._d.getDay(), null != e._tzm && e._d.setUTCMinutes(e._d.getUTCMinutes() - e._tzm), e._nextDay && (e._a[De] = 24), e._w && void 0 !== e._w.d && e._w.d !== r && (h(e).weekdayMismatch = !0) } } var Yt = /^\s*((?:[+-]\d{6}|\d{4})-(?:\d\d-\d\d|W\d\d-\d|W\d\d|\d\d\d|\d\d))(?:(T| )(\d\d(?::\d\d(?::\d\d(?:[.,]\d+)?)?)?)([\+\-]\d\d(?::?\d\d)?|\s*Z)?)?$/, yt = /^\s*((?:[+-]\d{6}|\d{4})(?:\d\d\d\d|W\d\d\d|W\d\d|\d\d\d|\d\d))(?:(T| )(\d\d(?:\d\d(?:\d\d(?:[.,]\d+)?)?)?)([\+\-]\d\d(?::?\d\d)?|\s*Z)?)?$/, ft = /Z|[+-]\d\d(?::?\d\d)?/, pt = [["YYYYYY-MM-DD", /[+-]\d{6}-\d\d-\d\d/], ["YYYY-MM-DD", /\d{4}-\d\d-\d\d/], ["GGGG-[W]WW-E", /\d{4}-W\d\d-\d/], ["GGGG-[W]WW", /\d{4}-W\d\d/, !1], ["YYYY-DDD", /\d{4}-\d{3}/], ["YYYY-MM", /\d{4}-\d\d/, !1], ["YYYYYYMMDD", /[+-]\d{10}/], ["YYYYMMDD", /\d{8}/], ["GGGG[W]WWE", /\d{4}W\d{3}/], ["GGGG[W]WW", /\d{4}W\d{2}/, !1], ["YYYYDDD", /\d{7}/]], Dt = [["HH:mm:ss.SSSS", /\d\d:\d\d:\d\d\.\d+/], ["HH:mm:ss,SSSS", /\d\d:\d\d:\d\d,\d+/], ["HH:mm:ss", /\d\d:\d\d:\d\d/], ["HH:mm", /\d\d:\d\d/], ["HHmmss.SSSS", /\d\d\d\d\d\d\.\d+/], ["HHmmss,SSSS", /\d\d\d\d\d\d,\d+/], ["HHmmss", /\d\d\d\d\d\d/], ["HHmm", /\d\d\d\d/], ["HH", /\d\d/]], kt = /^\/?Date\((\-?\d+)/i; function Tt(e) { var t, a, n, s, r, i, d = e._i, _ = Yt.exec(d) || yt.exec(d); if (_) { for (h(e).iso = !0, t = 0, a = pt.length; t < a; t++)if (pt[t][1].exec(_[1])) { s = pt[t][0], n = !1 !== pt[t][2]; break } if (null == s) return void (e._isValid = !1); if (_[3]) { for (t = 0, a = Dt.length; t < a; t++)if (Dt[t][1].exec(_[3])) { r = (_[2] || " ") + Dt[t][0]; break } if (null == r) return void (e._isValid = !1) } if (!n && null != r) return void (e._isValid = !1); if (_[4]) { if (!ft.exec(_[4])) return void (e._isValid = !1); i = "Z" } e._f = s + (r || "") + (i || ""), St(e) } else e._isValid = !1 } var gt = /^(?:(Mon|Tue|Wed|Thu|Fri|Sat|Sun),?\s)?(\d{1,2})\s(Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec)\s(\d{2,4})\s(\d\d):(\d\d)(?::(\d\d))?\s(?:(UT|GMT|[ECMP][SD]T)|([Zz])|([+-]\d{4}))$/; function wt(e, t, a, n, s, r) { var i = [function (e) { var t = parseInt(e, 10); return t <= 49 ? 2e3 + t : t <= 999 ? 1900 + t : t }(e), Fe.indexOf(t), parseInt(a, 10), parseInt(n, 10), parseInt(s, 10)]; return r && i.push(parseInt(r, 10)), i } var vt = { UT: 0, GMT: 0, EDT: -240, EST: -300, CDT: -300, CST: -360, MDT: -360, MST: -420, PDT: -420, PST: -480 }; function jt(e) { var t = gt.exec(function (e) { return e.replace(/\([^)]*\)|[\n\t]/g, " ").replace(/(\s\s+)/g, " ").replace(/^\s\s*/, "").replace(/\s\s*$/, "") }(e._i)); if (t) { var a = wt(t[4], t[3], t[2], t[5], t[6], t[7]); if (!function (e, t, a) { if (e) { var n = Ke.indexOf(e), s = new Date(t[0], t[1], t[2]).getDay(); if (n !== s) return h(a).weekdayMismatch = !0, a._isValid = !1, !1 } return !0 }(t[1], a, e)) return; e._a = a, e._tzm = function (e, t, a) { if (e) return vt[e]; if (t) return 0; var n = parseInt(a, 10), s = n % 100, r = (n - s) / 100; return 60 * r + s }(t[8], t[9], t[10]), e._d = Re.apply(null, e._a), e._d.setUTCMinutes(e._d.getUTCMinutes() - e._tzm), h(e).rfc2822 = !0 } else e._isValid = !1 } function St(e) { if (e._f !== s.ISO_8601) if (e._f !== s.RFC_2822) { e._a = [], h(e).empty = !0; var t, a, n, r, i, d = "" + e._i, _ = d.length, o = 0; for (n = Z(e._f, e._locale).match(N) || [], t = 0; t < n.length; t++)r = n[t], (a = (d.match(le(r, e)) || [])[0]) && ((i = d.substr(0, d.indexOf(a))).length > 0 && h(e).unusedInput.push(i), d = d.slice(d.indexOf(a) + a.length), o += a.length), R[r] ? (a ? h(e).empty = !1 : h(e).unusedTokens.push(r), Ye(r, a, e)) : e._strict && !a && h(e).unusedTokens.push(r); h(e).charsLeftOver = _ - o, d.length > 0 && h(e).unusedInput.push(d), e._a[De] <= 12 && !0 === h(e).bigHour && e._a[De] > 0 && (h(e).bigHour = void 0), h(e).parsedDateParts = e._a.slice(0), h(e).meridiem = e._meridiem, e._a[De] = function (e, t, a) { var n; return null == a ? t : null != e.meridiemHour ? e.meridiemHour(t, a) : null != e.isPM ? ((n = e.isPM(a)) && t < 12 && (t += 12), n || 12 !== t || (t = 0), t) : t }(e._locale, e._a[De], e._meridiem), Lt(e), ht(e) } else jt(e); else Tt(e) } function Ht(e) { var t = e._i, a = e._f; return e._locale = e._locale || ct(e._l), null === t || void 0 === a && "" === t ? L({ nullInput: !0 }) : ("string" == typeof t && (e._i = t = e._locale.preparse(t)), D(t) ? new p(ht(t)) : (o(t) ? e._d = t : r(a) ? function (e) { var t, a, n, s, r; if (0 === e._f.length) return h(e).invalidFormat = !0, void (e._d = new Date(NaN)); for (s = 0; s < e._f.length; s++)r = 0, t = y({}, e), null != e._useUTC && (t._useUTC = e._useUTC), t._f = e._f[s], St(t), M(t) && (r += h(t).charsLeftOver, r += 10 * h(t).unusedTokens.length, h(t).score = r, (null == n || r < n) && (n = r, a = t)); l(e, a || t) }(e) : a ? St(e) : function (e) { var t = e._i; d(t) ? e._d = new Date(s.now()) : o(t) ? e._d = new Date(t.valueOf()) : "string" == typeof t ? function (e) { var t = kt.exec(e._i); null === t ? (Tt(e), !1 === e._isValid && (delete e._isValid, jt(e), !1 === e._isValid && (delete e._isValid, s.createFromInputFallback(e)))) : e._d = new Date(+t[1]) }(e) : r(t) ? (e._a = u(t.slice(0), function (e) { return parseInt(e, 10) }), Lt(e)) : i(t) ? function (e) { if (!e._d) { var t = A(e._i); e._a = u([t.year, t.month, t.day || t.date, t.hour, t.minute, t.second, t.millisecond], function (e) { return e && parseInt(e, 10) }), Lt(e) } }(e) : _(t) ? e._d = new Date(t) : s.createFromInputFallback(e) }(e), M(e) || (e._d = null), e)) } function bt(e, t, a, n, s) { var d = {}; return !0 !== a && !1 !== a || (n = a, a = void 0), (i(e) && function (e) { if (Object.getOwnPropertyNames) return 0 === Object.getOwnPropertyNames(e).length; var t; for (t in e) if (e.hasOwnProperty(t)) return !1; return !0 }(e) || r(e) && 0 === e.length) && (e = void 0), d._isAMomentObject = !0, d._useUTC = d._isUTC = s, d._l = a, d._i = e, d._f = t, d._strict = n, function (e) { var t = new p(ht(Ht(e))); return t._nextDay && (t.add(1, "d"), t._nextDay = void 0), t }(d) } function xt(e, t, a, n) { return bt(e, t, a, n, !1) } s.createFromInputFallback = v("value provided is not in a recognized RFC2822 or ISO format. moment construction falls back to js Date(), which is not reliable across all browsers and versions. Non RFC2822/ISO date formats are discouraged and will be removed in an upcoming major release. Please refer to http://momentjs.com/guides/#/warnings/js-date/ for more info.", function (e) { e._d = new Date(e._i + (e._useUTC ? " UTC" : "")) }), s.ISO_8601 = function () { }, s.RFC_2822 = function () { }; var Ot = v("moment().min is deprecated, use moment.max instead. http://momentjs.com/guides/#/warnings/min-max/", function () { var e = xt.apply(null, arguments); return this.isValid() && e.isValid() ? e < this ? this : e : L() }), Pt = v("moment().max is deprecated, use moment.min instead. http://momentjs.com/guides/#/warnings/min-max/", function () { var e = xt.apply(null, arguments); return this.isValid() && e.isValid() ? e > this ? this : e : L() }); function Wt(e, t) { var a, n; if (1 === t.length && r(t[0]) && (t = t[0]), !t.length) return xt(); for (a = t[0], n = 1; n < t.length; ++n)t[n].isValid() && !t[n][e](a) || (a = t[n]); return a } var Et = ["year", "quarter", "month", "week", "day", "hour", "minute", "second", "millisecond"]; function At(e) { var t = A(e), a = t.year || 0, n = t.quarter || 0, s = t.month || 0, r = t.week || 0, i = t.day || 0, d = t.hour || 0, _ = t.minute || 0, o = t.second || 0, u = t.millisecond || 0; this._isValid = function (e) { for (var t in e) if (-1 === He.call(Et, t) || null != e[t] && isNaN(e[t])) return !1; for (var a = !1, n = 0; n < Et.length; ++n)if (e[Et[n]]) { if (a) return !1; parseFloat(e[Et[n]]) !== T(e[Et[n]]) && (a = !0) } return !0 }(t), this._milliseconds = +u + 1e3 * o + 6e4 * _ + 1e3 * d * 60 * 60, this._days = +i + 7 * r, this._months = +s + 3 * n + 12 * a, this._data = {}, this._locale = ct(), this._bubble() } function Ft(e) { return e instanceof At } function zt(e) { return e < 0 ? -1 * Math.round(-1 * e) : Math.round(e) } function Jt(e, t) { U(e, 0, 0, function () { var e = this.utcOffset(), a = "+"; return e < 0 && (e = -e, a = "-"), a + J(~~(e / 60), 2) + t + J(~~e % 60, 2) }) } Jt("Z", ":"), Jt("ZZ", ""), me("Z", _e), me("ZZ", _e), Me(["Z", "ZZ"], function (e, t, a) { a._useUTC = !0, a._tzm = It(_e, e) }); var Nt = /([\+\-]|\d\d)/gi; function It(e, t) { var a = (t || "").match(e); if (null === a) return null; var n = a[a.length - 1] || [], s = (n + "").match(Nt) || ["-", 0, 0], r = 60 * s[1] + T(s[2]); return 0 === r ? 0 : "+" === s[0] ? r : -r } function Ct(e, t) { var a, n; return t._isUTC ? (a = t.clone(), n = (D(e) || o(e) ? e.valueOf() : xt(e).valueOf()) - a.valueOf(), a._d.setTime(a._d.valueOf() + n), s.updateOffset(a, !1), a) : xt(e).local() } function Rt(e) { return 15 * -Math.round(e._d.getTimezoneOffset() / 15) } function Ut() { return !!this.isValid() && this._isUTC && 0 === this._offset } s.updateOffset = function () { }; var Gt = /^(\-|\+)?(?:(\d*)[. ])?(\d+)\:(\d+)(?:\:(\d+)(\.\d*)?)?$/, Vt = /^(-|\+)?P(?:([-+]?[0-9,.]*)Y)?(?:([-+]?[0-9,.]*)M)?(?:([-+]?[0-9,.]*)W)?(?:([-+]?[0-9,.]*)D)?(?:T(?:([-+]?[0-9,.]*)H)?(?:([-+]?[0-9,.]*)M)?(?:([-+]?[0-9,.]*)S)?)?$/; function Zt(e, t) { var a, n, s, r = e, i = null; return Ft(e) ? r = { ms: e._milliseconds, d: e._days, M: e._months } : _(e) ? (r = {}, t ? r[t] = e : r.milliseconds = e) : (i = Gt.exec(e)) ? (a = "-" === i[1] ? -1 : 1, r = { y: 0, d: T(i[pe]) * a, h: T(i[De]) * a, m: T(i[ke]) * a, s: T(i[Te]) * a, ms: T(zt(1e3 * i[ge])) * a }) : (i = Vt.exec(e)) ? (a = "-" === i[1] ? -1 : (i[1], 1), r = { y: Bt(i[2], a), M: Bt(i[3], a), w: Bt(i[4], a), d: Bt(i[5], a), h: Bt(i[6], a), m: Bt(i[7], a), s: Bt(i[8], a) }) : null == r ? r = {} : "object" == typeof r && ("from" in r || "to" in r) && (s = function (e, t) { var a; return e.isValid() && t.isValid() ? (t = Ct(t, e), e.isBefore(t) ? a = Kt(e, t) : ((a = Kt(t, e)).milliseconds = -a.milliseconds, a.months = -a.months), a) : { milliseconds: 0, months: 0 } }(xt(r.from), xt(r.to)), (r = {}).ms = s.milliseconds, r.M = s.months), n = new At(r), Ft(e) && m(e, "_locale") && (n._locale = e._locale), n } function Bt(e, t) { var a = e && parseFloat(e.replace(",", ".")); return (isNaN(a) ? 0 : a) * t } function Kt(e, t) { var a = { milliseconds: 0, months: 0 }; return a.months = t.month() - e.month() + 12 * (t.year() - e.year()), e.clone().add(a.months, "M").isAfter(t) && --a.months, a.milliseconds = +t - +e.clone().add(a.months, "M"), a } function $t(e, t) { return function (a, n) { var s; return null === n || isNaN(+n) || (H(t, "moment()." + t + "(period, number) is deprecated. Please use moment()." + t + "(number, period). See http://momentjs.com/guides/#/warnings/add-inverted-param/ for more info."), s = a, a = n, n = s), qt(this, Zt(a = "string" == typeof a ? +a : a, n), e), this } } function qt(e, t, a, n) { var r = t._milliseconds, i = zt(t._days), d = zt(t._months); e.isValid() && (n = null == n || n, d && ze(e, Oe(e, "Month") + d * a), i && Pe(e, "Date", Oe(e, "Date") + i * a), r && e._d.setTime(e._d.valueOf() + r * a), n && s.updateOffset(e, i || d)) } Zt.fn = At.prototype, Zt.invalid = function () { return Zt(NaN) }; var Qt = $t(1, "add"), Xt = $t(-1, "subtract"); function ea(e, t) { var a, n, s = 12 * (t.year() - e.year()) + (t.month() - e.month()), r = e.clone().add(s, "months"); return t - r < 0 ? (a = e.clone().add(s - 1, "months"), n = (t - r) / (r - a)) : (a = e.clone().add(s + 1, "months"), n = (t - r) / (a - r)), -(s + n) || 0 } function ta(e) { var t; return void 0 === e ? this._locale._abbr : (null != (t = ct(e)) && (this._locale = t), this) } s.defaultFormat = "YYYY-MM-DDTHH:mm:ssZ", s.defaultFormatUtc = "YYYY-MM-DDTHH:mm:ss[Z]"; var aa = v("moment().lang() is deprecated. Instead, use moment().localeData() to get the language configuration. Use moment().locale() to change languages.", function (e) { return void 0 === e ? this.localeData() : this.locale(e) }); function na() { return this._locale } function sa(e, t) { U(0, [e, e.length], 0, t) } function ra(e, t, a, n, s) { var r; return null == e ? Ve(this, n, s).year : (r = Ze(e, n, s), t > r && (t = r), function (e, t, a, n, s) { var r = Ge(e, t, a, n, s), i = Re(r.year, 0, r.dayOfYear); return this.year(i.getUTCFullYear()), this.month(i.getUTCMonth()), this.date(i.getUTCDate()), this }.call(this, e, t, a, n, s)) } U(0, ["gg", 2], 0, function () { return this.weekYear() % 100 }), U(0, ["GG", 2], 0, function () { return this.isoWeekYear() % 100 }), sa("gggg", "weekYear"), sa("ggggg", "weekYear"), sa("GGGG", "isoWeekYear"), sa("GGGGG", "isoWeekYear"), W("weekYear", "gg"), W("isoWeekYear", "GG"), z("weekYear", 1), z("isoWeekYear", 1), me("G", ie), me("g", ie), me("GG", X, K), me("gg", X, K), me("GGGG", ne, q), me("gggg", ne, q), me("GGGGG", se, Q), me("ggggg", se, Q), Le(["gggg", "ggggg", "GGGG", "GGGGG"], function (e, t, a, n) { t[n.substr(0, 2)] = T(e) }), Le(["gg", "GG"], function (e, t, a, n) { t[n] = s.parseTwoDigitYear(e) }), U("Q", 0, "Qo", "quarter"), W("quarter", "Q"), z("quarter", 7), me("Q", B), Me("Q", function (e, t) { t[fe] = 3 * (T(e) - 1) }), U("D", ["DD", 2], "Do", "date"), W("date", "D"), z("date", 9), me("D", X), me("DD", X, K), me("Do", function (e, t) { return e ? t._dayOfMonthOrdinalParse || t._ordinalParse : t._dayOfMonthOrdinalParseLenient }), Me(["D", "DD"], pe), Me("Do", function (e, t) { t[pe] = T(e.match(X)[0]) }); var ia = xe("Date", !0); U("DDD", ["DDDD", 3], "DDDo", "dayOfYear"), W("dayOfYear", "DDD"), z("dayOfYear", 4), me("DDD", ae), me("DDDD", $), Me(["DDD", "DDDD"], function (e, t, a) { a._dayOfYear = T(e) }), U("m", ["mm", 2], 0, "minute"), W("minute", "m"), z("minute", 14), me("m", X), me("mm", X, K), Me(["m", "mm"], ke); var da = xe("Minutes", !1); U("s", ["ss", 2], 0, "second"), W("second", "s"), z("second", 15), me("s", X), me("ss", X, K), Me(["s", "ss"], Te); var _a, oa = xe("Seconds", !1); for (U("S", 0, 0, function () { return ~~(this.millisecond() / 100) }), U(0, ["SS", 2], 0, function () { return ~~(this.millisecond() / 10) }), U(0, ["SSS", 3], 0, "millisecond"), U(0, ["SSSS", 4], 0, function () { return 10 * this.millisecond() }), U(0, ["SSSSS", 5], 0, function () { return 100 * this.millisecond() }), U(0, ["SSSSSS", 6], 0, function () { return 1e3 * this.millisecond() }), U(0, ["SSSSSSS", 7], 0, function () { return 1e4 * this.millisecond() }), U(0, ["SSSSSSSS", 8], 0, function () { return 1e5 * this.millisecond() }), U(0, ["SSSSSSSSS", 9], 0, function () { return 1e6 * this.millisecond() }), W("millisecond", "ms"), z("millisecond", 16), me("S", ae, B), me("SS", ae, K), me("SSS", ae, $), _a = "SSSS"; _a.length <= 9; _a += "S")me(_a, re); function ua(e, t) { t[ge] = T(1e3 * ("0." + e)) } for (_a = "S"; _a.length <= 9; _a += "S")Me(_a, ua); var ma = xe("Milliseconds", !1); U("z", 0, 0, "zoneAbbr"), U("zz", 0, 0, "zoneName"); var la = p.prototype; function ca(e) { return e } la.add = Qt, la.calendar = function (e, t) { var a = e || xt(), n = Ct(a, this).startOf("day"), r = s.calendarFormat(this, n) || "sameElse", i = t && (b(t[r]) ? t[r].call(this, a) : t[r]); return this.format(i || this.localeData().calendar(r, this, xt(a))) }, la.clone = function () { return new p(this) }, la.diff = function (e, t, a) { var n, s, r; if (!this.isValid()) return NaN; if (!(n = Ct(e, this)).isValid()) return NaN; switch (s = 6e4 * (n.utcOffset() - this.utcOffset()), t = E(t)) { case "year": r = ea(this, n) / 12; break; case "month": r = ea(this, n); break; case "quarter": r = ea(this, n) / 3; break; case "second": r = (this - n) / 1e3; break; case "minute": r = (this - n) / 6e4; break; case "hour": r = (this - n) / 36e5; break; case "day": r = (this - n - s) / 864e5; break; case "week": r = (this - n - s) / 6048e5; break; default: r = this - n }return a ? r : k(r) }, la.endOf = function (e) { return void 0 === (e = E(e)) || "millisecond" === e ? this : ("date" === e && (e = "day"), this.startOf(e).add(1, "isoWeek" === e ? "week" : e).subtract(1, "ms")) }, la.format = function (e) { e || (e = this.isUtc() ? s.defaultFormatUtc : s.defaultFormat); var t = V(this, e); return this.localeData().postformat(t) }, la.from = function (e, t) { return this.isValid() && (D(e) && e.isValid() || xt(e).isValid()) ? Zt({ to: this, from: e }).locale(this.locale()).humanize(!t) : this.localeData().invalidDate() }, la.fromNow = function (e) { return this.from(xt(), e) }, la.to = function (e, t) { return this.isValid() && (D(e) && e.isValid() || xt(e).isValid()) ? Zt({ from: this, to: e }).locale(this.locale()).humanize(!t) : this.localeData().invalidDate() }, la.toNow = function (e) { return this.to(xt(), e) }, la.get = function (e) { return b(this[e = E(e)]) ? this[e]() : this }, la.invalidAt = function () { return h(this).overflow }, la.isAfter = function (e, t) { var a = D(e) ? e : xt(e); return !(!this.isValid() || !a.isValid()) && ("millisecond" === (t = E(d(t) ? "millisecond" : t)) ? this.valueOf() > a.valueOf() : a.valueOf() < this.clone().startOf(t).valueOf()) }, la.isBefore = function (e, t) { var a = D(e) ? e : xt(e); return !(!this.isValid() || !a.isValid()) && ("millisecond" === (t = E(d(t) ? "millisecond" : t)) ? this.valueOf() < a.valueOf() : this.clone().endOf(t).valueOf() < a.valueOf()) }, la.isBetween = function (e, t, a, n) { return ("(" === (n = n || "()")[0] ? this.isAfter(e, a) : !this.isBefore(e, a)) && (")" === n[1] ? this.isBefore(t, a) : !this.isAfter(t, a)) }, la.isSame = function (e, t) { var a, n = D(e) ? e : xt(e); return !(!this.isValid() || !n.isValid()) && ("millisecond" === (t = E(t || "millisecond")) ? this.valueOf() === n.valueOf() : (a = n.valueOf(), this.clone().startOf(t).valueOf() <= a && a <= this.clone().endOf(t).valueOf())) }, la.isSameOrAfter = function (e, t) { return this.isSame(e, t) || this.isAfter(e, t) }, la.isSameOrBefore = function (e, t) { return this.isSame(e, t) || this.isBefore(e, t) }, la.isValid = function () { return M(this) }, la.lang = aa, la.locale = ta, la.localeData = na, la.max = Pt, la.min = Ot, la.parsingFlags = function () { return l({}, h(this)) }, la.set = function (e, t) { if ("object" == typeof e) for (var a = function (e) { var t = []; for (var a in e) t.push({ unit: a, priority: F[a] }); return t.sort(function (e, t) { return e.priority - t.priority }), t }(e = A(e)), n = 0; n < a.length; n++)this[a[n].unit](e[a[n].unit]); else if (b(this[e = E(e)])) return this[e](t); return this }, la.startOf = function (e) { switch (e = E(e)) { case "year": this.month(0); case "quarter": case "month": this.date(1); case "week": case "isoWeek": case "day": case "date": this.hours(0); case "hour": this.minutes(0); case "minute": this.seconds(0); case "second": this.milliseconds(0) }return "week" === e && this.weekday(0), "isoWeek" === e && this.isoWeekday(1), "quarter" === e && this.month(3 * Math.floor(this.month() / 3)), this }, la.subtract = Xt, la.toArray = function () { var e = this; return [e.year(), e.month(), e.date(), e.hour(), e.minute(), e.second(), e.millisecond()] }, la.toObject = function () { var e = this; return { years: e.year(), months: e.month(), date: e.date(), hours: e.hours(), minutes: e.minutes(), seconds: e.seconds(), milliseconds: e.milliseconds() } }, la.toDate = function () { return new Date(this.valueOf()) }, la.toISOString = function (e) { if (!this.isValid()) return null; var t = !0 !== e, a = t ? this.clone().utc() : this; return a.year() < 0 || a.year() > 9999 ? V(a, t ? "YYYYYY-MM-DD[T]HH:mm:ss.SSS[Z]" : "YYYYYY-MM-DD[T]HH:mm:ss.SSSZ") : b(Date.prototype.toISOString) ? t ? this.toDate().toISOString() : new Date(this.valueOf() + 60 * this.utcOffset() * 1e3).toISOString().replace("Z", V(a, "Z")) : V(a, t ? "YYYY-MM-DD[T]HH:mm:ss.SSS[Z]" : "YYYY-MM-DD[T]HH:mm:ss.SSSZ") }, la.inspect = function () { if (!this.isValid()) return "moment.invalid(/* " + this._i + " */)"; var e = "moment", t = ""; this.isLocal() || (e = 0 === this.utcOffset() ? "moment.utc" : "moment.parseZone", t = "Z"); var a = "[" + e + '("]', n = 0 <= this.year() && this.year() <= 9999 ? "YYYY" : "YYYYYY", s = t + '[")]'; return this.format(a + n + "-MM-DD[T]HH:mm:ss.SSS" + s) }, la.toJSON = function () { return this.isValid() ? this.toISOString() : null }, la.toString = function () { return this.clone().locale("en").format("ddd MMM DD YYYY HH:mm:ss [GMT]ZZ") }, la.unix = function () { return Math.floor(this.valueOf() / 1e3) }, la.valueOf = function () { return this._d.valueOf() - 6e4 * (this._offset || 0) }, la.creationData = function () { return { input: this._i, format: this._f, locale: this._locale, isUTC: this._isUTC, strict: this._strict } }, la.year = be, la.isLeapYear = function () { return Se(this.year()) }, la.weekYear = function (e) { return ra.call(this, e, this.week(), this.weekday(), this.localeData()._week.dow, this.localeData()._week.doy) }, la.isoWeekYear = function (e) { return ra.call(this, e, this.isoWeek(), this.isoWeekday(), 1, 4) }, la.quarter = la.quarters = function (e) { return null == e ? Math.ceil((this.month() + 1) / 3) : this.month(3 * (e - 1) + this.month() % 3) }, la.month = Je, la.daysInMonth = function () { return We(this.year(), this.month()) }, la.week = la.weeks = function (e) { var t = this.localeData().week(this); return null == e ? t : this.add(7 * (e - t), "d") }, la.isoWeek = la.isoWeeks = function (e) { var t = Ve(this, 1, 4).week; return null == e ? t : this.add(7 * (e - t), "d") }, la.weeksInYear = function () { var e = this.localeData()._week; return Ze(this.year(), e.dow, e.doy) }, la.isoWeeksInYear = function () { return Ze(this.year(), 1, 4) }, la.date = ia, la.day = la.days = function (e) { if (!this.isValid()) return null != e ? this : NaN; var t = this._isUTC ? this._d.getUTCDay() : this._d.getDay(); return null != e ? (e = function (e, t) { return "string" != typeof e ? e : isNaN(e) ? "number" == typeof (e = t.weekdaysParse(e)) ? e : null : parseInt(e, 10) }(e, this.localeData()), this.add(e - t, "d")) : t }, la.weekday = function (e) { if (!this.isValid()) return null != e ? this : NaN; var t = (this.day() + 7 - this.localeData()._week.dow) % 7; return null == e ? t : this.add(e - t, "d") }, la.isoWeekday = function (e) { if (!this.isValid()) return null != e ? this : NaN; if (null != e) { var t = function (e, t) { return "string" == typeof e ? t.weekdaysParse(e) % 7 || 7 : isNaN(e) ? null : e }(e, this.localeData()); return this.day(this.day() % 7 ? t : t - 7) } return this.day() || 7 }, la.dayOfYear = function (e) { var t = Math.round((this.clone().startOf("day") - this.clone().startOf("year")) / 864e5) + 1; return null == e ? t : this.add(e - t, "d") }, la.hour = la.hours = rt, la.minute = la.minutes = da, la.second = la.seconds = oa, la.millisecond = la.milliseconds = ma, la.utcOffset = function (e, t, a) { var n, r = this._offset || 0; if (!this.isValid()) return null != e ? this : NaN; if (null != e) { if ("string" == typeof e) { if (null === (e = It(_e, e))) return this } else Math.abs(e) < 16 && !a && (e *= 60); return !this._isUTC && t && (n = Rt(this)), this._offset = e, this._isUTC = !0, null != n && this.add(n, "m"), r !== e && (!t || this._changeInProgress ? qt(this, Zt(e - r, "m"), 1, !1) : this._changeInProgress || (this._changeInProgress = !0, s.updateOffset(this, !0), this._changeInProgress = null)), this } return this._isUTC ? r : Rt(this) }, la.utc = function (e) { return this.utcOffset(0, e) }, la.local = function (e) { return this._isUTC && (this.utcOffset(0, e), this._isUTC = !1, e && this.subtract(Rt(this), "m")), this }, la.parseZone = function () { if (null != this._tzm) this.utcOffset(this._tzm, !1, !0); else if ("string" == typeof this._i) { var e = It(de, this._i); null != e ? this.utcOffset(e) : this.utcOffset(0, !0) } return this }, la.hasAlignedHourOffset = function (e) { return !!this.isValid() && (e = e ? xt(e).utcOffset() : 0, (this.utcOffset() - e) % 60 == 0) }, la.isDST = function () { return this.utcOffset() > this.clone().month(0).utcOffset() || this.utcOffset() > this.clone().month(5).utcOffset() }, la.isLocal = function () { return !!this.isValid() && !this._isUTC }, la.isUtcOffset = function () { return !!this.isValid() && this._isUTC }, la.isUtc = Ut, la.isUTC = Ut, la.zoneAbbr = function () { return this._isUTC ? "UTC" : "" }, la.zoneName = function () { return this._isUTC ? "Coordinated Universal Time" : "" }, la.dates = v("dates accessor is deprecated. Use date instead.", ia), la.months = v("months accessor is deprecated. Use month instead", Je), la.years = v("years accessor is deprecated. Use year instead", be), la.zone = v("moment().zone is deprecated, use moment().utcOffset instead. http://momentjs.com/guides/#/warnings/zone/", function (e, t) { return null != e ? ("string" != typeof e && (e = -e), this.utcOffset(e, t), this) : -this.utcOffset() }), la.isDSTShifted = v("isDSTShifted is deprecated. See http://momentjs.com/guides/#/warnings/dst-shifted/ for more information", function () { if (!d(this._isDSTShifted)) return this._isDSTShifted; var e = {}; if (y(e, this), (e = Ht(e))._a) { var t = e._isUTC ? c(e._a) : xt(e._a); this._isDSTShifted = this.isValid() && g(e._a, t.toArray()) > 0 } else this._isDSTShifted = !1; return this._isDSTShifted }); var ha = O.prototype; function Ma(e, t, a, n) { var s = ct(), r = c().set(n, t); return s[a](r, e) } function La(e, t, a) { if (_(e) && (t = e, e = void 0), e = e || "", null != t) return Ma(e, t, a, "month"); var n, s = []; for (n = 0; n < 12; n++)s[n] = Ma(e, n, a, "month"); return s } function Ya(e, t, a, n) { "boolean" == typeof e ? (_(t) && (a = t, t = void 0), t = t || "") : (a = t = e, e = !1, _(t) && (a = t, t = void 0), t = t || ""); var s, r = ct(), i = e ? r._week.dow : 0; if (null != a) return Ma(t, (a + i) % 7, n, "day"); var d = []; for (s = 0; s < 7; s++)d[s] = Ma(t, (s + i) % 7, n, "day"); return d } ha.calendar = function (e, t, a) { var n = this._calendar[e] || this._calendar.sameElse; return b(n) ? n.call(t, a) : n }, ha.longDateFormat = function (e) { var t = this._longDateFormat[e], a = this._longDateFormat[e.toUpperCase()]; return t || !a ? t : (this._longDateFormat[e] = a.replace(/MMMM|MM|DD|dddd/g, function (e) { return e.slice(1) }), this._longDateFormat[e]) }, ha.invalidDate = function () { return this._invalidDate }, ha.ordinal = function (e) { return this._ordinal.replace("%d", e) }, ha.preparse = ca, ha.postformat = ca, ha.relativeTime = function (e, t, a, n) { var s = this._relativeTime[a]; return b(s) ? s(e, t, a, n) : s.replace(/%d/i, e) }, ha.pastFuture = function (e, t) { var a = this._relativeTime[e > 0 ? "future" : "past"]; return b(a) ? a(t) : a.replace(/%s/i, t) }, ha.set = function (e) { var t, a; for (a in e) b(t = e[a]) ? this[a] = t : this["_" + a] = t; this._config = e, this._dayOfMonthOrdinalParseLenient = new RegExp((this._dayOfMonthOrdinalParse.source || this._ordinalParse.source) + "|" + /\d{1,2}/.source) }, ha.months = function (e, t) { return e ? r(this._months) ? this._months[e.month()] : this._months[(this._months.isFormat || Ee).test(t) ? "format" : "standalone"][e.month()] : r(this._months) ? this._months : this._months.standalone }, ha.monthsShort = function (e, t) { return e ? r(this._monthsShort) ? this._monthsShort[e.month()] : this._monthsShort[Ee.test(t) ? "format" : "standalone"][e.month()] : r(this._monthsShort) ? this._monthsShort : this._monthsShort.standalone }, ha.monthsParse = function (e, t, a) { var n, s, r; if (this._monthsParseExact) return function (e, t, a) { var n, s, r, i = e.toLocaleLowerCase(); if (!this._monthsParse) for (this._monthsParse = [], this._longMonthsParse = [], this._shortMonthsParse = [], n = 0; n < 12; ++n)r = c([2e3, n]), this._shortMonthsParse[n] = this.monthsShort(r, "").toLocaleLowerCase(), this._longMonthsParse[n] = this.months(r, "").toLocaleLowerCase(); return a ? "MMM" === t ? -1 !== (s = He.call(this._shortMonthsParse, i)) ? s : null : -1 !== (s = He.call(this._longMonthsParse, i)) ? s : null : "MMM" === t ? -1 !== (s = He.call(this._shortMonthsParse, i)) ? s : -1 !== (s = He.call(this._longMonthsParse, i)) ? s : null : -1 !== (s = He.call(this._longMonthsParse, i)) ? s : -1 !== (s = He.call(this._shortMonthsParse, i)) ? s : null }.call(this, e, t, a); for (this._monthsParse || (this._monthsParse = [], this._longMonthsParse = [], this._shortMonthsParse = []), n = 0; n < 12; n++) { if (s = c([2e3, n]), a && !this._longMonthsParse[n] && (this._longMonthsParse[n] = new RegExp("^" + this.months(s, "").replace(".", "") + "$", "i"), this._shortMonthsParse[n] = new RegExp("^" + this.monthsShort(s, "").replace(".", "") + "$", "i")), a || this._monthsParse[n] || (r = "^" + this.months(s, "") + "|^" + this.monthsShort(s, ""), this._monthsParse[n] = new RegExp(r.replace(".", ""), "i")), a && "MMMM" === t && this._longMonthsParse[n].test(e)) return n; if (a && "MMM" === t && this._shortMonthsParse[n].test(e)) return n; if (!a && this._monthsParse[n].test(e)) return n } }, ha.monthsRegex = function (e) { return this._monthsParseExact ? (m(this, "_monthsRegex") || Ce.call(this), e ? this._monthsStrictRegex : this._monthsRegex) : (m(this, "_monthsRegex") || (this._monthsRegex = Ie), this._monthsStrictRegex && e ? this._monthsStrictRegex : this._monthsRegex) }, ha.monthsShortRegex = function (e) { return this._monthsParseExact ? (m(this, "_monthsRegex") || Ce.call(this), e ? this._monthsShortStrictRegex : this._monthsShortRegex) : (m(this, "_monthsShortRegex") || (this._monthsShortRegex = Ne), this._monthsShortStrictRegex && e ? this._monthsShortStrictRegex : this._monthsShortRegex) }, ha.week = function (e) { return Ve(e, this._week.dow, this._week.doy).week }, ha.firstDayOfYear = function () { return this._week.doy }, ha.firstDayOfWeek = function () { return this._week.dow }, ha.weekdays = function (e, t) { return e ? r(this._weekdays) ? this._weekdays[e.day()] : this._weekdays[this._weekdays.isFormat.test(t) ? "format" : "standalone"][e.day()] : r(this._weekdays) ? this._weekdays : this._weekdays.standalone }, ha.weekdaysMin = function (e) { return e ? this._weekdaysMin[e.day()] : this._weekdaysMin }, ha.weekdaysShort = function (e) { return e ? this._weekdaysShort[e.day()] : this._weekdaysShort }, ha.weekdaysParse = function (e, t, a) { var n, s, r; if (this._weekdaysParseExact) return function (e, t, a) { var n, s, r, i = e.toLocaleLowerCase(); if (!this._weekdaysParse) for (this._weekdaysParse = [], this._shortWeekdaysParse = [], this._minWeekdaysParse = [], n = 0; n < 7; ++n)r = c([2e3, 1]).day(n), this._minWeekdaysParse[n] = this.weekdaysMin(r, "").toLocaleLowerCase(), this._shortWeekdaysParse[n] = this.weekdaysShort(r, "").toLocaleLowerCase(), this._weekdaysParse[n] = this.weekdays(r, "").toLocaleLowerCase(); return a ? "dddd" === t ? -1 !== (s = He.call(this._weekdaysParse, i)) ? s : null : "ddd" === t ? -1 !== (s = He.call(this._shortWeekdaysParse, i)) ? s : null : -1 !== (s = He.call(this._minWeekdaysParse, i)) ? s : null : "dddd" === t ? -1 !== (s = He.call(this._weekdaysParse, i)) ? s : -1 !== (s = He.call(this._shortWeekdaysParse, i)) ? s : -1 !== (s = He.call(this._minWeekdaysParse, i)) ? s : null : "ddd" === t ? -1 !== (s = He.call(this._shortWeekdaysParse, i)) ? s : -1 !== (s = He.call(this._weekdaysParse, i)) ? s : -1 !== (s = He.call(this._minWeekdaysParse, i)) ? s : null : -1 !== (s = He.call(this._minWeekdaysParse, i)) ? s : -1 !== (s = He.call(this._weekdaysParse, i)) ? s : -1 !== (s = He.call(this._shortWeekdaysParse, i)) ? s : null }.call(this, e, t, a); for (this._weekdaysParse || (this._weekdaysParse = [], this._minWeekdaysParse = [], this._shortWeekdaysParse = [], this._fullWeekdaysParse = []), n = 0; n < 7; n++) { if (s = c([2e3, 1]).day(n), a && !this._fullWeekdaysParse[n] && (this._fullWeekdaysParse[n] = new RegExp("^" + this.weekdays(s, "").replace(".", "\\.?") + "$", "i"), this._shortWeekdaysParse[n] = new RegExp("^" + this.weekdaysShort(s, "").replace(".", "\\.?") + "$", "i"), this._minWeekdaysParse[n] = new RegExp("^" + this.weekdaysMin(s, "").replace(".", "\\.?") + "$", "i")), this._weekdaysParse[n] || (r = "^" + this.weekdays(s, "") + "|^" + this.weekdaysShort(s, "") + "|^" + this.weekdaysMin(s, ""), this._weekdaysParse[n] = new RegExp(r.replace(".", ""), "i")), a && "dddd" === t && this._fullWeekdaysParse[n].test(e)) return n; if (a && "ddd" === t && this._shortWeekdaysParse[n].test(e)) return n; if (a && "dd" === t && this._minWeekdaysParse[n].test(e)) return n; if (!a && this._weekdaysParse[n].test(e)) return n } }, ha.weekdaysRegex = function (e) { return this._weekdaysParseExact ? (m(this, "_weekdaysRegex") || et.call(this), e ? this._weekdaysStrictRegex : this._weekdaysRegex) : (m(this, "_weekdaysRegex") || (this._weekdaysRegex = qe), this._weekdaysStrictRegex && e ? this._weekdaysStrictRegex : this._weekdaysRegex) }, ha.weekdaysShortRegex = function (e) { return this._weekdaysParseExact ? (m(this, "_weekdaysRegex") || et.call(this), e ? this._weekdaysShortStrictRegex : this._weekdaysShortRegex) : (m(this, "_weekdaysShortRegex") || (this._weekdaysShortRegex = Qe), this._weekdaysShortStrictRegex && e ? this._weekdaysShortStrictRegex : this._weekdaysShortRegex) }, ha.weekdaysMinRegex = function (e) { return this._weekdaysParseExact ? (m(this, "_weekdaysRegex") || et.call(this), e ? this._weekdaysMinStrictRegex : this._weekdaysMinRegex) : (m(this, "_weekdaysMinRegex") || (this._weekdaysMinRegex = Xe), this._weekdaysMinStrictRegex && e ? this._weekdaysMinStrictRegex : this._weekdaysMinRegex) }, ha.isPM = function (e) { return "p" === (e + "").toLowerCase().charAt(0) }, ha.meridiem = function (e, t, a) { return e > 11 ? a ? "pm" : "PM" : a ? "am" : "AM" }, mt("en", { dayOfMonthOrdinalParse: /\d{1,2}(th|st|nd|rd)/, ordinal: function (e) { var t = e % 10, a = 1 === T(e % 100 / 10) ? "th" : 1 === t ? "st" : 2 === t ? "nd" : 3 === t ? "rd" : "th"; return e + a } }), s.lang = v("moment.lang is deprecated. Use moment.locale instead.", mt), s.langData = v("moment.langData is deprecated. Use moment.localeData instead.", ct); var ya = Math.abs; function fa(e, t, a, n) { var s = Zt(t, a); return e._milliseconds += n * s._milliseconds, e._days += n * s._days, e._months += n * s._months, e._bubble() } function pa(e) { return e < 0 ? Math.floor(e) : Math.ceil(e) } function Da(e) { return 4800 * e / 146097 } function ka(e) { return 146097 * e / 4800 } function Ta(e) { return function () { return this.as(e) } } var ga = Ta("ms"), wa = Ta("s"), va = Ta("m"), ja = Ta("h"), Sa = Ta("d"), Ha = Ta("w"), ba = Ta("M"), xa = Ta("y"); function Oa(e) { return function () { return this.isValid() ? this._data[e] : NaN } } var Pa = Oa("milliseconds"), Wa = Oa("seconds"), Ea = Oa("minutes"), Aa = Oa("hours"), Fa = Oa("days"), za = Oa("months"), Ja = Oa("years"), Na = Math.round, Ia = { ss: 44, s: 45, m: 45, h: 22, d: 26, M: 11 }, Ca = Math.abs; function Ra(e) { return (e > 0) - (e < 0) || +e } function Ua() { if (!this.isValid()) return this.localeData().invalidDate(); var e, t, a = Ca(this._milliseconds) / 1e3, n = Ca(this._days), s = Ca(this._months); e = k(a / 60), t = k(e / 60), a %= 60, e %= 60; var r = k(s / 12), i = s %= 12, d = n, _ = t, o = e, u = a ? a.toFixed(3).replace(/\.?0+$/, "") : "", m = this.asSeconds(); if (!m) return "P0D"; var l = m < 0 ? "-" : "", c = Ra(this._months) !== Ra(m) ? "-" : "", h = Ra(this._days) !== Ra(m) ? "-" : "", M = Ra(this._milliseconds) !== Ra(m) ? "-" : ""; return l + "P" + (r ? c + r + "Y" : "") + (i ? c + i + "M" : "") + (d ? h + d + "D" : "") + (_ || o || u ? "T" : "") + (_ ? M + _ + "H" : "") + (o ? M + o + "M" : "") + (u ? M + u + "S" : "") } var Ga = At.prototype; return Ga.isValid = function () { return this._isValid }, Ga.abs = function () { var e = this._data; return this._milliseconds = ya(this._milliseconds), this._days = ya(this._days), this._months = ya(this._months), e.milliseconds = ya(e.milliseconds), e.seconds = ya(e.seconds), e.minutes = ya(e.minutes), e.hours = ya(e.hours), e.months = ya(e.months), e.years = ya(e.years), this }, Ga.add = function (e, t) { return fa(this, e, t, 1) }, Ga.subtract = function (e, t) { return fa(this, e, t, -1) }, Ga.as = function (e) { if (!this.isValid()) return NaN; var t, a, n = this._milliseconds; if ("month" === (e = E(e)) || "year" === e) return t = this._days + n / 864e5, a = this._months + Da(t), "month" === e ? a : a / 12; switch (t = this._days + Math.round(ka(this._months)), e) { case "week": return t / 7 + n / 6048e5; case "day": return t + n / 864e5; case "hour": return 24 * t + n / 36e5; case "minute": return 1440 * t + n / 6e4; case "second": return 86400 * t + n / 1e3; case "millisecond": return Math.floor(864e5 * t) + n; default: throw new Error("Unknown unit " + e) } }, Ga.asMilliseconds = ga, Ga.asSeconds = wa, Ga.asMinutes = va, Ga.asHours = ja, Ga.asDays = Sa, Ga.asWeeks = Ha, Ga.asMonths = ba, Ga.asYears = xa, Ga.valueOf = function () { return this.isValid() ? this._milliseconds + 864e5 * this._days + this._months % 12 * 2592e6 + 31536e6 * T(this._months / 12) : NaN }, Ga._bubble = function () { var e, t, a, n, s, r = this._milliseconds, i = this._days, d = this._months, _ = this._data; return r >= 0 && i >= 0 && d >= 0 || r <= 0 && i <= 0 && d <= 0 || (r += 864e5 * pa(ka(d) + i), i = 0, d = 0), _.milliseconds = r % 1e3, e = k(r / 1e3), _.seconds = e % 60, t = k(e / 60), _.minutes = t % 60, a = k(t / 60), _.hours = a % 24, i += k(a / 24), s = k(Da(i)), d += s, i -= pa(ka(s)), n = k(d / 12), d %= 12, _.days = i, _.months = d, _.years = n, this }, Ga.clone = function () { return Zt(this) }, Ga.get = function (e) { return e = E(e), this.isValid() ? this[e + "s"]() : NaN }, Ga.milliseconds = Pa, Ga.seconds = Wa, Ga.minutes = Ea, Ga.hours = Aa, Ga.days = Fa, Ga.weeks = function () { return k(this.days() / 7) }, Ga.months = za, Ga.years = Ja, Ga.humanize = function (e) { if (!this.isValid()) return this.localeData().invalidDate(); var t = this.localeData(), a = function (e, t, a) { var n = Zt(e).abs(), s = Na(n.as("s")), r = Na(n.as("m")), i = Na(n.as("h")), d = Na(n.as("d")), _ = Na(n.as("M")), o = Na(n.as("y")), u = s <= Ia.ss && ["s", s] || s < Ia.s && ["ss", s] || r <= 1 && ["m"] || r < Ia.m && ["mm", r] || i <= 1 && ["h"] || i < Ia.h && ["hh", i] || d <= 1 && ["d"] || d < Ia.d && ["dd", d] || _ <= 1 && ["M"] || _ < Ia.M && ["MM", _] || o <= 1 && ["y"] || ["yy", o]; return u[2] = t, u[3] = +e > 0, u[4] = a, function (e, t, a, n, s) { return s.relativeTime(t || 1, !!a, e, n) }.apply(null, u) }(this, !e, t); return e && (a = t.pastFuture(+this, a)), t.postformat(a) }, Ga.toISOString = Ua, Ga.toString = Ua, Ga.toJSON = Ua, Ga.locale = ta, Ga.localeData = na, Ga.toIsoString = v("toIsoString() is deprecated. Please use toISOString() instead (notice the capitals)", Ua), Ga.lang = aa, U("X", 0, 0, "unix"), U("x", 0, 0, "valueOf"), me("x", ie), me("X", /[+-]?\d+(\.\d{1,3})?/), Me("X", function (e, t, a) { a._d = new Date(1e3 * parseFloat(e, 10)) }), Me("x", function (e, t, a) { a._d = new Date(T(e)) }), s.version = "2.22.2", function (e) { t = e }(xt), s.fn = la, s.min = function () { return Wt("isBefore", [].slice.call(arguments, 0)) }, s.max = function () { return Wt("isAfter", [].slice.call(arguments, 0)) }, s.now = function () { return Date.now ? Date.now() : +new Date }, s.utc = c, s.unix = function (e) { return xt(1e3 * e) }, s.months = function (e, t) { return La(e, t, "months") }, s.isDate = o, s.locale = mt, s.invalid = L, s.duration = Zt, s.isMoment = D, s.weekdays = function (e, t, a) { return Ya(e, t, a, "weekdays") }, s.parseZone = function () { return xt.apply(null, arguments).parseZone() }, s.localeData = ct, s.isDuration = Ft, s.monthsShort = function (e, t) { return La(e, t, "monthsShort") }, s.weekdaysMin = function (e, t, a) { return Ya(e, t, a, "weekdaysMin") }, s.defineLocale = lt, s.updateLocale = function (e, t) { if (null != t) { var a, n, s = it; null != (n = ut(e)) && (s = n._config), t = x(s, t), (a = new O(t)).parentLocale = dt[e], dt[e] = a, mt(e) } else null != dt[e] && (null != dt[e].parentLocale ? dt[e] = dt[e].parentLocale : null != dt[e] && delete dt[e]); return dt[e] }, s.locales = function () { return j(dt) }, s.weekdaysShort = function (e, t, a) { return Ya(e, t, a, "weekdaysShort") }, s.normalizeUnits = E, s.relativeTimeRounding = function (e) { return void 0 === e ? Na : "function" == typeof e && (Na = e, !0) }, s.relativeTimeThreshold = function (e, t) { return void 0 !== Ia[e] && (void 0 === t ? Ia[e] : (Ia[e] = t, "s" === e && (Ia.ss = t - 1), !0)) }, s.calendarFormat = function (e, t) { var a = e.diff(t, "days", !0); return a < -6 ? "sameElse" : a < -1 ? "lastWeek" : a < 0 ? "lastDay" : a < 1 ? "sameDay" : a < 2 ? "nextDay" : a < 7 ? "nextWeek" : "sameElse" }, s.prototype = la, s.HTML5_FMT = { DATETIME_LOCAL: "YYYY-MM-DDTHH:mm", DATETIME_LOCAL_SECONDS: "YYYY-MM-DDTHH:mm:ss", DATETIME_LOCAL_MS: "YYYY-MM-DDTHH:mm:ss.SSS", DATE: "YYYY-MM-DD", TIME: "HH:mm", TIME_SECONDS: "HH:mm:ss", TIME_MS: "HH:mm:ss.SSS", WEEK: "YYYY-[W]WW", MONTH: "YYYY-MM" }, s }() }).call(this, a(125)(e)) }, function (e, t, a) { !function (e) { "use strict"; e.defineLocale("af", { months: "Januarie_Februarie_Maart_April_Mei_Junie_Julie_Augustus_September_Oktober_November_Desember".split("_"), monthsShort: "Jan_Feb_Mrt_Apr_Mei_Jun_Jul_Aug_Sep_Okt_Nov_Des".split("_"), weekdays: "Sondag_Maandag_Dinsdag_Woensdag_Donderdag_Vrydag_Saterdag".split("_"), weekdaysShort: "Son_Maa_Din_Woe_Don_Vry_Sat".split("_"), weekdaysMin: "So_Ma_Di_Wo_Do_Vr_Sa".split("_"), meridiemParse: /vm|nm/i, isPM: function (e) { return /^nm$/i.test(e) }, meridiem: function (e, t, a) { return e < 12 ? a ? "vm" : "VM" : a ? "nm" : "NM" }, longDateFormat: { LT: "HH:mm", LTS: "HH:mm:ss", L: "DD/MM/YYYY", LL: "D MMMM YYYY", LLL: "D MMMM YYYY HH:mm", LLLL: "dddd, D MMMM YYYY HH:mm" }, calendar: { sameDay: "[Vandag om] LT", nextDay: "[Môre om] LT", nextWeek: "dddd [om] LT", lastDay: "[Gister om] LT", lastWeek: "[Laas] dddd [om] LT", sameElse: "L" }, relativeTime: { future: "oor %s", past: "%s gelede", s: "'n paar sekondes", ss: "%d sekondes", m: "'n minuut", mm: "%d minute", h: "'n uur", hh: "%d ure", d: "'n dag", dd: "%d dae", M: "'n maand", MM: "%d maande", y: "'n jaar", yy: "%d jaar" }, dayOfMonthOrdinalParse: /\d{1,2}(ste|de)/, ordinal: function (e) { return e + (1 === e || 8 === e || e >= 20 ? "ste" : "de") }, week: { dow: 1, doy: 4 } }) }(a(0)) }, function (e, t, a) { !function (e) { "use strict"; var t = { 1: "١", 2: "٢", 3: "٣", 4: "٤", 5: "٥", 6: "٦", 7: "٧", 8: "٨", 9: "٩", 0: "٠" }, a = { "١": "1", "٢": "2", "٣": "3", "٤": "4", "٥": "5", "٦": "6", "٧": "7", "٨": "8", "٩": "9", "٠": "0" }, n = function (e) { return 0 === e ? 0 : 1 === e ? 1 : 2 === e ? 2 : e % 100 >= 3 && e % 100 <= 10 ? 3 : e % 100 >= 11 ? 4 : 5 }, s = { s: ["أقل من ثانية", "ثانية واحدة", ["ثانيتان", "ثانيتين"], "%d ثوان", "%d ثانية", "%d ثانية"], m: ["أقل من دقيقة", "دقيقة واحدة", ["دقيقتان", "دقيقتين"], "%d دقائق", "%d دقيقة", "%d دقيقة"], h: ["أقل من ساعة", "ساعة واحدة", ["ساعتان", "ساعتين"], "%d ساعات", "%d ساعة", "%d ساعة"], d: ["أقل من يوم", "يوم واحد", ["يومان", "يومين"], "%d أيام", "%d يومًا", "%d يوم"], M: ["أقل من شهر", "شهر واحد", ["شهران", "شهرين"], "%d أشهر", "%d شهرا", "%d شهر"], y: ["أقل من عام", "عام واحد", ["عامان", "عامين"], "%d أعوام", "%d عامًا", "%d عام"] }, r = function (e) { return function (t, a, r, i) { var d = n(t), _ = s[e][n(t)]; return 2 === d && (_ = _[a ? 0 : 1]), _.replace(/%d/i, t) } }, i = ["يناير", "فبراير", "مارس", "أبريل", "مايو", "يونيو", "يوليو", "أغسطس", "سبتمبر", "أكتوبر", "نوفمبر", "ديسمبر"]; e.defineLocale("ar", { months: i, monthsShort: i, weekdays: "الأحد_الإثنين_الثلاثاء_الأربعاء_الخميس_الجمعة_السبت".split("_"), weekdaysShort: "أحد_إثنين_ثلاثاء_أربعاء_خميس_جمعة_سبت".split("_"), weekdaysMin: "ح_ن_ث_ر_خ_ج_س".split("_"), weekdaysParseExact: !0, longDateFormat: { LT: "HH:mm", LTS: "HH:mm:ss", L: "D/‏M/‏YYYY", LL: "D MMMM YYYY", LLL: "D MMMM YYYY HH:mm", LLLL: "dddd D MMMM YYYY HH:mm" }, meridiemParse: /ص|م/, isPM: function (e) { return "م" === e }, meridiem: function (e, t, a) { return e < 12 ? "ص" : "م" }, calendar: { sameDay: "[اليوم عند الساعة] LT", nextDay: "[غدًا عند الساعة] LT", nextWeek: "dddd [عند الساعة] LT", lastDay: "[أمس عند الساعة] LT", lastWeek: "dddd [عند الساعة] LT", sameElse: "L" }, relativeTime: { future: "بعد %s", past: "منذ %s", s: r("s"), ss: r("s"), m: r("m"), mm: r("m"), h: r("h"), hh: r("h"), d: r("d"), dd: r("d"), M: r("M"), MM: r("M"), y: r("y"), yy: r("y") }, preparse: function (e) { return e.replace(/[١٢٣٤٥٦٧٨٩٠]/g, function (e) { return a[e] }).replace(/،/g, ",") }, postformat: function (e) { return e.replace(/\d/g, function (e) { return t[e] }).replace(/,/g, "،") }, week: { dow: 6, doy: 12 } }) }(a(0)) }, function (e, t, a) { !function (e) { "use strict"; e.defineLocale("ar-dz", { months: "جانفي_فيفري_مارس_أفريل_ماي_جوان_جويلية_أوت_سبتمبر_أكتوبر_نوفمبر_ديسمبر".split("_"), monthsShort: "جانفي_فيفري_مارس_أفريل_ماي_جوان_جويلية_أوت_سبتمبر_أكتوبر_نوفمبر_ديسمبر".split("_"), weekdays: "الأحد_الإثنين_الثلاثاء_الأربعاء_الخميس_الجمعة_السبت".split("_"), weekdaysShort: "احد_اثنين_ثلاثاء_اربعاء_خميس_جمعة_سبت".split("_"), weekdaysMin: "أح_إث_ثلا_أر_خم_جم_سب".split("_"), weekdaysParseExact: !0, longDateFormat: { LT: "HH:mm", LTS: "HH:mm:ss", L: "DD/MM/YYYY", LL: "D MMMM YYYY", LLL: "D MMMM YYYY HH:mm", LLLL: "dddd D MMMM YYYY HH:mm" }, calendar: { sameDay: "[اليوم على الساعة] LT", nextDay: "[غدا على الساعة] LT", nextWeek: "dddd [على الساعة] LT", lastDay: "[أمس على الساعة] LT", lastWeek: "dddd [على الساعة] LT", sameElse: "L" }, relativeTime: { future: "في %s", past: "منذ %s", s: "ثوان", ss: "%d ثانية", m: "دقيقة", mm: "%d دقائق", h: "ساعة", hh: "%d ساعات", d: "يوم", dd: "%d أيام", M: "شهر", MM: "%d أشهر", y: "سنة", yy: "%d سنوات" }, week: { dow: 0, doy: 4 } }) }(a(0)) }, function (e, t, a) { !function (e) { "use strict"; e.defineLocale("ar-kw", { months: "يناير_فبراير_مارس_أبريل_ماي_يونيو_يوليوز_غشت_شتنبر_أكتوبر_نونبر_دجنبر".split("_"), monthsShort: "يناير_فبراير_مارس_أبريل_ماي_يونيو_يوليوز_غشت_شتنبر_أكتوبر_نونبر_دجنبر".split("_"), weekdays: "الأحد_الإتنين_الثلاثاء_الأربعاء_الخميس_الجمعة_السبت".split("_"), weekdaysShort: "احد_اتنين_ثلاثاء_اربعاء_خميس_جمعة_سبت".split("_"), weekdaysMin: "ح_ن_ث_ر_خ_ج_س".split("_"), weekdaysParseExact: !0, longDateFormat: { LT: "HH:mm", LTS: "HH:mm:ss", L: "DD/MM/YYYY", LL: "D MMMM YYYY", LLL: "D MMMM YYYY HH:mm", LLLL: "dddd D MMMM YYYY HH:mm" }, calendar: { sameDay: "[اليوم على الساعة] LT", nextDay: "[غدا على الساعة] LT", nextWeek: "dddd [على الساعة] LT", lastDay: "[أمس على الساعة] LT", lastWeek: "dddd [على الساعة] LT", sameElse: "L" }, relativeTime: { future: "في %s", past: "منذ %s", s: "ثوان", ss: "%d ثانية", m: "دقيقة", mm: "%d دقائق", h: "ساعة", hh: "%d ساعات", d: "يوم", dd: "%d أيام", M: "شهر", MM: "%d أشهر", y: "سنة", yy: "%d سنوات" }, week: { dow: 0, doy: 12 } }) }(a(0)) }, function (e, t, a) { !function (e) { "use strict"; var t = { 1: "1", 2: "2", 3: "3", 4: "4", 5: "5", 6: "6", 7: "7", 8: "8", 9: "9", 0: "0" }, a = function (e) { return 0 === e ? 0 : 1 === e ? 1 : 2 === e ? 2 : e % 100 >= 3 && e % 100 <= 10 ? 3 : e % 100 >= 11 ? 4 : 5 }, n = { s: ["أقل من ثانية", "ثانية واحدة", ["ثانيتان", "ثانيتين"], "%d ثوان", "%d ثانية", "%d ثانية"], m: ["أقل من دقيقة", "دقيقة واحدة", ["دقيقتان", "دقيقتين"], "%d دقائق", "%d دقيقة", "%d دقيقة"], h: ["أقل من ساعة", "ساعة واحدة", ["ساعتان", "ساعتين"], "%d ساعات", "%d ساعة", "%d ساعة"], d: ["أقل من يوم", "يوم واحد", ["يومان", "يومين"], "%d أيام", "%d يومًا", "%d يوم"], M: ["أقل من شهر", "شهر واحد", ["شهران", "شهرين"], "%d أشهر", "%d شهرا", "%d شهر"], y: ["أقل من عام", "عام واحد", ["عامان", "عامين"], "%d أعوام", "%d عامًا", "%d عام"] }, s = function (e) { return function (t, s, r, i) { var d = a(t), _ = n[e][a(t)]; return 2 === d && (_ = _[s ? 0 : 1]), _.replace(/%d/i, t) } }, r = ["يناير", "فبراير", "مارس", "أبريل", "مايو", "يونيو", "يوليو", "أغسطس", "سبتمبر", "أكتوبر", "نوفمبر", "ديسمبر"]; e.defineLocale("ar-ly", { months: r, monthsShort: r, weekdays: "الأحد_الإثنين_الثلاثاء_الأربعاء_الخميس_الجمعة_السبت".split("_"), weekdaysShort: "أحد_إثنين_ثلاثاء_أربعاء_خميس_جمعة_سبت".split("_"), weekdaysMin: "ح_ن_ث_ر_خ_ج_س".split("_"), weekdaysParseExact: !0, longDateFormat: { LT: "HH:mm", LTS: "HH:mm:ss", L: "D/‏M/‏YYYY", LL: "D MMMM YYYY", LLL: "D MMMM YYYY HH:mm", LLLL: "dddd D MMMM YYYY HH:mm" }, meridiemParse: /ص|م/, isPM: function (e) { return "م" === e }, meridiem: function (e, t, a) { return e < 12 ? "ص" : "م" }, calendar: { sameDay: "[اليوم عند الساعة] LT", nextDay: "[غدًا عند الساعة] LT", nextWeek: "dddd [عند الساعة] LT", lastDay: "[أمس عند الساعة] LT", lastWeek: "dddd [عند الساعة] LT", sameElse: "L" }, relativeTime: { future: "بعد %s", past: "منذ %s", s: s("s"), ss: s("s"), m: s("m"), mm: s("m"), h: s("h"), hh: s("h"), d: s("d"), dd: s("d"), M: s("M"), MM: s("M"), y: s("y"), yy: s("y") }, preparse: function (e) { return e.replace(/،/g, ",") }, postformat: function (e) { return e.replace(/\d/g, function (e) { return t[e] }).replace(/,/g, "،") }, week: { dow: 6, doy: 12 } }) }(a(0)) }, function (e, t, a) { !function (e) { "use strict"; e.defineLocale("ar-ma", { months: "يناير_فبراير_مارس_أبريل_ماي_يونيو_يوليوز_غشت_شتنبر_أكتوبر_نونبر_دجنبر".split("_"), monthsShort: "يناير_فبراير_مارس_أبريل_ماي_يونيو_يوليوز_غشت_شتنبر_أكتوبر_نونبر_دجنبر".split("_"), weekdays: "الأحد_الإتنين_الثلاثاء_الأربعاء_الخميس_الجمعة_السبت".split("_"), weekdaysShort: "احد_اتنين_ثلاثاء_اربعاء_خميس_جمعة_سبت".split("_"), weekdaysMin: "ح_ن_ث_ر_خ_ج_س".split("_"), weekdaysParseExact: !0, longDateFormat: { LT: "HH:mm", LTS: "HH:mm:ss", L: "DD/MM/YYYY", LL: "D MMMM YYYY", LLL: "D MMMM YYYY HH:mm", LLLL: "dddd D MMMM YYYY HH:mm" }, calendar: { sameDay: "[اليوم على الساعة] LT", nextDay: "[غدا على الساعة] LT", nextWeek: "dddd [على الساعة] LT", lastDay: "[أمس على الساعة] LT", lastWeek: "dddd [على الساعة] LT", sameElse: "L" }, relativeTime: { future: "في %s", past: "منذ %s", s: "ثوان", ss: "%d ثانية", m: "دقيقة", mm: "%d دقائق", h: "ساعة", hh: "%d ساعات", d: "يوم", dd: "%d أيام", M: "شهر", MM: "%d أشهر", y: "سنة", yy: "%d سنوات" }, week: { dow: 6, doy: 12 } }) }(a(0)) }, function (e, t, a) { !function (e) { "use strict"; var t = { 1: "١", 2: "٢", 3: "٣", 4: "٤", 5: "٥", 6: "٦", 7: "٧", 8: "٨", 9: "٩", 0: "٠" }, a = { "١": "1", "٢": "2", "٣": "3", "٤": "4", "٥": "5", "٦": "6", "٧": "7", "٨": "8", "٩": "9", "٠": "0" }; e.defineLocale("ar-sa", { months: "يناير_فبراير_مارس_أبريل_مايو_يونيو_يوليو_أغسطس_سبتمبر_أكتوبر_نوفمبر_ديسمبر".split("_"), monthsShort: "يناير_فبراير_مارس_أبريل_مايو_يونيو_يوليو_أغسطس_سبتمبر_أكتوبر_نوفمبر_ديسمبر".split("_"), weekdays: "الأحد_الإثنين_الثلاثاء_الأربعاء_الخميس_الجمعة_السبت".split("_"), weekdaysShort: "أحد_إثنين_ثلاثاء_أربعاء_خميس_جمعة_سبت".split("_"), weekdaysMin: "ح_ن_ث_ر_خ_ج_س".split("_"), weekdaysParseExact: !0, longDateFormat: { LT: "HH:mm", LTS: "HH:mm:ss", L: "DD/MM/YYYY", LL: "D MMMM YYYY", LLL: "D MMMM YYYY HH:mm", LLLL: "dddd D MMMM YYYY HH:mm" }, meridiemParse: /ص|م/, isPM: function (e) { return "م" === e }, meridiem: function (e, t, a) { return e < 12 ? "ص" : "م" }, calendar: { sameDay: "[اليوم على الساعة] LT", nextDay: "[غدا على الساعة] LT", nextWeek: "dddd [على الساعة] LT", lastDay: "[أمس على الساعة] LT", lastWeek: "dddd [على الساعة] LT", sameElse: "L" }, relativeTime: { future: "في %s", past: "منذ %s", s: "ثوان", ss: "%d ثانية", m: "دقيقة", mm: "%d دقائق", h: "ساعة", hh: "%d ساعات", d: "يوم", dd: "%d أيام", M: "شهر", MM: "%d أشهر", y: "سنة", yy: "%d سنوات" }, preparse: function (e) { return e.replace(/[١٢٣٤٥٦٧٨٩٠]/g, function (e) { return a[e] }).replace(/،/g, ",") }, postformat: function (e) { return e.replace(/\d/g, function (e) { return t[e] }).replace(/,/g, "،") }, week: { dow: 0, doy: 6 } }) }(a(0)) }, function (e, t, a) { !function (e) { "use strict"; e.defineLocale("ar-tn", { months: "جانفي_فيفري_مارس_أفريل_ماي_جوان_جويلية_أوت_سبتمبر_أكتوبر_نوفمبر_ديسمبر".split("_"), monthsShort: "جانفي_فيفري_مارس_أفريل_ماي_جوان_جويلية_أوت_سبتمبر_أكتوبر_نوفمبر_ديسمبر".split("_"), weekdays: "الأحد_الإثنين_الثلاثاء_الأربعاء_الخميس_الجمعة_السبت".split("_"), weekdaysShort: "أحد_إثنين_ثلاثاء_أربعاء_خميس_جمعة_سبت".split("_"), weekdaysMin: "ح_ن_ث_ر_خ_ج_س".split("_"), weekdaysParseExact: !0, longDateFormat: { LT: "HH:mm", LTS: "HH:mm:ss", L: "DD/MM/YYYY", LL: "D MMMM YYYY", LLL: "D MMMM YYYY HH:mm", LLLL: "dddd D MMMM YYYY HH:mm" }, calendar: { sameDay: "[اليوم على الساعة] LT", nextDay: "[غدا على الساعة] LT", nextWeek: "dddd [على الساعة] LT", lastDay: "[أمس على الساعة] LT", lastWeek: "dddd [على الساعة] LT", sameElse: "L" }, relativeTime: { future: "في %s", past: "منذ %s", s: "ثوان", ss: "%d ثانية", m: "دقيقة", mm: "%d دقائق", h: "ساعة", hh: "%d ساعات", d: "يوم", dd: "%d أيام", M: "شهر", MM: "%d أشهر", y: "سنة", yy: "%d سنوات" }, week: { dow: 1, doy: 4 } }) }(a(0)) }, function (e, t, a) { !function (e) { "use strict"; var t = { 1: "-inci", 5: "-inci", 8: "-inci", 70: "-inci", 80: "-inci", 2: "-nci", 7: "-nci", 20: "-nci", 50: "-nci", 3: "-üncü", 4: "-üncü", 100: "-üncü", 6: "-ncı", 9: "-uncu", 10: "-uncu", 30: "-uncu", 60: "-ıncı", 90: "-ıncı" }; e.defineLocale("az", { months: "yanvar_fevral_mart_aprel_may_iyun_iyul_avqust_sentyabr_oktyabr_noyabr_dekabr".split("_"), monthsShort: "yan_fev_mar_apr_may_iyn_iyl_avq_sen_okt_noy_dek".split("_"), weekdays: "Bazar_Bazar ertəsi_Çərşənbə axşamı_Çərşənbə_Cümə axşamı_Cümə_Şənbə".split("_"), weekdaysShort: "Baz_BzE_ÇAx_Çər_CAx_Cüm_Şən".split("_"), weekdaysMin: "Bz_BE_ÇA_Çə_CA_Cü_Şə".split("_"), weekdaysParseExact: !0, longDateFormat: { LT: "HH:mm", LTS: "HH:mm:ss", L: "DD.MM.YYYY", LL: "D MMMM YYYY", LLL: "D MMMM YYYY HH:mm", LLLL: "dddd, D MMMM YYYY HH:mm" }, calendar: { sameDay: "[bugün saat] LT", nextDay: "[sabah saat] LT", nextWeek: "[gələn həftə] dddd [saat] LT", lastDay: "[dünən] LT", lastWeek: "[keçən həftə] dddd [saat] LT", sameElse: "L" }, relativeTime: { future: "%s sonra", past: "%s əvvəl", s: "birneçə saniyə", ss: "%d saniyə", m: "bir dəqiqə", mm: "%d dəqiqə", h: "bir saat", hh: "%d saat", d: "bir gün", dd: "%d gün", M: "bir ay", MM: "%d ay", y: "bir il", yy: "%d il" }, meridiemParse: /gecə|səhər|gündüz|axşam/, isPM: function (e) { return /^(gündüz|axşam)$/.test(e) }, meridiem: function (e, t, a) { return e < 4 ? "gecə" : e < 12 ? "səhər" : e < 17 ? "gündüz" : "axşam" }, dayOfMonthOrdinalParse: /\d{1,2}-(ıncı|inci|nci|üncü|ncı|uncu)/, ordinal: function (e) { if (0 === e) return e + "-ıncı"; var a = e % 10, n = e % 100 - a, s = e >= 100 ? 100 : null; return e + (t[a] || t[n] || t[s]) }, week: { dow: 1, doy: 7 } }) }(a(0)) }, function (e, t, a) { !function (e) { "use strict"; function t(e, t, a) { var n = { ss: t ? "секунда_секунды_секунд" : "секунду_секунды_секунд", mm: t ? "хвіліна_хвіліны_хвілін" : "хвіліну_хвіліны_хвілін", hh: t ? "гадзіна_гадзіны_гадзін" : "гадзіну_гадзіны_гадзін", dd: "дзень_дні_дзён", MM: "месяц_месяцы_месяцаў", yy: "год_гады_гадоў" }; return "m" === a ? t ? "хвіліна" : "хвіліну" : "h" === a ? t ? "гадзіна" : "гадзіну" : e + " " + function (e, t) { var a = e.split("_"); return t % 10 == 1 && t % 100 != 11 ? a[0] : t % 10 >= 2 && t % 10 <= 4 && (t % 100 < 10 || t % 100 >= 20) ? a[1] : a[2] }(n[a], +e) } e.defineLocale("be", { months: { format: "студзеня_лютага_сакавіка_красавіка_траўня_чэрвеня_ліпеня_жніўня_верасня_кастрычніка_лістапада_снежня".split("_"), standalone: "студзень_люты_сакавік_красавік_травень_чэрвень_ліпень_жнівень_верасень_кастрычнік_лістапад_снежань".split("_") }, monthsShort: "студ_лют_сак_крас_трав_чэрв_ліп_жнів_вер_каст_ліст_снеж".split("_"), weekdays: { format: "нядзелю_панядзелак_аўторак_сераду_чацвер_пятніцу_суботу".split("_"), standalone: "нядзеля_панядзелак_аўторак_серада_чацвер_пятніца_субота".split("_"), isFormat: /\[ ?[Ууў] ?(?:мінулую|наступную)? ?\] ?dddd/ }, weekdaysShort: "нд_пн_ат_ср_чц_пт_сб".split("_"), weekdaysMin: "нд_пн_ат_ср_чц_пт_сб".split("_"), longDateFormat: { LT: "HH:mm", LTS: "HH:mm:ss", L: "DD.MM.YYYY", LL: "D MMMM YYYY г.", LLL: "D MMMM YYYY г., HH:mm", LLLL: "dddd, D MMMM YYYY г., HH:mm" }, calendar: { sameDay: "[Сёння ў] LT", nextDay: "[Заўтра ў] LT", lastDay: "[Учора ў] LT", nextWeek: function () { return "[У] dddd [ў] LT" }, lastWeek: function () { switch (this.day()) { case 0: case 3: case 5: case 6: return "[У мінулую] dddd [ў] LT"; case 1: case 2: case 4: return "[У мінулы] dddd [ў] LT" } }, sameElse: "L" }, relativeTime: { future: "праз %s", past: "%s таму", s: "некалькі секунд", m: t, mm: t, h: t, hh: t, d: "дзень", dd: t, M: "месяц", MM: t, y: "год", yy: t }, meridiemParse: /ночы|раніцы|дня|вечара/, isPM: function (e) { return /^(дня|вечара)$/.test(e) }, meridiem: function (e, t, a) { return e < 4 ? "ночы" : e < 12 ? "раніцы" : e < 17 ? "дня" : "вечара" }, dayOfMonthOrdinalParse: /\d{1,2}-(і|ы|га)/, ordinal: function (e, t) { switch (t) { case "M": case "d": case "DDD": case "w": case "W": return e % 10 != 2 && e % 10 != 3 || e % 100 == 12 || e % 100 == 13 ? e + "-ы" : e + "-і"; case "D": return e + "-га"; default: return e } }, week: { dow: 1, doy: 7 } }) }(a(0)) }, function (e, t, a) { !function (e) { "use strict"; e.defineLocale("bg", { months: "януари_февруари_март_април_май_юни_юли_август_септември_октомври_ноември_декември".split("_"), monthsShort: "янр_фев_мар_апр_май_юни_юли_авг_сеп_окт_ное_дек".split("_"), weekdays: "неделя_понеделник_вторник_сряда_четвъртък_петък_събота".split("_"), weekdaysShort: "нед_пон_вто_сря_чет_пет_съб".split("_"), weekdaysMin: "нд_пн_вт_ср_чт_пт_сб".split("_"), longDateFormat: { LT: "H:mm", LTS: "H:mm:ss", L: "D.MM.YYYY", LL: "D MMMM YYYY", LLL: "D MMMM YYYY H:mm", LLLL: "dddd, D MMMM YYYY H:mm" }, calendar: { sameDay: "[Днес в] LT", nextDay: "[Утре в] LT", nextWeek: "dddd [в] LT", lastDay: "[Вчера в] LT", lastWeek: function () { switch (this.day()) { case 0: case 3: case 6: return "[В изминалата] dddd [в] LT"; case 1: case 2: case 4: case 5: return "[В изминалия] dddd [в] LT" } }, sameElse: "L" }, relativeTime: { future: "след %s", past: "преди %s", s: "няколко секунди", ss: "%d секунди", m: "минута", mm: "%d минути", h: "час", hh: "%d часа", d: "ден", dd: "%d дни", M: "месец", MM: "%d месеца", y: "година", yy: "%d години" }, dayOfMonthOrdinalParse: /\d{1,2}-(ев|ен|ти|ви|ри|ми)/, ordinal: function (e) { var t = e % 10, a = e % 100; return 0 === e ? e + "-ев" : 0 === a ? e + "-ен" : a > 10 && a < 20 ? e + "-ти" : 1 === t ? e + "-ви" : 2 === t ? e + "-ри" : 7 === t || 8 === t ? e + "-ми" : e + "-ти" }, week: { dow: 1, doy: 7 } }) }(a(0)) }, function (e, t, a) { !function (e) { "use strict"; e.defineLocale("bm", { months: "Zanwuyekalo_Fewuruyekalo_Marisikalo_Awirilikalo_Mɛkalo_Zuwɛnkalo_Zuluyekalo_Utikalo_Sɛtanburukalo_ɔkutɔburukalo_Nowanburukalo_Desanburukalo".split("_"), monthsShort: "Zan_Few_Mar_Awi_Mɛ_Zuw_Zul_Uti_Sɛt_ɔku_Now_Des".split("_"), weekdays: "Kari_Ntɛnɛn_Tarata_Araba_Alamisa_Juma_Sibiri".split("_"), weekdaysShort: "Kar_Ntɛ_Tar_Ara_Ala_Jum_Sib".split("_"), weekdaysMin: "Ka_Nt_Ta_Ar_Al_Ju_Si".split("_"), longDateFormat: { LT: "HH:mm", LTS: "HH:mm:ss", L: "DD/MM/YYYY", LL: "MMMM [tile] D [san] YYYY", LLL: "MMMM [tile] D [san] YYYY [lɛrɛ] HH:mm", LLLL: "dddd MMMM [tile] D [san] YYYY [lɛrɛ] HH:mm" }, calendar: { sameDay: "[Bi lɛrɛ] LT", nextDay: "[Sini lɛrɛ] LT", nextWeek: "dddd [don lɛrɛ] LT", lastDay: "[Kunu lɛrɛ] LT", lastWeek: "dddd [tɛmɛnen lɛrɛ] LT", sameElse: "L" }, relativeTime: { future: "%s kɔnɔ", past: "a bɛ %s bɔ", s: "sanga dama dama", ss: "sekondi %d", m: "miniti kelen", mm: "miniti %d", h: "lɛrɛ kelen", hh: "lɛrɛ %d", d: "tile kelen", dd: "tile %d", M: "kalo kelen", MM: "kalo %d", y: "san kelen", yy: "san %d" }, week: { dow: 1, doy: 4 } }) }(a(0)) }, function (e, t, a) { !function (e) { "use strict"; var t = { 1: "১", 2: "২", 3: "৩", 4: "৪", 5: "৫", 6: "৬", 7: "৭", 8: "৮", 9: "৯", 0: "০" }, a = { "১": "1", "২": "2", "৩": "3", "৪": "4", "৫": "5", "৬": "6", "৭": "7", "৮": "8", "৯": "9", "০": "0" }; e.defineLocale("bn", { months: "জানুয়ারী_ফেব্রুয়ারি_মার্চ_এপ্রিল_মে_জুন_জুলাই_আগস্ট_সেপ্টেম্বর_অক্টোবর_নভেম্বর_ডিসেম্বর".split("_"), monthsShort: "জানু_ফেব_মার্চ_এপ্র_মে_জুন_জুল_আগ_সেপ্ট_অক্টো_নভে_ডিসে".split("_"), weekdays: "রবিবার_সোমবার_মঙ্গলবার_বুধবার_বৃহস্পতিবার_শুক্রবার_শনিবার".split("_"), weekdaysShort: "রবি_সোম_মঙ্গল_বুধ_বৃহস্পতি_শুক্র_শনি".split("_"), weekdaysMin: "রবি_সোম_মঙ্গ_বুধ_বৃহঃ_শুক্র_শনি".split("_"), longDateFormat: { LT: "A h:mm সময়", LTS: "A h:mm:ss সময়", L: "DD/MM/YYYY", LL: "D MMMM YYYY", LLL: "D MMMM YYYY, A h:mm সময়", LLLL: "dddd, D MMMM YYYY, A h:mm সময়" }, calendar: { sameDay: "[আজ] LT", nextDay: "[আগামীকাল] LT", nextWeek: "dddd, LT", lastDay: "[গতকাল] LT", lastWeek: "[গত] dddd, LT", sameElse: "L" }, relativeTime: { future: "%s পরে", past: "%s আগে", s: "কয়েক সেকেন্ড", ss: "%d সেকেন্ড", m: "এক মিনিট", mm: "%d মিনিট", h: "এক ঘন্টা", hh: "%d ঘন্টা", d: "এক দিন", dd: "%d দিন", M: "এক মাস", MM: "%d মাস", y: "এক বছর", yy: "%d বছর" }, preparse: function (e) { return e.replace(/[১২৩৪৫৬৭৮৯০]/g, function (e) { return a[e] }) }, postformat: function (e) { return e.replace(/\d/g, function (e) { return t[e] }) }, meridiemParse: /রাত|সকাল|দুপুর|বিকাল|রাত/, meridiemHour: function (e, t) { return 12 === e && (e = 0), "রাত" === t && e >= 4 || "দুপুর" === t && e < 5 || "বিকাল" === t ? e + 12 : e }, meridiem: function (e, t, a) { return e < 4 ? "রাত" : e < 10 ? "সকাল" : e < 17 ? "দুপুর" : e < 20 ? "বিকাল" : "রাত" }, week: { dow: 0, doy: 6 } }) }(a(0)) }, function (e, t, a) { !function (e) { "use strict"; var t = { 1: "༡", 2: "༢", 3: "༣", 4: "༤", 5: "༥", 6: "༦", 7: "༧", 8: "༨", 9: "༩", 0: "༠" }, a = { "༡": "1", "༢": "2", "༣": "3", "༤": "4", "༥": "5", "༦": "6", "༧": "7", "༨": "8", "༩": "9", "༠": "0" }; e.defineLocale("bo", { months: "ཟླ་བ་དང་པོ_ཟླ་བ་གཉིས་པ_ཟླ་བ་གསུམ་པ_ཟླ་བ་བཞི་པ_ཟླ་བ་ལྔ་པ_ཟླ་བ་དྲུག་པ_ཟླ་བ་བདུན་པ_ཟླ་བ་བརྒྱད་པ_ཟླ་བ་དགུ་པ_ཟླ་བ་བཅུ་པ_ཟླ་བ་བཅུ་གཅིག་པ_ཟླ་བ་བཅུ་གཉིས་པ".split("_"), monthsShort: "ཟླ་བ་དང་པོ_ཟླ་བ་གཉིས་པ_ཟླ་བ་གསུམ་པ_ཟླ་བ་བཞི་པ_ཟླ་བ་ལྔ་པ_ཟླ་བ་དྲུག་པ_ཟླ་བ་བདུན་པ_ཟླ་བ་བརྒྱད་པ_ཟླ་བ་དགུ་པ_ཟླ་བ་བཅུ་པ_ཟླ་བ་བཅུ་གཅིག་པ_ཟླ་བ་བཅུ་གཉིས་པ".split("_"), weekdays: "གཟའ་ཉི་མ་_གཟའ་ཟླ་བ་_གཟའ་མིག་དམར་_གཟའ་ལྷག་པ་_གཟའ་ཕུར་བུ_གཟའ་པ་སངས་_གཟའ་སྤེན་པ་".split("_"), weekdaysShort: "ཉི་མ་_ཟླ་བ་_མིག་དམར་_ལྷག་པ་_ཕུར་བུ_པ་སངས་_སྤེན་པ་".split("_"), weekdaysMin: "ཉི་མ་_ཟླ་བ་_མིག་དམར་_ལྷག་པ་_ཕུར་བུ_པ་སངས་_སྤེན་པ་".split("_"), longDateFormat: { LT: "A h:mm", LTS: "A h:mm:ss", L: "DD/MM/YYYY", LL: "D MMMM YYYY", LLL: "D MMMM YYYY, A h:mm", LLLL: "dddd, D MMMM YYYY, A h:mm" }, calendar: { sameDay: "[དི་རིང] LT", nextDay: "[སང་ཉིན] LT", nextWeek: "[བདུན་ཕྲག་རྗེས་མ], LT", lastDay: "[ཁ་སང] LT", lastWeek: "[བདུན་ཕྲག་མཐའ་མ] dddd, LT", sameElse: "L" }, relativeTime: { future: "%s ལ་", past: "%s སྔན་ལ", s: "ལམ་སང", ss: "%d སྐར་ཆ།", m: "སྐར་མ་གཅིག", mm: "%d སྐར་མ", h: "ཆུ་ཚོད་གཅིག", hh: "%d ཆུ་ཚོད", d: "ཉིན་གཅིག", dd: "%d ཉིན་", M: "ཟླ་བ་གཅིག", MM: "%d ཟླ་བ", y: "ལོ་གཅིག", yy: "%d ལོ" }, preparse: function (e) { return e.replace(/[༡༢༣༤༥༦༧༨༩༠]/g, function (e) { return a[e] }) }, postformat: function (e) { return e.replace(/\d/g, function (e) { return t[e] }) }, meridiemParse: /མཚན་མོ|ཞོགས་ཀས|ཉིན་གུང|དགོང་དག|མཚན་མོ/, meridiemHour: function (e, t) { return 12 === e && (e = 0), "མཚན་མོ" === t && e >= 4 || "ཉིན་གུང" === t && e < 5 || "དགོང་དག" === t ? e + 12 : e }, meridiem: function (e, t, a) { return e < 4 ? "མཚན་མོ" : e < 10 ? "ཞོགས་ཀས" : e < 17 ? "ཉིན་གུང" : e < 20 ? "དགོང་དག" : "མཚན་མོ" }, week: { dow: 0, doy: 6 } }) }(a(0)) }, function (e, t, a) { !function (e) { "use strict"; function t(e, t, a) { return e + " " + function (e, t) { return 2 === t ? function (e) { var t = { m: "v", b: "v", d: "z" }; return void 0 === t[e.charAt(0)] ? e : t[e.charAt(0)] + e.substring(1) }(e) : e }({ mm: "munutenn", MM: "miz", dd: "devezh" }[a], e) } e.defineLocale("br", { months: "Genver_C'hwevrer_Meurzh_Ebrel_Mae_Mezheven_Gouere_Eost_Gwengolo_Here_Du_Kerzu".split("_"), monthsShort: "Gen_C'hwe_Meu_Ebr_Mae_Eve_Gou_Eos_Gwe_Her_Du_Ker".split("_"), weekdays: "Sul_Lun_Meurzh_Merc'her_Yaou_Gwener_Sadorn".split("_"), weekdaysShort: "Sul_Lun_Meu_Mer_Yao_Gwe_Sad".split("_"), weekdaysMin: "Su_Lu_Me_Mer_Ya_Gw_Sa".split("_"), weekdaysParseExact: !0, longDateFormat: { LT: "h[e]mm A", LTS: "h[e]mm:ss A", L: "DD/MM/YYYY", LL: "D [a viz] MMMM YYYY", LLL: "D [a viz] MMMM YYYY h[e]mm A", LLLL: "dddd, D [a viz] MMMM YYYY h[e]mm A" }, calendar: { sameDay: "[Hiziv da] LT", nextDay: "[Warc'hoazh da] LT", nextWeek: "dddd [da] LT", lastDay: "[Dec'h da] LT", lastWeek: "dddd [paset da] LT", sameElse: "L" }, relativeTime: { future: "a-benn %s", past: "%s 'zo", s: "un nebeud segondennoù", ss: "%d eilenn", m: "ur vunutenn", mm: t, h: "un eur", hh: "%d eur", d: "un devezh", dd: t, M: "ur miz", MM: t, y: "ur bloaz", yy: function (e) { switch (function e(t) { return t > 9 ? e(t % 10) : t }(e)) { case 1: case 3: case 4: case 5: case 9: return e + " bloaz"; default: return e + " vloaz" } } }, dayOfMonthOrdinalParse: /\d{1,2}(añ|vet)/, ordinal: function (e) { var t = 1 === e ? "añ" : "vet"; return e + t }, week: { dow: 1, doy: 4 } }) }(a(0)) }, function (e, t, a) { !function (e) { "use strict"; function t(e, t, a) { var n = e + " "; switch (a) { case "ss": return n += 1 === e ? "sekunda" : 2 === e || 3 === e || 4 === e ? "sekunde" : "sekundi"; case "m": return t ? "jedna minuta" : "jedne minute"; case "mm": return n += 1 === e ? "minuta" : 2 === e || 3 === e || 4 === e ? "minute" : "minuta"; case "h": return t ? "jedan sat" : "jednog sata"; case "hh": return n += 1 === e ? "sat" : 2 === e || 3 === e || 4 === e ? "sata" : "sati"; case "dd": return n += 1 === e ? "dan" : "dana"; case "MM": return n += 1 === e ? "mjesec" : 2 === e || 3 === e || 4 === e ? "mjeseca" : "mjeseci"; case "yy": return n += 1 === e ? "godina" : 2 === e || 3 === e || 4 === e ? "godine" : "godina" } } e.defineLocale("bs", { months: "januar_februar_mart_april_maj_juni_juli_august_septembar_oktobar_novembar_decembar".split("_"), monthsShort: "jan._feb._mar._apr._maj._jun._jul._aug._sep._okt._nov._dec.".split("_"), monthsParseExact: !0, weekdays: "nedjelja_ponedjeljak_utorak_srijeda_četvrtak_petak_subota".split("_"), weekdaysShort: "ned._pon._uto._sri._čet._pet._sub.".split("_"), weekdaysMin: "ne_po_ut_sr_če_pe_su".split("_"), weekdaysParseExact: !0, longDateFormat: { LT: "H:mm", LTS: "H:mm:ss", L: "DD.MM.YYYY", LL: "D. MMMM YYYY", LLL: "D. MMMM YYYY H:mm", LLLL: "dddd, D. MMMM YYYY H:mm" }, calendar: { sameDay: "[danas u] LT", nextDay: "[sutra u] LT", nextWeek: function () { switch (this.day()) { case 0: return "[u] [nedjelju] [u] LT"; case 3: return "[u] [srijedu] [u] LT"; case 6: return "[u] [subotu] [u] LT"; case 1: case 2: case 4: case 5: return "[u] dddd [u] LT" } }, lastDay: "[jučer u] LT", lastWeek: function () { switch (this.day()) { case 0: case 3: return "[prošlu] dddd [u] LT"; case 6: return "[prošle] [subote] [u] LT"; case 1: case 2: case 4: case 5: return "[prošli] dddd [u] LT" } }, sameElse: "L" }, relativeTime: { future: "za %s", past: "prije %s", s: "par sekundi", ss: t, m: t, mm: t, h: t, hh: t, d: "dan", dd: t, M: "mjesec", MM: t, y: "godinu", yy: t }, dayOfMonthOrdinalParse: /\d{1,2}\./, ordinal: "%d.", week: { dow: 1, doy: 7 } }) }(a(0)) }, function (e, t, a) { !function (e) { "use strict"; e.defineLocale("ca", { months: { standalone: "gener_febrer_març_abril_maig_juny_juliol_agost_setembre_octubre_novembre_desembre".split("_"), format: "de gener_de febrer_de març_d'abril_de maig_de juny_de juliol_d'agost_de setembre_d'octubre_de novembre_de desembre".split("_"), isFormat: /D[oD]?(\s)+MMMM/ }, monthsShort: "gen._febr._març_abr._maig_juny_jul._ag._set._oct._nov._des.".split("_"), monthsParseExact: !0, weekdays: "diumenge_dilluns_dimarts_dimecres_dijous_divendres_dissabte".split("_"), weekdaysShort: "dg._dl._dt._dc._dj._dv._ds.".split("_"), weekdaysMin: "dg_dl_dt_dc_dj_dv_ds".split("_"), weekdaysParseExact: !0, longDateFormat: { LT: "H:mm", LTS: "H:mm:ss", L: "DD/MM/YYYY", LL: "D MMMM [de] YYYY", ll: "D MMM YYYY", LLL: "D MMMM [de] YYYY [a les] H:mm", lll: "D MMM YYYY, H:mm", LLLL: "dddd D MMMM [de] YYYY [a les] H:mm", llll: "ddd D MMM YYYY, H:mm" }, calendar: { sameDay: function () { return "[avui a " + (1 !== this.hours() ? "les" : "la") + "] LT" }, nextDay: function () { return "[demà a " + (1 !== this.hours() ? "les" : "la") + "] LT" }, nextWeek: function () { return "dddd [a " + (1 !== this.hours() ? "les" : "la") + "] LT" }, lastDay: function () { return "[ahir a " + (1 !== this.hours() ? "les" : "la") + "] LT" }, lastWeek: function () { return "[el] dddd [passat a " + (1 !== this.hours() ? "les" : "la") + "] LT" }, sameElse: "L" }, relativeTime: { future: "d'aquí %s", past: "fa %s", s: "uns segons", ss: "%d segons", m: "un minut", mm: "%d minuts", h: "una hora", hh: "%d hores", d: "un dia", dd: "%d dies", M: "un mes", MM: "%d mesos", y: "un any", yy: "%d anys" }, dayOfMonthOrdinalParse: /\d{1,2}(r|n|t|è|a)/, ordinal: function (e, t) { var a = 1 === e ? "r" : 2 === e ? "n" : 3 === e ? "r" : 4 === e ? "t" : "è"; return "w" !== t && "W" !== t || (a = "a"), e + a }, week: { dow: 1, doy: 4 } }) }(a(0)) }, function (e, t, a) { !function (e) { "use strict"; var t = "leden_únor_březen_duben_květen_červen_červenec_srpen_září_říjen_listopad_prosinec".split("_"), a = "led_úno_bře_dub_kvě_čvn_čvc_srp_zář_říj_lis_pro".split("_"); function n(e) { return e > 1 && e < 5 && 1 != ~~(e / 10) } function s(e, t, a, s) { var r = e + " "; switch (a) { case "s": return t || s ? "pár sekund" : "pár sekundami"; case "ss": return t || s ? r + (n(e) ? "sekundy" : "sekund") : r + "sekundami"; case "m": return t ? "minuta" : s ? "minutu" : "minutou"; case "mm": return t || s ? r + (n(e) ? "minuty" : "minut") : r + "minutami"; case "h": return t ? "hodina" : s ? "hodinu" : "hodinou"; case "hh": return t || s ? r + (n(e) ? "hodiny" : "hodin") : r + "hodinami"; case "d": return t || s ? "den" : "dnem"; case "dd": return t || s ? r + (n(e) ? "dny" : "dní") : r + "dny"; case "M": return t || s ? "měsíc" : "měsícem"; case "MM": return t || s ? r + (n(e) ? "měsíce" : "měsíců") : r + "měsíci"; case "y": return t || s ? "rok" : "rokem"; case "yy": return t || s ? r + (n(e) ? "roky" : "let") : r + "lety" } } e.defineLocale("cs", { months: t, monthsShort: a, monthsParse: function (e, t) { var a, n = []; for (a = 0; a < 12; a++)n[a] = new RegExp("^" + e[a] + "$|^" + t[a] + "$", "i"); return n }(t, a), shortMonthsParse: function (e) { var t, a = []; for (t = 0; t < 12; t++)a[t] = new RegExp("^" + e[t] + "$", "i"); return a }(a), longMonthsParse: function (e) { var t, a = []; for (t = 0; t < 12; t++)a[t] = new RegExp("^" + e[t] + "$", "i"); return a }(t), weekdays: "neděle_pondělí_úterý_středa_čtvrtek_pátek_sobota".split("_"), weekdaysShort: "ne_po_út_st_čt_pá_so".split("_"), weekdaysMin: "ne_po_út_st_čt_pá_so".split("_"), longDateFormat: { LT: "H:mm", LTS: "H:mm:ss", L: "DD.MM.YYYY", LL: "D. MMMM YYYY", LLL: "D. MMMM YYYY H:mm", LLLL: "dddd D. MMMM YYYY H:mm", l: "D. M. YYYY" }, calendar: { sameDay: "[dnes v] LT", nextDay: "[zítra v] LT", nextWeek: function () { switch (this.day()) { case 0: return "[v neděli v] LT"; case 1: case 2: return "[v] dddd [v] LT"; case 3: return "[ve středu v] LT"; case 4: return "[ve čtvrtek v] LT"; case 5: return "[v pátek v] LT"; case 6: return "[v sobotu v] LT" } }, lastDay: "[včera v] LT", lastWeek: function () { switch (this.day()) { case 0: return "[minulou neděli v] LT"; case 1: case 2: return "[minulé] dddd [v] LT"; case 3: return "[minulou středu v] LT"; case 4: case 5: return "[minulý] dddd [v] LT"; case 6: return "[minulou sobotu v] LT" } }, sameElse: "L" }, relativeTime: { future: "za %s", past: "před %s", s: s, ss: s, m: s, mm: s, h: s, hh: s, d: s, dd: s, M: s, MM: s, y: s, yy: s }, dayOfMonthOrdinalParse: /\d{1,2}\./, ordinal: "%d.", week: { dow: 1, doy: 4 } }) }(a(0)) }, function (e, t, a) { !function (e) { "use strict"; e.defineLocale("cv", { months: "кӑрлач_нарӑс_пуш_ака_май_ҫӗртме_утӑ_ҫурла_авӑн_юпа_чӳк_раштав".split("_"), monthsShort: "кӑр_нар_пуш_ака_май_ҫӗр_утӑ_ҫур_авн_юпа_чӳк_раш".split("_"), weekdays: "вырсарникун_тунтикун_ытларикун_юнкун_кӗҫнерникун_эрнекун_шӑматкун".split("_"), weekdaysShort: "выр_тун_ытл_юн_кӗҫ_эрн_шӑм".split("_"), weekdaysMin: "вр_тн_ыт_юн_кҫ_эр_шм".split("_"), longDateFormat: { LT: "HH:mm", LTS: "HH:mm:ss", L: "DD-MM-YYYY", LL: "YYYY [ҫулхи] MMMM [уйӑхӗн] D[-мӗшӗ]", LLL: "YYYY [ҫулхи] MMMM [уйӑхӗн] D[-мӗшӗ], HH:mm", LLLL: "dddd, YYYY [ҫулхи] MMMM [уйӑхӗн] D[-мӗшӗ], HH:mm" }, calendar: { sameDay: "[Паян] LT [сехетре]", nextDay: "[Ыран] LT [сехетре]", lastDay: "[Ӗнер] LT [сехетре]", nextWeek: "[Ҫитес] dddd LT [сехетре]", lastWeek: "[Иртнӗ] dddd LT [сехетре]", sameElse: "L" }, relativeTime: { future: function (e) { var t = /сехет$/i.exec(e) ? "рен" : /ҫул$/i.exec(e) ? "тан" : "ран"; return e + t }, past: "%s каялла", s: "пӗр-ик ҫеккунт", ss: "%d ҫеккунт", m: "пӗр минут", mm: "%d минут", h: "пӗр сехет", hh: "%d сехет", d: "пӗр кун", dd: "%d кун", M: "пӗр уйӑх", MM: "%d уйӑх", y: "пӗр ҫул", yy: "%d ҫул" }, dayOfMonthOrdinalParse: /\d{1,2}-мӗш/, ordinal: "%d-мӗш", week: { dow: 1, doy: 7 } }) }(a(0)) }, function (e, t, a) { !function (e) { "use strict"; e.defineLocale("cy", { months: "Ionawr_Chwefror_Mawrth_Ebrill_Mai_Mehefin_Gorffennaf_Awst_Medi_Hydref_Tachwedd_Rhagfyr".split("_"), monthsShort: "Ion_Chwe_Maw_Ebr_Mai_Meh_Gor_Aws_Med_Hyd_Tach_Rhag".split("_"), weekdays: "Dydd Sul_Dydd Llun_Dydd Mawrth_Dydd Mercher_Dydd Iau_Dydd Gwener_Dydd Sadwrn".split("_"), weekdaysShort: "Sul_Llun_Maw_Mer_Iau_Gwe_Sad".split("_"), weekdaysMin: "Su_Ll_Ma_Me_Ia_Gw_Sa".split("_"), weekdaysParseExact: !0, longDateFormat: { LT: "HH:mm", LTS: "HH:mm:ss", L: "DD/MM/YYYY", LL: "D MMMM YYYY", LLL: "D MMMM YYYY HH:mm", LLLL: "dddd, D MMMM YYYY HH:mm" }, calendar: { sameDay: "[Heddiw am] LT", nextDay: "[Yfory am] LT", nextWeek: "dddd [am] LT", lastDay: "[Ddoe am] LT", lastWeek: "dddd [diwethaf am] LT", sameElse: "L" }, relativeTime: { future: "mewn %s", past: "%s yn ôl", s: "ychydig eiliadau", ss: "%d eiliad", m: "munud", mm: "%d munud", h: "awr", hh: "%d awr", d: "diwrnod", dd: "%d diwrnod", M: "mis", MM: "%d mis", y: "blwyddyn", yy: "%d flynedd" }, dayOfMonthOrdinalParse: /\d{1,2}(fed|ain|af|il|ydd|ed|eg)/, ordinal: function (e) { var t = e, a = ""; return t > 20 ? a = 40 === t || 50 === t || 60 === t || 80 === t || 100 === t ? "fed" : "ain" : t > 0 && (a = ["", "af", "il", "ydd", "ydd", "ed", "ed", "ed", "fed", "fed", "fed", "eg", "fed", "eg", "eg", "fed", "eg", "eg", "fed", "eg", "fed"][t]), e + a }, week: { dow: 1, doy: 4 } }) }(a(0)) }, function (e, t, a) { !function (e) { "use strict"; e.defineLocale("da", { months: "januar_februar_marts_april_maj_juni_juli_august_september_oktober_november_december".split("_"), monthsShort: "jan_feb_mar_apr_maj_jun_jul_aug_sep_okt_nov_dec".split("_"), weekdays: "søndag_mandag_tirsdag_onsdag_torsdag_fredag_lørdag".split("_"), weekdaysShort: "søn_man_tir_ons_tor_fre_lør".split("_"), weekdaysMin: "sø_ma_ti_on_to_fr_lø".split("_"), longDateFormat: { LT: "HH:mm", LTS: "HH:mm:ss", L: "DD.MM.YYYY", LL: "D. MMMM YYYY", LLL: "D. MMMM YYYY HH:mm", LLLL: "dddd [d.] D. MMMM YYYY [kl.] HH:mm" }, calendar: { sameDay: "[i dag kl.] LT", nextDay: "[i morgen kl.] LT", nextWeek: "på dddd [kl.] LT", lastDay: "[i går kl.] LT", lastWeek: "[i] dddd[s kl.] LT", sameElse: "L" }, relativeTime: { future: "om %s", past: "%s siden", s: "få sekunder", ss: "%d sekunder", m: "et minut", mm: "%d minutter", h: "en time", hh: "%d timer", d: "en dag", dd: "%d dage", M: "en måned", MM: "%d måneder", y: "et år", yy: "%d år" }, dayOfMonthOrdinalParse: /\d{1,2}\./, ordinal: "%d.", week: { dow: 1, doy: 4 } }) }(a(0)) }, function (e, t, a) { !function (e) { "use strict"; function t(e, t, a, n) { var s = { m: ["eine Minute", "einer Minute"], h: ["eine Stunde", "einer Stunde"], d: ["ein Tag", "einem Tag"], dd: [e + " Tage", e + " Tagen"], M: ["ein Monat", "einem Monat"], MM: [e + " Monate", e + " Monaten"], y: ["ein Jahr", "einem Jahr"], yy: [e + " Jahre", e + " Jahren"] }; return t ? s[a][0] : s[a][1] } e.defineLocale("de", { months: "Januar_Februar_März_April_Mai_Juni_Juli_August_September_Oktober_November_Dezember".split("_"), monthsShort: "Jan._Feb._März_Apr._Mai_Juni_Juli_Aug._Sep._Okt._Nov._Dez.".split("_"), monthsParseExact: !0, weekdays: "Sonntag_Montag_Dienstag_Mittwoch_Donnerstag_Freitag_Samstag".split("_"), weekdaysShort: "So._Mo._Di._Mi._Do._Fr._Sa.".split("_"), weekdaysMin: "So_Mo_Di_Mi_Do_Fr_Sa".split("_"), weekdaysParseExact: !0, longDateFormat: { LT: "HH:mm", LTS: "HH:mm:ss", L: "DD.MM.YYYY", LL: "D. MMMM YYYY", LLL: "D. MMMM YYYY HH:mm", LLLL: "dddd, D. MMMM YYYY HH:mm" }, calendar: { sameDay: "[heute um] LT [Uhr]", sameElse: "L", nextDay: "[morgen um] LT [Uhr]", nextWeek: "dddd [um] LT [Uhr]", lastDay: "[gestern um] LT [Uhr]", lastWeek: "[letzten] dddd [um] LT [Uhr]" }, relativeTime: { future: "in %s", past: "vor %s", s: "ein paar Sekunden", ss: "%d Sekunden", m: t, mm: "%d Minuten", h: t, hh: "%d Stunden", d: t, dd: t, M: t, MM: t, y: t, yy: t }, dayOfMonthOrdinalParse: /\d{1,2}\./, ordinal: "%d.", week: { dow: 1, doy: 4 } }) }(a(0)) }, function (e, t, a) { !function (e) { "use strict"; function t(e, t, a, n) { var s = { m: ["eine Minute", "einer Minute"], h: ["eine Stunde", "einer Stunde"], d: ["ein Tag", "einem Tag"], dd: [e + " Tage", e + " Tagen"], M: ["ein Monat", "einem Monat"], MM: [e + " Monate", e + " Monaten"], y: ["ein Jahr", "einem Jahr"], yy: [e + " Jahre", e + " Jahren"] }; return t ? s[a][0] : s[a][1] } e.defineLocale("de-at", { months: "Jänner_Februar_März_April_Mai_Juni_Juli_August_September_Oktober_November_Dezember".split("_"), monthsShort: "Jän._Feb._März_Apr._Mai_Juni_Juli_Aug._Sep._Okt._Nov._Dez.".split("_"), monthsParseExact: !0, weekdays: "Sonntag_Montag_Dienstag_Mittwoch_Donnerstag_Freitag_Samstag".split("_"), weekdaysShort: "So._Mo._Di._Mi._Do._Fr._Sa.".split("_"), weekdaysMin: "So_Mo_Di_Mi_Do_Fr_Sa".split("_"), weekdaysParseExact: !0, longDateFormat: { LT: "HH:mm", LTS: "HH:mm:ss", L: "DD.MM.YYYY", LL: "D. MMMM YYYY", LLL: "D. MMMM YYYY HH:mm", LLLL: "dddd, D. MMMM YYYY HH:mm" }, calendar: { sameDay: "[heute um] LT [Uhr]", sameElse: "L", nextDay: "[morgen um] LT [Uhr]", nextWeek: "dddd [um] LT [Uhr]", lastDay: "[gestern um] LT [Uhr]", lastWeek: "[letzten] dddd [um] LT [Uhr]" }, relativeTime: { future: "in %s", past: "vor %s", s: "ein paar Sekunden", ss: "%d Sekunden", m: t, mm: "%d Minuten", h: t, hh: "%d Stunden", d: t, dd: t, M: t, MM: t, y: t, yy: t }, dayOfMonthOrdinalParse: /\d{1,2}\./, ordinal: "%d.", week: { dow: 1, doy: 4 } }) }(a(0)) }, function (e, t, a) { !function (e) { "use strict"; function t(e, t, a, n) { var s = { m: ["eine Minute", "einer Minute"], h: ["eine Stunde", "einer Stunde"], d: ["ein Tag", "einem Tag"], dd: [e + " Tage", e + " Tagen"], M: ["ein Monat", "einem Monat"], MM: [e + " Monate", e + " Monaten"], y: ["ein Jahr", "einem Jahr"], yy: [e + " Jahre", e + " Jahren"] }; return t ? s[a][0] : s[a][1] } e.defineLocale("de-ch", { months: "Januar_Februar_März_April_Mai_Juni_Juli_August_September_Oktober_November_Dezember".split("_"), monthsShort: "Jan._Feb._März_Apr._Mai_Juni_Juli_Aug._Sep._Okt._Nov._Dez.".split("_"), monthsParseExact: !0, weekdays: "Sonntag_Montag_Dienstag_Mittwoch_Donnerstag_Freitag_Samstag".split("_"), weekdaysShort: "So_Mo_Di_Mi_Do_Fr_Sa".split("_"), weekdaysMin: "So_Mo_Di_Mi_Do_Fr_Sa".split("_"), weekdaysParseExact: !0, longDateFormat: { LT: "HH:mm", LTS: "HH:mm:ss", L: "DD.MM.YYYY", LL: "D. MMMM YYYY", LLL: "D. MMMM YYYY HH:mm", LLLL: "dddd, D. MMMM YYYY HH:mm" }, calendar: { sameDay: "[heute um] LT [Uhr]", sameElse: "L", nextDay: "[morgen um] LT [Uhr]", nextWeek: "dddd [um] LT [Uhr]", lastDay: "[gestern um] LT [Uhr]", lastWeek: "[letzten] dddd [um] LT [Uhr]" }, relativeTime: { future: "in %s", past: "vor %s", s: "ein paar Sekunden", ss: "%d Sekunden", m: t, mm: "%d Minuten", h: t, hh: "%d Stunden", d: t, dd: t, M: t, MM: t, y: t, yy: t }, dayOfMonthOrdinalParse: /\d{1,2}\./, ordinal: "%d.", week: { dow: 1, doy: 4 } }) }(a(0)) }, function (e, t, a) { !function (e) { "use strict"; var t = ["ޖެނުއަރީ", "ފެބްރުއަރީ", "މާރިޗު", "އޭޕްރީލު", "މޭ", "ޖޫން", "ޖުލައި", "އޯގަސްޓު", "ސެޕްޓެމްބަރު", "އޮކްޓޯބަރު", "ނޮވެމްބަރު", "ޑިސެމްބަރު"], a = ["އާދިއްތަ", "ހޯމަ", "އަންގާރަ", "ބުދަ", "ބުރާސްފަތި", "ހުކުރު", "ހޮނިހިރު"]; e.defineLocale("dv", { months: t, monthsShort: t, weekdays: a, weekdaysShort: a, weekdaysMin: "އާދި_ހޯމަ_އަން_ބުދަ_ބުރާ_ހުކު_ހޮނި".split("_"), longDateFormat: { LT: "HH:mm", LTS: "HH:mm:ss", L: "D/M/YYYY", LL: "D MMMM YYYY", LLL: "D MMMM YYYY HH:mm", LLLL: "dddd D MMMM YYYY HH:mm" }, meridiemParse: /މކ|މފ/, isPM: function (e) { return "މފ" === e }, meridiem: function (e, t, a) { return e < 12 ? "މކ" : "މފ" }, calendar: { sameDay: "[މިއަދު] LT", nextDay: "[މާދަމާ] LT", nextWeek: "dddd LT", lastDay: "[އިއްޔެ] LT", lastWeek: "[ފާއިތުވި] dddd LT", sameElse: "L" }, relativeTime: { future: "ތެރޭގައި %s", past: "ކުރިން %s", s: "ސިކުންތުކޮޅެއް", ss: "d% ސިކުންތު", m: "މިނިޓެއް", mm: "މިނިޓު %d", h: "ގަޑިއިރެއް", hh: "ގަޑިއިރު %d", d: "ދުވަހެއް", dd: "ދުވަސް %d", M: "މަހެއް", MM: "މަސް %d", y: "އަހަރެއް", yy: "އަހަރު %d" }, preparse: function (e) { return e.replace(/،/g, ",") }, postformat: function (e) { return e.replace(/,/g, "،") }, week: { dow: 7, doy: 12 } }) }(a(0)) }, function (e, t, a) { !function (e) { "use strict"; e.defineLocale("el", { monthsNominativeEl: "Ιανουάριος_Φεβρουάριος_Μάρτιος_Απρίλιος_Μάιος_Ιούνιος_Ιούλιος_Αύγουστος_Σεπτέμβριος_Οκτώβριος_Νοέμβριος_Δεκέμβριος".split("_"), monthsGenitiveEl: "Ιανουαρίου_Φεβρουαρίου_Μαρτίου_Απριλίου_Μαΐου_Ιουνίου_Ιουλίου_Αυγούστου_Σεπτεμβρίου_Οκτωβρίου_Νοεμβρίου_Δεκεμβρίου".split("_"), months: function (e, t) { return e ? "string" == typeof t && /D/.test(t.substring(0, t.indexOf("MMMM"))) ? this._monthsGenitiveEl[e.month()] : this._monthsNominativeEl[e.month()] : this._monthsNominativeEl }, monthsShort: "Ιαν_Φεβ_Μαρ_Απρ_Μαϊ_Ιουν_Ιουλ_Αυγ_Σεπ_Οκτ_Νοε_Δεκ".split("_"), weekdays: "Κυριακή_Δευτέρα_Τρίτη_Τετάρτη_Πέμπτη_Παρασκευή_Σάββατο".split("_"), weekdaysShort: "Κυρ_Δευ_Τρι_Τετ_Πεμ_Παρ_Σαβ".split("_"), weekdaysMin: "Κυ_Δε_Τρ_Τε_Πε_Πα_Σα".split("_"), meridiem: function (e, t, a) { return e > 11 ? a ? "μμ" : "ΜΜ" : a ? "πμ" : "ΠΜ" }, isPM: function (e) { return "μ" === (e + "").toLowerCase()[0] }, meridiemParse: /[ΠΜ]\.?Μ?\.?/i, longDateFormat: { LT: "h:mm A", LTS: "h:mm:ss A", L: "DD/MM/YYYY", LL: "D MMMM YYYY", LLL: "D MMMM YYYY h:mm A", LLLL: "dddd, D MMMM YYYY h:mm A" }, calendarEl: { sameDay: "[Σήμερα {}] LT", nextDay: "[Αύριο {}] LT", nextWeek: "dddd [{}] LT", lastDay: "[Χθες {}] LT", lastWeek: function () { switch (this.day()) { case 6: return "[το προηγούμενο] dddd [{}] LT"; default: return "[την προηγούμενη] dddd [{}] LT" } }, sameElse: "L" }, calendar: function (e, t) { var a = this._calendarEl[e], n = t && t.hours(); return function (e) { return e instanceof Function || "[object Function]" === Object.prototype.toString.call(e) }(a) && (a = a.apply(t)), a.replace("{}", n % 12 == 1 ? "στη" : "στις") }, relativeTime: { future: "σε %s", past: "%s πριν", s: "λίγα δευτερόλεπτα", ss: "%d δευτερόλεπτα", m: "ένα λεπτό", mm: "%d λεπτά", h: "μία ώρα", hh: "%d ώρες", d: "μία μέρα", dd: "%d μέρες", M: "ένας μήνας", MM: "%d μήνες", y: "ένας χρόνος", yy: "%d χρόνια" }, dayOfMonthOrdinalParse: /\d{1,2}η/, ordinal: "%dη", week: { dow: 1, doy: 4 } }) }(a(0)) }, function (e, t, a) { !function (e) { "use strict"; e.defineLocale("en-au", { months: "January_February_March_April_May_June_July_August_September_October_November_December".split("_"), monthsShort: "Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec".split("_"), weekdays: "Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday".split("_"), weekdaysShort: "Sun_Mon_Tue_Wed_Thu_Fri_Sat".split("_"), weekdaysMin: "Su_Mo_Tu_We_Th_Fr_Sa".split("_"), longDateFormat: { LT: "h:mm A", LTS: "h:mm:ss A", L: "DD/MM/YYYY", LL: "D MMMM YYYY", LLL: "D MMMM YYYY h:mm A", LLLL: "dddd, D MMMM YYYY h:mm A" }, calendar: { sameDay: "[Today at] LT", nextDay: "[Tomorrow at] LT", nextWeek: "dddd [at] LT", lastDay: "[Yesterday at] LT", lastWeek: "[Last] dddd [at] LT", sameElse: "L" }, relativeTime: { future: "in %s", past: "%s ago", s: "a few seconds", ss: "%d seconds", m: "a minute", mm: "%d minutes", h: "an hour", hh: "%d hours", d: "a day", dd: "%d days", M: "a month", MM: "%d months", y: "a year", yy: "%d years" }, dayOfMonthOrdinalParse: /\d{1,2}(st|nd|rd|th)/, ordinal: function (e) { var t = e % 10, a = 1 == ~~(e % 100 / 10) ? "th" : 1 === t ? "st" : 2 === t ? "nd" : 3 === t ? "rd" : "th"; return e + a }, week: { dow: 1, doy: 4 } }) }(a(0)) }, function (e, t, a) { !function (e) { "use strict"; e.defineLocale("en-ca", { months: "January_February_March_April_May_June_July_August_September_October_November_December".split("_"), monthsShort: "Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec".split("_"), weekdays: "Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday".split("_"), weekdaysShort: "Sun_Mon_Tue_Wed_Thu_Fri_Sat".split("_"), weekdaysMin: "Su_Mo_Tu_We_Th_Fr_Sa".split("_"), longDateFormat: { LT: "h:mm A", LTS: "h:mm:ss A", L: "YYYY-MM-DD", LL: "MMMM D, YYYY", LLL: "MMMM D, YYYY h:mm A", LLLL: "dddd, MMMM D, YYYY h:mm A" }, calendar: { sameDay: "[Today at] LT", nextDay: "[Tomorrow at] LT", nextWeek: "dddd [at] LT", lastDay: "[Yesterday at] LT", lastWeek: "[Last] dddd [at] LT", sameElse: "L" }, relativeTime: { future: "in %s", past: "%s ago", s: "a few seconds", ss: "%d seconds", m: "a minute", mm: "%d minutes", h: "an hour", hh: "%d hours", d: "a day", dd: "%d days", M: "a month", MM: "%d months", y: "a year", yy: "%d years" }, dayOfMonthOrdinalParse: /\d{1,2}(st|nd|rd|th)/, ordinal: function (e) { var t = e % 10, a = 1 == ~~(e % 100 / 10) ? "th" : 1 === t ? "st" : 2 === t ? "nd" : 3 === t ? "rd" : "th"; return e + a } }) }(a(0)) }, function (e, t, a) { !function (e) { "use strict"; e.defineLocale("en-gb", { months: "January_February_March_April_May_June_July_August_September_October_November_December".split("_"), monthsShort: "Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec".split("_"), weekdays: "Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday".split("_"), weekdaysShort: "Sun_Mon_Tue_Wed_Thu_Fri_Sat".split("_"), weekdaysMin: "Su_Mo_Tu_We_Th_Fr_Sa".split("_"), longDateFormat: { LT: "HH:mm", LTS: "HH:mm:ss", L: "DD/MM/YYYY", LL: "D MMMM YYYY", LLL: "D MMMM YYYY HH:mm", LLLL: "dddd, D MMMM YYYY HH:mm" }, calendar: { sameDay: "[Today at] LT", nextDay: "[Tomorrow at] LT", nextWeek: "dddd [at] LT", lastDay: "[Yesterday at] LT", lastWeek: "[Last] dddd [at] LT", sameElse: "L" }, relativeTime: { future: "in %s", past: "%s ago", s: "a few seconds", ss: "%d seconds", m: "a minute", mm: "%d minutes", h: "an hour", hh: "%d hours", d: "a day", dd: "%d days", M: "a month", MM: "%d months", y: "a year", yy: "%d years" }, dayOfMonthOrdinalParse: /\d{1,2}(st|nd|rd|th)/, ordinal: function (e) { var t = e % 10, a = 1 == ~~(e % 100 / 10) ? "th" : 1 === t ? "st" : 2 === t ? "nd" : 3 === t ? "rd" : "th"; return e + a }, week: { dow: 1, doy: 4 } }) }(a(0)) }, function (e, t, a) { !function (e) { "use strict"; e.defineLocale("en-ie", { months: "January_February_March_April_May_June_July_August_September_October_November_December".split("_"), monthsShort: "Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec".split("_"), weekdays: "Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday".split("_"), weekdaysShort: "Sun_Mon_Tue_Wed_Thu_Fri_Sat".split("_"), weekdaysMin: "Su_Mo_Tu_We_Th_Fr_Sa".split("_"), longDateFormat: { LT: "HH:mm", LTS: "HH:mm:ss", L: "DD-MM-YYYY", LL: "D MMMM YYYY", LLL: "D MMMM YYYY HH:mm", LLLL: "dddd D MMMM YYYY HH:mm" }, calendar: { sameDay: "[Today at] LT", nextDay: "[Tomorrow at] LT", nextWeek: "dddd [at] LT", lastDay: "[Yesterday at] LT", lastWeek: "[Last] dddd [at] LT", sameElse: "L" }, relativeTime: { future: "in %s", past: "%s ago", s: "a few seconds", ss: "%d seconds", m: "a minute", mm: "%d minutes", h: "an hour", hh: "%d hours", d: "a day", dd: "%d days", M: "a month", MM: "%d months", y: "a year", yy: "%d years" }, dayOfMonthOrdinalParse: /\d{1,2}(st|nd|rd|th)/, ordinal: function (e) { var t = e % 10, a = 1 == ~~(e % 100 / 10) ? "th" : 1 === t ? "st" : 2 === t ? "nd" : 3 === t ? "rd" : "th"; return e + a }, week: { dow: 1, doy: 4 } }) }(a(0)) }, function (e, t, a) { !function (e) { "use strict"; e.defineLocale("en-il", { months: "January_February_March_April_May_June_July_August_September_October_November_December".split("_"), monthsShort: "Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec".split("_"), weekdays: "Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday".split("_"), weekdaysShort: "Sun_Mon_Tue_Wed_Thu_Fri_Sat".split("_"), weekdaysMin: "Su_Mo_Tu_We_Th_Fr_Sa".split("_"), longDateFormat: { LT: "HH:mm", LTS: "HH:mm:ss", L: "DD/MM/YYYY", LL: "D MMMM YYYY", LLL: "D MMMM YYYY HH:mm", LLLL: "dddd, D MMMM YYYY HH:mm" }, calendar: { sameDay: "[Today at] LT", nextDay: "[Tomorrow at] LT", nextWeek: "dddd [at] LT", lastDay: "[Yesterday at] LT", lastWeek: "[Last] dddd [at] LT", sameElse: "L" }, relativeTime: { future: "in %s", past: "%s ago", s: "a few seconds", m: "a minute", mm: "%d minutes", h: "an hour", hh: "%d hours", d: "a day", dd: "%d days", M: "a month", MM: "%d months", y: "a year", yy: "%d years" }, dayOfMonthOrdinalParse: /\d{1,2}(st|nd|rd|th)/, ordinal: function (e) { var t = e % 10, a = 1 == ~~(e % 100 / 10) ? "th" : 1 === t ? "st" : 2 === t ? "nd" : 3 === t ? "rd" : "th"; return e + a } }) }(a(0)) }, function (e, t, a) { !function (e) { "use strict"; e.defineLocale("en-nz", { months: "January_February_March_April_May_June_July_August_September_October_November_December".split("_"), monthsShort: "Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec".split("_"), weekdays: "Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday".split("_"), weekdaysShort: "Sun_Mon_Tue_Wed_Thu_Fri_Sat".split("_"), weekdaysMin: "Su_Mo_Tu_We_Th_Fr_Sa".split("_"), longDateFormat: { LT: "h:mm A", LTS: "h:mm:ss A", L: "DD/MM/YYYY", LL: "D MMMM YYYY", LLL: "D MMMM YYYY h:mm A", LLLL: "dddd, D MMMM YYYY h:mm A" }, calendar: { sameDay: "[Today at] LT", nextDay: "[Tomorrow at] LT", nextWeek: "dddd [at] LT", lastDay: "[Yesterday at] LT", lastWeek: "[Last] dddd [at] LT", sameElse: "L" }, relativeTime: { future: "in %s", past: "%s ago", s: "a few seconds", ss: "%d seconds", m: "a minute", mm: "%d minutes", h: "an hour", hh: "%d hours", d: "a day", dd: "%d days", M: "a month", MM: "%d months", y: "a year", yy: "%d years" }, dayOfMonthOrdinalParse: /\d{1,2}(st|nd|rd|th)/, ordinal: function (e) { var t = e % 10, a = 1 == ~~(e % 100 / 10) ? "th" : 1 === t ? "st" : 2 === t ? "nd" : 3 === t ? "rd" : "th"; return e + a }, week: { dow: 1, doy: 4 } }) }(a(0)) }, function (e, t, a) { !function (e) { "use strict"; e.defineLocale("eo", { months: "januaro_februaro_marto_aprilo_majo_junio_julio_aŭgusto_septembro_oktobro_novembro_decembro".split("_"), monthsShort: "jan_feb_mar_apr_maj_jun_jul_aŭg_sep_okt_nov_dec".split("_"), weekdays: "dimanĉo_lundo_mardo_merkredo_ĵaŭdo_vendredo_sabato".split("_"), weekdaysShort: "dim_lun_mard_merk_ĵaŭ_ven_sab".split("_"), weekdaysMin: "di_lu_ma_me_ĵa_ve_sa".split("_"), longDateFormat: { LT: "HH:mm", LTS: "HH:mm:ss", L: "YYYY-MM-DD", LL: "D[-a de] MMMM, YYYY", LLL: "D[-a de] MMMM, YYYY HH:mm", LLLL: "dddd, [la] D[-a de] MMMM, YYYY HH:mm" }, meridiemParse: /[ap]\.t\.m/i, isPM: function (e) { return "p" === e.charAt(0).toLowerCase() }, meridiem: function (e, t, a) { return e > 11 ? a ? "p.t.m." : "P.T.M." : a ? "a.t.m." : "A.T.M." }, calendar: { sameDay: "[Hodiaŭ je] LT", nextDay: "[Morgaŭ je] LT", nextWeek: "dddd [je] LT", lastDay: "[Hieraŭ je] LT", lastWeek: "[pasinta] dddd [je] LT", sameElse: "L" }, relativeTime: { future: "post %s", past: "antaŭ %s", s: "sekundoj", ss: "%d sekundoj", m: "minuto", mm: "%d minutoj", h: "horo", hh: "%d horoj", d: "tago", dd: "%d tagoj", M: "monato", MM: "%d monatoj", y: "jaro", yy: "%d jaroj" }, dayOfMonthOrdinalParse: /\d{1,2}a/, ordinal: "%da", week: { dow: 1, doy: 7 } }) }(a(0)) }, function (e, t, a) { !function (e) { "use strict"; var t = "ene._feb._mar._abr._may._jun._jul._ago._sep._oct._nov._dic.".split("_"), a = "ene_feb_mar_abr_may_jun_jul_ago_sep_oct_nov_dic".split("_"), n = [/^ene/i, /^feb/i, /^mar/i, /^abr/i, /^may/i, /^jun/i, /^jul/i, /^ago/i, /^sep/i, /^oct/i, /^nov/i, /^dic/i], s = /^(enero|febrero|marzo|abril|mayo|junio|julio|agosto|septiembre|octubre|noviembre|diciembre|ene\.?|feb\.?|mar\.?|abr\.?|may\.?|jun\.?|jul\.?|ago\.?|sep\.?|oct\.?|nov\.?|dic\.?)/i; e.defineLocale("es", { months: "enero_febrero_marzo_abril_mayo_junio_julio_agosto_septiembre_octubre_noviembre_diciembre".split("_"), monthsShort: function (e, n) { return e ? /-MMM-/.test(n) ? a[e.month()] : t[e.month()] : t }, monthsRegex: s, monthsShortRegex: s, monthsStrictRegex: /^(enero|febrero|marzo|abril|mayo|junio|julio|agosto|septiembre|octubre|noviembre|diciembre)/i, monthsShortStrictRegex: /^(ene\.?|feb\.?|mar\.?|abr\.?|may\.?|jun\.?|jul\.?|ago\.?|sep\.?|oct\.?|nov\.?|dic\.?)/i, monthsParse: n, longMonthsParse: n, shortMonthsParse: n, weekdays: "domingo_lunes_martes_miércoles_jueves_viernes_sábado".split("_"), weekdaysShort: "dom._lun._mar._mié._jue._vie._sáb.".split("_"), weekdaysMin: "do_lu_ma_mi_ju_vi_sá".split("_"), weekdaysParseExact: !0, longDateFormat: { LT: "H:mm", LTS: "H:mm:ss", L: "DD/MM/YYYY", LL: "D [de] MMMM [de] YYYY", LLL: "D [de] MMMM [de] YYYY H:mm", LLLL: "dddd, D [de] MMMM [de] YYYY H:mm" }, calendar: { sameDay: function () { return "[hoy a la" + (1 !== this.hours() ? "s" : "") + "] LT" }, nextDay: function () { return "[mañana a la" + (1 !== this.hours() ? "s" : "") + "] LT" }, nextWeek: function () { return "dddd [a la" + (1 !== this.hours() ? "s" : "") + "] LT" }, lastDay: function () { return "[ayer a la" + (1 !== this.hours() ? "s" : "") + "] LT" }, lastWeek: function () { return "[el] dddd [pasado a la" + (1 !== this.hours() ? "s" : "") + "] LT" }, sameElse: "L" }, relativeTime: { future: "en %s", past: "hace %s", s: "unos segundos", ss: "%d segundos", m: "un minuto", mm: "%d minutos", h: "una hora", hh: "%d horas", d: "un día", dd: "%d días", M: "un mes", MM: "%d meses", y: "un año", yy: "%d años" }, dayOfMonthOrdinalParse: /\d{1,2}º/, ordinal: "%dº", week: { dow: 1, doy: 4 } }) }(a(0)) }, function (e, t, a) { !function (e) { "use strict"; var t = "ene._feb._mar._abr._may._jun._jul._ago._sep._oct._nov._dic.".split("_"), a = "ene_feb_mar_abr_may_jun_jul_ago_sep_oct_nov_dic".split("_"), n = [/^ene/i, /^feb/i, /^mar/i, /^abr/i, /^may/i, /^jun/i, /^jul/i, /^ago/i, /^sep/i, /^oct/i, /^nov/i, /^dic/i], s = /^(enero|febrero|marzo|abril|mayo|junio|julio|agosto|septiembre|octubre|noviembre|diciembre|ene\.?|feb\.?|mar\.?|abr\.?|may\.?|jun\.?|jul\.?|ago\.?|sep\.?|oct\.?|nov\.?|dic\.?)/i; e.defineLocale("es-do", { months: "enero_febrero_marzo_abril_mayo_junio_julio_agosto_septiembre_octubre_noviembre_diciembre".split("_"), monthsShort: function (e, n) { return e ? /-MMM-/.test(n) ? a[e.month()] : t[e.month()] : t }, monthsRegex: s, monthsShortRegex: s, monthsStrictRegex: /^(enero|febrero|marzo|abril|mayo|junio|julio|agosto|septiembre|octubre|noviembre|diciembre)/i, monthsShortStrictRegex: /^(ene\.?|feb\.?|mar\.?|abr\.?|may\.?|jun\.?|jul\.?|ago\.?|sep\.?|oct\.?|nov\.?|dic\.?)/i, monthsParse: n, longMonthsParse: n, shortMonthsParse: n, weekdays: "domingo_lunes_martes_miércoles_jueves_viernes_sábado".split("_"), weekdaysShort: "dom._lun._mar._mié._jue._vie._sáb.".split("_"), weekdaysMin: "do_lu_ma_mi_ju_vi_sá".split("_"), weekdaysParseExact: !0, longDateFormat: { LT: "h:mm A", LTS: "h:mm:ss A", L: "DD/MM/YYYY", LL: "D [de] MMMM [de] YYYY", LLL: "D [de] MMMM [de] YYYY h:mm A", LLLL: "dddd, D [de] MMMM [de] YYYY h:mm A" }, calendar: { sameDay: function () { return "[hoy a la" + (1 !== this.hours() ? "s" : "") + "] LT" }, nextDay: function () { return "[mañana a la" + (1 !== this.hours() ? "s" : "") + "] LT" }, nextWeek: function () { return "dddd [a la" + (1 !== this.hours() ? "s" : "") + "] LT" }, lastDay: function () { return "[ayer a la" + (1 !== this.hours() ? "s" : "") + "] LT" }, lastWeek: function () { return "[el] dddd [pasado a la" + (1 !== this.hours() ? "s" : "") + "] LT" }, sameElse: "L" }, relativeTime: { future: "en %s", past: "hace %s", s: "unos segundos", ss: "%d segundos", m: "un minuto", mm: "%d minutos", h: "una hora", hh: "%d horas", d: "un día", dd: "%d días", M: "un mes", MM: "%d meses", y: "un año", yy: "%d años" }, dayOfMonthOrdinalParse: /\d{1,2}º/, ordinal: "%dº", week: { dow: 1, doy: 4 } }) }(a(0)) }, function (e, t, a) { !function (e) { "use strict"; var t = "ene._feb._mar._abr._may._jun._jul._ago._sep._oct._nov._dic.".split("_"), a = "ene_feb_mar_abr_may_jun_jul_ago_sep_oct_nov_dic".split("_"); e.defineLocale("es-us", { months: "enero_febrero_marzo_abril_mayo_junio_julio_agosto_septiembre_octubre_noviembre_diciembre".split("_"), monthsShort: function (e, n) { return e ? /-MMM-/.test(n) ? a[e.month()] : t[e.month()] : t }, monthsParseExact: !0, weekdays: "domingo_lunes_martes_miércoles_jueves_viernes_sábado".split("_"), weekdaysShort: "dom._lun._mar._mié._jue._vie._sáb.".split("_"), weekdaysMin: "do_lu_ma_mi_ju_vi_sá".split("_"), weekdaysParseExact: !0, longDateFormat: { LT: "h:mm A", LTS: "h:mm:ss A", L: "MM/DD/YYYY", LL: "MMMM [de] D [de] YYYY", LLL: "MMMM [de] D [de] YYYY h:mm A", LLLL: "dddd, MMMM [de] D [de] YYYY h:mm A" }, calendar: { sameDay: function () { return "[hoy a la" + (1 !== this.hours() ? "s" : "") + "] LT" }, nextDay: function () { return "[mañana a la" + (1 !== this.hours() ? "s" : "") + "] LT" }, nextWeek: function () { return "dddd [a la" + (1 !== this.hours() ? "s" : "") + "] LT" }, lastDay: function () { return "[ayer a la" + (1 !== this.hours() ? "s" : "") + "] LT" }, lastWeek: function () { return "[el] dddd [pasado a la" + (1 !== this.hours() ? "s" : "") + "] LT" }, sameElse: "L" }, relativeTime: { future: "en %s", past: "hace %s", s: "unos segundos", ss: "%d segundos", m: "un minuto", mm: "%d minutos", h: "una hora", hh: "%d horas", d: "un día", dd: "%d días", M: "un mes", MM: "%d meses", y: "un año", yy: "%d años" }, dayOfMonthOrdinalParse: /\d{1,2}º/, ordinal: "%dº", week: { dow: 0, doy: 6 } }) }(a(0)) }, function (e, t, a) { !function (e) { "use strict"; function t(e, t, a, n) { var s = { s: ["mõne sekundi", "mõni sekund", "paar sekundit"], ss: [e + "sekundi", e + "sekundit"], m: ["ühe minuti", "üks minut"], mm: [e + " minuti", e + " minutit"], h: ["ühe tunni", "tund aega", "üks tund"], hh: [e + " tunni", e + " tundi"], d: ["ühe päeva", "üks päev"], M: ["kuu aja", "kuu aega", "üks kuu"], MM: [e + " kuu", e + " kuud"], y: ["ühe aasta", "aasta", "üks aasta"], yy: [e + " aasta", e + " aastat"] }; return t ? s[a][2] ? s[a][2] : s[a][1] : n ? s[a][0] : s[a][1] } e.defineLocale("et", { months: "jaanuar_veebruar_märts_aprill_mai_juuni_juuli_august_september_oktoober_november_detsember".split("_"), monthsShort: "jaan_veebr_märts_apr_mai_juuni_juuli_aug_sept_okt_nov_dets".split("_"), weekdays: "pühapäev_esmaspäev_teisipäev_kolmapäev_neljapäev_reede_laupäev".split("_"), weekdaysShort: "P_E_T_K_N_R_L".split("_"), weekdaysMin: "P_E_T_K_N_R_L".split("_"), longDateFormat: { LT: "H:mm", LTS: "H:mm:ss", L: "DD.MM.YYYY", LL: "D. MMMM YYYY", LLL: "D. MMMM YYYY H:mm", LLLL: "dddd, D. MMMM YYYY H:mm" }, calendar: { sameDay: "[Täna,] LT", nextDay: "[Homme,] LT", nextWeek: "[Järgmine] dddd LT", lastDay: "[Eile,] LT", lastWeek: "[Eelmine] dddd LT", sameElse: "L" }, relativeTime: { future: "%s pärast", past: "%s tagasi", s: t, ss: t, m: t, mm: t, h: t, hh: t, d: t, dd: "%d päeva", M: t, MM: t, y: t, yy: t }, dayOfMonthOrdinalParse: /\d{1,2}\./, ordinal: "%d.", week: { dow: 1, doy: 4 } }) }(a(0)) }, function (e, t, a) { !function (e) { "use strict"; e.defineLocale("eu", { months: "urtarrila_otsaila_martxoa_apirila_maiatza_ekaina_uztaila_abuztua_iraila_urria_azaroa_abendua".split("_"), monthsShort: "urt._ots._mar._api._mai._eka._uzt._abu._ira._urr._aza._abe.".split("_"), monthsParseExact: !0, weekdays: "igandea_astelehena_asteartea_asteazkena_osteguna_ostirala_larunbata".split("_"), weekdaysShort: "ig._al._ar._az._og._ol._lr.".split("_"), weekdaysMin: "ig_al_ar_az_og_ol_lr".split("_"), weekdaysParseExact: !0, longDateFormat: { LT: "HH:mm", LTS: "HH:mm:ss", L: "YYYY-MM-DD", LL: "YYYY[ko] MMMM[ren] D[a]", LLL: "YYYY[ko] MMMM[ren] D[a] HH:mm", LLLL: "dddd, YYYY[ko] MMMM[ren] D[a] HH:mm", l: "YYYY-M-D", ll: "YYYY[ko] MMM D[a]", lll: "YYYY[ko] MMM D[a] HH:mm", llll: "ddd, YYYY[ko] MMM D[a] HH:mm" }, calendar: { sameDay: "[gaur] LT[etan]", nextDay: "[bihar] LT[etan]", nextWeek: "dddd LT[etan]", lastDay: "[atzo] LT[etan]", lastWeek: "[aurreko] dddd LT[etan]", sameElse: "L" }, relativeTime: { future: "%s barru", past: "duela %s", s: "segundo batzuk", ss: "%d segundo", m: "minutu bat", mm: "%d minutu", h: "ordu bat", hh: "%d ordu", d: "egun bat", dd: "%d egun", M: "hilabete bat", MM: "%d hilabete", y: "urte bat", yy: "%d urte" }, dayOfMonthOrdinalParse: /\d{1,2}\./, ordinal: "%d.", week: { dow: 1, doy: 7 } }) }(a(0)) }, function (e, t, a) { !function (e) { "use strict"; var t = { 1: "۱", 2: "۲", 3: "۳", 4: "۴", 5: "۵", 6: "۶", 7: "۷", 8: "۸", 9: "۹", 0: "۰" }, a = { "۱": "1", "۲": "2", "۳": "3", "۴": "4", "۵": "5", "۶": "6", "۷": "7", "۸": "8", "۹": "9", "۰": "0" }; e.defineLocale("fa", { months: "ژانویه_فوریه_مارس_آوریل_مه_ژوئن_ژوئیه_اوت_سپتامبر_اکتبر_نوامبر_دسامبر".split("_"), monthsShort: "ژانویه_فوریه_مارس_آوریل_مه_ژوئن_ژوئیه_اوت_سپتامبر_اکتبر_نوامبر_دسامبر".split("_"), weekdays: "یک‌شنبه_دوشنبه_سه‌شنبه_چهارشنبه_پنج‌شنبه_جمعه_شنبه".split("_"), weekdaysShort: "یک‌شنبه_دوشنبه_سه‌شنبه_چهارشنبه_پنج‌شنبه_جمعه_شنبه".split("_"), weekdaysMin: "ی_د_س_چ_پ_ج_ش".split("_"), weekdaysParseExact: !0, longDateFormat: { LT: "HH:mm", LTS: "HH:mm:ss", L: "DD/MM/YYYY", LL: "D MMMM YYYY", LLL: "D MMMM YYYY HH:mm", LLLL: "dddd, D MMMM YYYY HH:mm" }, meridiemParse: /قبل از ظهر|بعد از ظهر/, isPM: function (e) { return /بعد از ظهر/.test(e) }, meridiem: function (e, t, a) { return e < 12 ? "قبل از ظهر" : "بعد از ظهر" }, calendar: { sameDay: "[امروز ساعت] LT", nextDay: "[فردا ساعت] LT", nextWeek: "dddd [ساعت] LT", lastDay: "[دیروز ساعت] LT", lastWeek: "dddd [پیش] [ساعت] LT", sameElse: "L" }, relativeTime: { future: "در %s", past: "%s پیش", s: "چند ثانیه", ss: "ثانیه d%", m: "یک دقیقه", mm: "%d دقیقه", h: "یک ساعت", hh: "%d ساعت", d: "یک روز", dd: "%d روز", M: "یک ماه", MM: "%d ماه", y: "یک سال", yy: "%d سال" }, preparse: function (e) { return e.replace(/[۰-۹]/g, function (e) { return a[e] }).replace(/،/g, ",") }, postformat: function (e) { return e.replace(/\d/g, function (e) { return t[e] }).replace(/,/g, "،") }, dayOfMonthOrdinalParse: /\d{1,2}م/, ordinal: "%dم", week: { dow: 6, doy: 12 } }) }(a(0)) }, function (e, t, a) { !function (e) { "use strict"; var t = "nolla yksi kaksi kolme neljä viisi kuusi seitsemän kahdeksan yhdeksän".split(" "), a = ["nolla", "yhden", "kahden", "kolmen", "neljän", "viiden", "kuuden", t[7], t[8], t[9]]; function n(e, n, s, r) { var i = ""; switch (s) { case "s": return r ? "muutaman sekunnin" : "muutama sekunti"; case "ss": return r ? "sekunnin" : "sekuntia"; case "m": return r ? "minuutin" : "minuutti"; case "mm": i = r ? "minuutin" : "minuuttia"; break; case "h": return r ? "tunnin" : "tunti"; case "hh": i = r ? "tunnin" : "tuntia"; break; case "d": return r ? "päivän" : "päivä"; case "dd": i = r ? "päivän" : "päivää"; break; case "M": return r ? "kuukauden" : "kuukausi"; case "MM": i = r ? "kuukauden" : "kuukautta"; break; case "y": return r ? "vuoden" : "vuosi"; case "yy": i = r ? "vuoden" : "vuotta" }return i = function (e, n) { return e < 10 ? n ? a[e] : t[e] : e }(e, r) + " " + i } e.defineLocale("fi", { months: "tammikuu_helmikuu_maaliskuu_huhtikuu_toukokuu_kesäkuu_heinäkuu_elokuu_syyskuu_lokakuu_marraskuu_joulukuu".split("_"), monthsShort: "tammi_helmi_maalis_huhti_touko_kesä_heinä_elo_syys_loka_marras_joulu".split("_"), weekdays: "sunnuntai_maanantai_tiistai_keskiviikko_torstai_perjantai_lauantai".split("_"), weekdaysShort: "su_ma_ti_ke_to_pe_la".split("_"), weekdaysMin: "su_ma_ti_ke_to_pe_la".split("_"), longDateFormat: { LT: "HH.mm", LTS: "HH.mm.ss", L: "DD.MM.YYYY", LL: "Do MMMM[ta] YYYY", LLL: "Do MMMM[ta] YYYY, [klo] HH.mm", LLLL: "dddd, Do MMMM[ta] YYYY, [klo] HH.mm", l: "D.M.YYYY", ll: "Do MMM YYYY", lll: "Do MMM YYYY, [klo] HH.mm", llll: "ddd, Do MMM YYYY, [klo] HH.mm" }, calendar: { sameDay: "[tänään] [klo] LT", nextDay: "[huomenna] [klo] LT", nextWeek: "dddd [klo] LT", lastDay: "[eilen] [klo] LT", lastWeek: "[viime] dddd[na] [klo] LT", sameElse: "L" }, relativeTime: { future: "%s päästä", past: "%s sitten", s: n, ss: n, m: n, mm: n, h: n, hh: n, d: n, dd: n, M: n, MM: n, y: n, yy: n }, dayOfMonthOrdinalParse: /\d{1,2}\./, ordinal: "%d.", week: { dow: 1, doy: 4 } }) }(a(0)) }, function (e, t, a) { !function (e) { "use strict"; e.defineLocale("fo", { months: "januar_februar_mars_apríl_mai_juni_juli_august_september_oktober_november_desember".split("_"), monthsShort: "jan_feb_mar_apr_mai_jun_jul_aug_sep_okt_nov_des".split("_"), weekdays: "sunnudagur_mánadagur_týsdagur_mikudagur_hósdagur_fríggjadagur_leygardagur".split("_"), weekdaysShort: "sun_mán_týs_mik_hós_frí_ley".split("_"), weekdaysMin: "su_má_tý_mi_hó_fr_le".split("_"), longDateFormat: { LT: "HH:mm", LTS: "HH:mm:ss", L: "DD/MM/YYYY", LL: "D MMMM YYYY", LLL: "D MMMM YYYY HH:mm", LLLL: "dddd D. MMMM, YYYY HH:mm" }, calendar: { sameDay: "[Í dag kl.] LT", nextDay: "[Í morgin kl.] LT", nextWeek: "dddd [kl.] LT", lastDay: "[Í gjár kl.] LT", lastWeek: "[síðstu] dddd [kl] LT", sameElse: "L" }, relativeTime: { future: "um %s", past: "%s síðani", s: "fá sekund", ss: "%d sekundir", m: "ein minutt", mm: "%d minuttir", h: "ein tími", hh: "%d tímar", d: "ein dagur", dd: "%d dagar", M: "ein mánaði", MM: "%d mánaðir", y: "eitt ár", yy: "%d ár" }, dayOfMonthOrdinalParse: /\d{1,2}\./, ordinal: "%d.", week: { dow: 1, doy: 4 } }) }(a(0)) }, function (e, t, a) { !function (e) { "use strict"; e.defineLocale("fr", { months: "janvier_février_mars_avril_mai_juin_juillet_août_septembre_octobre_novembre_décembre".split("_"), monthsShort: "janv._févr._mars_avr._mai_juin_juil._août_sept._oct._nov._déc.".split("_"), monthsParseExact: !0, weekdays: "dimanche_lundi_mardi_mercredi_jeudi_vendredi_samedi".split("_"), weekdaysShort: "dim._lun._mar._mer._jeu._ven._sam.".split("_"), weekdaysMin: "di_lu_ma_me_je_ve_sa".split("_"), weekdaysParseExact: !0, longDateFormat: { LT: "HH:mm", LTS: "HH:mm:ss", L: "DD/MM/YYYY", LL: "D MMMM YYYY", LLL: "D MMMM YYYY HH:mm", LLLL: "dddd D MMMM YYYY HH:mm" }, calendar: { sameDay: "[Aujourd’hui à] LT", nextDay: "[Demain à] LT", nextWeek: "dddd [à] LT", lastDay: "[Hier à] LT", lastWeek: "dddd [dernier à] LT", sameElse: "L" }, relativeTime: { future: "dans %s", past: "il y a %s", s: "quelques secondes", ss: "%d secondes", m: "une minute", mm: "%d minutes", h: "une heure", hh: "%d heures", d: "un jour", dd: "%d jours", M: "un mois", MM: "%d mois", y: "un an", yy: "%d ans" }, dayOfMonthOrdinalParse: /\d{1,2}(er|)/, ordinal: function (e, t) { switch (t) { case "D": return e + (1 === e ? "er" : ""); default: case "M": case "Q": case "DDD": case "d": return e + (1 === e ? "er" : "e"); case "w": case "W": return e + (1 === e ? "re" : "e") } }, week: { dow: 1, doy: 4 } }) }(a(0)) }, function (e, t, a) { !function (e) { "use strict"; e.defineLocale("fr-ca", { months: "janvier_février_mars_avril_mai_juin_juillet_août_septembre_octobre_novembre_décembre".split("_"), monthsShort: "janv._févr._mars_avr._mai_juin_juil._août_sept._oct._nov._déc.".split("_"), monthsParseExact: !0, weekdays: "dimanche_lundi_mardi_mercredi_jeudi_vendredi_samedi".split("_"), weekdaysShort: "dim._lun._mar._mer._jeu._ven._sam.".split("_"), weekdaysMin: "di_lu_ma_me_je_ve_sa".split("_"), weekdaysParseExact: !0, longDateFormat: { LT: "HH:mm", LTS: "HH:mm:ss", L: "YYYY-MM-DD", LL: "D MMMM YYYY", LLL: "D MMMM YYYY HH:mm", LLLL: "dddd D MMMM YYYY HH:mm" }, calendar: { sameDay: "[Aujourd’hui à] LT", nextDay: "[Demain à] LT", nextWeek: "dddd [à] LT", lastDay: "[Hier à] LT", lastWeek: "dddd [dernier à] LT", sameElse: "L" }, relativeTime: { future: "dans %s", past: "il y a %s", s: "quelques secondes", ss: "%d secondes", m: "une minute", mm: "%d minutes", h: "une heure", hh: "%d heures", d: "un jour", dd: "%d jours", M: "un mois", MM: "%d mois", y: "un an", yy: "%d ans" }, dayOfMonthOrdinalParse: /\d{1,2}(er|e)/, ordinal: function (e, t) { switch (t) { default: case "M": case "Q": case "D": case "DDD": case "d": return e + (1 === e ? "er" : "e"); case "w": case "W": return e + (1 === e ? "re" : "e") } } }) }(a(0)) }, function (e, t, a) { !function (e) { "use strict"; e.defineLocale("fr-ch", { months: "janvier_février_mars_avril_mai_juin_juillet_août_septembre_octobre_novembre_décembre".split("_"), monthsShort: "janv._févr._mars_avr._mai_juin_juil._août_sept._oct._nov._déc.".split("_"), monthsParseExact: !0, weekdays: "dimanche_lundi_mardi_mercredi_jeudi_vendredi_samedi".split("_"), weekdaysShort: "dim._lun._mar._mer._jeu._ven._sam.".split("_"), weekdaysMin: "di_lu_ma_me_je_ve_sa".split("_"), weekdaysParseExact: !0, longDateFormat: { LT: "HH:mm", LTS: "HH:mm:ss", L: "DD.MM.YYYY", LL: "D MMMM YYYY", LLL: "D MMMM YYYY HH:mm", LLLL: "dddd D MMMM YYYY HH:mm" }, calendar: { sameDay: "[Aujourd’hui à] LT", nextDay: "[Demain à] LT", nextWeek: "dddd [à] LT", lastDay: "[Hier à] LT", lastWeek: "dddd [dernier à] LT", sameElse: "L" }, relativeTime: { future: "dans %s", past: "il y a %s", s: "quelques secondes", ss: "%d secondes", m: "une minute", mm: "%d minutes", h: "une heure", hh: "%d heures", d: "un jour", dd: "%d jours", M: "un mois", MM: "%d mois", y: "un an", yy: "%d ans" }, dayOfMonthOrdinalParse: /\d{1,2}(er|e)/, ordinal: function (e, t) { switch (t) { default: case "M": case "Q": case "D": case "DDD": case "d": return e + (1 === e ? "er" : "e"); case "w": case "W": return e + (1 === e ? "re" : "e") } }, week: { dow: 1, doy: 4 } }) }(a(0)) }, function (e, t, a) { !function (e) { "use strict"; var t = "jan._feb._mrt._apr._mai_jun._jul._aug._sep._okt._nov._des.".split("_"), a = "jan_feb_mrt_apr_mai_jun_jul_aug_sep_okt_nov_des".split("_"); e.defineLocale("fy", { months: "jannewaris_febrewaris_maart_april_maaie_juny_july_augustus_septimber_oktober_novimber_desimber".split("_"), monthsShort: function (e, n) { return e ? /-MMM-/.test(n) ? a[e.month()] : t[e.month()] : t }, monthsParseExact: !0, weekdays: "snein_moandei_tiisdei_woansdei_tongersdei_freed_sneon".split("_"), weekdaysShort: "si._mo._ti._wo._to._fr._so.".split("_"), weekdaysMin: "Si_Mo_Ti_Wo_To_Fr_So".split("_"), weekdaysParseExact: !0, longDateFormat: { LT: "HH:mm", LTS: "HH:mm:ss", L: "DD-MM-YYYY", LL: "D MMMM YYYY", LLL: "D MMMM YYYY HH:mm", LLLL: "dddd D MMMM YYYY HH:mm" }, calendar: { sameDay: "[hjoed om] LT", nextDay: "[moarn om] LT", nextWeek: "dddd [om] LT", lastDay: "[juster om] LT", lastWeek: "[ôfrûne] dddd [om] LT", sameElse: "L" }, relativeTime: { future: "oer %s", past: "%s lyn", s: "in pear sekonden", ss: "%d sekonden", m: "ien minút", mm: "%d minuten", h: "ien oere", hh: "%d oeren", d: "ien dei", dd: "%d dagen", M: "ien moanne", MM: "%d moannen", y: "ien jier", yy: "%d jierren" }, dayOfMonthOrdinalParse: /\d{1,2}(ste|de)/, ordinal: function (e) { return e + (1 === e || 8 === e || e >= 20 ? "ste" : "de") }, week: { dow: 1, doy: 4 } }) }(a(0)) }, function (e, t, a) { !function (e) { "use strict"; e.defineLocale("gd", { months: ["Am Faoilleach", "An Gearran", "Am Màrt", "An Giblean", "An Cèitean", "An t-Ògmhios", "An t-Iuchar", "An Lùnastal", "An t-Sultain", "An Dàmhair", "An t-Samhain", "An Dùbhlachd"], monthsShort: ["Faoi", "Gear", "Màrt", "Gibl", "Cèit", "Ògmh", "Iuch", "Lùn", "Sult", "Dàmh", "Samh", "Dùbh"], monthsParseExact: !0, weekdays: ["Didòmhnaich", "Diluain", "Dimàirt", "Diciadain", "Diardaoin", "Dihaoine", "Disathairne"], weekdaysShort: ["Did", "Dil", "Dim", "Dic", "Dia", "Dih", "Dis"], weekdaysMin: ["Dò", "Lu", "Mà", "Ci", "Ar", "Ha", "Sa"], longDateFormat: { LT: "HH:mm", LTS: "HH:mm:ss", L: "DD/MM/YYYY", LL: "D MMMM YYYY", LLL: "D MMMM YYYY HH:mm", LLLL: "dddd, D MMMM YYYY HH:mm" }, calendar: { sameDay: "[An-diugh aig] LT", nextDay: "[A-màireach aig] LT", nextWeek: "dddd [aig] LT", lastDay: "[An-dè aig] LT", lastWeek: "dddd [seo chaidh] [aig] LT", sameElse: "L" }, relativeTime: { future: "ann an %s", past: "bho chionn %s", s: "beagan diogan", ss: "%d diogan", m: "mionaid", mm: "%d mionaidean", h: "uair", hh: "%d uairean", d: "latha", dd: "%d latha", M: "mìos", MM: "%d mìosan", y: "bliadhna", yy: "%d bliadhna" }, dayOfMonthOrdinalParse: /\d{1,2}(d|na|mh)/, ordinal: function (e) { var t = 1 === e ? "d" : e % 10 == 2 ? "na" : "mh"; return e + t }, week: { dow: 1, doy: 4 } }) }(a(0)) }, function (e, t, a) { !function (e) { "use strict"; e.defineLocale("gl", { months: "xaneiro_febreiro_marzo_abril_maio_xuño_xullo_agosto_setembro_outubro_novembro_decembro".split("_"), monthsShort: "xan._feb._mar._abr._mai._xuñ._xul._ago._set._out._nov._dec.".split("_"), monthsParseExact: !0, weekdays: "domingo_luns_martes_mércores_xoves_venres_sábado".split("_"), weekdaysShort: "dom._lun._mar._mér._xov._ven._sáb.".split("_"), weekdaysMin: "do_lu_ma_mé_xo_ve_sá".split("_"), weekdaysParseExact: !0, longDateFormat: { LT: "H:mm", LTS: "H:mm:ss", L: "DD/MM/YYYY", LL: "D [de] MMMM [de] YYYY", LLL: "D [de] MMMM [de] YYYY H:mm", LLLL: "dddd, D [de] MMMM [de] YYYY H:mm" }, calendar: { sameDay: function () { return "[hoxe " + (1 !== this.hours() ? "ás" : "á") + "] LT" }, nextDay: function () { return "[mañá " + (1 !== this.hours() ? "ás" : "á") + "] LT" }, nextWeek: function () { return "dddd [" + (1 !== this.hours() ? "ás" : "a") + "] LT" }, lastDay: function () { return "[onte " + (1 !== this.hours() ? "á" : "a") + "] LT" }, lastWeek: function () { return "[o] dddd [pasado " + (1 !== this.hours() ? "ás" : "a") + "] LT" }, sameElse: "L" }, relativeTime: { future: function (e) { return 0 === e.indexOf("un") ? "n" + e : "en " + e }, past: "hai %s", s: "uns segundos", ss: "%d segundos", m: "un minuto", mm: "%d minutos", h: "unha hora", hh: "%d horas", d: "un día", dd: "%d días", M: "un mes", MM: "%d meses", y: "un ano", yy: "%d anos" }, dayOfMonthOrdinalParse: /\d{1,2}º/, ordinal: "%dº", week: { dow: 1, doy: 4 } }) }(a(0)) }, function (e, t, a) { !function (e) { "use strict"; function t(e, t, a, n) { var s = { s: ["thodde secondanim", "thodde second"], ss: [e + " secondanim", e + " second"], m: ["eka mintan", "ek minute"], mm: [e + " mintanim", e + " mintam"], h: ["eka horan", "ek hor"], hh: [e + " horanim", e + " horam"], d: ["eka disan", "ek dis"], dd: [e + " disanim", e + " dis"], M: ["eka mhoinean", "ek mhoino"], MM: [e + " mhoineanim", e + " mhoine"], y: ["eka vorsan", "ek voros"], yy: [e + " vorsanim", e + " vorsam"] }; return t ? s[a][0] : s[a][1] } e.defineLocale("gom-latn", { months: "Janer_Febrer_Mars_Abril_Mai_Jun_Julai_Agost_Setembr_Otubr_Novembr_Dezembr".split("_"), monthsShort: "Jan._Feb._Mars_Abr._Mai_Jun_Jul._Ago._Set._Otu._Nov._Dez.".split("_"), monthsParseExact: !0, weekdays: "Aitar_Somar_Mongllar_Budvar_Brestar_Sukrar_Son'var".split("_"), weekdaysShort: "Ait._Som._Mon._Bud._Bre._Suk._Son.".split("_"), weekdaysMin: "Ai_Sm_Mo_Bu_Br_Su_Sn".split("_"), weekdaysParseExact: !0, longDateFormat: { LT: "A h:mm [vazta]", LTS: "A h:mm:ss [vazta]", L: "DD-MM-YYYY", LL: "D MMMM YYYY", LLL: "D MMMM YYYY A h:mm [vazta]", LLLL: "dddd, MMMM[achea] Do, YYYY, A h:mm [vazta]", llll: "ddd, D MMM YYYY, A h:mm [vazta]" }, calendar: { sameDay: "[Aiz] LT", nextDay: "[Faleam] LT", nextWeek: "[Ieta to] dddd[,] LT", lastDay: "[Kal] LT", lastWeek: "[Fatlo] dddd[,] LT", sameElse: "L" }, relativeTime: { future: "%s", past: "%s adim", s: t, ss: t, m: t, mm: t, h: t, hh: t, d: t, dd: t, M: t, MM: t, y: t, yy: t }, dayOfMonthOrdinalParse: /\d{1,2}(er)/, ordinal: function (e, t) { switch (t) { case "D": return e + "er"; default: case "M": case "Q": case "DDD": case "d": case "w": case "W": return e } }, week: { dow: 1, doy: 4 }, meridiemParse: /rati|sokalli|donparam|sanje/, meridiemHour: function (e, t) { return 12 === e && (e = 0), "rati" === t ? e < 4 ? e : e + 12 : "sokalli" === t ? e : "donparam" === t ? e > 12 ? e : e + 12 : "sanje" === t ? e + 12 : void 0 }, meridiem: function (e, t, a) { return e < 4 ? "rati" : e < 12 ? "sokalli" : e < 16 ? "donparam" : e < 20 ? "sanje" : "rati" } }) }(a(0)) }, function (e, t, a) { !function (e) { "use strict"; var t = { 1: "૧", 2: "૨", 3: "૩", 4: "૪", 5: "૫", 6: "૬", 7: "૭", 8: "૮", 9: "૯", 0: "૦" }, a = { "૧": "1", "૨": "2", "૩": "3", "૪": "4", "૫": "5", "૬": "6", "૭": "7", "૮": "8", "૯": "9", "૦": "0" }; e.defineLocale("gu", { months: "જાન્યુઆરી_ફેબ્રુઆરી_માર્ચ_એપ્રિલ_મે_જૂન_જુલાઈ_ઑગસ્ટ_સપ્ટેમ્બર_ઑક્ટ્બર_નવેમ્બર_ડિસેમ્બર".split("_"), monthsShort: "જાન્યુ._ફેબ્રુ._માર્ચ_એપ્રિ._મે_જૂન_જુલા._ઑગ._સપ્ટે._ઑક્ટ્._નવે._ડિસે.".split("_"), monthsParseExact: !0, weekdays: "રવિવાર_સોમવાર_મંગળવાર_બુધ્વાર_ગુરુવાર_શુક્રવાર_શનિવાર".split("_"), weekdaysShort: "રવિ_સોમ_મંગળ_બુધ્_ગુરુ_શુક્ર_શનિ".split("_"), weekdaysMin: "ર_સો_મં_બુ_ગુ_શુ_શ".split("_"), longDateFormat: { LT: "A h:mm વાગ્યે", LTS: "A h:mm:ss વાગ્યે", L: "DD/MM/YYYY", LL: "D MMMM YYYY", LLL: "D MMMM YYYY, A h:mm વાગ્યે", LLLL: "dddd, D MMMM YYYY, A h:mm વાગ્યે" }, calendar: { sameDay: "[આજ] LT", nextDay: "[કાલે] LT", nextWeek: "dddd, LT", lastDay: "[ગઇકાલે] LT", lastWeek: "[પાછલા] dddd, LT", sameElse: "L" }, relativeTime: { future: "%s મા", past: "%s પેહલા", s: "અમુક પળો", ss: "%d સેકંડ", m: "એક મિનિટ", mm: "%d મિનિટ", h: "એક કલાક", hh: "%d કલાક", d: "એક દિવસ", dd: "%d દિવસ", M: "એક મહિનો", MM: "%d મહિનો", y: "એક વર્ષ", yy: "%d વર્ષ" }, preparse: function (e) { return e.replace(/[૧૨૩૪૫૬૭૮૯૦]/g, function (e) { return a[e] }) }, postformat: function (e) { return e.replace(/\d/g, function (e) { return t[e] }) }, meridiemParse: /રાત|બપોર|સવાર|સાંજ/, meridiemHour: function (e, t) { return 12 === e && (e = 0), "રાત" === t ? e < 4 ? e : e + 12 : "સવાર" === t ? e : "બપોર" === t ? e >= 10 ? e : e + 12 : "સાંજ" === t ? e + 12 : void 0 }, meridiem: function (e, t, a) { return e < 4 ? "રાત" : e < 10 ? "સવાર" : e < 17 ? "બપોર" : e < 20 ? "સાંજ" : "રાત" }, week: { dow: 0, doy: 6 } }) }(a(0)) }, function (e, t, a) { !function (e) { "use strict"; e.defineLocale("he", { months: "ינואר_פברואר_מרץ_אפריל_מאי_יוני_יולי_אוגוסט_ספטמבר_אוקטובר_נובמבר_דצמבר".split("_"), monthsShort: "ינו׳_פבר׳_מרץ_אפר׳_מאי_יוני_יולי_אוג׳_ספט׳_אוק׳_נוב׳_דצמ׳".split("_"), weekdays: "ראשון_שני_שלישי_רביעי_חמישי_שישי_שבת".split("_"), weekdaysShort: "א׳_ב׳_ג׳_ד׳_ה׳_ו׳_ש׳".split("_"), weekdaysMin: "א_ב_ג_ד_ה_ו_ש".split("_"), longDateFormat: { LT: "HH:mm", LTS: "HH:mm:ss", L: "DD/MM/YYYY", LL: "D [ב]MMMM YYYY", LLL: "D [ב]MMMM YYYY HH:mm", LLLL: "dddd, D [ב]MMMM YYYY HH:mm", l: "D/M/YYYY", ll: "D MMM YYYY", lll: "D MMM YYYY HH:mm", llll: "ddd, D MMM YYYY HH:mm" }, calendar: { sameDay: "[היום ב־]LT", nextDay: "[מחר ב־]LT", nextWeek: "dddd [בשעה] LT", lastDay: "[אתמול ב־]LT", lastWeek: "[ביום] dddd [האחרון בשעה] LT", sameElse: "L" }, relativeTime: { future: "בעוד %s", past: "לפני %s", s: "מספר שניות", ss: "%d שניות", m: "דקה", mm: "%d דקות", h: "שעה", hh: function (e) { return 2 === e ? "שעתיים" : e + " שעות" }, d: "יום", dd: function (e) { return 2 === e ? "יומיים" : e + " ימים" }, M: "חודש", MM: function (e) { return 2 === e ? "חודשיים" : e + " חודשים" }, y: "שנה", yy: function (e) { return 2 === e ? "שנתיים" : e % 10 == 0 && 10 !== e ? e + " שנה" : e + " שנים" } }, meridiemParse: /אחה"צ|לפנה"צ|אחרי הצהריים|לפני הצהריים|לפנות בוקר|בבוקר|בערב/i, isPM: function (e) { return /^(אחה"צ|אחרי הצהריים|בערב)$/.test(e) }, meridiem: function (e, t, a) { return e < 5 ? "לפנות בוקר" : e < 10 ? "בבוקר" : e < 12 ? a ? 'לפנה"צ' : "לפני הצהריים" : e < 18 ? a ? 'אחה"צ' : "אחרי הצהריים" : "בערב" } }) }(a(0)) }, function (e, t, a) { !function (e) { "use strict"; var t = { 1: "१", 2: "२", 3: "३", 4: "४", 5: "५", 6: "६", 7: "७", 8: "८", 9: "९", 0: "०" }, a = { "१": "1", "२": "2", "३": "3", "४": "4", "५": "5", "६": "6", "७": "7", "८": "8", "९": "9", "०": "0" }; e.defineLocale("hi", { months: "जनवरी_फ़रवरी_मार्च_अप्रैल_मई_जून_जुलाई_अगस्त_सितम्बर_अक्टूबर_नवम्बर_दिसम्बर".split("_"), monthsShort: "जन._फ़र._मार्च_अप्रै._मई_जून_जुल._अग._सित._अक्टू._नव._दिस.".split("_"), monthsParseExact: !0, weekdays: "रविवार_सोमवार_मंगलवार_बुधवार_गुरूवार_शुक्रवार_शनिवार".split("_"), weekdaysShort: "रवि_सोम_मंगल_बुध_गुरू_शुक्र_शनि".split("_"), weekdaysMin: "र_सो_मं_बु_गु_शु_श".split("_"), longDateFormat: { LT: "A h:mm बजे", LTS: "A h:mm:ss बजे", L: "DD/MM/YYYY", LL: "D MMMM YYYY", LLL: "D MMMM YYYY, A h:mm बजे", LLLL: "dddd, D MMMM YYYY, A h:mm बजे" }, calendar: { sameDay: "[आज] LT", nextDay: "[कल] LT", nextWeek: "dddd, LT", lastDay: "[कल] LT", lastWeek: "[पिछले] dddd, LT", sameElse: "L" }, relativeTime: { future: "%s में", past: "%s पहले", s: "कुछ ही क्षण", ss: "%d सेकंड", m: "एक मिनट", mm: "%d मिनट", h: "एक घंटा", hh: "%d घंटे", d: "एक दिन", dd: "%d दिन", M: "एक महीने", MM: "%d महीने", y: "एक वर्ष", yy: "%d वर्ष" }, preparse: function (e) { return e.replace(/[१२३४५६७८९०]/g, function (e) { return a[e] }) }, postformat: function (e) { return e.replace(/\d/g, function (e) { return t[e] }) }, meridiemParse: /रात|सुबह|दोपहर|शाम/, meridiemHour: function (e, t) { return 12 === e && (e = 0), "रात" === t ? e < 4 ? e : e + 12 : "सुबह" === t ? e : "दोपहर" === t ? e >= 10 ? e : e + 12 : "शाम" === t ? e + 12 : void 0 }, meridiem: function (e, t, a) { return e < 4 ? "रात" : e < 10 ? "सुबह" : e < 17 ? "दोपहर" : e < 20 ? "शाम" : "रात" }, week: { dow: 0, doy: 6 } }) }(a(0)) }, function (e, t, a) { !function (e) { "use strict"; function t(e, t, a) { var n = e + " "; switch (a) { case "ss": return n += 1 === e ? "sekunda" : 2 === e || 3 === e || 4 === e ? "sekunde" : "sekundi"; case "m": return t ? "jedna minuta" : "jedne minute"; case "mm": return n += 1 === e ? "minuta" : 2 === e || 3 === e || 4 === e ? "minute" : "minuta"; case "h": return t ? "jedan sat" : "jednog sata"; case "hh": return n += 1 === e ? "sat" : 2 === e || 3 === e || 4 === e ? "sata" : "sati"; case "dd": return n += 1 === e ? "dan" : "dana"; case "MM": return n += 1 === e ? "mjesec" : 2 === e || 3 === e || 4 === e ? "mjeseca" : "mjeseci"; case "yy": return n += 1 === e ? "godina" : 2 === e || 3 === e || 4 === e ? "godine" : "godina" } } e.defineLocale("hr", { months: { format: "siječnja_veljače_ožujka_travnja_svibnja_lipnja_srpnja_kolovoza_rujna_listopada_studenoga_prosinca".split("_"), standalone: "siječanj_veljača_ožujak_travanj_svibanj_lipanj_srpanj_kolovoz_rujan_listopad_studeni_prosinac".split("_") }, monthsShort: "sij._velj._ožu._tra._svi._lip._srp._kol._ruj._lis._stu._pro.".split("_"), monthsParseExact: !0, weekdays: "nedjelja_ponedjeljak_utorak_srijeda_četvrtak_petak_subota".split("_"), weekdaysShort: "ned._pon._uto._sri._čet._pet._sub.".split("_"), weekdaysMin: "ne_po_ut_sr_če_pe_su".split("_"), weekdaysParseExact: !0, longDateFormat: { LT: "H:mm", LTS: "H:mm:ss", L: "DD.MM.YYYY", LL: "D. MMMM YYYY", LLL: "D. MMMM YYYY H:mm", LLLL: "dddd, D. MMMM YYYY H:mm" }, calendar: { sameDay: "[danas u] LT", nextDay: "[sutra u] LT", nextWeek: function () { switch (this.day()) { case 0: return "[u] [nedjelju] [u] LT"; case 3: return "[u] [srijedu] [u] LT"; case 6: return "[u] [subotu] [u] LT"; case 1: case 2: case 4: case 5: return "[u] dddd [u] LT" } }, lastDay: "[jučer u] LT", lastWeek: function () { switch (this.day()) { case 0: case 3: return "[prošlu] dddd [u] LT"; case 6: return "[prošle] [subote] [u] LT"; case 1: case 2: case 4: case 5: return "[prošli] dddd [u] LT" } }, sameElse: "L" }, relativeTime: { future: "za %s", past: "prije %s", s: "par sekundi", ss: t, m: t, mm: t, h: t, hh: t, d: "dan", dd: t, M: "mjesec", MM: t, y: "godinu", yy: t }, dayOfMonthOrdinalParse: /\d{1,2}\./, ordinal: "%d.", week: { dow: 1, doy: 7 } }) }(a(0)) }, function (e, t, a) { !function (e) { "use strict"; var t = "vasárnap hétfőn kedden szerdán csütörtökön pénteken szombaton".split(" "); function a(e, t, a, n) { var s = e; switch (a) { case "s": return n || t ? "néhány másodperc" : "néhány másodperce"; case "ss": return s + (n || t) ? " másodperc" : " másodperce"; case "m": return "egy" + (n || t ? " perc" : " perce"); case "mm": return s + (n || t ? " perc" : " perce"); case "h": return "egy" + (n || t ? " óra" : " órája"); case "hh": return s + (n || t ? " óra" : " órája"); case "d": return "egy" + (n || t ? " nap" : " napja"); case "dd": return s + (n || t ? " nap" : " napja"); case "M": return "egy" + (n || t ? " hónap" : " hónapja"); case "MM": return s + (n || t ? " hónap" : " hónapja"); case "y": return "egy" + (n || t ? " év" : " éve"); case "yy": return s + (n || t ? " év" : " éve") }return "" } function n(e) { return (e ? "" : "[múlt] ") + "[" + t[this.day()] + "] LT[-kor]" } e.defineLocale("hu", { months: "január_február_március_április_május_június_július_augusztus_szeptember_október_november_december".split("_"), monthsShort: "jan_feb_márc_ápr_máj_jún_júl_aug_szept_okt_nov_dec".split("_"), weekdays: "vasárnap_hétfő_kedd_szerda_csütörtök_péntek_szombat".split("_"), weekdaysShort: "vas_hét_kedd_sze_csüt_pén_szo".split("_"), weekdaysMin: "v_h_k_sze_cs_p_szo".split("_"), longDateFormat: { LT: "H:mm", LTS: "H:mm:ss", L: "YYYY.MM.DD.", LL: "YYYY. MMMM D.", LLL: "YYYY. MMMM D. H:mm", LLLL: "YYYY. MMMM D., dddd H:mm" }, meridiemParse: /de|du/i, isPM: function (e) { return "u" === e.charAt(1).toLowerCase() }, meridiem: function (e, t, a) { return e < 12 ? !0 === a ? "de" : "DE" : !0 === a ? "du" : "DU" }, calendar: { sameDay: "[ma] LT[-kor]", nextDay: "[holnap] LT[-kor]", nextWeek: function () { return n.call(this, !0) }, lastDay: "[tegnap] LT[-kor]", lastWeek: function () { return n.call(this, !1) }, sameElse: "L" }, relativeTime: { future: "%s múlva", past: "%s", s: a, ss: a, m: a, mm: a, h: a, hh: a, d: a, dd: a, M: a, MM: a, y: a, yy: a }, dayOfMonthOrdinalParse: /\d{1,2}\./, ordinal: "%d.", week: { dow: 1, doy: 4 } }) }(a(0)) }, function (e, t, a) { !function (e) { "use strict"; e.defineLocale("hy-am", { months: { format: "հունվարի_փետրվարի_մարտի_ապրիլի_մայիսի_հունիսի_հուլիսի_օգոստոսի_սեպտեմբերի_հոկտեմբերի_նոյեմբերի_դեկտեմբերի".split("_"), standalone: "հունվար_փետրվար_մարտ_ապրիլ_մայիս_հունիս_հուլիս_օգոստոս_սեպտեմբեր_հոկտեմբեր_նոյեմբեր_դեկտեմբեր".split("_") }, monthsShort: "հնվ_փտր_մրտ_ապր_մյս_հնս_հլս_օգս_սպտ_հկտ_նմբ_դկտ".split("_"), weekdays: "կիրակի_երկուշաբթի_երեքշաբթի_չորեքշաբթի_հինգշաբթի_ուրբաթ_շաբաթ".split("_"), weekdaysShort: "կրկ_երկ_երք_չրք_հնգ_ուրբ_շբթ".split("_"), weekdaysMin: "կրկ_երկ_երք_չրք_հնգ_ուրբ_շբթ".split("_"), longDateFormat: { LT: "HH:mm", LTS: "HH:mm:ss", L: "DD.MM.YYYY", LL: "D MMMM YYYY թ.", LLL: "D MMMM YYYY թ., HH:mm", LLLL: "dddd, D MMMM YYYY թ., HH:mm" }, calendar: { sameDay: "[այսօր] LT", nextDay: "[վաղը] LT", lastDay: "[երեկ] LT", nextWeek: function () { return "dddd [օրը ժամը] LT" }, lastWeek: function () { return "[անցած] dddd [օրը ժամը] LT" }, sameElse: "L" }, relativeTime: { future: "%s հետո", past: "%s առաջ", s: "մի քանի վայրկյան", ss: "%d վայրկյան", m: "րոպե", mm: "%d րոպե", h: "ժամ", hh: "%d ժամ", d: "օր", dd: "%d օր", M: "ամիս", MM: "%d ամիս", y: "տարի", yy: "%d տարի" }, meridiemParse: /գիշերվա|առավոտվա|ցերեկվա|երեկոյան/, isPM: function (e) { return /^(ցերեկվա|երեկոյան)$/.test(e) }, meridiem: function (e) { return e < 4 ? "գիշերվա" : e < 12 ? "առավոտվա" : e < 17 ? "ցերեկվա" : "երեկոյան" }, dayOfMonthOrdinalParse: /\d{1,2}|\d{1,2}-(ին|րդ)/, ordinal: function (e, t) { switch (t) { case "DDD": case "w": case "W": case "DDDo": return 1 === e ? e + "-ին" : e + "-րդ"; default: return e } }, week: { dow: 1, doy: 7 } }) }(a(0)) }, function (e, t, a) { !function (e) { "use strict"; e.defineLocale("id", { months: "Januari_Februari_Maret_April_Mei_Juni_Juli_Agustus_September_Oktober_November_Desember".split("_"), monthsShort: "Jan_Feb_Mar_Apr_Mei_Jun_Jul_Agt_Sep_Okt_Nov_Des".split("_"), weekdays: "Minggu_Senin_Selasa_Rabu_Kamis_Jumat_Sabtu".split("_"), weekdaysShort: "Min_Sen_Sel_Rab_Kam_Jum_Sab".split("_"), weekdaysMin: "Mg_Sn_Sl_Rb_Km_Jm_Sb".split("_"), longDateFormat: { LT: "HH.mm", LTS: "HH.mm.ss", L: "DD/MM/YYYY", LL: "D MMMM YYYY", LLL: "D MMMM YYYY [pukul] HH.mm", LLLL: "dddd, D MMMM YYYY [pukul] HH.mm" }, meridiemParse: /pagi|siang|sore|malam/, meridiemHour: function (e, t) { return 12 === e && (e = 0), "pagi" === t ? e : "siang" === t ? e >= 11 ? e : e + 12 : "sore" === t || "malam" === t ? e + 12 : void 0 }, meridiem: function (e, t, a) { return e < 11 ? "pagi" : e < 15 ? "siang" : e < 19 ? "sore" : "malam" }, calendar: { sameDay: "[Hari ini pukul] LT", nextDay: "[Besok pukul] LT", nextWeek: "dddd [pukul] LT", lastDay: "[Kemarin pukul] LT", lastWeek: "dddd [lalu pukul] LT", sameElse: "L" }, relativeTime: { future: "dalam %s", past: "%s yang lalu", s: "beberapa detik", ss: "%d detik", m: "semenit", mm: "%d menit", h: "sejam", hh: "%d jam", d: "sehari", dd: "%d hari", M: "sebulan", MM: "%d bulan", y: "setahun", yy: "%d tahun" }, week: { dow: 1, doy: 7 } }) }(a(0)) }, function (e, t, a) { !function (e) { "use strict"; function t(e) { return e % 100 == 11 || e % 10 != 1 } function a(e, a, n, s) { var r = e + " "; switch (n) { case "s": return a || s ? "nokkrar sekúndur" : "nokkrum sekúndum"; case "ss": return t(e) ? r + (a || s ? "sekúndur" : "sekúndum") : r + "sekúnda"; case "m": return a ? "mínúta" : "mínútu"; case "mm": return t(e) ? r + (a || s ? "mínútur" : "mínútum") : a ? r + "mínúta" : r + "mínútu"; case "hh": return t(e) ? r + (a || s ? "klukkustundir" : "klukkustundum") : r + "klukkustund"; case "d": return a ? "dagur" : s ? "dag" : "degi"; case "dd": return t(e) ? a ? r + "dagar" : r + (s ? "daga" : "dögum") : a ? r + "dagur" : r + (s ? "dag" : "degi"); case "M": return a ? "mánuður" : s ? "mánuð" : "mánuði"; case "MM": return t(e) ? a ? r + "mánuðir" : r + (s ? "mánuði" : "mánuðum") : a ? r + "mánuður" : r + (s ? "mánuð" : "mánuði"); case "y": return a || s ? "ár" : "ári"; case "yy": return t(e) ? r + (a || s ? "ár" : "árum") : r + (a || s ? "ár" : "ári") } } e.defineLocale("is", { months: "janúar_febrúar_mars_apríl_maí_júní_júlí_ágúst_september_október_nóvember_desember".split("_"), monthsShort: "jan_feb_mar_apr_maí_jún_júl_ágú_sep_okt_nóv_des".split("_"), weekdays: "sunnudagur_mánudagur_þriðjudagur_miðvikudagur_fimmtudagur_föstudagur_laugardagur".split("_"), weekdaysShort: "sun_mán_þri_mið_fim_fös_lau".split("_"), weekdaysMin: "Su_Má_Þr_Mi_Fi_Fö_La".split("_"), longDateFormat: { LT: "H:mm", LTS: "H:mm:ss", L: "DD.MM.YYYY", LL: "D. MMMM YYYY", LLL: "D. MMMM YYYY [kl.] H:mm", LLLL: "dddd, D. MMMM YYYY [kl.] H:mm" }, calendar: { sameDay: "[í dag kl.] LT", nextDay: "[á morgun kl.] LT", nextWeek: "dddd [kl.] LT", lastDay: "[í gær kl.] LT", lastWeek: "[síðasta] dddd [kl.] LT", sameElse: "L" }, relativeTime: { future: "eftir %s", past: "fyrir %s síðan", s: a, ss: a, m: a, mm: a, h: "klukkustund", hh: a, d: a, dd: a, M: a, MM: a, y: a, yy: a }, dayOfMonthOrdinalParse: /\d{1,2}\./, ordinal: "%d.", week: { dow: 1, doy: 4 } }) }(a(0)) }, function (e, t, a) { !function (e) { "use strict"; e.defineLocale("it", { months: "gennaio_febbraio_marzo_aprile_maggio_giugno_luglio_agosto_settembre_ottobre_novembre_dicembre".split("_"), monthsShort: "gen_feb_mar_apr_mag_giu_lug_ago_set_ott_nov_dic".split("_"), weekdays: "domenica_lunedì_martedì_mercoledì_giovedì_venerdì_sabato".split("_"), weekdaysShort: "dom_lun_mar_mer_gio_ven_sab".split("_"), weekdaysMin: "do_lu_ma_me_gi_ve_sa".split("_"), longDateFormat: { LT: "HH:mm", LTS: "HH:mm:ss", L: "DD/MM/YYYY", LL: "D MMMM YYYY", LLL: "D MMMM YYYY HH:mm", LLLL: "dddd D MMMM YYYY HH:mm" }, calendar: { sameDay: "[Oggi alle] LT", nextDay: "[Domani alle] LT", nextWeek: "dddd [alle] LT", lastDay: "[Ieri alle] LT", lastWeek: function () { switch (this.day()) { case 0: return "[la scorsa] dddd [alle] LT"; default: return "[lo scorso] dddd [alle] LT" } }, sameElse: "L" }, relativeTime: { future: function (e) { return (/^[0-9].+$/.test(e) ? "tra" : "in") + " " + e }, past: "%s fa", s: "alcuni secondi", ss: "%d secondi", m: "un minuto", mm: "%d minuti", h: "un'ora", hh: "%d ore", d: "un giorno", dd: "%d giorni", M: "un mese", MM: "%d mesi", y: "un anno", yy: "%d anni" }, dayOfMonthOrdinalParse: /\d{1,2}º/, ordinal: "%dº", week: { dow: 1, doy: 4 } }) }(a(0)) }, function (e, t, a) { !function (e) { "use strict"; e.defineLocale("ja", { months: "1月_2月_3月_4月_5月_6月_7月_8月_9月_10月_11月_12月".split("_"), monthsShort: "1月_2月_3月_4月_5月_6月_7月_8月_9月_10月_11月_12月".split("_"), weekdays: "日曜日_月曜日_火曜日_水曜日_木曜日_金曜日_土曜日".split("_"), weekdaysShort: "日_月_火_水_木_金_土".split("_"), weekdaysMin: "日_月_火_水_木_金_土".split("_"), longDateFormat: { LT: "HH:mm", LTS: "HH:mm:ss", L: "YYYY/MM/DD", LL: "YYYY年M月D日", LLL: "YYYY年M月D日 HH:mm", LLLL: "YYYY年M月D日 dddd HH:mm", l: "YYYY/MM/DD", ll: "YYYY年M月D日", lll: "YYYY年M月D日 HH:mm", llll: "YYYY年M月D日(ddd) HH:mm" }, meridiemParse: /午前|午後/i, isPM: function (e) { return "午後" === e }, meridiem: function (e, t, a) { return e < 12 ? "午前" : "午後" }, calendar: { sameDay: "[今日] LT", nextDay: "[明日] LT", nextWeek: function (e) { return e.week() < this.week() ? "[来週]dddd LT" : "dddd LT" }, lastDay: "[昨日] LT", lastWeek: function (e) { return this.week() < e.week() ? "[先週]dddd LT" : "dddd LT" }, sameElse: "L" }, dayOfMonthOrdinalParse: /\d{1,2}日/, ordinal: function (e, t) { switch (t) { case "d": case "D": case "DDD": return e + "日"; default: return e } }, relativeTime: { future: "%s後", past: "%s前", s: "数秒", ss: "%d秒", m: "1分", mm: "%d分", h: "1時間", hh: "%d時間", d: "1日", dd: "%d日", M: "1ヶ月", MM: "%dヶ月", y: "1年", yy: "%d年" } }) }(a(0)) }, function (e, t, a) { !function (e) { "use strict"; e.defineLocale("jv", { months: "Januari_Februari_Maret_April_Mei_Juni_Juli_Agustus_September_Oktober_Nopember_Desember".split("_"), monthsShort: "Jan_Feb_Mar_Apr_Mei_Jun_Jul_Ags_Sep_Okt_Nop_Des".split("_"), weekdays: "Minggu_Senen_Seloso_Rebu_Kemis_Jemuwah_Septu".split("_"), weekdaysShort: "Min_Sen_Sel_Reb_Kem_Jem_Sep".split("_"), weekdaysMin: "Mg_Sn_Sl_Rb_Km_Jm_Sp".split("_"), longDateFormat: { LT: "HH.mm", LTS: "HH.mm.ss", L: "DD/MM/YYYY", LL: "D MMMM YYYY", LLL: "D MMMM YYYY [pukul] HH.mm", LLLL: "dddd, D MMMM YYYY [pukul] HH.mm" }, meridiemParse: /enjing|siyang|sonten|ndalu/, meridiemHour: function (e, t) { return 12 === e && (e = 0), "enjing" === t ? e : "siyang" === t ? e >= 11 ? e : e + 12 : "sonten" === t || "ndalu" === t ? e + 12 : void 0 }, meridiem: function (e, t, a) { return e < 11 ? "enjing" : e < 15 ? "siyang" : e < 19 ? "sonten" : "ndalu" }, calendar: { sameDay: "[Dinten puniko pukul] LT", nextDay: "[Mbenjang pukul] LT", nextWeek: "dddd [pukul] LT", lastDay: "[Kala wingi pukul] LT", lastWeek: "dddd [kepengker pukul] LT", sameElse: "L" }, relativeTime: { future: "wonten ing %s", past: "%s ingkang kepengker", s: "sawetawis detik", ss: "%d detik", m: "setunggal menit", mm: "%d menit", h: "setunggal jam", hh: "%d jam", d: "sedinten", dd: "%d dinten", M: "sewulan", MM: "%d wulan", y: "setaun", yy: "%d taun" }, week: { dow: 1, doy: 7 } }) }(a(0)) }, function (e, t, a) { !function (e) { "use strict"; e.defineLocale("ka", { months: { standalone: "იანვარი_თებერვალი_მარტი_აპრილი_მაისი_ივნისი_ივლისი_აგვისტო_სექტემბერი_ოქტომბერი_ნოემბერი_დეკემბერი".split("_"), format: "იანვარს_თებერვალს_მარტს_აპრილის_მაისს_ივნისს_ივლისს_აგვისტს_სექტემბერს_ოქტომბერს_ნოემბერს_დეკემბერს".split("_") }, monthsShort: "იან_თებ_მარ_აპრ_მაი_ივნ_ივლ_აგვ_სექ_ოქტ_ნოე_დეკ".split("_"), weekdays: { standalone: "კვირა_ორშაბათი_სამშაბათი_ოთხშაბათი_ხუთშაბათი_პარასკევი_შაბათი".split("_"), format: "კვირას_ორშაბათს_სამშაბათს_ოთხშაბათს_ხუთშაბათს_პარასკევს_შაბათს".split("_"), isFormat: /(წინა|შემდეგ)/ }, weekdaysShort: "კვი_ორშ_სამ_ოთხ_ხუთ_პარ_შაბ".split("_"), weekdaysMin: "კვ_ორ_სა_ოთ_ხუ_პა_შა".split("_"), longDateFormat: { LT: "h:mm A", LTS: "h:mm:ss A", L: "DD/MM/YYYY", LL: "D MMMM YYYY", LLL: "D MMMM YYYY h:mm A", LLLL: "dddd, D MMMM YYYY h:mm A" }, calendar: { sameDay: "[დღეს] LT[-ზე]", nextDay: "[ხვალ] LT[-ზე]", lastDay: "[გუშინ] LT[-ზე]", nextWeek: "[შემდეგ] dddd LT[-ზე]", lastWeek: "[წინა] dddd LT-ზე", sameElse: "L" }, relativeTime: { future: function (e) { return /(წამი|წუთი|საათი|წელი)/.test(e) ? e.replace(/ი$/, "ში") : e + "ში" }, past: function (e) { return /(წამი|წუთი|საათი|დღე|თვე)/.test(e) ? e.replace(/(ი|ე)$/, "ის წინ") : /წელი/.test(e) ? e.replace(/წელი$/, "წლის წინ") : void 0 }, s: "რამდენიმე წამი", ss: "%d წამი", m: "წუთი", mm: "%d წუთი", h: "საათი", hh: "%d საათი", d: "დღე", dd: "%d დღე", M: "თვე", MM: "%d თვე", y: "წელი", yy: "%d წელი" }, dayOfMonthOrdinalParse: /0|1-ლი|მე-\d{1,2}|\d{1,2}-ე/, ordinal: function (e) { return 0 === e ? e : 1 === e ? e + "-ლი" : e < 20 || e <= 100 && e % 20 == 0 || e % 100 == 0 ? "მე-" + e : e + "-ე" }, week: { dow: 1, doy: 7 } }) }(a(0)) }, function (e, t, a) { !function (e) { "use strict"; var t = { 0: "-ші", 1: "-ші", 2: "-ші", 3: "-ші", 4: "-ші", 5: "-ші", 6: "-шы", 7: "-ші", 8: "-ші", 9: "-шы", 10: "-шы", 20: "-шы", 30: "-шы", 40: "-шы", 50: "-ші", 60: "-шы", 70: "-ші", 80: "-ші", 90: "-шы", 100: "-ші" }; e.defineLocale("kk", { months: "қаңтар_ақпан_наурыз_сәуір_мамыр_маусым_шілде_тамыз_қыркүйек_қазан_қараша_желтоқсан".split("_"), monthsShort: "қаң_ақп_нау_сәу_мам_мау_шіл_там_қыр_қаз_қар_жел".split("_"), weekdays: "жексенбі_дүйсенбі_сейсенбі_сәрсенбі_бейсенбі_жұма_сенбі".split("_"), weekdaysShort: "жек_дүй_сей_сәр_бей_жұм_сен".split("_"), weekdaysMin: "жк_дй_сй_ср_бй_жм_сн".split("_"), longDateFormat: { LT: "HH:mm", LTS: "HH:mm:ss", L: "DD.MM.YYYY", LL: "D MMMM YYYY", LLL: "D MMMM YYYY HH:mm", LLLL: "dddd, D MMMM YYYY HH:mm" }, calendar: { sameDay: "[Бүгін сағат] LT", nextDay: "[Ертең сағат] LT", nextWeek: "dddd [сағат] LT", lastDay: "[Кеше сағат] LT", lastWeek: "[Өткен аптаның] dddd [сағат] LT", sameElse: "L" }, relativeTime: { future: "%s ішінде", past: "%s бұрын", s: "бірнеше секунд", ss: "%d секунд", m: "бір минут", mm: "%d минут", h: "бір сағат", hh: "%d сағат", d: "бір күн", dd: "%d күн", M: "бір ай", MM: "%d ай", y: "бір жыл", yy: "%d жыл" }, dayOfMonthOrdinalParse: /\d{1,2}-(ші|шы)/, ordinal: function (e) { var a = e % 10, n = e >= 100 ? 100 : null; return e + (t[e] || t[a] || t[n]) }, week: { dow: 1, doy: 7 } }) }(a(0)) }, function (e, t, a) { !function (e) { "use strict"; var t = { 1: "១", 2: "២", 3: "៣", 4: "៤", 5: "៥", 6: "៦", 7: "៧", 8: "៨", 9: "៩", 0: "០" }, a = { "១": "1", "២": "2", "៣": "3", "៤": "4", "៥": "5", "៦": "6", "៧": "7", "៨": "8", "៩": "9", "០": "0" }; e.defineLocale("km", { months: "មករា_កុម្ភៈ_មីនា_មេសា_ឧសភា_មិថុនា_កក្កដា_សីហា_កញ្ញា_តុលា_វិច្ឆិកា_ធ្នូ".split("_"), monthsShort: "មករា_កុម្ភៈ_មីនា_មេសា_ឧសភា_មិថុនា_កក្កដា_សីហា_កញ្ញា_តុលា_វិច្ឆិកា_ធ្នូ".split("_"), weekdays: "អាទិត្យ_ច័ន្ទ_អង្គារ_ពុធ_ព្រហស្បតិ៍_សុក្រ_សៅរ៍".split("_"), weekdaysShort: "អា_ច_អ_ព_ព្រ_សុ_ស".split("_"), weekdaysMin: "អា_ច_អ_ព_ព្រ_សុ_ស".split("_"), weekdaysParseExact: !0, longDateFormat: { LT: "HH:mm", LTS: "HH:mm:ss", L: "DD/MM/YYYY", LL: "D MMMM YYYY", LLL: "D MMMM YYYY HH:mm", LLLL: "dddd, D MMMM YYYY HH:mm" }, meridiemParse: /ព្រឹក|ល្ងាច/, isPM: function (e) { return "ល្ងាច" === e }, meridiem: function (e, t, a) { return e < 12 ? "ព្រឹក" : "ល្ងាច" }, calendar: { sameDay: "[ថ្ងៃនេះ ម៉ោង] LT", nextDay: "[ស្អែក ម៉ោង] LT", nextWeek: "dddd [ម៉ោង] LT", lastDay: "[ម្សិលមិញ ម៉ោង] LT", lastWeek: "dddd [សប្តាហ៍មុន] [ម៉ោង] LT", sameElse: "L" }, relativeTime: { future: "%sទៀត", past: "%sមុន", s: "ប៉ុន្មានវិនាទី", ss: "%d វិនាទី", m: "មួយនាទី", mm: "%d នាទី", h: "មួយម៉ោង", hh: "%d ម៉ោង", d: "មួយថ្ងៃ", dd: "%d ថ្ងៃ", M: "មួយខែ", MM: "%d ខែ", y: "មួយឆ្នាំ", yy: "%d ឆ្នាំ" }, dayOfMonthOrdinalParse: /ទី\d{1,2}/, ordinal: "ទី%d", preparse: function (e) { return e.replace(/[១២៣៤៥៦៧៨៩០]/g, function (e) { return a[e] }) }, postformat: function (e) { return e.replace(/\d/g, function (e) { return t[e] }) }, week: { dow: 1, doy: 4 } }) }(a(0)) }, function (e, t, a) { !function (e) { "use strict"; var t = { 1: "೧", 2: "೨", 3: "೩", 4: "೪", 5: "೫", 6: "೬", 7: "೭", 8: "೮", 9: "೯", 0: "೦" }, a = { "೧": "1", "೨": "2", "೩": "3", "೪": "4", "೫": "5", "೬": "6", "೭": "7", "೮": "8", "೯": "9", "೦": "0" }; e.defineLocale("kn", { months: "ಜನವರಿ_ಫೆಬ್ರವರಿ_ಮಾರ್ಚ್_ಏಪ್ರಿಲ್_ಮೇ_ಜೂನ್_ಜುಲೈ_ಆಗಸ್ಟ್_ಸೆಪ್ಟೆಂಬರ್_ಅಕ್ಟೋಬರ್_ನವೆಂಬರ್_ಡಿಸೆಂಬರ್".split("_"), monthsShort: "ಜನ_ಫೆಬ್ರ_ಮಾರ್ಚ್_ಏಪ್ರಿಲ್_ಮೇ_ಜೂನ್_ಜುಲೈ_ಆಗಸ್ಟ್_ಸೆಪ್ಟೆಂ_ಅಕ್ಟೋ_ನವೆಂ_ಡಿಸೆಂ".split("_"), monthsParseExact: !0, weekdays: "ಭಾನುವಾರ_ಸೋಮವಾರ_ಮಂಗಳವಾರ_ಬುಧವಾರ_ಗುರುವಾರ_ಶುಕ್ರವಾರ_ಶನಿವಾರ".split("_"), weekdaysShort: "ಭಾನು_ಸೋಮ_ಮಂಗಳ_ಬುಧ_ಗುರು_ಶುಕ್ರ_ಶನಿ".split("_"), weekdaysMin: "ಭಾ_ಸೋ_ಮಂ_ಬು_ಗು_ಶು_ಶ".split("_"), longDateFormat: { LT: "A h:mm", LTS: "A h:mm:ss", L: "DD/MM/YYYY", LL: "D MMMM YYYY", LLL: "D MMMM YYYY, A h:mm", LLLL: "dddd, D MMMM YYYY, A h:mm" }, calendar: { sameDay: "[ಇಂದು] LT", nextDay: "[ನಾಳೆ] LT", nextWeek: "dddd, LT", lastDay: "[ನಿನ್ನೆ] LT", lastWeek: "[ಕೊನೆಯ] dddd, LT", sameElse: "L" }, relativeTime: { future: "%s ನಂತರ", past: "%s ಹಿಂದೆ", s: "ಕೆಲವು ಕ್ಷಣಗಳು", ss: "%d ಸೆಕೆಂಡುಗಳು", m: "ಒಂದು ನಿಮಿಷ", mm: "%d ನಿಮಿಷ", h: "ಒಂದು ಗಂಟೆ", hh: "%d ಗಂಟೆ", d: "ಒಂದು ದಿನ", dd: "%d ದಿನ", M: "ಒಂದು ತಿಂಗಳು", MM: "%d ತಿಂಗಳು", y: "ಒಂದು ವರ್ಷ", yy: "%d ವರ್ಷ" }, preparse: function (e) { return e.replace(/[೧೨೩೪೫೬೭೮೯೦]/g, function (e) { return a[e] }) }, postformat: function (e) { return e.replace(/\d/g, function (e) { return t[e] }) }, meridiemParse: /ರಾತ್ರಿ|ಬೆಳಿಗ್ಗೆ|ಮಧ್ಯಾಹ್ನ|ಸಂಜೆ/, meridiemHour: function (e, t) { return 12 === e && (e = 0), "ರಾತ್ರಿ" === t ? e < 4 ? e : e + 12 : "ಬೆಳಿಗ್ಗೆ" === t ? e : "ಮಧ್ಯಾಹ್ನ" === t ? e >= 10 ? e : e + 12 : "ಸಂಜೆ" === t ? e + 12 : void 0 }, meridiem: function (e, t, a) { return e < 4 ? "ರಾತ್ರಿ" : e < 10 ? "ಬೆಳಿಗ್ಗೆ" : e < 17 ? "ಮಧ್ಯಾಹ್ನ" : e < 20 ? "ಸಂಜೆ" : "ರಾತ್ರಿ" }, dayOfMonthOrdinalParse: /\d{1,2}(ನೇ)/, ordinal: function (e) { return e + "ನೇ" }, week: { dow: 0, doy: 6 } }) }(a(0)) }, function (e, t, a) { !function (e) { "use strict"; e.defineLocale("ko", { months: "1월_2월_3월_4월_5월_6월_7월_8월_9월_10월_11월_12월".split("_"), monthsShort: "1월_2월_3월_4월_5월_6월_7월_8월_9월_10월_11월_12월".split("_"), weekdays: "일요일_월요일_화요일_수요일_목요일_금요일_토요일".split("_"), weekdaysShort: "일_월_화_수_목_금_토".split("_"), weekdaysMin: "일_월_화_수_목_금_토".split("_"), longDateFormat: { LT: "A h:mm", LTS: "A h:mm:ss", L: "YYYY.MM.DD.", LL: "YYYY년 MMMM D일", LLL: "YYYY년 MMMM D일 A h:mm", LLLL: "YYYY년 MMMM D일 dddd A h:mm", l: "YYYY.MM.DD.", ll: "YYYY년 MMMM D일", lll: "YYYY년 MMMM D일 A h:mm", llll: "YYYY년 MMMM D일 dddd A h:mm" }, calendar: { sameDay: "오늘 LT", nextDay: "내일 LT", nextWeek: "dddd LT", lastDay: "어제 LT", lastWeek: "지난주 dddd LT", sameElse: "L" }, relativeTime: { future: "%s 후", past: "%s 전", s: "몇 초", ss: "%d초", m: "1분", mm: "%d분", h: "한 시간", hh: "%d시간", d: "하루", dd: "%d일", M: "한 달", MM: "%d달", y: "일 년", yy: "%d년" }, dayOfMonthOrdinalParse: /\d{1,2}(일|월|주)/, ordinal: function (e, t) { switch (t) { case "d": case "D": case "DDD": return e + "일"; case "M": return e + "월"; case "w": case "W": return e + "주"; default: return e } }, meridiemParse: /오전|오후/, isPM: function (e) { return "오후" === e }, meridiem: function (e, t, a) { return e < 12 ? "오전" : "오후" } }) }(a(0)) }, function (e, t, a) { !function (e) { "use strict"; var t = { 0: "-чү", 1: "-чи", 2: "-чи", 3: "-чү", 4: "-чү", 5: "-чи", 6: "-чы", 7: "-чи", 8: "-чи", 9: "-чу", 10: "-чу", 20: "-чы", 30: "-чу", 40: "-чы", 50: "-чү", 60: "-чы", 70: "-чи", 80: "-чи", 90: "-чу", 100: "-чү" }; e.defineLocale("ky", { months: "январь_февраль_март_апрель_май_июнь_июль_август_сентябрь_октябрь_ноябрь_декабрь".split("_"), monthsShort: "янв_фев_март_апр_май_июнь_июль_авг_сен_окт_ноя_дек".split("_"), weekdays: "Жекшемби_Дүйшөмбү_Шейшемби_Шаршемби_Бейшемби_Жума_Ишемби".split("_"), weekdaysShort: "Жек_Дүй_Шей_Шар_Бей_Жум_Ише".split("_"), weekdaysMin: "Жк_Дй_Шй_Шр_Бй_Жм_Иш".split("_"), longDateFormat: { LT: "HH:mm", LTS: "HH:mm:ss", L: "DD.MM.YYYY", LL: "D MMMM YYYY", LLL: "D MMMM YYYY HH:mm", LLLL: "dddd, D MMMM YYYY HH:mm" }, calendar: { sameDay: "[Бүгүн саат] LT", nextDay: "[Эртең саат] LT", nextWeek: "dddd [саат] LT", lastDay: "[Кече саат] LT", lastWeek: "[Өткен аптанын] dddd [күнү] [саат] LT", sameElse: "L" }, relativeTime: { future: "%s ичинде", past: "%s мурун", s: "бирнече секунд", ss: "%d секунд", m: "бир мүнөт", mm: "%d мүнөт", h: "бир саат", hh: "%d саат", d: "бир күн", dd: "%d күн", M: "бир ай", MM: "%d ай", y: "бир жыл", yy: "%d жыл" }, dayOfMonthOrdinalParse: /\d{1,2}-(чи|чы|чү|чу)/, ordinal: function (e) { var a = e % 10, n = e >= 100 ? 100 : null; return e + (t[e] || t[a] || t[n]) }, week: { dow: 1, doy: 7 } }) }(a(0)) }, function (e, t, a) { !function (e) { "use strict"; function t(e, t, a, n) { var s = { m: ["eng Minutt", "enger Minutt"], h: ["eng Stonn", "enger Stonn"], d: ["een Dag", "engem Dag"], M: ["ee Mount", "engem Mount"], y: ["ee Joer", "engem Joer"] }; return t ? s[a][0] : s[a][1] } function a(e) { if (e = parseInt(e, 10), isNaN(e)) return !1; if (e < 0) return !0; if (e < 10) return 4 <= e && e <= 7; if (e < 100) { var t = e % 10, n = e / 10; return a(0 === t ? n : t) } if (e < 1e4) { for (; e >= 10;)e /= 10; return a(e) } return a(e /= 1e3) } e.defineLocale("lb", { months: "Januar_Februar_Mäerz_Abrëll_Mee_Juni_Juli_August_September_Oktober_November_Dezember".split("_"), monthsShort: "Jan._Febr._Mrz._Abr._Mee_Jun._Jul._Aug._Sept._Okt._Nov._Dez.".split("_"), monthsParseExact: !0, weekdays: "Sonndeg_Méindeg_Dënschdeg_Mëttwoch_Donneschdeg_Freideg_Samschdeg".split("_"), weekdaysShort: "So._Mé._Dë._Më._Do._Fr._Sa.".split("_"), weekdaysMin: "So_Mé_Dë_Më_Do_Fr_Sa".split("_"), weekdaysParseExact: !0, longDateFormat: { LT: "H:mm [Auer]", LTS: "H:mm:ss [Auer]", L: "DD.MM.YYYY", LL: "D. MMMM YYYY", LLL: "D. MMMM YYYY H:mm [Auer]", LLLL: "dddd, D. MMMM YYYY H:mm [Auer]" }, calendar: { sameDay: "[Haut um] LT", sameElse: "L", nextDay: "[Muer um] LT", nextWeek: "dddd [um] LT", lastDay: "[Gëschter um] LT", lastWeek: function () { switch (this.day()) { case 2: case 4: return "[Leschten] dddd [um] LT"; default: return "[Leschte] dddd [um] LT" } } }, relativeTime: { future: function (e) { return a(e.substr(0, e.indexOf(" "))) ? "a " + e : "an " + e }, past: function (e) { return a(e.substr(0, e.indexOf(" "))) ? "viru " + e : "virun " + e }, s: "e puer Sekonnen", ss: "%d Sekonnen", m: t, mm: "%d Minutten", h: t, hh: "%d Stonnen", d: t, dd: "%d Deeg", M: t, MM: "%d Méint", y: t, yy: "%d Joer" }, dayOfMonthOrdinalParse: /\d{1,2}\./, ordinal: "%d.", week: { dow: 1, doy: 4 } }) }(a(0)) }, function (e, t, a) { !function (e) { "use strict"; e.defineLocale("lo", { months: "ມັງກອນ_ກຸມພາ_ມີນາ_ເມສາ_ພຶດສະພາ_ມິຖຸນາ_ກໍລະກົດ_ສິງຫາ_ກັນຍາ_ຕຸລາ_ພະຈິກ_ທັນວາ".split("_"), monthsShort: "ມັງກອນ_ກຸມພາ_ມີນາ_ເມສາ_ພຶດສະພາ_ມິຖຸນາ_ກໍລະກົດ_ສິງຫາ_ກັນຍາ_ຕຸລາ_ພະຈິກ_ທັນວາ".split("_"), weekdays: "ອາທິດ_ຈັນ_ອັງຄານ_ພຸດ_ພະຫັດ_ສຸກ_ເສົາ".split("_"), weekdaysShort: "ທິດ_ຈັນ_ອັງຄານ_ພຸດ_ພະຫັດ_ສຸກ_ເສົາ".split("_"), weekdaysMin: "ທ_ຈ_ອຄ_ພ_ພຫ_ສກ_ສ".split("_"), weekdaysParseExact: !0, longDateFormat: { LT: "HH:mm", LTS: "HH:mm:ss", L: "DD/MM/YYYY", LL: "D MMMM YYYY", LLL: "D MMMM YYYY HH:mm", LLLL: "ວັນdddd D MMMM YYYY HH:mm" }, meridiemParse: /ຕອນເຊົ້າ|ຕອນແລງ/, isPM: function (e) { return "ຕອນແລງ" === e }, meridiem: function (e, t, a) { return e < 12 ? "ຕອນເຊົ້າ" : "ຕອນແລງ" }, calendar: { sameDay: "[ມື້ນີ້ເວລາ] LT", nextDay: "[ມື້ອື່ນເວລາ] LT", nextWeek: "[ວັນ]dddd[ໜ້າເວລາ] LT", lastDay: "[ມື້ວານນີ້ເວລາ] LT", lastWeek: "[ວັນ]dddd[ແລ້ວນີ້ເວລາ] LT", sameElse: "L" }, relativeTime: { future: "ອີກ %s", past: "%sຜ່ານມາ", s: "ບໍ່ເທົ່າໃດວິນາທີ", ss: "%d ວິນາທີ", m: "1 ນາທີ", mm: "%d ນາທີ", h: "1 ຊົ່ວໂມງ", hh: "%d ຊົ່ວໂມງ", d: "1 ມື້", dd: "%d ມື້", M: "1 ເດືອນ", MM: "%d ເດືອນ", y: "1 ປີ", yy: "%d ປີ" }, dayOfMonthOrdinalParse: /(ທີ່)\d{1,2}/, ordinal: function (e) { return "ທີ່" + e } }) }(a(0)) }, function (e, t, a) { !function (e) { "use strict"; var t = { ss: "sekundė_sekundžių_sekundes", m: "minutė_minutės_minutę", mm: "minutės_minučių_minutes", h: "valanda_valandos_valandą", hh: "valandos_valandų_valandas", d: "diena_dienos_dieną", dd: "dienos_dienų_dienas", M: "mėnuo_mėnesio_mėnesį", MM: "mėnesiai_mėnesių_mėnesius", y: "metai_metų_metus", yy: "metai_metų_metus" }; function a(e, t, a, n) { return t ? s(a)[0] : n ? s(a)[1] : s(a)[2] } function n(e) { return e % 10 == 0 || e > 10 && e < 20 } function s(e) { return t[e].split("_") } function r(e, t, r, i) { var d = e + " "; return 1 === e ? d + a(0, t, r[0], i) : t ? d + (n(e) ? s(r)[1] : s(r)[0]) : i ? d + s(r)[1] : d + (n(e) ? s(r)[1] : s(r)[2]) } e.defineLocale("lt", { months: { format: "sausio_vasario_kovo_balandžio_gegužės_birželio_liepos_rugpjūčio_rugsėjo_spalio_lapkričio_gruodžio".split("_"), standalone: "sausis_vasaris_kovas_balandis_gegužė_birželis_liepa_rugpjūtis_rugsėjis_spalis_lapkritis_gruodis".split("_"), isFormat: /D[oD]?(\[[^\[\]]*\]|\s)+MMMM?|MMMM?(\[[^\[\]]*\]|\s)+D[oD]?/ }, monthsShort: "sau_vas_kov_bal_geg_bir_lie_rgp_rgs_spa_lap_grd".split("_"), weekdays: { format: "sekmadienį_pirmadienį_antradienį_trečiadienį_ketvirtadienį_penktadienį_šeštadienį".split("_"), standalone: "sekmadienis_pirmadienis_antradienis_trečiadienis_ketvirtadienis_penktadienis_šeštadienis".split("_"), isFormat: /dddd HH:mm/ }, weekdaysShort: "Sek_Pir_Ant_Tre_Ket_Pen_Šeš".split("_"), weekdaysMin: "S_P_A_T_K_Pn_Š".split("_"), weekdaysParseExact: !0, longDateFormat: { LT: "HH:mm", LTS: "HH:mm:ss", L: "YYYY-MM-DD", LL: "YYYY [m.] MMMM D [d.]", LLL: "YYYY [m.] MMMM D [d.], HH:mm [val.]", LLLL: "YYYY [m.] MMMM D [d.], dddd, HH:mm [val.]", l: "YYYY-MM-DD", ll: "YYYY [m.] MMMM D [d.]", lll: "YYYY [m.] MMMM D [d.], HH:mm [val.]", llll: "YYYY [m.] MMMM D [d.], ddd, HH:mm [val.]" }, calendar: { sameDay: "[Šiandien] LT", nextDay: "[Rytoj] LT", nextWeek: "dddd LT", lastDay: "[Vakar] LT", lastWeek: "[Praėjusį] dddd LT", sameElse: "L" }, relativeTime: { future: "po %s", past: "prieš %s", s: function (e, t, a, n) { return t ? "kelios sekundės" : n ? "kelių sekundžių" : "kelias sekundes" }, ss: r, m: a, mm: r, h: a, hh: r, d: a, dd: r, M: a, MM: r, y: a, yy: r }, dayOfMonthOrdinalParse: /\d{1,2}-oji/, ordinal: function (e) { return e + "-oji" }, week: { dow: 1, doy: 4 } }) }(a(0)) }, function (e, t, a) { !function (e) { "use strict"; var t = { ss: "sekundes_sekundēm_sekunde_sekundes".split("_"), m: "minūtes_minūtēm_minūte_minūtes".split("_"), mm: "minūtes_minūtēm_minūte_minūtes".split("_"), h: "stundas_stundām_stunda_stundas".split("_"), hh: "stundas_stundām_stunda_stundas".split("_"), d: "dienas_dienām_diena_dienas".split("_"), dd: "dienas_dienām_diena_dienas".split("_"), M: "mēneša_mēnešiem_mēnesis_mēneši".split("_"), MM: "mēneša_mēnešiem_mēnesis_mēneši".split("_"), y: "gada_gadiem_gads_gadi".split("_"), yy: "gada_gadiem_gads_gadi".split("_") }; function a(e, t, a) { return a ? t % 10 == 1 && t % 100 != 11 ? e[2] : e[3] : t % 10 == 1 && t % 100 != 11 ? e[0] : e[1] } function n(e, n, s) { return e + " " + a(t[s], e, n) } function s(e, n, s) { return a(t[s], e, n) } e.defineLocale("lv", { months: "janvāris_februāris_marts_aprīlis_maijs_jūnijs_jūlijs_augusts_septembris_oktobris_novembris_decembris".split("_"), monthsShort: "jan_feb_mar_apr_mai_jūn_jūl_aug_sep_okt_nov_dec".split("_"), weekdays: "svētdiena_pirmdiena_otrdiena_trešdiena_ceturtdiena_piektdiena_sestdiena".split("_"), weekdaysShort: "Sv_P_O_T_C_Pk_S".split("_"), weekdaysMin: "Sv_P_O_T_C_Pk_S".split("_"), weekdaysParseExact: !0, longDateFormat: { LT: "HH:mm", LTS: "HH:mm:ss", L: "DD.MM.YYYY.", LL: "YYYY. [gada] D. MMMM", LLL: "YYYY. [gada] D. MMMM, HH:mm", LLLL: "YYYY. [gada] D. MMMM, dddd, HH:mm" }, calendar: { sameDay: "[Šodien pulksten] LT", nextDay: "[Rīt pulksten] LT", nextWeek: "dddd [pulksten] LT", lastDay: "[Vakar pulksten] LT", lastWeek: "[Pagājušā] dddd [pulksten] LT", sameElse: "L" }, relativeTime: { future: "pēc %s", past: "pirms %s", s: function (e, t) { return t ? "dažas sekundes" : "dažām sekundēm" }, ss: n, m: s, mm: n, h: s, hh: n, d: s, dd: n, M: s, MM: n, y: s, yy: n }, dayOfMonthOrdinalParse: /\d{1,2}\./, ordinal: "%d.", week: { dow: 1, doy: 4 } }) }(a(0)) }, function (e, t, a) { !function (e) { "use strict"; var t = { words: { ss: ["sekund", "sekunda", "sekundi"], m: ["jedan minut", "jednog minuta"], mm: ["minut", "minuta", "minuta"], h: ["jedan sat", "jednog sata"], hh: ["sat", "sata", "sati"], dd: ["dan", "dana", "dana"], MM: ["mjesec", "mjeseca", "mjeseci"], yy: ["godina", "godine", "godina"] }, correctGrammaticalCase: function (e, t) { return 1 === e ? t[0] : e >= 2 && e <= 4 ? t[1] : t[2] }, translate: function (e, a, n) { var s = t.words[n]; return 1 === n.length ? a ? s[0] : s[1] : e + " " + t.correctGrammaticalCase(e, s) } }; e.defineLocale("me", { months: "januar_februar_mart_april_maj_jun_jul_avgust_septembar_oktobar_novembar_decembar".split("_"), monthsShort: "jan._feb._mar._apr._maj_jun_jul_avg._sep._okt._nov._dec.".split("_"), monthsParseExact: !0, weekdays: "nedjelja_ponedjeljak_utorak_srijeda_četvrtak_petak_subota".split("_"), weekdaysShort: "ned._pon._uto._sri._čet._pet._sub.".split("_"), weekdaysMin: "ne_po_ut_sr_če_pe_su".split("_"), weekdaysParseExact: !0, longDateFormat: { LT: "H:mm", LTS: "H:mm:ss", L: "DD.MM.YYYY", LL: "D. MMMM YYYY", LLL: "D. MMMM YYYY H:mm", LLLL: "dddd, D. MMMM YYYY H:mm" }, calendar: { sameDay: "[danas u] LT", nextDay: "[sjutra u] LT", nextWeek: function () { switch (this.day()) { case 0: return "[u] [nedjelju] [u] LT"; case 3: return "[u] [srijedu] [u] LT"; case 6: return "[u] [subotu] [u] LT"; case 1: case 2: case 4: case 5: return "[u] dddd [u] LT" } }, lastDay: "[juče u] LT", lastWeek: function () { return ["[prošle] [nedjelje] [u] LT", "[prošlog] [ponedjeljka] [u] LT", "[prošlog] [utorka] [u] LT", "[prošle] [srijede] [u] LT", "[prošlog] [četvrtka] [u] LT", "[prošlog] [petka] [u] LT", "[prošle] [subote] [u] LT"][this.day()] }, sameElse: "L" }, relativeTime: { future: "za %s", past: "prije %s", s: "nekoliko sekundi", ss: t.translate, m: t.translate, mm: t.translate, h: t.translate, hh: t.translate, d: "dan", dd: t.translate, M: "mjesec", MM: t.translate, y: "godinu", yy: t.translate }, dayOfMonthOrdinalParse: /\d{1,2}\./, ordinal: "%d.", week: { dow: 1, doy: 7 } }) }(a(0)) }, function (e, t, a) { !function (e) { "use strict"; e.defineLocale("mi", { months: "Kohi-tāte_Hui-tanguru_Poutū-te-rangi_Paenga-whāwhā_Haratua_Pipiri_Hōngoingoi_Here-turi-kōkā_Mahuru_Whiringa-ā-nuku_Whiringa-ā-rangi_Hakihea".split("_"), monthsShort: "Kohi_Hui_Pou_Pae_Hara_Pipi_Hōngoi_Here_Mahu_Whi-nu_Whi-ra_Haki".split("_"), monthsRegex: /(?:['a-z\u0101\u014D\u016B]+\-?){1,3}/i, monthsStrictRegex: /(?:['a-z\u0101\u014D\u016B]+\-?){1,3}/i, monthsShortRegex: /(?:['a-z\u0101\u014D\u016B]+\-?){1,3}/i, monthsShortStrictRegex: /(?:['a-z\u0101\u014D\u016B]+\-?){1,2}/i, weekdays: "Rātapu_Mane_Tūrei_Wenerei_Tāite_Paraire_Hātarei".split("_"), weekdaysShort: "Ta_Ma_Tū_We_Tāi_Pa_Hā".split("_"), weekdaysMin: "Ta_Ma_Tū_We_Tāi_Pa_Hā".split("_"), longDateFormat: { LT: "HH:mm", LTS: "HH:mm:ss", L: "DD/MM/YYYY", LL: "D MMMM YYYY", LLL: "D MMMM YYYY [i] HH:mm", LLLL: "dddd, D MMMM YYYY [i] HH:mm" }, calendar: { sameDay: "[i teie mahana, i] LT", nextDay: "[apopo i] LT", nextWeek: "dddd [i] LT", lastDay: "[inanahi i] LT", lastWeek: "dddd [whakamutunga i] LT", sameElse: "L" }, relativeTime: { future: "i roto i %s", past: "%s i mua", s: "te hēkona ruarua", ss: "%d hēkona", m: "he meneti", mm: "%d meneti", h: "te haora", hh: "%d haora", d: "he ra", dd: "%d ra", M: "he marama", MM: "%d marama", y: "he tau", yy: "%d tau" }, dayOfMonthOrdinalParse: /\d{1,2}º/, ordinal: "%dº", week: { dow: 1, doy: 4 } }) }(a(0)) }, function (e, t, a) { !function (e) { "use strict"; e.defineLocale("mk", { months: "јануари_февруари_март_април_мај_јуни_јули_август_септември_октомври_ноември_декември".split("_"), monthsShort: "јан_фев_мар_апр_мај_јун_јул_авг_сеп_окт_ное_дек".split("_"), weekdays: "недела_понеделник_вторник_среда_четврток_петок_сабота".split("_"), weekdaysShort: "нед_пон_вто_сре_чет_пет_саб".split("_"), weekdaysMin: "нe_пo_вт_ср_че_пе_сa".split("_"), longDateFormat: { LT: "H:mm", LTS: "H:mm:ss", L: "D.MM.YYYY", LL: "D MMMM YYYY", LLL: "D MMMM YYYY H:mm", LLLL: "dddd, D MMMM YYYY H:mm" }, calendar: { sameDay: "[Денес во] LT", nextDay: "[Утре во] LT", nextWeek: "[Во] dddd [во] LT", lastDay: "[Вчера во] LT", lastWeek: function () { switch (this.day()) { case 0: case 3: case 6: return "[Изминатата] dddd [во] LT"; case 1: case 2: case 4: case 5: return "[Изминатиот] dddd [во] LT" } }, sameElse: "L" }, relativeTime: { future: "после %s", past: "пред %s", s: "неколку секунди", ss: "%d секунди", m: "минута", mm: "%d минути", h: "час", hh: "%d часа", d: "ден", dd: "%d дена", M: "месец", MM: "%d месеци", y: "година", yy: "%d години" }, dayOfMonthOrdinalParse: /\d{1,2}-(ев|ен|ти|ви|ри|ми)/, ordinal: function (e) { var t = e % 10, a = e % 100; return 0 === e ? e + "-ев" : 0 === a ? e + "-ен" : a > 10 && a < 20 ? e + "-ти" : 1 === t ? e + "-ви" : 2 === t ? e + "-ри" : 7 === t || 8 === t ? e + "-ми" : e + "-ти" }, week: { dow: 1, doy: 7 } }) }(a(0)) }, function (e, t, a) { !function (e) { "use strict"; e.defineLocale("ml", { months: "ജനുവരി_ഫെബ്രുവരി_മാർച്ച്_ഏപ്രിൽ_മേയ്_ജൂൺ_ജൂലൈ_ഓഗസ്റ്റ്_സെപ്റ്റംബർ_ഒക്ടോബർ_നവംബർ_ഡിസംബർ".split("_"), monthsShort: "ജനു._ഫെബ്രു._മാർ._ഏപ്രി._മേയ്_ജൂൺ_ജൂലൈ._ഓഗ._സെപ്റ്റ._ഒക്ടോ._നവം._ഡിസം.".split("_"), monthsParseExact: !0, weekdays: "ഞായറാഴ്ച_തിങ്കളാഴ്ച_ചൊവ്വാഴ്ച_ബുധനാഴ്ച_വ്യാഴാഴ്ച_വെള്ളിയാഴ്ച_ശനിയാഴ്ച".split("_"), weekdaysShort: "ഞായർ_തിങ്കൾ_ചൊവ്വ_ബുധൻ_വ്യാഴം_വെള്ളി_ശനി".split("_"), weekdaysMin: "ഞാ_തി_ചൊ_ബു_വ്യാ_വെ_ശ".split("_"), longDateFormat: { LT: "A h:mm -നു", LTS: "A h:mm:ss -നു", L: "DD/MM/YYYY", LL: "D MMMM YYYY", LLL: "D MMMM YYYY, A h:mm -നു", LLLL: "dddd, D MMMM YYYY, A h:mm -നു" }, calendar: { sameDay: "[ഇന്ന്] LT", nextDay: "[നാളെ] LT", nextWeek: "dddd, LT", lastDay: "[ഇന്നലെ] LT", lastWeek: "[കഴിഞ്ഞ] dddd, LT", sameElse: "L" }, relativeTime: { future: "%s കഴിഞ്ഞ്", past: "%s മുൻപ്", s: "അൽപ നിമിഷങ്ങൾ", ss: "%d സെക്കൻഡ്", m: "ഒരു മിനിറ്റ്", mm: "%d മിനിറ്റ്", h: "ഒരു മണിക്കൂർ", hh: "%d മണിക്കൂർ", d: "ഒരു ദിവസം", dd: "%d ദിവസം", M: "ഒരു മാസം", MM: "%d മാസം", y: "ഒരു വർഷം", yy: "%d വർഷം" }, meridiemParse: /രാത്രി|രാവിലെ|ഉച്ച കഴിഞ്ഞ്|വൈകുന്നേരം|രാത്രി/i, meridiemHour: function (e, t) { return 12 === e && (e = 0), "രാത്രി" === t && e >= 4 || "ഉച്ച കഴിഞ്ഞ്" === t || "വൈകുന്നേരം" === t ? e + 12 : e }, meridiem: function (e, t, a) { return e < 4 ? "രാത്രി" : e < 12 ? "രാവിലെ" : e < 17 ? "ഉച്ച കഴിഞ്ഞ്" : e < 20 ? "വൈകുന്നേരം" : "രാത്രി" } }) }(a(0)) }, function (e, t, a) { !function (e) { "use strict"; function t(e, t, a, n) { switch (a) { case "s": return t ? "хэдхэн секунд" : "хэдхэн секундын"; case "ss": return e + (t ? " секунд" : " секундын"); case "m": case "mm": return e + (t ? " минут" : " минутын"); case "h": case "hh": return e + (t ? " цаг" : " цагийн"); case "d": case "dd": return e + (t ? " өдөр" : " өдрийн"); case "M": case "MM": return e + (t ? " сар" : " сарын"); case "y": case "yy": return e + (t ? " жил" : " жилийн"); default: return e } } e.defineLocale("mn", { months: "Нэгдүгээр сар_Хоёрдугаар сар_Гуравдугаар сар_Дөрөвдүгээр сар_Тавдугаар сар_Зургадугаар сар_Долдугаар сар_Наймдугаар сар_Есдүгээр сар_Аравдугаар сар_Арван нэгдүгээр сар_Арван хоёрдугаар сар".split("_"), monthsShort: "1 сар_2 сар_3 сар_4 сар_5 сар_6 сар_7 сар_8 сар_9 сар_10 сар_11 сар_12 сар".split("_"), monthsParseExact: !0, weekdays: "Ням_Даваа_Мягмар_Лхагва_Пүрэв_Баасан_Бямба".split("_"), weekdaysShort: "Ням_Дав_Мяг_Лха_Пүр_Баа_Бям".split("_"), weekdaysMin: "Ня_Да_Мя_Лх_Пү_Ба_Бя".split("_"), weekdaysParseExact: !0, longDateFormat: { LT: "HH:mm", LTS: "HH:mm:ss", L: "YYYY-MM-DD", LL: "YYYY оны MMMMын D", LLL: "YYYY оны MMMMын D HH:mm", LLLL: "dddd, YYYY оны MMMMын D HH:mm" }, meridiemParse: /ҮӨ|ҮХ/i, isPM: function (e) { return "ҮХ" === e }, meridiem: function (e, t, a) { return e < 12 ? "ҮӨ" : "ҮХ" }, calendar: { sameDay: "[Өнөөдөр] LT", nextDay: "[Маргааш] LT", nextWeek: "[Ирэх] dddd LT", lastDay: "[Өчигдөр] LT", lastWeek: "[Өнгөрсөн] dddd LT", sameElse: "L" }, relativeTime: { future: "%s дараа", past: "%s өмнө", s: t, ss: t, m: t, mm: t, h: t, hh: t, d: t, dd: t, M: t, MM: t, y: t, yy: t }, dayOfMonthOrdinalParse: /\d{1,2} өдөр/, ordinal: function (e, t) { switch (t) { case "d": case "D": case "DDD": return e + " өдөр"; default: return e } } }) }(a(0)) }, function (e, t, a) { !function (e) { "use strict"; var t = { 1: "१", 2: "२", 3: "३", 4: "४", 5: "५", 6: "६", 7: "७", 8: "८", 9: "९", 0: "०" }, a = { "१": "1", "२": "2", "३": "3", "४": "4", "५": "5", "६": "6", "७": "7", "८": "8", "९": "9", "०": "0" }; function n(e, t, a, n) { var s = ""; if (t) switch (a) { case "s": s = "काही सेकंद"; break; case "ss": s = "%d सेकंद"; break; case "m": s = "एक मिनिट"; break; case "mm": s = "%d मिनिटे"; break; case "h": s = "एक तास"; break; case "hh": s = "%d तास"; break; case "d": s = "एक दिवस"; break; case "dd": s = "%d दिवस"; break; case "M": s = "एक महिना"; break; case "MM": s = "%d महिने"; break; case "y": s = "एक वर्ष"; break; case "yy": s = "%d वर्षे" } else switch (a) { case "s": s = "काही सेकंदां"; break; case "ss": s = "%d सेकंदां"; break; case "m": s = "एका मिनिटा"; break; case "mm": s = "%d मिनिटां"; break; case "h": s = "एका तासा"; break; case "hh": s = "%d तासां"; break; case "d": s = "एका दिवसा"; break; case "dd": s = "%d दिवसां"; break; case "M": s = "एका महिन्या"; break; case "MM": s = "%d महिन्यां"; break; case "y": s = "एका वर्षा"; break; case "yy": s = "%d वर्षां" }return s.replace(/%d/i, e) } e.defineLocale("mr", { months: "जानेवारी_फेब्रुवारी_मार्च_एप्रिल_मे_जून_जुलै_ऑगस्ट_सप्टेंबर_ऑक्टोबर_नोव्हेंबर_डिसेंबर".split("_"), monthsShort: "जाने._फेब्रु._मार्च._एप्रि._मे._जून._जुलै._ऑग._सप्टें._ऑक्टो._नोव्हें._डिसें.".split("_"), monthsParseExact: !0, weekdays: "रविवार_सोमवार_मंगळवार_बुधवार_गुरूवार_शुक्रवार_शनिवार".split("_"), weekdaysShort: "रवि_सोम_मंगळ_बुध_गुरू_शुक्र_शनि".split("_"), weekdaysMin: "र_सो_मं_बु_गु_शु_श".split("_"), longDateFormat: { LT: "A h:mm वाजता", LTS: "A h:mm:ss वाजता", L: "DD/MM/YYYY", LL: "D MMMM YYYY", LLL: "D MMMM YYYY, A h:mm वाजता", LLLL: "dddd, D MMMM YYYY, A h:mm वाजता" }, calendar: { sameDay: "[आज] LT", nextDay: "[उद्या] LT", nextWeek: "dddd, LT", lastDay: "[काल] LT", lastWeek: "[मागील] dddd, LT", sameElse: "L" }, relativeTime: { future: "%sमध्ये", past: "%sपूर्वी", s: n, ss: n, m: n, mm: n, h: n, hh: n, d: n, dd: n, M: n, MM: n, y: n, yy: n }, preparse: function (e) { return e.replace(/[१२३४५६७८९०]/g, function (e) { return a[e] }) }, postformat: function (e) { return e.replace(/\d/g, function (e) { return t[e] }) }, meridiemParse: /रात्री|सकाळी|दुपारी|सायंकाळी/, meridiemHour: function (e, t) { return 12 === e && (e = 0), "रात्री" === t ? e < 4 ? e : e + 12 : "सकाळी" === t ? e : "दुपारी" === t ? e >= 10 ? e : e + 12 : "सायंकाळी" === t ? e + 12 : void 0 }, meridiem: function (e, t, a) { return e < 4 ? "रात्री" : e < 10 ? "सकाळी" : e < 17 ? "दुपारी" : e < 20 ? "सायंकाळी" : "रात्री" }, week: { dow: 0, doy: 6 } }) }(a(0)) }, function (e, t, a) { !function (e) { "use strict"; e.defineLocale("ms", { months: "Januari_Februari_Mac_April_Mei_Jun_Julai_Ogos_September_Oktober_November_Disember".split("_"), monthsShort: "Jan_Feb_Mac_Apr_Mei_Jun_Jul_Ogs_Sep_Okt_Nov_Dis".split("_"), weekdays: "Ahad_Isnin_Selasa_Rabu_Khamis_Jumaat_Sabtu".split("_"), weekdaysShort: "Ahd_Isn_Sel_Rab_Kha_Jum_Sab".split("_"), weekdaysMin: "Ah_Is_Sl_Rb_Km_Jm_Sb".split("_"), longDateFormat: { LT: "HH.mm", LTS: "HH.mm.ss", L: "DD/MM/YYYY", LL: "D MMMM YYYY", LLL: "D MMMM YYYY [pukul] HH.mm", LLLL: "dddd, D MMMM YYYY [pukul] HH.mm" }, meridiemParse: /pagi|tengahari|petang|malam/, meridiemHour: function (e, t) { return 12 === e && (e = 0), "pagi" === t ? e : "tengahari" === t ? e >= 11 ? e : e + 12 : "petang" === t || "malam" === t ? e + 12 : void 0 }, meridiem: function (e, t, a) { return e < 11 ? "pagi" : e < 15 ? "tengahari" : e < 19 ? "petang" : "malam" }, calendar: { sameDay: "[Hari ini pukul] LT", nextDay: "[Esok pukul] LT", nextWeek: "dddd [pukul] LT", lastDay: "[Kelmarin pukul] LT", lastWeek: "dddd [lepas pukul] LT", sameElse: "L" }, relativeTime: { future: "dalam %s", past: "%s yang lepas", s: "beberapa saat", ss: "%d saat", m: "seminit", mm: "%d minit", h: "sejam", hh: "%d jam", d: "sehari", dd: "%d hari", M: "sebulan", MM: "%d bulan", y: "setahun", yy: "%d tahun" }, week: { dow: 1, doy: 7 } }) }(a(0)) }, function (e, t, a) { !function (e) { "use strict"; e.defineLocale("ms-my", { months: "Januari_Februari_Mac_April_Mei_Jun_Julai_Ogos_September_Oktober_November_Disember".split("_"), monthsShort: "Jan_Feb_Mac_Apr_Mei_Jun_Jul_Ogs_Sep_Okt_Nov_Dis".split("_"), weekdays: "Ahad_Isnin_Selasa_Rabu_Khamis_Jumaat_Sabtu".split("_"), weekdaysShort: "Ahd_Isn_Sel_Rab_Kha_Jum_Sab".split("_"), weekdaysMin: "Ah_Is_Sl_Rb_Km_Jm_Sb".split("_"), longDateFormat: { LT: "HH.mm", LTS: "HH.mm.ss", L: "DD/MM/YYYY", LL: "D MMMM YYYY", LLL: "D MMMM YYYY [pukul] HH.mm", LLLL: "dddd, D MMMM YYYY [pukul] HH.mm" }, meridiemParse: /pagi|tengahari|petang|malam/, meridiemHour: function (e, t) { return 12 === e && (e = 0), "pagi" === t ? e : "tengahari" === t ? e >= 11 ? e : e + 12 : "petang" === t || "malam" === t ? e + 12 : void 0 }, meridiem: function (e, t, a) { return e < 11 ? "pagi" : e < 15 ? "tengahari" : e < 19 ? "petang" : "malam" }, calendar: { sameDay: "[Hari ini pukul] LT", nextDay: "[Esok pukul] LT", nextWeek: "dddd [pukul] LT", lastDay: "[Kelmarin pukul] LT", lastWeek: "dddd [lepas pukul] LT", sameElse: "L" }, relativeTime: { future: "dalam %s", past: "%s yang lepas", s: "beberapa saat", ss: "%d saat", m: "seminit", mm: "%d minit", h: "sejam", hh: "%d jam", d: "sehari", dd: "%d hari", M: "sebulan", MM: "%d bulan", y: "setahun", yy: "%d tahun" }, week: { dow: 1, doy: 7 } }) }(a(0)) }, function (e, t, a) { !function (e) { "use strict"; e.defineLocale("mt", { months: "Jannar_Frar_Marzu_April_Mejju_Ġunju_Lulju_Awwissu_Settembru_Ottubru_Novembru_Diċembru".split("_"), monthsShort: "Jan_Fra_Mar_Apr_Mej_Ġun_Lul_Aww_Set_Ott_Nov_Diċ".split("_"), weekdays: "Il-Ħadd_It-Tnejn_It-Tlieta_L-Erbgħa_Il-Ħamis_Il-Ġimgħa_Is-Sibt".split("_"), weekdaysShort: "Ħad_Tne_Tli_Erb_Ħam_Ġim_Sib".split("_"), weekdaysMin: "Ħa_Tn_Tl_Er_Ħa_Ġi_Si".split("_"), longDateFormat: { LT: "HH:mm", LTS: "HH:mm:ss", L: "DD/MM/YYYY", LL: "D MMMM YYYY", LLL: "D MMMM YYYY HH:mm", LLLL: "dddd, D MMMM YYYY HH:mm" }, calendar: { sameDay: "[Illum fil-]LT", nextDay: "[Għada fil-]LT", nextWeek: "dddd [fil-]LT", lastDay: "[Il-bieraħ fil-]LT", lastWeek: "dddd [li għadda] [fil-]LT", sameElse: "L" }, relativeTime: { future: "f’ %s", past: "%s ilu", s: "ftit sekondi", ss: "%d sekondi", m: "minuta", mm: "%d minuti", h: "siegħa", hh: "%d siegħat", d: "ġurnata", dd: "%d ġranet", M: "xahar", MM: "%d xhur", y: "sena", yy: "%d sni" }, dayOfMonthOrdinalParse: /\d{1,2}º/, ordinal: "%dº", week: { dow: 1, doy: 4 } }) }(a(0)) }, function (e, t, a) { !function (e) { "use strict"; var t = { 1: "၁", 2: "၂", 3: "၃", 4: "၄", 5: "၅", 6: "၆", 7: "၇", 8: "၈", 9: "၉", 0: "၀" }, a = { "၁": "1", "၂": "2", "၃": "3", "၄": "4", "၅": "5", "၆": "6", "၇": "7", "၈": "8", "၉": "9", "၀": "0" }; e.defineLocale("my", { months: "ဇန်နဝါရီ_ဖေဖော်ဝါရီ_မတ်_ဧပြီ_မေ_ဇွန်_ဇူလိုင်_သြဂုတ်_စက်တင်ဘာ_အောက်တိုဘာ_နိုဝင်ဘာ_ဒီဇင်ဘာ".split("_"), monthsShort: "ဇန်_ဖေ_မတ်_ပြီ_မေ_ဇွန်_လိုင်_သြ_စက်_အောက်_နို_ဒီ".split("_"), weekdays: "တနင်္ဂနွေ_တနင်္လာ_အင်္ဂါ_ဗုဒ္ဓဟူး_ကြာသပတေး_သောကြာ_စနေ".split("_"), weekdaysShort: "နွေ_လာ_ဂါ_ဟူး_ကြာ_သော_နေ".split("_"), weekdaysMin: "နွေ_လာ_ဂါ_ဟူး_ကြာ_သော_နေ".split("_"), longDateFormat: { LT: "HH:mm", LTS: "HH:mm:ss", L: "DD/MM/YYYY", LL: "D MMMM YYYY", LLL: "D MMMM YYYY HH:mm", LLLL: "dddd D MMMM YYYY HH:mm" }, calendar: { sameDay: "[ယနေ.] LT [မှာ]", nextDay: "[မနက်ဖြန်] LT [မှာ]", nextWeek: "dddd LT [မှာ]", lastDay: "[မနေ.က] LT [မှာ]", lastWeek: "[ပြီးခဲ့သော] dddd LT [မှာ]", sameElse: "L" }, relativeTime: { future: "လာမည့် %s မှာ", past: "လွန်ခဲ့သော %s က", s: "စက္ကန်.အနည်းငယ်", ss: "%d စက္ကန့်", m: "တစ်မိနစ်", mm: "%d မိနစ်", h: "တစ်နာရီ", hh: "%d နာရီ", d: "တစ်ရက်", dd: "%d ရက်", M: "တစ်လ", MM: "%d လ", y: "တစ်နှစ်", yy: "%d နှစ်" }, preparse: function (e) { return e.replace(/[၁၂၃၄၅၆၇၈၉၀]/g, function (e) { return a[e] }) }, postformat: function (e) { return e.replace(/\d/g, function (e) { return t[e] }) }, week: { dow: 1, doy: 4 } }) }(a(0)) }, function (e, t, a) { !function (e) { "use strict"; e.defineLocale("nb", { months: "januar_februar_mars_april_mai_juni_juli_august_september_oktober_november_desember".split("_"), monthsShort: "jan._feb._mars_april_mai_juni_juli_aug._sep._okt._nov._des.".split("_"), monthsParseExact: !0, weekdays: "søndag_mandag_tirsdag_onsdag_torsdag_fredag_lørdag".split("_"), weekdaysShort: "sø._ma._ti._on._to._fr._lø.".split("_"), weekdaysMin: "sø_ma_ti_on_to_fr_lø".split("_"), weekdaysParseExact: !0, longDateFormat: { LT: "HH:mm", LTS: "HH:mm:ss", L: "DD.MM.YYYY", LL: "D. MMMM YYYY", LLL: "D. MMMM YYYY [kl.] HH:mm", LLLL: "dddd D. MMMM YYYY [kl.] HH:mm" }, calendar: { sameDay: "[i dag kl.] LT", nextDay: "[i morgen kl.] LT", nextWeek: "dddd [kl.] LT", lastDay: "[i går kl.] LT", lastWeek: "[forrige] dddd [kl.] LT", sameElse: "L" }, relativeTime: { future: "om %s", past: "%s siden", s: "noen sekunder", ss: "%d sekunder", m: "ett minutt", mm: "%d minutter", h: "en time", hh: "%d timer", d: "en dag", dd: "%d dager", M: "en måned", MM: "%d måneder", y: "ett år", yy: "%d år" }, dayOfMonthOrdinalParse: /\d{1,2}\./, ordinal: "%d.", week: { dow: 1, doy: 4 } }) }(a(0)) }, function (e, t, a) { !function (e) { "use strict"; var t = { 1: "१", 2: "२", 3: "३", 4: "४", 5: "५", 6: "६", 7: "७", 8: "८", 9: "९", 0: "०" }, a = { "१": "1", "२": "2", "३": "3", "४": "4", "५": "5", "६": "6", "७": "7", "८": "8", "९": "9", "०": "0" }; e.defineLocale("ne", { months: "जनवरी_फेब्रुवरी_मार्च_अप्रिल_मई_जुन_जुलाई_अगष्ट_सेप्टेम्बर_अक्टोबर_नोभेम्बर_डिसेम्बर".split("_"), monthsShort: "जन._फेब्रु._मार्च_अप्रि._मई_जुन_जुलाई._अग._सेप्ट._अक्टो._नोभे._डिसे.".split("_"), monthsParseExact: !0, weekdays: "आइतबार_सोमबार_मङ्गलबार_बुधबार_बिहिबार_शुक्रबार_शनिबार".split("_"), weekdaysShort: "आइत._सोम._मङ्गल._बुध._बिहि._शुक्र._शनि.".split("_"), weekdaysMin: "आ._सो._मं._बु._बि._शु._श.".split("_"), weekdaysParseExact: !0, longDateFormat: { LT: "Aको h:mm बजे", LTS: "Aको h:mm:ss बजे", L: "DD/MM/YYYY", LL: "D MMMM YYYY", LLL: "D MMMM YYYY, Aको h:mm बजे", LLLL: "dddd, D MMMM YYYY, Aको h:mm बजे" }, preparse: function (e) { return e.replace(/[१२३४५६७८९०]/g, function (e) { return a[e] }) }, postformat: function (e) { return e.replace(/\d/g, function (e) { return t[e] }) }, meridiemParse: /राति|बिहान|दिउँसो|साँझ/, meridiemHour: function (e, t) { return 12 === e && (e = 0), "राति" === t ? e < 4 ? e : e + 12 : "बिहान" === t ? e : "दिउँसो" === t ? e >= 10 ? e : e + 12 : "साँझ" === t ? e + 12 : void 0 }, meridiem: function (e, t, a) { return e < 3 ? "राति" : e < 12 ? "बिहान" : e < 16 ? "दिउँसो" : e < 20 ? "साँझ" : "राति" }, calendar: { sameDay: "[आज] LT", nextDay: "[भोलि] LT", nextWeek: "[आउँदो] dddd[,] LT", lastDay: "[हिजो] LT", lastWeek: "[गएको] dddd[,] LT", sameElse: "L" }, relativeTime: { future: "%sमा", past: "%s अगाडि", s: "केही क्षण", ss: "%d सेकेण्ड", m: "एक मिनेट", mm: "%d मिनेट", h: "एक घण्टा", hh: "%d घण्टा", d: "एक दिन", dd: "%d दिन", M: "एक महिना", MM: "%d महिना", y: "एक बर्ष", yy: "%d बर्ष" }, week: { dow: 0, doy: 6 } }) }(a(0)) }, function (e, t, a) { !function (e) { "use strict"; var t = "jan._feb._mrt._apr._mei_jun._jul._aug._sep._okt._nov._dec.".split("_"), a = "jan_feb_mrt_apr_mei_jun_jul_aug_sep_okt_nov_dec".split("_"), n = [/^jan/i, /^feb/i, /^maart|mrt.?$/i, /^apr/i, /^mei$/i, /^jun[i.]?$/i, /^jul[i.]?$/i, /^aug/i, /^sep/i, /^okt/i, /^nov/i, /^dec/i], s = /^(januari|februari|maart|april|mei|april|ju[nl]i|augustus|september|oktober|november|december|jan\.?|feb\.?|mrt\.?|apr\.?|ju[nl]\.?|aug\.?|sep\.?|okt\.?|nov\.?|dec\.?)/i; e.defineLocale("nl", { months: "januari_februari_maart_april_mei_juni_juli_augustus_september_oktober_november_december".split("_"), monthsShort: function (e, n) { return e ? /-MMM-/.test(n) ? a[e.month()] : t[e.month()] : t }, monthsRegex: s, monthsShortRegex: s, monthsStrictRegex: /^(januari|februari|maart|mei|ju[nl]i|april|augustus|september|oktober|november|december)/i, monthsShortStrictRegex: /^(jan\.?|feb\.?|mrt\.?|apr\.?|mei|ju[nl]\.?|aug\.?|sep\.?|okt\.?|nov\.?|dec\.?)/i, monthsParse: n, longMonthsParse: n, shortMonthsParse: n, weekdays: "zondag_maandag_dinsdag_woensdag_donderdag_vrijdag_zaterdag".split("_"), weekdaysShort: "zo._ma._di._wo._do._vr._za.".split("_"), weekdaysMin: "zo_ma_di_wo_do_vr_za".split("_"), weekdaysParseExact: !0, longDateFormat: { LT: "HH:mm", LTS: "HH:mm:ss", L: "DD-MM-YYYY", LL: "D MMMM YYYY", LLL: "D MMMM YYYY HH:mm", LLLL: "dddd D MMMM YYYY HH:mm" }, calendar: { sameDay: "[vandaag om] LT", nextDay: "[morgen om] LT", nextWeek: "dddd [om] LT", lastDay: "[gisteren om] LT", lastWeek: "[afgelopen] dddd [om] LT", sameElse: "L" }, relativeTime: { future: "over %s", past: "%s geleden", s: "een paar seconden", ss: "%d seconden", m: "één minuut", mm: "%d minuten", h: "één uur", hh: "%d uur", d: "één dag", dd: "%d dagen", M: "één maand", MM: "%d maanden", y: "één jaar", yy: "%d jaar" }, dayOfMonthOrdinalParse: /\d{1,2}(ste|de)/, ordinal: function (e) { return e + (1 === e || 8 === e || e >= 20 ? "ste" : "de") }, week: { dow: 1, doy: 4 } }) }(a(0)) }, function (e, t, a) { !function (e) { "use strict"; var t = "jan._feb._mrt._apr._mei_jun._jul._aug._sep._okt._nov._dec.".split("_"), a = "jan_feb_mrt_apr_mei_jun_jul_aug_sep_okt_nov_dec".split("_"), n = [/^jan/i, /^feb/i, /^maart|mrt.?$/i, /^apr/i, /^mei$/i, /^jun[i.]?$/i, /^jul[i.]?$/i, /^aug/i, /^sep/i, /^okt/i, /^nov/i, /^dec/i], s = /^(januari|februari|maart|april|mei|april|ju[nl]i|augustus|september|oktober|november|december|jan\.?|feb\.?|mrt\.?|apr\.?|ju[nl]\.?|aug\.?|sep\.?|okt\.?|nov\.?|dec\.?)/i; e.defineLocale("nl-be", { months: "januari_februari_maart_april_mei_juni_juli_augustus_september_oktober_november_december".split("_"), monthsShort: function (e, n) { return e ? /-MMM-/.test(n) ? a[e.month()] : t[e.month()] : t }, monthsRegex: s, monthsShortRegex: s, monthsStrictRegex: /^(januari|februari|maart|mei|ju[nl]i|april|augustus|september|oktober|november|december)/i, monthsShortStrictRegex: /^(jan\.?|feb\.?|mrt\.?|apr\.?|mei|ju[nl]\.?|aug\.?|sep\.?|okt\.?|nov\.?|dec\.?)/i, monthsParse: n, longMonthsParse: n, shortMonthsParse: n, weekdays: "zondag_maandag_dinsdag_woensdag_donderdag_vrijdag_zaterdag".split("_"), weekdaysShort: "zo._ma._di._wo._do._vr._za.".split("_"), weekdaysMin: "zo_ma_di_wo_do_vr_za".split("_"), weekdaysParseExact: !0, longDateFormat: { LT: "HH:mm", LTS: "HH:mm:ss", L: "DD/MM/YYYY", LL: "D MMMM YYYY", LLL: "D MMMM YYYY HH:mm", LLLL: "dddd D MMMM YYYY HH:mm" }, calendar: { sameDay: "[vandaag om] LT", nextDay: "[morgen om] LT", nextWeek: "dddd [om] LT", lastDay: "[gisteren om] LT", lastWeek: "[afgelopen] dddd [om] LT", sameElse: "L" }, relativeTime: { future: "over %s", past: "%s geleden", s: "een paar seconden", ss: "%d seconden", m: "één minuut", mm: "%d minuten", h: "één uur", hh: "%d uur", d: "één dag", dd: "%d dagen", M: "één maand", MM: "%d maanden", y: "één jaar", yy: "%d jaar" }, dayOfMonthOrdinalParse: /\d{1,2}(ste|de)/, ordinal: function (e) { return e + (1 === e || 8 === e || e >= 20 ? "ste" : "de") }, week: { dow: 1, doy: 4 } }) }(a(0)) }, function (e, t, a) { !function (e) { "use strict"; e.defineLocale("nn", { months: "januar_februar_mars_april_mai_juni_juli_august_september_oktober_november_desember".split("_"), monthsShort: "jan_feb_mar_apr_mai_jun_jul_aug_sep_okt_nov_des".split("_"), weekdays: "sundag_måndag_tysdag_onsdag_torsdag_fredag_laurdag".split("_"), weekdaysShort: "sun_mån_tys_ons_tor_fre_lau".split("_"), weekdaysMin: "su_må_ty_on_to_fr_lø".split("_"), longDateFormat: { LT: "HH:mm", LTS: "HH:mm:ss", L: "DD.MM.YYYY", LL: "D. MMMM YYYY", LLL: "D. MMMM YYYY [kl.] H:mm", LLLL: "dddd D. MMMM YYYY [kl.] HH:mm" }, calendar: { sameDay: "[I dag klokka] LT", nextDay: "[I morgon klokka] LT", nextWeek: "dddd [klokka] LT", lastDay: "[I går klokka] LT", lastWeek: "[Føregåande] dddd [klokka] LT", sameElse: "L" }, relativeTime: { future: "om %s", past: "%s sidan", s: "nokre sekund", ss: "%d sekund", m: "eit minutt", mm: "%d minutt", h: "ein time", hh: "%d timar", d: "ein dag", dd: "%d dagar", M: "ein månad", MM: "%d månader", y: "eit år", yy: "%d år" }, dayOfMonthOrdinalParse: /\d{1,2}\./, ordinal: "%d.", week: { dow: 1, doy: 4 } }) }(a(0)) }, function (e, t, a) { !function (e) { "use strict"; var t = { 1: "੧", 2: "੨", 3: "੩", 4: "੪", 5: "੫", 6: "੬", 7: "੭", 8: "੮", 9: "੯", 0: "੦" }, a = { "੧": "1", "੨": "2", "੩": "3", "੪": "4", "੫": "5", "੬": "6", "੭": "7", "੮": "8", "੯": "9", "੦": "0" }; e.defineLocale("pa-in", { months: "ਜਨਵਰੀ_ਫ਼ਰਵਰੀ_ਮਾਰਚ_ਅਪ੍ਰੈਲ_ਮਈ_ਜੂਨ_ਜੁਲਾਈ_ਅਗਸਤ_ਸਤੰਬਰ_ਅਕਤੂਬਰ_ਨਵੰਬਰ_ਦਸੰਬਰ".split("_"), monthsShort: "ਜਨਵਰੀ_ਫ਼ਰਵਰੀ_ਮਾਰਚ_ਅਪ੍ਰੈਲ_ਮਈ_ਜੂਨ_ਜੁਲਾਈ_ਅਗਸਤ_ਸਤੰਬਰ_ਅਕਤੂਬਰ_ਨਵੰਬਰ_ਦਸੰਬਰ".split("_"), weekdays: "ਐਤਵਾਰ_ਸੋਮਵਾਰ_ਮੰਗਲਵਾਰ_ਬੁਧਵਾਰ_ਵੀਰਵਾਰ_ਸ਼ੁੱਕਰਵਾਰ_ਸ਼ਨੀਚਰਵਾਰ".split("_"), weekdaysShort: "ਐਤ_ਸੋਮ_ਮੰਗਲ_ਬੁਧ_ਵੀਰ_ਸ਼ੁਕਰ_ਸ਼ਨੀ".split("_"), weekdaysMin: "ਐਤ_ਸੋਮ_ਮੰਗਲ_ਬੁਧ_ਵੀਰ_ਸ਼ੁਕਰ_ਸ਼ਨੀ".split("_"), longDateFormat: { LT: "A h:mm ਵਜੇ", LTS: "A h:mm:ss ਵਜੇ", L: "DD/MM/YYYY", LL: "D MMMM YYYY", LLL: "D MMMM YYYY, A h:mm ਵਜੇ", LLLL: "dddd, D MMMM YYYY, A h:mm ਵਜੇ" }, calendar: { sameDay: "[ਅਜ] LT", nextDay: "[ਕਲ] LT", nextWeek: "[ਅਗਲਾ] dddd, LT", lastDay: "[ਕਲ] LT", lastWeek: "[ਪਿਛਲੇ] dddd, LT", sameElse: "L" }, relativeTime: { future: "%s ਵਿੱਚ", past: "%s ਪਿਛਲੇ", s: "ਕੁਝ ਸਕਿੰਟ", ss: "%d ਸਕਿੰਟ", m: "ਇਕ ਮਿੰਟ", mm: "%d ਮਿੰਟ", h: "ਇੱਕ ਘੰਟਾ", hh: "%d ਘੰਟੇ", d: "ਇੱਕ ਦਿਨ", dd: "%d ਦਿਨ", M: "ਇੱਕ ਮਹੀਨਾ", MM: "%d ਮਹੀਨੇ", y: "ਇੱਕ ਸਾਲ", yy: "%d ਸਾਲ" }, preparse: function (e) { return e.replace(/[੧੨੩੪੫੬੭੮੯੦]/g, function (e) { return a[e] }) }, postformat: function (e) { return e.replace(/\d/g, function (e) { return t[e] }) }, meridiemParse: /ਰਾਤ|ਸਵੇਰ|ਦੁਪਹਿਰ|ਸ਼ਾਮ/, meridiemHour: function (e, t) { return 12 === e && (e = 0), "ਰਾਤ" === t ? e < 4 ? e : e + 12 : "ਸਵੇਰ" === t ? e : "ਦੁਪਹਿਰ" === t ? e >= 10 ? e : e + 12 : "ਸ਼ਾਮ" === t ? e + 12 : void 0 }, meridiem: function (e, t, a) { return e < 4 ? "ਰਾਤ" : e < 10 ? "ਸਵੇਰ" : e < 17 ? "ਦੁਪਹਿਰ" : e < 20 ? "ਸ਼ਾਮ" : "ਰਾਤ" }, week: { dow: 0, doy: 6 } }) }(a(0)) }, function (e, t, a) { !function (e) { "use strict"; var t = "styczeń_luty_marzec_kwiecień_maj_czerwiec_lipiec_sierpień_wrzesień_październik_listopad_grudzień".split("_"), a = "stycznia_lutego_marca_kwietnia_maja_czerwca_lipca_sierpnia_września_października_listopada_grudnia".split("_"); function n(e) { return e % 10 < 5 && e % 10 > 1 && ~~(e / 10) % 10 != 1 } function s(e, t, a) { var s = e + " "; switch (a) { case "ss": return s + (n(e) ? "sekundy" : "sekund"); case "m": return t ? "minuta" : "minutę"; case "mm": return s + (n(e) ? "minuty" : "minut"); case "h": return t ? "godzina" : "godzinę"; case "hh": return s + (n(e) ? "godziny" : "godzin"); case "MM": return s + (n(e) ? "miesiące" : "miesięcy"); case "yy": return s + (n(e) ? "lata" : "lat") } } e.defineLocale("pl", { months: function (e, n) { return e ? "" === n ? "(" + a[e.month()] + "|" + t[e.month()] + ")" : /D MMMM/.test(n) ? a[e.month()] : t[e.month()] : t }, monthsShort: "sty_lut_mar_kwi_maj_cze_lip_sie_wrz_paź_lis_gru".split("_"), weekdays: "niedziela_poniedziałek_wtorek_środa_czwartek_piątek_sobota".split("_"), weekdaysShort: "ndz_pon_wt_śr_czw_pt_sob".split("_"), weekdaysMin: "Nd_Pn_Wt_Śr_Cz_Pt_So".split("_"), longDateFormat: { LT: "HH:mm", LTS: "HH:mm:ss", L: "DD.MM.YYYY", LL: "D MMMM YYYY", LLL: "D MMMM YYYY HH:mm", LLLL: "dddd, D MMMM YYYY HH:mm" }, calendar: { sameDay: "[Dziś o] LT", nextDay: "[Jutro o] LT", nextWeek: function () { switch (this.day()) { case 0: return "[W niedzielę o] LT"; case 2: return "[We wtorek o] LT"; case 3: return "[W środę o] LT"; case 6: return "[W sobotę o] LT"; default: return "[W] dddd [o] LT" } }, lastDay: "[Wczoraj o] LT", lastWeek: function () { switch (this.day()) { case 0: return "[W zeszłą niedzielę o] LT"; case 3: return "[W zeszłą środę o] LT"; case 6: return "[W zeszłą sobotę o] LT"; default: return "[W zeszły] dddd [o] LT" } }, sameElse: "L" }, relativeTime: { future: "za %s", past: "%s temu", s: "kilka sekund", ss: s, m: s, mm: s, h: s, hh: s, d: "1 dzień", dd: "%d dni", M: "miesiąc", MM: s, y: "rok", yy: s }, dayOfMonthOrdinalParse: /\d{1,2}\./, ordinal: "%d.", week: { dow: 1, doy: 4 } }) }(a(0)) }, function (e, t, a) { !function (e) { "use strict"; e.defineLocale("pt", { months: "janeiro_fevereiro_março_abril_maio_junho_julho_agosto_setembro_outubro_novembro_dezembro".split("_"), monthsShort: "jan_fev_mar_abr_mai_jun_jul_ago_set_out_nov_dez".split("_"), weekdays: "Domingo_Segunda-feira_Terça-feira_Quarta-feira_Quinta-feira_Sexta-feira_Sábado".split("_"), weekdaysShort: "Dom_Seg_Ter_Qua_Qui_Sex_Sáb".split("_"), weekdaysMin: "Do_2ª_3ª_4ª_5ª_6ª_Sá".split("_"), weekdaysParseExact: !0, longDateFormat: { LT: "HH:mm", LTS: "HH:mm:ss", L: "DD/MM/YYYY", LL: "D [de] MMMM [de] YYYY", LLL: "D [de] MMMM [de] YYYY HH:mm", LLLL: "dddd, D [de] MMMM [de] YYYY HH:mm" }, calendar: { sameDay: "[Hoje às] LT", nextDay: "[Amanhã às] LT", nextWeek: "dddd [às] LT", lastDay: "[Ontem às] LT", lastWeek: function () { return 0 === this.day() || 6 === this.day() ? "[Último] dddd [às] LT" : "[Última] dddd [às] LT" }, sameElse: "L" }, relativeTime: { future: "em %s", past: "há %s", s: "segundos", ss: "%d segundos", m: "um minuto", mm: "%d minutos", h: "uma hora", hh: "%d horas", d: "um dia", dd: "%d dias", M: "um mês", MM: "%d meses", y: "um ano", yy: "%d anos" }, dayOfMonthOrdinalParse: /\d{1,2}º/, ordinal: "%dº", week: { dow: 1, doy: 4 } }) }(a(0)) }, function (e, t, a) { !function (e) { "use strict"; e.defineLocale("pt-br", { months: "janeiro_fevereiro_março_abril_maio_junho_julho_agosto_setembro_outubro_novembro_dezembro".split("_"), monthsShort: "jan_fev_mar_abr_mai_jun_jul_ago_set_out_nov_dez".split("_"), weekdays: "Domingo_Segunda-feira_Terça-feira_Quarta-feira_Quinta-feira_Sexta-feira_Sábado".split("_"), weekdaysShort: "Dom_Seg_Ter_Qua_Qui_Sex_Sáb".split("_"), weekdaysMin: "Do_2ª_3ª_4ª_5ª_6ª_Sá".split("_"), weekdaysParseExact: !0, longDateFormat: { LT: "HH:mm", LTS: "HH:mm:ss", L: "DD/MM/YYYY", LL: "D [de] MMMM [de] YYYY", LLL: "D [de] MMMM [de] YYYY [às] HH:mm", LLLL: "dddd, D [de] MMMM [de] YYYY [às] HH:mm" }, calendar: { sameDay: "[Hoje às] LT", nextDay: "[Amanhã às] LT", nextWeek: "dddd [às] LT", lastDay: "[Ontem às] LT", lastWeek: function () { return 0 === this.day() || 6 === this.day() ? "[Último] dddd [às] LT" : "[Última] dddd [às] LT" }, sameElse: "L" }, relativeTime: { future: "em %s", past: "há %s", s: "poucos segundos", ss: "%d segundos", m: "um minuto", mm: "%d minutos", h: "uma hora", hh: "%d horas", d: "um dia", dd: "%d dias", M: "um mês", MM: "%d meses", y: "um ano", yy: "%d anos" }, dayOfMonthOrdinalParse: /\d{1,2}º/, ordinal: "%dº" }) }(a(0)) }, function (e, t, a) { !function (e) { "use strict"; function t(e, t, a) { var n = " "; return (e % 100 >= 20 || e >= 100 && e % 100 == 0) && (n = " de "), e + n + { ss: "secunde", mm: "minute", hh: "ore", dd: "zile", MM: "luni", yy: "ani" }[a] } e.defineLocale("ro", { months: "ianuarie_februarie_martie_aprilie_mai_iunie_iulie_august_septembrie_octombrie_noiembrie_decembrie".split("_"), monthsShort: "ian._febr._mart._apr._mai_iun._iul._aug._sept._oct._nov._dec.".split("_"), monthsParseExact: !0, weekdays: "duminică_luni_marți_miercuri_joi_vineri_sâmbătă".split("_"), weekdaysShort: "Dum_Lun_Mar_Mie_Joi_Vin_Sâm".split("_"), weekdaysMin: "Du_Lu_Ma_Mi_Jo_Vi_Sâ".split("_"), longDateFormat: { LT: "H:mm", LTS: "H:mm:ss", L: "DD.MM.YYYY", LL: "D MMMM YYYY", LLL: "D MMMM YYYY H:mm", LLLL: "dddd, D MMMM YYYY H:mm" }, calendar: { sameDay: "[azi la] LT", nextDay: "[mâine la] LT", nextWeek: "dddd [la] LT", lastDay: "[ieri la] LT", lastWeek: "[fosta] dddd [la] LT", sameElse: "L" }, relativeTime: { future: "peste %s", past: "%s în urmă", s: "câteva secunde", ss: t, m: "un minut", mm: t, h: "o oră", hh: t, d: "o zi", dd: t, M: "o lună", MM: t, y: "un an", yy: t }, week: { dow: 1, doy: 7 } }) }(a(0)) }, function (e, t, a) { !function (e) { "use strict"; function t(e, t, a) { var n = { ss: t ? "секунда_секунды_секунд" : "секунду_секунды_секунд", mm: t ? "минута_минуты_минут" : "минуту_минуты_минут", hh: "час_часа_часов", dd: "день_дня_дней", MM: "месяц_месяца_месяцев", yy: "год_года_лет" }; return "m" === a ? t ? "минута" : "минуту" : e + " " + function (e, t) { var a = e.split("_"); return t % 10 == 1 && t % 100 != 11 ? a[0] : t % 10 >= 2 && t % 10 <= 4 && (t % 100 < 10 || t % 100 >= 20) ? a[1] : a[2] }(n[a], +e) } var a = [/^янв/i, /^фев/i, /^мар/i, /^апр/i, /^ма[йя]/i, /^июн/i, /^июл/i, /^авг/i, /^сен/i, /^окт/i, /^ноя/i, /^дек/i]; e.defineLocale("ru", { months: { format: "января_февраля_марта_апреля_мая_июня_июля_августа_сентября_октября_ноября_декабря".split("_"), standalone: "январь_февраль_март_апрель_май_июнь_июль_август_сентябрь_октябрь_ноябрь_декабрь".split("_") }, monthsShort: { format: "янв._февр._мар._апр._мая_июня_июля_авг._сент._окт._нояб._дек.".split("_"), standalone: "янв._февр._март_апр._май_июнь_июль_авг._сент._окт._нояб._дек.".split("_") }, weekdays: { standalone: "воскресенье_понедельник_вторник_среда_четверг_пятница_суббота".split("_"), format: "воскресенье_понедельник_вторник_среду_четверг_пятницу_субботу".split("_"), isFormat: /\[ ?[Вв] ?(?:прошлую|следующую|эту)? ?\] ?dddd/ }, weekdaysShort: "вс_пн_вт_ср_чт_пт_сб".split("_"), weekdaysMin: "вс_пн_вт_ср_чт_пт_сб".split("_"), monthsParse: a, longMonthsParse: a, shortMonthsParse: a, monthsRegex: /^(январ[ья]|янв\.?|феврал[ья]|февр?\.?|марта?|мар\.?|апрел[ья]|апр\.?|ма[йя]|июн[ья]|июн\.?|июл[ья]|июл\.?|августа?|авг\.?|сентябр[ья]|сент?\.?|октябр[ья]|окт\.?|ноябр[ья]|нояб?\.?|декабр[ья]|дек\.?)/i, monthsShortRegex: /^(январ[ья]|янв\.?|феврал[ья]|февр?\.?|марта?|мар\.?|апрел[ья]|апр\.?|ма[йя]|июн[ья]|июн\.?|июл[ья]|июл\.?|августа?|авг\.?|сентябр[ья]|сент?\.?|октябр[ья]|окт\.?|ноябр[ья]|нояб?\.?|декабр[ья]|дек\.?)/i, monthsStrictRegex: /^(январ[яь]|феврал[яь]|марта?|апрел[яь]|ма[яй]|июн[яь]|июл[яь]|августа?|сентябр[яь]|октябр[яь]|ноябр[яь]|декабр[яь])/i, monthsShortStrictRegex: /^(янв\.|февр?\.|мар[т.]|апр\.|ма[яй]|июн[ья.]|июл[ья.]|авг\.|сент?\.|окт\.|нояб?\.|дек\.)/i, longDateFormat: { LT: "H:mm", LTS: "H:mm:ss", L: "DD.MM.YYYY", LL: "D MMMM YYYY г.", LLL: "D MMMM YYYY г., H:mm", LLLL: "dddd, D MMMM YYYY г., H:mm" }, calendar: { sameDay: "[Сегодня, в] LT", nextDay: "[Завтра, в] LT", lastDay: "[Вчера, в] LT", nextWeek: function (e) { if (e.week() === this.week()) return 2 === this.day() ? "[Во] dddd, [в] LT" : "[В] dddd, [в] LT"; switch (this.day()) { case 0: return "[В следующее] dddd, [в] LT"; case 1: case 2: case 4: return "[В следующий] dddd, [в] LT"; case 3: case 5: case 6: return "[В следующую] dddd, [в] LT" } }, lastWeek: function (e) { if (e.week() === this.week()) return 2 === this.day() ? "[Во] dddd, [в] LT" : "[В] dddd, [в] LT"; switch (this.day()) { case 0: return "[В прошлое] dddd, [в] LT"; case 1: case 2: case 4: return "[В прошлый] dddd, [в] LT"; case 3: case 5: case 6: return "[В прошлую] dddd, [в] LT" } }, sameElse: "L" }, relativeTime: { future: "через %s", past: "%s назад", s: "несколько секунд", ss: t, m: t, mm: t, h: "час", hh: t, d: "день", dd: t, M: "месяц", MM: t, y: "год", yy: t }, meridiemParse: /ночи|утра|дня|вечера/i, isPM: function (e) { return /^(дня|вечера)$/.test(e) }, meridiem: function (e, t, a) { return e < 4 ? "ночи" : e < 12 ? "утра" : e < 17 ? "дня" : "вечера" }, dayOfMonthOrdinalParse: /\d{1,2}-(й|го|я)/, ordinal: function (e, t) { switch (t) { case "M": case "d": case "DDD": return e + "-й"; case "D": return e + "-го"; case "w": case "W": return e + "-я"; default: return e } }, week: { dow: 1, doy: 4 } }) }(a(0)) }, function (e, t, a) { !function (e) { "use strict"; var t = ["جنوري", "فيبروري", "مارچ", "اپريل", "مئي", "جون", "جولاءِ", "آگسٽ", "سيپٽمبر", "آڪٽوبر", "نومبر", "ڊسمبر"], a = ["آچر", "سومر", "اڱارو", "اربع", "خميس", "جمع", "ڇنڇر"]; e.defineLocale("sd", { months: t, monthsShort: t, weekdays: a, weekdaysShort: a, weekdaysMin: a, longDateFormat: { LT: "HH:mm", LTS: "HH:mm:ss", L: "DD/MM/YYYY", LL: "D MMMM YYYY", LLL: "D MMMM YYYY HH:mm", LLLL: "dddd، D MMMM YYYY HH:mm" }, meridiemParse: /صبح|شام/, isPM: function (e) { return "شام" === e }, meridiem: function (e, t, a) { return e < 12 ? "صبح" : "شام" }, calendar: { sameDay: "[اڄ] LT", nextDay: "[سڀاڻي] LT", nextWeek: "dddd [اڳين هفتي تي] LT", lastDay: "[ڪالهه] LT", lastWeek: "[گزريل هفتي] dddd [تي] LT", sameElse: "L" }, relativeTime: { future: "%s پوء", past: "%s اڳ", s: "چند سيڪنڊ", ss: "%d سيڪنڊ", m: "هڪ منٽ", mm: "%d منٽ", h: "هڪ ڪلاڪ", hh: "%d ڪلاڪ", d: "هڪ ڏينهن", dd: "%d ڏينهن", M: "هڪ مهينو", MM: "%d مهينا", y: "هڪ سال", yy: "%d سال" }, preparse: function (e) { return e.replace(/،/g, ",") }, postformat: function (e) { return e.replace(/,/g, "،") }, week: { dow: 1, doy: 4 } }) }(a(0)) }, function (e, t, a) { !function (e) { "use strict"; e.defineLocale("se", { months: "ođđajagemánnu_guovvamánnu_njukčamánnu_cuoŋománnu_miessemánnu_geassemánnu_suoidnemánnu_borgemánnu_čakčamánnu_golggotmánnu_skábmamánnu_juovlamánnu".split("_"), monthsShort: "ođđj_guov_njuk_cuo_mies_geas_suoi_borg_čakč_golg_skáb_juov".split("_"), weekdays: "sotnabeaivi_vuossárga_maŋŋebárga_gaskavahkku_duorastat_bearjadat_lávvardat".split("_"), weekdaysShort: "sotn_vuos_maŋ_gask_duor_bear_láv".split("_"), weekdaysMin: "s_v_m_g_d_b_L".split("_"), longDateFormat: { LT: "HH:mm", LTS: "HH:mm:ss", L: "DD.MM.YYYY", LL: "MMMM D. [b.] YYYY", LLL: "MMMM D. [b.] YYYY [ti.] HH:mm", LLLL: "dddd, MMMM D. [b.] YYYY [ti.] HH:mm" }, calendar: { sameDay: "[otne ti] LT", nextDay: "[ihttin ti] LT", nextWeek: "dddd [ti] LT", lastDay: "[ikte ti] LT", lastWeek: "[ovddit] dddd [ti] LT", sameElse: "L" }, relativeTime: { future: "%s geažes", past: "maŋit %s", s: "moadde sekunddat", ss: "%d sekunddat", m: "okta minuhta", mm: "%d minuhtat", h: "okta diimmu", hh: "%d diimmut", d: "okta beaivi", dd: "%d beaivvit", M: "okta mánnu", MM: "%d mánut", y: "okta jahki", yy: "%d jagit" }, dayOfMonthOrdinalParse: /\d{1,2}\./, ordinal: "%d.", week: { dow: 1, doy: 4 } }) }(a(0)) }, function (e, t, a) { !function (e) { "use strict"; e.defineLocale("si", { months: "ජනවාරි_පෙබරවාරි_මාර්තු_අප්‍රේල්_මැයි_ජූනි_ජූලි_අගෝස්තු_සැප්තැම්බර්_ඔක්තෝබර්_නොවැම්බර්_දෙසැම්බර්".split("_"), monthsShort: "ජන_පෙබ_මාර්_අප්_මැයි_ජූනි_ජූලි_අගෝ_සැප්_ඔක්_නොවැ_දෙසැ".split("_"), weekdays: "ඉරිදා_සඳුදා_අඟහරුවාදා_බදාදා_බ්‍රහස්පතින්දා_සිකුරාදා_සෙනසුරාදා".split("_"), weekdaysShort: "ඉරි_සඳු_අඟ_බදා_බ්‍රහ_සිකු_සෙන".split("_"), weekdaysMin: "ඉ_ස_අ_බ_බ්‍ර_සි_සෙ".split("_"), weekdaysParseExact: !0, longDateFormat: { LT: "a h:mm", LTS: "a h:mm:ss", L: "YYYY/MM/DD", LL: "YYYY MMMM D", LLL: "YYYY MMMM D, a h:mm", LLLL: "YYYY MMMM D [වැනි] dddd, a h:mm:ss" }, calendar: { sameDay: "[අද] LT[ට]", nextDay: "[හෙට] LT[ට]", nextWeek: "dddd LT[ට]", lastDay: "[ඊයේ] LT[ට]", lastWeek: "[පසුගිය] dddd LT[ට]", sameElse: "L" }, relativeTime: { future: "%sකින්", past: "%sකට පෙර", s: "තත්පර කිහිපය", ss: "තත්පර %d", m: "මිනිත්තුව", mm: "මිනිත්තු %d", h: "පැය", hh: "පැය %d", d: "දිනය", dd: "දින %d", M: "මාසය", MM: "මාස %d", y: "වසර", yy: "වසර %d" }, dayOfMonthOrdinalParse: /\d{1,2} වැනි/, ordinal: function (e) { return e + " වැනි" }, meridiemParse: /පෙර වරු|පස් වරු|පෙ.ව|ප.ව./, isPM: function (e) { return "ප.ව." === e || "පස් වරු" === e }, meridiem: function (e, t, a) { return e > 11 ? a ? "ප.ව." : "පස් වරු" : a ? "පෙ.ව." : "පෙර වරු" } }) }(a(0)) }, function (e, t, a) { !function (e) { "use strict"; var t = "január_február_marec_apríl_máj_jún_júl_august_september_október_november_december".split("_"), a = "jan_feb_mar_apr_máj_jún_júl_aug_sep_okt_nov_dec".split("_"); function n(e) { return e > 1 && e < 5 } function s(e, t, a, s) { var r = e + " "; switch (a) { case "s": return t || s ? "pár sekúnd" : "pár sekundami"; case "ss": return t || s ? r + (n(e) ? "sekundy" : "sekúnd") : r + "sekundami"; case "m": return t ? "minúta" : s ? "minútu" : "minútou"; case "mm": return t || s ? r + (n(e) ? "minúty" : "minút") : r + "minútami"; case "h": return t ? "hodina" : s ? "hodinu" : "hodinou"; case "hh": return t || s ? r + (n(e) ? "hodiny" : "hodín") : r + "hodinami"; case "d": return t || s ? "deň" : "dňom"; case "dd": return t || s ? r + (n(e) ? "dni" : "dní") : r + "dňami"; case "M": return t || s ? "mesiac" : "mesiacom"; case "MM": return t || s ? r + (n(e) ? "mesiace" : "mesiacov") : r + "mesiacmi"; case "y": return t || s ? "rok" : "rokom"; case "yy": return t || s ? r + (n(e) ? "roky" : "rokov") : r + "rokmi" } } e.defineLocale("sk", { months: t, monthsShort: a, weekdays: "nedeľa_pondelok_utorok_streda_štvrtok_piatok_sobota".split("_"), weekdaysShort: "ne_po_ut_st_št_pi_so".split("_"), weekdaysMin: "ne_po_ut_st_št_pi_so".split("_"), longDateFormat: { LT: "H:mm", LTS: "H:mm:ss", L: "DD.MM.YYYY", LL: "D. MMMM YYYY", LLL: "D. MMMM YYYY H:mm", LLLL: "dddd D. MMMM YYYY H:mm" }, calendar: { sameDay: "[dnes o] LT", nextDay: "[zajtra o] LT", nextWeek: function () { switch (this.day()) { case 0: return "[v nedeľu o] LT"; case 1: case 2: return "[v] dddd [o] LT"; case 3: return "[v stredu o] LT"; case 4: return "[vo štvrtok o] LT"; case 5: return "[v piatok o] LT"; case 6: return "[v sobotu o] LT" } }, lastDay: "[včera o] LT", lastWeek: function () { switch (this.day()) { case 0: return "[minulú nedeľu o] LT"; case 1: case 2: return "[minulý] dddd [o] LT"; case 3: return "[minulú stredu o] LT"; case 4: case 5: return "[minulý] dddd [o] LT"; case 6: return "[minulú sobotu o] LT" } }, sameElse: "L" }, relativeTime: { future: "za %s", past: "pred %s", s: s, ss: s, m: s, mm: s, h: s, hh: s, d: s, dd: s, M: s, MM: s, y: s, yy: s }, dayOfMonthOrdinalParse: /\d{1,2}\./, ordinal: "%d.", week: { dow: 1, doy: 4 } }) }(a(0)) }, function (e, t, a) { !function (e) { "use strict"; function t(e, t, a, n) { var s = e + " "; switch (a) { case "s": return t || n ? "nekaj sekund" : "nekaj sekundami"; case "ss": return s += 1 === e ? t ? "sekundo" : "sekundi" : 2 === e ? t || n ? "sekundi" : "sekundah" : e < 5 ? t || n ? "sekunde" : "sekundah" : "sekund"; case "m": return t ? "ena minuta" : "eno minuto"; case "mm": return s += 1 === e ? t ? "minuta" : "minuto" : 2 === e ? t || n ? "minuti" : "minutama" : e < 5 ? t || n ? "minute" : "minutami" : t || n ? "minut" : "minutami"; case "h": return t ? "ena ura" : "eno uro"; case "hh": return s += 1 === e ? t ? "ura" : "uro" : 2 === e ? t || n ? "uri" : "urama" : e < 5 ? t || n ? "ure" : "urami" : t || n ? "ur" : "urami"; case "d": return t || n ? "en dan" : "enim dnem"; case "dd": return s += 1 === e ? t || n ? "dan" : "dnem" : 2 === e ? t || n ? "dni" : "dnevoma" : t || n ? "dni" : "dnevi"; case "M": return t || n ? "en mesec" : "enim mesecem"; case "MM": return s += 1 === e ? t || n ? "mesec" : "mesecem" : 2 === e ? t || n ? "meseca" : "mesecema" : e < 5 ? t || n ? "mesece" : "meseci" : t || n ? "mesecev" : "meseci"; case "y": return t || n ? "eno leto" : "enim letom"; case "yy": return s += 1 === e ? t || n ? "leto" : "letom" : 2 === e ? t || n ? "leti" : "letoma" : e < 5 ? t || n ? "leta" : "leti" : t || n ? "let" : "leti" } } e.defineLocale("sl", { months: "januar_februar_marec_april_maj_junij_julij_avgust_september_oktober_november_december".split("_"), monthsShort: "jan._feb._mar._apr._maj._jun._jul._avg._sep._okt._nov._dec.".split("_"), monthsParseExact: !0, weekdays: "nedelja_ponedeljek_torek_sreda_četrtek_petek_sobota".split("_"), weekdaysShort: "ned._pon._tor._sre._čet._pet._sob.".split("_"), weekdaysMin: "ne_po_to_sr_če_pe_so".split("_"), weekdaysParseExact: !0, longDateFormat: { LT: "H:mm", LTS: "H:mm:ss", L: "DD.MM.YYYY", LL: "D. MMMM YYYY", LLL: "D. MMMM YYYY H:mm", LLLL: "dddd, D. MMMM YYYY H:mm" }, calendar: { sameDay: "[danes ob] LT", nextDay: "[jutri ob] LT", nextWeek: function () { switch (this.day()) { case 0: return "[v] [nedeljo] [ob] LT"; case 3: return "[v] [sredo] [ob] LT"; case 6: return "[v] [soboto] [ob] LT"; case 1: case 2: case 4: case 5: return "[v] dddd [ob] LT" } }, lastDay: "[včeraj ob] LT", lastWeek: function () { switch (this.day()) { case 0: return "[prejšnjo] [nedeljo] [ob] LT"; case 3: return "[prejšnjo] [sredo] [ob] LT"; case 6: return "[prejšnjo] [soboto] [ob] LT"; case 1: case 2: case 4: case 5: return "[prejšnji] dddd [ob] LT" } }, sameElse: "L" }, relativeTime: { future: "čez %s", past: "pred %s", s: t, ss: t, m: t, mm: t, h: t, hh: t, d: t, dd: t, M: t, MM: t, y: t, yy: t }, dayOfMonthOrdinalParse: /\d{1,2}\./, ordinal: "%d.", week: { dow: 1, doy: 7 } }) }(a(0)) }, function (e, t, a) { !function (e) { "use strict"; e.defineLocale("sq", { months: "Janar_Shkurt_Mars_Prill_Maj_Qershor_Korrik_Gusht_Shtator_Tetor_Nëntor_Dhjetor".split("_"), monthsShort: "Jan_Shk_Mar_Pri_Maj_Qer_Kor_Gus_Sht_Tet_Nën_Dhj".split("_"), weekdays: "E Diel_E Hënë_E Martë_E Mërkurë_E Enjte_E Premte_E Shtunë".split("_"), weekdaysShort: "Die_Hën_Mar_Mër_Enj_Pre_Sht".split("_"), weekdaysMin: "D_H_Ma_Më_E_P_Sh".split("_"), weekdaysParseExact: !0, meridiemParse: /PD|MD/, isPM: function (e) { return "M" === e.charAt(0) }, meridiem: function (e, t, a) { return e < 12 ? "PD" : "MD" }, longDateFormat: { LT: "HH:mm", LTS: "HH:mm:ss", L: "DD/MM/YYYY", LL: "D MMMM YYYY", LLL: "D MMMM YYYY HH:mm", LLLL: "dddd, D MMMM YYYY HH:mm" }, calendar: { sameDay: "[Sot në] LT", nextDay: "[Nesër në] LT", nextWeek: "dddd [në] LT", lastDay: "[Dje në] LT", lastWeek: "dddd [e kaluar në] LT", sameElse: "L" }, relativeTime: { future: "në %s", past: "%s më parë", s: "disa sekonda", ss: "%d sekonda", m: "një minutë", mm: "%d minuta", h: "një orë", hh: "%d orë", d: "një ditë", dd: "%d ditë", M: "një muaj", MM: "%d muaj", y: "një vit", yy: "%d vite" }, dayOfMonthOrdinalParse: /\d{1,2}\./, ordinal: "%d.", week: { dow: 1, doy: 4 } }) }(a(0)) }, function (e, t, a) { !function (e) { "use strict"; var t = { words: { ss: ["sekunda", "sekunde", "sekundi"], m: ["jedan minut", "jedne minute"], mm: ["minut", "minute", "minuta"], h: ["jedan sat", "jednog sata"], hh: ["sat", "sata", "sati"], dd: ["dan", "dana", "dana"], MM: ["mesec", "meseca", "meseci"], yy: ["godina", "godine", "godina"] }, correctGrammaticalCase: function (e, t) { return 1 === e ? t[0] : e >= 2 && e <= 4 ? t[1] : t[2] }, translate: function (e, a, n) { var s = t.words[n]; return 1 === n.length ? a ? s[0] : s[1] : e + " " + t.correctGrammaticalCase(e, s) } }; e.defineLocale("sr", { months: "januar_februar_mart_april_maj_jun_jul_avgust_septembar_oktobar_novembar_decembar".split("_"), monthsShort: "jan._feb._mar._apr._maj_jun_jul_avg._sep._okt._nov._dec.".split("_"), monthsParseExact: !0, weekdays: "nedelja_ponedeljak_utorak_sreda_četvrtak_petak_subota".split("_"), weekdaysShort: "ned._pon._uto._sre._čet._pet._sub.".split("_"), weekdaysMin: "ne_po_ut_sr_če_pe_su".split("_"), weekdaysParseExact: !0, longDateFormat: { LT: "H:mm", LTS: "H:mm:ss", L: "DD.MM.YYYY", LL: "D. MMMM YYYY", LLL: "D. MMMM YYYY H:mm", LLLL: "dddd, D. MMMM YYYY H:mm" }, calendar: { sameDay: "[danas u] LT", nextDay: "[sutra u] LT", nextWeek: function () { switch (this.day()) { case 0: return "[u] [nedelju] [u] LT"; case 3: return "[u] [sredu] [u] LT"; case 6: return "[u] [subotu] [u] LT"; case 1: case 2: case 4: case 5: return "[u] dddd [u] LT" } }, lastDay: "[juče u] LT", lastWeek: function () { return ["[prošle] [nedelje] [u] LT", "[prošlog] [ponedeljka] [u] LT", "[prošlog] [utorka] [u] LT", "[prošle] [srede] [u] LT", "[prošlog] [četvrtka] [u] LT", "[prošlog] [petka] [u] LT", "[prošle] [subote] [u] LT"][this.day()] }, sameElse: "L" }, relativeTime: { future: "za %s", past: "pre %s", s: "nekoliko sekundi", ss: t.translate, m: t.translate, mm: t.translate, h: t.translate, hh: t.translate, d: "dan", dd: t.translate, M: "mesec", MM: t.translate, y: "godinu", yy: t.translate }, dayOfMonthOrdinalParse: /\d{1,2}\./, ordinal: "%d.", week: { dow: 1, doy: 7 } }) }(a(0)) }, function (e, t, a) { !function (e) { "use strict"; var t = { words: { ss: ["секунда", "секунде", "секунди"], m: ["један минут", "једне минуте"], mm: ["минут", "минуте", "минута"], h: ["један сат", "једног сата"], hh: ["сат", "сата", "сати"], dd: ["дан", "дана", "дана"], MM: ["месец", "месеца", "месеци"], yy: ["година", "године", "година"] }, correctGrammaticalCase: function (e, t) { return 1 === e ? t[0] : e >= 2 && e <= 4 ? t[1] : t[2] }, translate: function (e, a, n) { var s = t.words[n]; return 1 === n.length ? a ? s[0] : s[1] : e + " " + t.correctGrammaticalCase(e, s) } }; e.defineLocale("sr-cyrl", { months: "јануар_фебруар_март_април_мај_јун_јул_август_септембар_октобар_новембар_децембар".split("_"), monthsShort: "јан._феб._мар._апр._мај_јун_јул_авг._сеп._окт._нов._дец.".split("_"), monthsParseExact: !0, weekdays: "недеља_понедељак_уторак_среда_четвртак_петак_субота".split("_"), weekdaysShort: "нед._пон._уто._сре._чет._пет._суб.".split("_"), weekdaysMin: "не_по_ут_ср_че_пе_су".split("_"), weekdaysParseExact: !0, longDateFormat: { LT: "H:mm", LTS: "H:mm:ss", L: "DD.MM.YYYY", LL: "D. MMMM YYYY", LLL: "D. MMMM YYYY H:mm", LLLL: "dddd, D. MMMM YYYY H:mm" }, calendar: { sameDay: "[данас у] LT", nextDay: "[сутра у] LT", nextWeek: function () { switch (this.day()) { case 0: return "[у] [недељу] [у] LT"; case 3: return "[у] [среду] [у] LT"; case 6: return "[у] [суботу] [у] LT"; case 1: case 2: case 4: case 5: return "[у] dddd [у] LT" } }, lastDay: "[јуче у] LT", lastWeek: function () { return ["[прошле] [недеље] [у] LT", "[прошлог] [понедељка] [у] LT", "[прошлог] [уторка] [у] LT", "[прошле] [среде] [у] LT", "[прошлог] [четвртка] [у] LT", "[прошлог] [петка] [у] LT", "[прошле] [суботе] [у] LT"][this.day()] }, sameElse: "L" }, relativeTime: { future: "за %s", past: "пре %s", s: "неколико секунди", ss: t.translate, m: t.translate, mm: t.translate, h: t.translate, hh: t.translate, d: "дан", dd: t.translate, M: "месец", MM: t.translate, y: "годину", yy: t.translate }, dayOfMonthOrdinalParse: /\d{1,2}\./, ordinal: "%d.", week: { dow: 1, doy: 7 } }) }(a(0)) }, function (e, t, a) { !function (e) { "use strict"; e.defineLocale("ss", { months: "Bhimbidvwane_Indlovana_Indlov'lenkhulu_Mabasa_Inkhwekhweti_Inhlaba_Kholwane_Ingci_Inyoni_Imphala_Lweti_Ingongoni".split("_"), monthsShort: "Bhi_Ina_Inu_Mab_Ink_Inh_Kho_Igc_Iny_Imp_Lwe_Igo".split("_"), weekdays: "Lisontfo_Umsombuluko_Lesibili_Lesitsatfu_Lesine_Lesihlanu_Umgcibelo".split("_"), weekdaysShort: "Lis_Umb_Lsb_Les_Lsi_Lsh_Umg".split("_"), weekdaysMin: "Li_Us_Lb_Lt_Ls_Lh_Ug".split("_"), weekdaysParseExact: !0, longDateFormat: { LT: "h:mm A", LTS: "h:mm:ss A", L: "DD/MM/YYYY", LL: "D MMMM YYYY", LLL: "D MMMM YYYY h:mm A", LLLL: "dddd, D MMMM YYYY h:mm A" }, calendar: { sameDay: "[Namuhla nga] LT", nextDay: "[Kusasa nga] LT", nextWeek: "dddd [nga] LT", lastDay: "[Itolo nga] LT", lastWeek: "dddd [leliphelile] [nga] LT", sameElse: "L" }, relativeTime: { future: "nga %s", past: "wenteka nga %s", s: "emizuzwana lomcane", ss: "%d mzuzwana", m: "umzuzu", mm: "%d emizuzu", h: "lihora", hh: "%d emahora", d: "lilanga", dd: "%d emalanga", M: "inyanga", MM: "%d tinyanga", y: "umnyaka", yy: "%d iminyaka" }, meridiemParse: /ekuseni|emini|entsambama|ebusuku/, meridiem: function (e, t, a) { return e < 11 ? "ekuseni" : e < 15 ? "emini" : e < 19 ? "entsambama" : "ebusuku" }, meridiemHour: function (e, t) { return 12 === e && (e = 0), "ekuseni" === t ? e : "emini" === t ? e >= 11 ? e : e + 12 : "entsambama" === t || "ebusuku" === t ? 0 === e ? 0 : e + 12 : void 0 }, dayOfMonthOrdinalParse: /\d{1,2}/, ordinal: "%d", week: { dow: 1, doy: 4 } }) }(a(0)) }, function (e, t, a) { !function (e) { "use strict"; e.defineLocale("sv", { months: "januari_februari_mars_april_maj_juni_juli_augusti_september_oktober_november_december".split("_"), monthsShort: "jan_feb_mar_apr_maj_jun_jul_aug_sep_okt_nov_dec".split("_"), weekdays: "söndag_måndag_tisdag_onsdag_torsdag_fredag_lördag".split("_"), weekdaysShort: "sön_mån_tis_ons_tor_fre_lör".split("_"), weekdaysMin: "sö_må_ti_on_to_fr_lö".split("_"), longDateFormat: { LT: "HH:mm", LTS: "HH:mm:ss", L: "YYYY-MM-DD", LL: "D MMMM YYYY", LLL: "D MMMM YYYY [kl.] HH:mm", LLLL: "dddd D MMMM YYYY [kl.] HH:mm", lll: "D MMM YYYY HH:mm", llll: "ddd D MMM YYYY HH:mm" }, calendar: { sameDay: "[Idag] LT", nextDay: "[Imorgon] LT", lastDay: "[Igår] LT", nextWeek: "[På] dddd LT", lastWeek: "[I] dddd[s] LT", sameElse: "L" }, relativeTime: { future: "om %s", past: "för %s sedan", s: "några sekunder", ss: "%d sekunder", m: "en minut", mm: "%d minuter", h: "en timme", hh: "%d timmar", d: "en dag", dd: "%d dagar", M: "en månad", MM: "%d månader", y: "ett år", yy: "%d år" }, dayOfMonthOrdinalParse: /\d{1,2}(e|a)/, ordinal: function (e) { var t = e % 10, a = 1 == ~~(e % 100 / 10) ? "e" : 1 === t ? "a" : 2 === t ? "a" : "e"; return e + a }, week: { dow: 1, doy: 4 } }) }(a(0)) }, function (e, t, a) { !function (e) { "use strict"; e.defineLocale("sw", { months: "Januari_Februari_Machi_Aprili_Mei_Juni_Julai_Agosti_Septemba_Oktoba_Novemba_Desemba".split("_"), monthsShort: "Jan_Feb_Mac_Apr_Mei_Jun_Jul_Ago_Sep_Okt_Nov_Des".split("_"), weekdays: "Jumapili_Jumatatu_Jumanne_Jumatano_Alhamisi_Ijumaa_Jumamosi".split("_"), weekdaysShort: "Jpl_Jtat_Jnne_Jtan_Alh_Ijm_Jmos".split("_"), weekdaysMin: "J2_J3_J4_J5_Al_Ij_J1".split("_"), weekdaysParseExact: !0, longDateFormat: { LT: "HH:mm", LTS: "HH:mm:ss", L: "DD.MM.YYYY", LL: "D MMMM YYYY", LLL: "D MMMM YYYY HH:mm", LLLL: "dddd, D MMMM YYYY HH:mm" }, calendar: { sameDay: "[leo saa] LT", nextDay: "[kesho saa] LT", nextWeek: "[wiki ijayo] dddd [saat] LT", lastDay: "[jana] LT", lastWeek: "[wiki iliyopita] dddd [saat] LT", sameElse: "L" }, relativeTime: { future: "%s baadaye", past: "tokea %s", s: "hivi punde", ss: "sekunde %d", m: "dakika moja", mm: "dakika %d", h: "saa limoja", hh: "masaa %d", d: "siku moja", dd: "masiku %d", M: "mwezi mmoja", MM: "miezi %d", y: "mwaka mmoja", yy: "miaka %d" }, week: { dow: 1, doy: 7 } }) }(a(0)) }, function (e, t, a) { !function (e) { "use strict"; var t = { 1: "௧", 2: "௨", 3: "௩", 4: "௪", 5: "௫", 6: "௬", 7: "௭", 8: "௮", 9: "௯", 0: "௦" }, a = { "௧": "1", "௨": "2", "௩": "3", "௪": "4", "௫": "5", "௬": "6", "௭": "7", "௮": "8", "௯": "9", "௦": "0" }; e.defineLocale("ta", { months: "ஜனவரி_பிப்ரவரி_மார்ச்_ஏப்ரல்_மே_ஜூன்_ஜூலை_ஆகஸ்ட்_செப்டெம்பர்_அக்டோபர்_நவம்பர்_டிசம்பர்".split("_"), monthsShort: "ஜனவரி_பிப்ரவரி_மார்ச்_ஏப்ரல்_மே_ஜூன்_ஜூலை_ஆகஸ்ட்_செப்டெம்பர்_அக்டோபர்_நவம்பர்_டிசம்பர்".split("_"), weekdays: "ஞாயிற்றுக்கிழமை_திங்கட்கிழமை_செவ்வாய்கிழமை_புதன்கிழமை_வியாழக்கிழமை_வெள்ளிக்கிழமை_சனிக்கிழமை".split("_"), weekdaysShort: "ஞாயிறு_திங்கள்_செவ்வாய்_புதன்_வியாழன்_வெள்ளி_சனி".split("_"), weekdaysMin: "ஞா_தி_செ_பு_வி_வெ_ச".split("_"), longDateFormat: { LT: "HH:mm", LTS: "HH:mm:ss", L: "DD/MM/YYYY", LL: "D MMMM YYYY", LLL: "D MMMM YYYY, HH:mm", LLLL: "dddd, D MMMM YYYY, HH:mm" }, calendar: { sameDay: "[இன்று] LT", nextDay: "[நாளை] LT", nextWeek: "dddd, LT", lastDay: "[நேற்று] LT", lastWeek: "[கடந்த வாரம்] dddd, LT", sameElse: "L" }, relativeTime: { future: "%s இல்", past: "%s முன்", s: "ஒரு சில விநாடிகள்", ss: "%d விநாடிகள்", m: "ஒரு நிமிடம்", mm: "%d நிமிடங்கள்", h: "ஒரு மணி நேரம்", hh: "%d மணி நேரம்", d: "ஒரு நாள்", dd: "%d நாட்கள்", M: "ஒரு மாதம்", MM: "%d மாதங்கள்", y: "ஒரு வருடம்", yy: "%d ஆண்டுகள்" }, dayOfMonthOrdinalParse: /\d{1,2}வது/, ordinal: function (e) { return e + "வது" }, preparse: function (e) { return e.replace(/[௧௨௩௪௫௬௭௮௯௦]/g, function (e) { return a[e] }) }, postformat: function (e) { return e.replace(/\d/g, function (e) { return t[e] }) }, meridiemParse: /யாமம்|வைகறை|காலை|நண்பகல்|எற்பாடு|மாலை/, meridiem: function (e, t, a) { return e < 2 ? " யாமம்" : e < 6 ? " வைகறை" : e < 10 ? " காலை" : e < 14 ? " நண்பகல்" : e < 18 ? " எற்பாடு" : e < 22 ? " மாலை" : " யாமம்" }, meridiemHour: function (e, t) { return 12 === e && (e = 0), "யாமம்" === t ? e < 2 ? e : e + 12 : "வைகறை" === t || "காலை" === t ? e : "நண்பகல்" === t && e >= 10 ? e : e + 12 }, week: { dow: 0, doy: 6 } }) }(a(0)) }, function (e, t, a) { !function (e) { "use strict"; e.defineLocale("te", { months: "జనవరి_ఫిబ్రవరి_మార్చి_ఏప్రిల్_మే_జూన్_జూలై_ఆగస్టు_సెప్టెంబర్_అక్టోబర్_నవంబర్_డిసెంబర్".split("_"), monthsShort: "జన._ఫిబ్ర._మార్చి_ఏప్రి._మే_జూన్_జూలై_ఆగ._సెప్._అక్టో._నవ._డిసె.".split("_"), monthsParseExact: !0, weekdays: "ఆదివారం_సోమవారం_మంగళవారం_బుధవారం_గురువారం_శుక్రవారం_శనివారం".split("_"), weekdaysShort: "ఆది_సోమ_మంగళ_బుధ_గురు_శుక్ర_శని".split("_"), weekdaysMin: "ఆ_సో_మం_బు_గు_శు_శ".split("_"), longDateFormat: { LT: "A h:mm", LTS: "A h:mm:ss", L: "DD/MM/YYYY", LL: "D MMMM YYYY", LLL: "D MMMM YYYY, A h:mm", LLLL: "dddd, D MMMM YYYY, A h:mm" }, calendar: { sameDay: "[నేడు] LT", nextDay: "[రేపు] LT", nextWeek: "dddd, LT", lastDay: "[నిన్న] LT", lastWeek: "[గత] dddd, LT", sameElse: "L" }, relativeTime: { future: "%s లో", past: "%s క్రితం", s: "కొన్ని క్షణాలు", ss: "%d సెకన్లు", m: "ఒక నిమిషం", mm: "%d నిమిషాలు", h: "ఒక గంట", hh: "%d గంటలు", d: "ఒక రోజు", dd: "%d రోజులు", M: "ఒక నెల", MM: "%d నెలలు", y: "ఒక సంవత్సరం", yy: "%d సంవత్సరాలు" }, dayOfMonthOrdinalParse: /\d{1,2}వ/, ordinal: "%dవ", meridiemParse: /రాత్రి|ఉదయం|మధ్యాహ్నం|సాయంత్రం/, meridiemHour: function (e, t) { return 12 === e && (e = 0), "రాత్రి" === t ? e < 4 ? e : e + 12 : "ఉదయం" === t ? e : "మధ్యాహ్నం" === t ? e >= 10 ? e : e + 12 : "సాయంత్రం" === t ? e + 12 : void 0 }, meridiem: function (e, t, a) { return e < 4 ? "రాత్రి" : e < 10 ? "ఉదయం" : e < 17 ? "మధ్యాహ్నం" : e < 20 ? "సాయంత్రం" : "రాత్రి" }, week: { dow: 0, doy: 6 } }) }(a(0)) }, function (e, t, a) { !function (e) { "use strict"; e.defineLocale("tet", { months: "Janeiru_Fevereiru_Marsu_Abril_Maiu_Juñu_Jullu_Agustu_Setembru_Outubru_Novembru_Dezembru".split("_"), monthsShort: "Jan_Fev_Mar_Abr_Mai_Jun_Jul_Ago_Set_Out_Nov_Dez".split("_"), weekdays: "Domingu_Segunda_Tersa_Kuarta_Kinta_Sesta_Sabadu".split("_"), weekdaysShort: "Dom_Seg_Ters_Kua_Kint_Sest_Sab".split("_"), weekdaysMin: "Do_Seg_Te_Ku_Ki_Ses_Sa".split("_"), longDateFormat: { LT: "HH:mm", LTS: "HH:mm:ss", L: "DD/MM/YYYY", LL: "D MMMM YYYY", LLL: "D MMMM YYYY HH:mm", LLLL: "dddd, D MMMM YYYY HH:mm" }, calendar: { sameDay: "[Ohin iha] LT", nextDay: "[Aban iha] LT", nextWeek: "dddd [iha] LT", lastDay: "[Horiseik iha] LT", lastWeek: "dddd [semana kotuk] [iha] LT", sameElse: "L" }, relativeTime: { future: "iha %s", past: "%s liuba", s: "minutu balun", ss: "minutu %d", m: "minutu ida", mm: "minutu %d", h: "oras ida", hh: "oras %d", d: "loron ida", dd: "loron %d", M: "fulan ida", MM: "fulan %d", y: "tinan ida", yy: "tinan %d" }, dayOfMonthOrdinalParse: /\d{1,2}(st|nd|rd|th)/, ordinal: function (e) { var t = e % 10, a = 1 == ~~(e % 100 / 10) ? "th" : 1 === t ? "st" : 2 === t ? "nd" : 3 === t ? "rd" : "th"; return e + a }, week: { dow: 1, doy: 4 } }) }(a(0)) }, function (e, t, a) { !function (e) { "use strict"; var t = { 0: "-ум", 1: "-ум", 2: "-юм", 3: "-юм", 4: "-ум", 5: "-ум", 6: "-ум", 7: "-ум", 8: "-ум", 9: "-ум", 10: "-ум", 12: "-ум", 13: "-ум", 20: "-ум", 30: "-юм", 40: "-ум", 50: "-ум", 60: "-ум", 70: "-ум", 80: "-ум", 90: "-ум", 100: "-ум" }; e.defineLocale("tg", { months: "январ_феврал_март_апрел_май_июн_июл_август_сентябр_октябр_ноябр_декабр".split("_"), monthsShort: "янв_фев_мар_апр_май_июн_июл_авг_сен_окт_ноя_дек".split("_"), weekdays: "якшанбе_душанбе_сешанбе_чоршанбе_панҷшанбе_ҷумъа_шанбе".split("_"), weekdaysShort: "яшб_дшб_сшб_чшб_пшб_ҷум_шнб".split("_"), weekdaysMin: "яш_дш_сш_чш_пш_ҷм_шб".split("_"), longDateFormat: { LT: "HH:mm", LTS: "HH:mm:ss", L: "DD/MM/YYYY", LL: "D MMMM YYYY", LLL: "D MMMM YYYY HH:mm", LLLL: "dddd, D MMMM YYYY HH:mm" }, calendar: { sameDay: "[Имрӯз соати] LT", nextDay: "[Пагоҳ соати] LT", lastDay: "[Дирӯз соати] LT", nextWeek: "dddd[и] [ҳафтаи оянда соати] LT", lastWeek: "dddd[и] [ҳафтаи гузашта соати] LT", sameElse: "L" }, relativeTime: { future: "баъди %s", past: "%s пеш", s: "якчанд сония", m: "як дақиқа", mm: "%d дақиқа", h: "як соат", hh: "%d соат", d: "як рӯз", dd: "%d рӯз", M: "як моҳ", MM: "%d моҳ", y: "як сол", yy: "%d сол" }, meridiemParse: /шаб|субҳ|рӯз|бегоҳ/, meridiemHour: function (e, t) { return 12 === e && (e = 0), "шаб" === t ? e < 4 ? e : e + 12 : "субҳ" === t ? e : "рӯз" === t ? e >= 11 ? e : e + 12 : "бегоҳ" === t ? e + 12 : void 0 }, meridiem: function (e, t, a) { return e < 4 ? "шаб" : e < 11 ? "субҳ" : e < 16 ? "рӯз" : e < 19 ? "бегоҳ" : "шаб" }, dayOfMonthOrdinalParse: /\d{1,2}-(ум|юм)/, ordinal: function (e) { var a = e % 10, n = e >= 100 ? 100 : null; return e + (t[e] || t[a] || t[n]) }, week: { dow: 1, doy: 7 } }) }(a(0)) }, function (e, t, a) { !function (e) { "use strict"; e.defineLocale("th", { months: "มกราคม_กุมภาพันธ์_มีนาคม_เมษายน_พฤษภาคม_มิถุนายน_กรกฎาคม_สิงหาคม_กันยายน_ตุลาคม_พฤศจิกายน_ธันวาคม".split("_"), monthsShort: "ม.ค._ก.พ._มี.ค._เม.ย._พ.ค._มิ.ย._ก.ค._ส.ค._ก.ย._ต.ค._พ.ย._ธ.ค.".split("_"), monthsParseExact: !0, weekdays: "อาทิตย์_จันทร์_อังคาร_พุธ_พฤหัสบดี_ศุกร์_เสาร์".split("_"), weekdaysShort: "อาทิตย์_จันทร์_อังคาร_พุธ_พฤหัส_ศุกร์_เสาร์".split("_"), weekdaysMin: "อา._จ._อ._พ._พฤ._ศ._ส.".split("_"), weekdaysParseExact: !0, longDateFormat: { LT: "H:mm", LTS: "H:mm:ss", L: "DD/MM/YYYY", LL: "D MMMM YYYY", LLL: "D MMMM YYYY เวลา H:mm", LLLL: "วันddddที่ D MMMM YYYY เวลา H:mm" }, meridiemParse: /ก่อนเที่ยง|หลังเที่ยง/, isPM: function (e) { return "หลังเที่ยง" === e }, meridiem: function (e, t, a) { return e < 12 ? "ก่อนเที่ยง" : "หลังเที่ยง" }, calendar: { sameDay: "[วันนี้ เวลา] LT", nextDay: "[พรุ่งนี้ เวลา] LT", nextWeek: "dddd[หน้า เวลา] LT", lastDay: "[เมื่อวานนี้ เวลา] LT", lastWeek: "[วัน]dddd[ที่แล้ว เวลา] LT", sameElse: "L" }, relativeTime: { future: "อีก %s", past: "%sที่แล้ว", s: "ไม่กี่วินาที", ss: "%d วินาที", m: "1 นาที", mm: "%d นาที", h: "1 ชั่วโมง", hh: "%d ชั่วโมง", d: "1 วัน", dd: "%d วัน", M: "1 เดือน", MM: "%d เดือน", y: "1 ปี", yy: "%d ปี" } }) }(a(0)) }, function (e, t, a) { !function (e) { "use strict"; e.defineLocale("tl-ph", { months: "Enero_Pebrero_Marso_Abril_Mayo_Hunyo_Hulyo_Agosto_Setyembre_Oktubre_Nobyembre_Disyembre".split("_"), monthsShort: "Ene_Peb_Mar_Abr_May_Hun_Hul_Ago_Set_Okt_Nob_Dis".split("_"), weekdays: "Linggo_Lunes_Martes_Miyerkules_Huwebes_Biyernes_Sabado".split("_"), weekdaysShort: "Lin_Lun_Mar_Miy_Huw_Biy_Sab".split("_"), weekdaysMin: "Li_Lu_Ma_Mi_Hu_Bi_Sab".split("_"), longDateFormat: { LT: "HH:mm", LTS: "HH:mm:ss", L: "MM/D/YYYY", LL: "MMMM D, YYYY", LLL: "MMMM D, YYYY HH:mm", LLLL: "dddd, MMMM DD, YYYY HH:mm" }, calendar: { sameDay: "LT [ngayong araw]", nextDay: "[Bukas ng] LT", nextWeek: "LT [sa susunod na] dddd", lastDay: "LT [kahapon]", lastWeek: "LT [noong nakaraang] dddd", sameElse: "L" }, relativeTime: { future: "sa loob ng %s", past: "%s ang nakalipas", s: "ilang segundo", ss: "%d segundo", m: "isang minuto", mm: "%d minuto", h: "isang oras", hh: "%d oras", d: "isang araw", dd: "%d araw", M: "isang buwan", MM: "%d buwan", y: "isang taon", yy: "%d taon" }, dayOfMonthOrdinalParse: /\d{1,2}/, ordinal: function (e) { return e }, week: { dow: 1, doy: 4 } }) }(a(0)) }, function (e, t, a) { !function (e) { "use strict"; var t = "pagh_wa’_cha’_wej_loS_vagh_jav_Soch_chorgh_Hut".split("_"); function a(e, a, n, s) { var r = function (e) { var a = Math.floor(e % 1e3 / 100), n = Math.floor(e % 100 / 10), s = e % 10, r = ""; return a > 0 && (r += t[a] + "vatlh"), n > 0 && (r += ("" !== r ? " " : "") + t[n] + "maH"), s > 0 && (r += ("" !== r ? " " : "") + t[s]), "" === r ? "pagh" : r }(e); switch (n) { case "ss": return r + " lup"; case "mm": return r + " tup"; case "hh": return r + " rep"; case "dd": return r + " jaj"; case "MM": return r + " jar"; case "yy": return r + " DIS" } } e.defineLocale("tlh", { months: "tera’ jar wa’_tera’ jar cha’_tera’ jar wej_tera’ jar loS_tera’ jar vagh_tera’ jar jav_tera’ jar Soch_tera’ jar chorgh_tera’ jar Hut_tera’ jar wa’maH_tera’ jar wa’maH wa’_tera’ jar wa’maH cha’".split("_"), monthsShort: "jar wa’_jar cha’_jar wej_jar loS_jar vagh_jar jav_jar Soch_jar chorgh_jar Hut_jar wa’maH_jar wa’maH wa’_jar wa’maH cha’".split("_"), monthsParseExact: !0, weekdays: "lojmItjaj_DaSjaj_povjaj_ghItlhjaj_loghjaj_buqjaj_ghInjaj".split("_"), weekdaysShort: "lojmItjaj_DaSjaj_povjaj_ghItlhjaj_loghjaj_buqjaj_ghInjaj".split("_"), weekdaysMin: "lojmItjaj_DaSjaj_povjaj_ghItlhjaj_loghjaj_buqjaj_ghInjaj".split("_"), longDateFormat: { LT: "HH:mm", LTS: "HH:mm:ss", L: "DD.MM.YYYY", LL: "D MMMM YYYY", LLL: "D MMMM YYYY HH:mm", LLLL: "dddd, D MMMM YYYY HH:mm" }, calendar: { sameDay: "[DaHjaj] LT", nextDay: "[wa’leS] LT", nextWeek: "LLL", lastDay: "[wa’Hu’] LT", lastWeek: "LLL", sameElse: "L" }, relativeTime: { future: function (e) { var t = e; return t = -1 !== e.indexOf("jaj") ? t.slice(0, -3) + "leS" : -1 !== e.indexOf("jar") ? t.slice(0, -3) + "waQ" : -1 !== e.indexOf("DIS") ? t.slice(0, -3) + "nem" : t + " pIq" }, past: function (e) { var t = e; return t = -1 !== e.indexOf("jaj") ? t.slice(0, -3) + "Hu’" : -1 !== e.indexOf("jar") ? t.slice(0, -3) + "wen" : -1 !== e.indexOf("DIS") ? t.slice(0, -3) + "ben" : t + " ret" }, s: "puS lup", ss: a, m: "wa’ tup", mm: a, h: "wa’ rep", hh: a, d: "wa’ jaj", dd: a, M: "wa’ jar", MM: a, y: "wa’ DIS", yy: a }, dayOfMonthOrdinalParse: /\d{1,2}\./, ordinal: "%d.", week: { dow: 1, doy: 4 } }) }(a(0)) }, function (e, t, a) { !function (e) { "use strict"; var t = { 1: "'inci", 5: "'inci", 8: "'inci", 70: "'inci", 80: "'inci", 2: "'nci", 7: "'nci", 20: "'nci", 50: "'nci", 3: "'üncü", 4: "'üncü", 100: "'üncü", 6: "'ncı", 9: "'uncu", 10: "'uncu", 30: "'uncu", 60: "'ıncı", 90: "'ıncı" }; e.defineLocale("tr", { months: "Ocak_Şubat_Mart_Nisan_Mayıs_Haziran_Temmuz_Ağustos_Eylül_Ekim_Kasım_Aralık".split("_"), monthsShort: "Oca_Şub_Mar_Nis_May_Haz_Tem_Ağu_Eyl_Eki_Kas_Ara".split("_"), weekdays: "Pazar_Pazartesi_Salı_Çarşamba_Perşembe_Cuma_Cumartesi".split("_"), weekdaysShort: "Paz_Pts_Sal_Çar_Per_Cum_Cts".split("_"), weekdaysMin: "Pz_Pt_Sa_Ça_Pe_Cu_Ct".split("_"), longDateFormat: { LT: "HH:mm", LTS: "HH:mm:ss", L: "DD.MM.YYYY", LL: "D MMMM YYYY", LLL: "D MMMM YYYY HH:mm", LLLL: "dddd, D MMMM YYYY HH:mm" }, calendar: { sameDay: "[bugün saat] LT", nextDay: "[yarın saat] LT", nextWeek: "[gelecek] dddd [saat] LT", lastDay: "[dün] LT", lastWeek: "[geçen] dddd [saat] LT", sameElse: "L" }, relativeTime: { future: "%s sonra", past: "%s önce", s: "birkaç saniye", ss: "%d saniye", m: "bir dakika", mm: "%d dakika", h: "bir saat", hh: "%d saat", d: "bir gün", dd: "%d gün", M: "bir ay", MM: "%d ay", y: "bir yıl", yy: "%d yıl" }, ordinal: function (e, a) { switch (a) { case "d": case "D": case "Do": case "DD": return e; default: if (0 === e) return e + "'ıncı"; var n = e % 10, s = e % 100 - n, r = e >= 100 ? 100 : null; return e + (t[n] || t[s] || t[r]) } }, week: { dow: 1, doy: 7 } }) }(a(0)) }, function (e, t, a) { !function (e) { "use strict"; function t(e, t, a, n) { var s = { s: ["viensas secunds", "'iensas secunds"], ss: [e + " secunds", e + " secunds"], m: ["'n míut", "'iens míut"], mm: [e + " míuts", e + " míuts"], h: ["'n þora", "'iensa þora"], hh: [e + " þoras", e + " þoras"], d: ["'n ziua", "'iensa ziua"], dd: [e + " ziuas", e + " ziuas"], M: ["'n mes", "'iens mes"], MM: [e + " mesen", e + " mesen"], y: ["'n ar", "'iens ar"], yy: [e + " ars", e + " ars"] }; return n ? s[a][0] : t ? s[a][0] : s[a][1] } e.defineLocale("tzl", { months: "Januar_Fevraglh_Març_Avrïu_Mai_Gün_Julia_Guscht_Setemvar_Listopäts_Noemvar_Zecemvar".split("_"), monthsShort: "Jan_Fev_Mar_Avr_Mai_Gün_Jul_Gus_Set_Lis_Noe_Zec".split("_"), weekdays: "Súladi_Lúneçi_Maitzi_Márcuri_Xhúadi_Viénerçi_Sáturi".split("_"), weekdaysShort: "Súl_Lún_Mai_Már_Xhú_Vié_Sát".split("_"), weekdaysMin: "Sú_Lú_Ma_Má_Xh_Vi_Sá".split("_"), longDateFormat: { LT: "HH.mm", LTS: "HH.mm.ss", L: "DD.MM.YYYY", LL: "D. MMMM [dallas] YYYY", LLL: "D. MMMM [dallas] YYYY HH.mm", LLLL: "dddd, [li] D. MMMM [dallas] YYYY HH.mm" }, meridiemParse: /d\'o|d\'a/i, isPM: function (e) { return "d'o" === e.toLowerCase() }, meridiem: function (e, t, a) { return e > 11 ? a ? "d'o" : "D'O" : a ? "d'a" : "D'A" }, calendar: { sameDay: "[oxhi à] LT", nextDay: "[demà à] LT", nextWeek: "dddd [à] LT", lastDay: "[ieiri à] LT", lastWeek: "[sür el] dddd [lasteu à] LT", sameElse: "L" }, relativeTime: { future: "osprei %s", past: "ja%s", s: t, ss: t, m: t, mm: t, h: t, hh: t, d: t, dd: t, M: t, MM: t, y: t, yy: t }, dayOfMonthOrdinalParse: /\d{1,2}\./, ordinal: "%d.", week: { dow: 1, doy: 4 } }) }(a(0)) }, function (e, t, a) { !function (e) { "use strict"; e.defineLocale("tzm", { months: "ⵉⵏⵏⴰⵢⵔ_ⴱⵕⴰⵢⵕ_ⵎⴰⵕⵚ_ⵉⴱⵔⵉⵔ_ⵎⴰⵢⵢⵓ_ⵢⵓⵏⵢⵓ_ⵢⵓⵍⵢⵓⵣ_ⵖⵓⵛⵜ_ⵛⵓⵜⴰⵏⴱⵉⵔ_ⴽⵟⵓⴱⵕ_ⵏⵓⵡⴰⵏⴱⵉⵔ_ⴷⵓⵊⵏⴱⵉⵔ".split("_"), monthsShort: "ⵉⵏⵏⴰⵢⵔ_ⴱⵕⴰⵢⵕ_ⵎⴰⵕⵚ_ⵉⴱⵔⵉⵔ_ⵎⴰⵢⵢⵓ_ⵢⵓⵏⵢⵓ_ⵢⵓⵍⵢⵓⵣ_ⵖⵓⵛⵜ_ⵛⵓⵜⴰⵏⴱⵉⵔ_ⴽⵟⵓⴱⵕ_ⵏⵓⵡⴰⵏⴱⵉⵔ_ⴷⵓⵊⵏⴱⵉⵔ".split("_"), weekdays: "ⴰⵙⴰⵎⴰⵙ_ⴰⵢⵏⴰⵙ_ⴰⵙⵉⵏⴰⵙ_ⴰⴽⵔⴰⵙ_ⴰⴽⵡⴰⵙ_ⴰⵙⵉⵎⵡⴰⵙ_ⴰⵙⵉⴹⵢⴰⵙ".split("_"), weekdaysShort: "ⴰⵙⴰⵎⴰⵙ_ⴰⵢⵏⴰⵙ_ⴰⵙⵉⵏⴰⵙ_ⴰⴽⵔⴰⵙ_ⴰⴽⵡⴰⵙ_ⴰⵙⵉⵎⵡⴰⵙ_ⴰⵙⵉⴹⵢⴰⵙ".split("_"), weekdaysMin: "ⴰⵙⴰⵎⴰⵙ_ⴰⵢⵏⴰⵙ_ⴰⵙⵉⵏⴰⵙ_ⴰⴽⵔⴰⵙ_ⴰⴽⵡⴰⵙ_ⴰⵙⵉⵎⵡⴰⵙ_ⴰⵙⵉⴹⵢⴰⵙ".split("_"), longDateFormat: { LT: "HH:mm", LTS: "HH:mm:ss", L: "DD/MM/YYYY", LL: "D MMMM YYYY", LLL: "D MMMM YYYY HH:mm", LLLL: "dddd D MMMM YYYY HH:mm" }, calendar: { sameDay: "[ⴰⵙⴷⵅ ⴴ] LT", nextDay: "[ⴰⵙⴽⴰ ⴴ] LT", nextWeek: "dddd [ⴴ] LT", lastDay: "[ⴰⵚⴰⵏⵜ ⴴ] LT", lastWeek: "dddd [ⴴ] LT", sameElse: "L" }, relativeTime: { future: "ⴷⴰⴷⵅ ⵙ ⵢⴰⵏ %s", past: "ⵢⴰⵏ %s", s: "ⵉⵎⵉⴽ", ss: "%d ⵉⵎⵉⴽ", m: "ⵎⵉⵏⵓⴺ", mm: "%d ⵎⵉⵏⵓⴺ", h: "ⵙⴰⵄⴰ", hh: "%d ⵜⴰⵙⵙⴰⵄⵉⵏ", d: "ⴰⵙⵙ", dd: "%d oⵙⵙⴰⵏ", M: "ⴰⵢoⵓⵔ", MM: "%d ⵉⵢⵢⵉⵔⵏ", y: "ⴰⵙⴳⴰⵙ", yy: "%d ⵉⵙⴳⴰⵙⵏ" }, week: { dow: 6, doy: 12 } }) }(a(0)) }, function (e, t, a) { !function (e) { "use strict"; e.defineLocale("tzm-latn", { months: "innayr_brˤayrˤ_marˤsˤ_ibrir_mayyw_ywnyw_ywlywz_ɣwšt_šwtanbir_ktˤwbrˤ_nwwanbir_dwjnbir".split("_"), monthsShort: "innayr_brˤayrˤ_marˤsˤ_ibrir_mayyw_ywnyw_ywlywz_ɣwšt_šwtanbir_ktˤwbrˤ_nwwanbir_dwjnbir".split("_"), weekdays: "asamas_aynas_asinas_akras_akwas_asimwas_asiḍyas".split("_"), weekdaysShort: "asamas_aynas_asinas_akras_akwas_asimwas_asiḍyas".split("_"), weekdaysMin: "asamas_aynas_asinas_akras_akwas_asimwas_asiḍyas".split("_"), longDateFormat: { LT: "HH:mm", LTS: "HH:mm:ss", L: "DD/MM/YYYY", LL: "D MMMM YYYY", LLL: "D MMMM YYYY HH:mm", LLLL: "dddd D MMMM YYYY HH:mm" }, calendar: { sameDay: "[asdkh g] LT", nextDay: "[aska g] LT", nextWeek: "dddd [g] LT", lastDay: "[assant g] LT", lastWeek: "dddd [g] LT", sameElse: "L" }, relativeTime: { future: "dadkh s yan %s", past: "yan %s", s: "imik", ss: "%d imik", m: "minuḍ", mm: "%d minuḍ", h: "saɛa", hh: "%d tassaɛin", d: "ass", dd: "%d ossan", M: "ayowr", MM: "%d iyyirn", y: "asgas", yy: "%d isgasn" }, week: { dow: 6, doy: 12 } }) }(a(0)) }, function (e, t, a) { !function (e) { "use strict"; e.defineLocale("ug-cn", { months: "يانۋار_فېۋرال_مارت_ئاپرېل_ماي_ئىيۇن_ئىيۇل_ئاۋغۇست_سېنتەبىر_ئۆكتەبىر_نويابىر_دېكابىر".split("_"), monthsShort: "يانۋار_فېۋرال_مارت_ئاپرېل_ماي_ئىيۇن_ئىيۇل_ئاۋغۇست_سېنتەبىر_ئۆكتەبىر_نويابىر_دېكابىر".split("_"), weekdays: "يەكشەنبە_دۈشەنبە_سەيشەنبە_چارشەنبە_پەيشەنبە_جۈمە_شەنبە".split("_"), weekdaysShort: "يە_دۈ_سە_چا_پە_جۈ_شە".split("_"), weekdaysMin: "يە_دۈ_سە_چا_پە_جۈ_شە".split("_"), longDateFormat: { LT: "HH:mm", LTS: "HH:mm:ss", L: "YYYY-MM-DD", LL: "YYYY-يىلىM-ئاينىڭD-كۈنى", LLL: "YYYY-يىلىM-ئاينىڭD-كۈنى، HH:mm", LLLL: "dddd، YYYY-يىلىM-ئاينىڭD-كۈنى، HH:mm" }, meridiemParse: /يېرىم كېچە|سەھەر|چۈشتىن بۇرۇن|چۈش|چۈشتىن كېيىن|كەچ/, meridiemHour: function (e, t) { return 12 === e && (e = 0), "يېرىم كېچە" === t || "سەھەر" === t || "چۈشتىن بۇرۇن" === t ? e : "چۈشتىن كېيىن" === t || "كەچ" === t ? e + 12 : e >= 11 ? e : e + 12 }, meridiem: function (e, t, a) { var n = 100 * e + t; return n < 600 ? "يېرىم كېچە" : n < 900 ? "سەھەر" : n < 1130 ? "چۈشتىن بۇرۇن" : n < 1230 ? "چۈش" : n < 1800 ? "چۈشتىن كېيىن" : "كەچ" }, calendar: { sameDay: "[بۈگۈن سائەت] LT", nextDay: "[ئەتە سائەت] LT", nextWeek: "[كېلەركى] dddd [سائەت] LT", lastDay: "[تۆنۈگۈن] LT", lastWeek: "[ئالدىنقى] dddd [سائەت] LT", sameElse: "L" }, relativeTime: { future: "%s كېيىن", past: "%s بۇرۇن", s: "نەچچە سېكونت", ss: "%d سېكونت", m: "بىر مىنۇت", mm: "%d مىنۇت", h: "بىر سائەت", hh: "%d سائەت", d: "بىر كۈن", dd: "%d كۈن", M: "بىر ئاي", MM: "%d ئاي", y: "بىر يىل", yy: "%d يىل" }, dayOfMonthOrdinalParse: /\d{1,2}(-كۈنى|-ئاي|-ھەپتە)/, ordinal: function (e, t) { switch (t) { case "d": case "D": case "DDD": return e + "-كۈنى"; case "w": case "W": return e + "-ھەپتە"; default: return e } }, preparse: function (e) { return e.replace(/،/g, ",") }, postformat: function (e) { return e.replace(/,/g, "،") }, week: { dow: 1, doy: 7 } }) }(a(0)) }, function (e, t, a) { !function (e) { "use strict"; function t(e, t, a) { var n = { ss: t ? "секунда_секунди_секунд" : "секунду_секунди_секунд", mm: t ? "хвилина_хвилини_хвилин" : "хвилину_хвилини_хвилин", hh: t ? "година_години_годин" : "годину_години_годин", dd: "день_дні_днів", MM: "місяць_місяці_місяців", yy: "рік_роки_років" }; return "m" === a ? t ? "хвилина" : "хвилину" : "h" === a ? t ? "година" : "годину" : e + " " + function (e, t) { var a = e.split("_"); return t % 10 == 1 && t % 100 != 11 ? a[0] : t % 10 >= 2 && t % 10 <= 4 && (t % 100 < 10 || t % 100 >= 20) ? a[1] : a[2] }(n[a], +e) } function a(e) { return function () { return e + "о" + (11 === this.hours() ? "б" : "") + "] LT" } } e.defineLocale("uk", { months: { format: "січня_лютого_березня_квітня_травня_червня_липня_серпня_вересня_жовтня_листопада_грудня".split("_"), standalone: "січень_лютий_березень_квітень_травень_червень_липень_серпень_вересень_жовтень_листопад_грудень".split("_") }, monthsShort: "січ_лют_бер_квіт_трав_черв_лип_серп_вер_жовт_лист_груд".split("_"), weekdays: function (e, t) { var a = { nominative: "неділя_понеділок_вівторок_середа_четвер_п’ятниця_субота".split("_"), accusative: "неділю_понеділок_вівторок_середу_четвер_п’ятницю_суботу".split("_"), genitive: "неділі_понеділка_вівторка_середи_четверга_п’ятниці_суботи".split("_") }; if (!e) return a.nominative; var n = /(\[[ВвУу]\]) ?dddd/.test(t) ? "accusative" : /\[?(?:минулої|наступної)? ?\] ?dddd/.test(t) ? "genitive" : "nominative"; return a[n][e.day()] }, weekdaysShort: "нд_пн_вт_ср_чт_пт_сб".split("_"), weekdaysMin: "нд_пн_вт_ср_чт_пт_сб".split("_"), longDateFormat: { LT: "HH:mm", LTS: "HH:mm:ss", L: "DD.MM.YYYY", LL: "D MMMM YYYY р.", LLL: "D MMMM YYYY р., HH:mm", LLLL: "dddd, D MMMM YYYY р., HH:mm" }, calendar: { sameDay: a("[Сьогодні "), nextDay: a("[Завтра "), lastDay: a("[Вчора "), nextWeek: a("[У] dddd ["), lastWeek: function () { switch (this.day()) { case 0: case 3: case 5: case 6: return a("[Минулої] dddd [").call(this); case 1: case 2: case 4: return a("[Минулого] dddd [").call(this) } }, sameElse: "L" }, relativeTime: { future: "за %s", past: "%s тому", s: "декілька секунд", ss: t, m: t, mm: t, h: "годину", hh: t, d: "день", dd: t, M: "місяць", MM: t, y: "рік", yy: t }, meridiemParse: /ночі|ранку|дня|вечора/, isPM: function (e) { return /^(дня|вечора)$/.test(e) }, meridiem: function (e, t, a) { return e < 4 ? "ночі" : e < 12 ? "ранку" : e < 17 ? "дня" : "вечора" }, dayOfMonthOrdinalParse: /\d{1,2}-(й|го)/, ordinal: function (e, t) { switch (t) { case "M": case "d": case "DDD": case "w": case "W": return e + "-й"; case "D": return e + "-го"; default: return e } }, week: { dow: 1, doy: 7 } }) }(a(0)) }, function (e, t, a) { !function (e) { "use strict"; var t = ["جنوری", "فروری", "مارچ", "اپریل", "مئی", "جون", "جولائی", "اگست", "ستمبر", "اکتوبر", "نومبر", "دسمبر"], a = ["اتوار", "پیر", "منگل", "بدھ", "جمعرات", "جمعہ", "ہفتہ"]; e.defineLocale("ur", { months: t, monthsShort: t, weekdays: a, weekdaysShort: a, weekdaysMin: a, longDateFormat: { LT: "HH:mm", LTS: "HH:mm:ss", L: "DD/MM/YYYY", LL: "D MMMM YYYY", LLL: "D MMMM YYYY HH:mm", LLLL: "dddd، D MMMM YYYY HH:mm" }, meridiemParse: /صبح|شام/, isPM: function (e) { return "شام" === e }, meridiem: function (e, t, a) { return e < 12 ? "صبح" : "شام" }, calendar: { sameDay: "[آج بوقت] LT", nextDay: "[کل بوقت] LT", nextWeek: "dddd [بوقت] LT", lastDay: "[گذشتہ روز بوقت] LT", lastWeek: "[گذشتہ] dddd [بوقت] LT", sameElse: "L" }, relativeTime: { future: "%s بعد", past: "%s قبل", s: "چند سیکنڈ", ss: "%d سیکنڈ", m: "ایک منٹ", mm: "%d منٹ", h: "ایک گھنٹہ", hh: "%d گھنٹے", d: "ایک دن", dd: "%d دن", M: "ایک ماہ", MM: "%d ماہ", y: "ایک سال", yy: "%d سال" }, preparse: function (e) { return e.replace(/،/g, ",") }, postformat: function (e) { return e.replace(/,/g, "،") }, week: { dow: 1, doy: 4 } }) }(a(0)) }, function (e, t, a) { !function (e) { "use strict"; e.defineLocale("uz", { months: "январ_феврал_март_апрел_май_июн_июл_август_сентябр_октябр_ноябр_декабр".split("_"), monthsShort: "янв_фев_мар_апр_май_июн_июл_авг_сен_окт_ноя_дек".split("_"), weekdays: "Якшанба_Душанба_Сешанба_Чоршанба_Пайшанба_Жума_Шанба".split("_"), weekdaysShort: "Якш_Душ_Сеш_Чор_Пай_Жум_Шан".split("_"), weekdaysMin: "Як_Ду_Се_Чо_Па_Жу_Ша".split("_"), longDateFormat: { LT: "HH:mm", LTS: "HH:mm:ss", L: "DD/MM/YYYY", LL: "D MMMM YYYY", LLL: "D MMMM YYYY HH:mm", LLLL: "D MMMM YYYY, dddd HH:mm" }, calendar: { sameDay: "[Бугун соат] LT [да]", nextDay: "[Эртага] LT [да]", nextWeek: "dddd [куни соат] LT [да]", lastDay: "[Кеча соат] LT [да]", lastWeek: "[Утган] dddd [куни соат] LT [да]", sameElse: "L" }, relativeTime: { future: "Якин %s ичида", past: "Бир неча %s олдин", s: "фурсат", ss: "%d фурсат", m: "бир дакика", mm: "%d дакика", h: "бир соат", hh: "%d соат", d: "бир кун", dd: "%d кун", M: "бир ой", MM: "%d ой", y: "бир йил", yy: "%d йил" }, week: { dow: 1, doy: 7 } }) }(a(0)) }, function (e, t, a) { !function (e) { "use strict"; e.defineLocale("uz-latn", { months: "Yanvar_Fevral_Mart_Aprel_May_Iyun_Iyul_Avgust_Sentabr_Oktabr_Noyabr_Dekabr".split("_"), monthsShort: "Yan_Fev_Mar_Apr_May_Iyun_Iyul_Avg_Sen_Okt_Noy_Dek".split("_"), weekdays: "Yakshanba_Dushanba_Seshanba_Chorshanba_Payshanba_Juma_Shanba".split("_"), weekdaysShort: "Yak_Dush_Sesh_Chor_Pay_Jum_Shan".split("_"), weekdaysMin: "Ya_Du_Se_Cho_Pa_Ju_Sha".split("_"), longDateFormat: { LT: "HH:mm", LTS: "HH:mm:ss", L: "DD/MM/YYYY", LL: "D MMMM YYYY", LLL: "D MMMM YYYY HH:mm", LLLL: "D MMMM YYYY, dddd HH:mm" }, calendar: { sameDay: "[Bugun soat] LT [da]", nextDay: "[Ertaga] LT [da]", nextWeek: "dddd [kuni soat] LT [da]", lastDay: "[Kecha soat] LT [da]", lastWeek: "[O'tgan] dddd [kuni soat] LT [da]", sameElse: "L" }, relativeTime: { future: "Yaqin %s ichida", past: "Bir necha %s oldin", s: "soniya", ss: "%d soniya", m: "bir daqiqa", mm: "%d daqiqa", h: "bir soat", hh: "%d soat", d: "bir kun", dd: "%d kun", M: "bir oy", MM: "%d oy", y: "bir yil", yy: "%d yil" }, week: { dow: 1, doy: 7 } }) }(a(0)) }, function (e, t, a) { !function (e) { "use strict"; e.defineLocale("vi", { months: "tháng 1_tháng 2_tháng 3_tháng 4_tháng 5_tháng 6_tháng 7_tháng 8_tháng 9_tháng 10_tháng 11_tháng 12".split("_"), monthsShort: "Th01_Th02_Th03_Th04_Th05_Th06_Th07_Th08_Th09_Th10_Th11_Th12".split("_"), monthsParseExact: !0, weekdays: "chủ nhật_thứ hai_thứ ba_thứ tư_thứ năm_thứ sáu_thứ bảy".split("_"), weekdaysShort: "CN_T2_T3_T4_T5_T6_T7".split("_"), weekdaysMin: "CN_T2_T3_T4_T5_T6_T7".split("_"), weekdaysParseExact: !0, meridiemParse: /sa|ch/i, isPM: function (e) { return /^ch$/i.test(e) }, meridiem: function (e, t, a) { return e < 12 ? a ? "sa" : "SA" : a ? "ch" : "CH" }, longDateFormat: { LT: "HH:mm", LTS: "HH:mm:ss", L: "DD/MM/YYYY", LL: "D MMMM [năm] YYYY", LLL: "D MMMM [năm] YYYY HH:mm", LLLL: "dddd, D MMMM [năm] YYYY HH:mm", l: "DD/M/YYYY", ll: "D MMM YYYY", lll: "D MMM YYYY HH:mm", llll: "ddd, D MMM YYYY HH:mm" }, calendar: { sameDay: "[Hôm nay lúc] LT", nextDay: "[Ngày mai lúc] LT", nextWeek: "dddd [tuần tới lúc] LT", lastDay: "[Hôm qua lúc] LT", lastWeek: "dddd [tuần rồi lúc] LT", sameElse: "L" }, relativeTime: { future: "%s tới", past: "%s trước", s: "vài giây", ss: "%d giây", m: "một phút", mm: "%d phút", h: "một giờ", hh: "%d giờ", d: "một ngày", dd: "%d ngày", M: "một tháng", MM: "%d tháng", y: "một năm", yy: "%d năm" }, dayOfMonthOrdinalParse: /\d{1,2}/, ordinal: function (e) { return e }, week: { dow: 1, doy: 4 } }) }(a(0)) }, function (e, t, a) { !function (e) { "use strict"; e.defineLocale("x-pseudo", { months: "J~áñúá~rý_F~ébrú~árý_~Márc~h_Áp~ríl_~Máý_~Júñé~_Júl~ý_Áú~gúst~_Sép~témb~ér_Ó~ctób~ér_Ñ~óvém~bér_~Décé~mbér".split("_"), monthsShort: "J~áñ_~Féb_~Már_~Ápr_~Máý_~Júñ_~Júl_~Áúg_~Sép_~Óct_~Ñóv_~Déc".split("_"), monthsParseExact: !0, weekdays: "S~úñdá~ý_Mó~ñdáý~_Túé~sdáý~_Wéd~ñésd~áý_T~húrs~dáý_~Fríd~áý_S~átúr~dáý".split("_"), weekdaysShort: "S~úñ_~Móñ_~Túé_~Wéd_~Thú_~Frí_~Sát".split("_"), weekdaysMin: "S~ú_Mó~_Tú_~Wé_T~h_Fr~_Sá".split("_"), weekdaysParseExact: !0, longDateFormat: { LT: "HH:mm", L: "DD/MM/YYYY", LL: "D MMMM YYYY", LLL: "D MMMM YYYY HH:mm", LLLL: "dddd, D MMMM YYYY HH:mm" }, calendar: { sameDay: "[T~ódá~ý át] LT", nextDay: "[T~ómó~rró~w át] LT", nextWeek: "dddd [át] LT", lastDay: "[Ý~ést~érdá~ý át] LT", lastWeek: "[L~ást] dddd [át] LT", sameElse: "L" }, relativeTime: { future: "í~ñ %s", past: "%s á~gó", s: "á ~féw ~sécó~ñds", ss: "%d s~écóñ~ds", m: "á ~míñ~úté", mm: "%d m~íñú~tés", h: "á~ñ hó~úr", hh: "%d h~óúrs", d: "á ~dáý", dd: "%d d~áýs", M: "á ~móñ~th", MM: "%d m~óñt~hs", y: "á ~ýéár", yy: "%d ý~éárs" }, dayOfMonthOrdinalParse: /\d{1,2}(th|st|nd|rd)/, ordinal: function (e) { var t = e % 10, a = 1 == ~~(e % 100 / 10) ? "th" : 1 === t ? "st" : 2 === t ? "nd" : 3 === t ? "rd" : "th"; return e + a }, week: { dow: 1, doy: 4 } }) }(a(0)) }, function (e, t, a) { !function (e) { "use strict"; e.defineLocale("yo", { months: "Sẹ́rẹ́_Èrèlè_Ẹrẹ̀nà_Ìgbé_Èbibi_Òkùdu_Agẹmo_Ògún_Owewe_Ọ̀wàrà_Bélú_Ọ̀pẹ̀̀".split("_"), monthsShort: "Sẹ́r_Èrl_Ẹrn_Ìgb_Èbi_Òkù_Agẹ_Ògú_Owe_Ọ̀wà_Bél_Ọ̀pẹ̀̀".split("_"), weekdays: "Àìkú_Ajé_Ìsẹ́gun_Ọjọ́rú_Ọjọ́bọ_Ẹtì_Àbámẹ́ta".split("_"), weekdaysShort: "Àìk_Ajé_Ìsẹ́_Ọjr_Ọjb_Ẹtì_Àbá".split("_"), weekdaysMin: "Àì_Aj_Ìs_Ọr_Ọb_Ẹt_Àb".split("_"), longDateFormat: { LT: "h:mm A", LTS: "h:mm:ss A", L: "DD/MM/YYYY", LL: "D MMMM YYYY", LLL: "D MMMM YYYY h:mm A", LLLL: "dddd, D MMMM YYYY h:mm A" }, calendar: { sameDay: "[Ònì ni] LT", nextDay: "[Ọ̀la ni] LT", nextWeek: "dddd [Ọsẹ̀ tón'bọ] [ni] LT", lastDay: "[Àna ni] LT", lastWeek: "dddd [Ọsẹ̀ tólọ́] [ni] LT", sameElse: "L" }, relativeTime: { future: "ní %s", past: "%s kọjá", s: "ìsẹjú aayá die", ss: "aayá %d", m: "ìsẹjú kan", mm: "ìsẹjú %d", h: "wákati kan", hh: "wákati %d", d: "ọjọ́ kan", dd: "ọjọ́ %d", M: "osù kan", MM: "osù %d", y: "ọdún kan", yy: "ọdún %d" }, dayOfMonthOrdinalParse: /ọjọ́\s\d{1,2}/, ordinal: "ọjọ́ %d", week: { dow: 1, doy: 4 } }) }(a(0)) }, function (e, t, a) { !function (e) { "use strict"; e.defineLocale("zh-cn", { months: "一月_二月_三月_四月_五月_六月_七月_八月_九月_十月_十一月_十二月".split("_"), monthsShort: "1月_2月_3月_4月_5月_6月_7月_8月_9月_10月_11月_12月".split("_"), weekdays: "星期日_星期一_星期二_星期三_星期四_星期五_星期六".split("_"), weekdaysShort: "周日_周一_周二_周三_周四_周五_周六".split("_"), weekdaysMin: "日_一_二_三_四_五_六".split("_"), longDateFormat: { LT: "HH:mm", LTS: "HH:mm:ss", L: "YYYY/MM/DD", LL: "YYYY年M月D日", LLL: "YYYY年M月D日Ah点mm分", LLLL: "YYYY年M月D日ddddAh点mm分", l: "YYYY/M/D", ll: "YYYY年M月D日", lll: "YYYY年M月D日 HH:mm", llll: "YYYY年M月D日dddd HH:mm" }, meridiemParse: /凌晨|早上|上午|中午|下午|晚上/, meridiemHour: function (e, t) { return 12 === e && (e = 0), "凌晨" === t || "早上" === t || "上午" === t ? e : "下午" === t || "晚上" === t ? e + 12 : e >= 11 ? e : e + 12 }, meridiem: function (e, t, a) { var n = 100 * e + t; return n < 600 ? "凌晨" : n < 900 ? "早上" : n < 1130 ? "上午" : n < 1230 ? "中午" : n < 1800 ? "下午" : "晚上" }, calendar: { sameDay: "[今天]LT", nextDay: "[明天]LT", nextWeek: "[下]ddddLT", lastDay: "[昨天]LT", lastWeek: "[上]ddddLT", sameElse: "L" }, dayOfMonthOrdinalParse: /\d{1,2}(日|月|周)/, ordinal: function (e, t) { switch (t) { case "d": case "D": case "DDD": return e + "日"; case "M": return e + "月"; case "w": case "W": return e + "周"; default: return e } }, relativeTime: { future: "%s内", past: "%s前", s: "几秒", ss: "%d 秒", m: "1 分钟", mm: "%d 分钟", h: "1 小时", hh: "%d 小时", d: "1 天", dd: "%d 天", M: "1 个月", MM: "%d 个月", y: "1 年", yy: "%d 年" }, week: { dow: 1, doy: 4 } }) }(a(0)) }, function (e, t, a) { !function (e) { "use strict"; e.defineLocale("zh-hk", { months: "一月_二月_三月_四月_五月_六月_七月_八月_九月_十月_十一月_十二月".split("_"), monthsShort: "1月_2月_3月_4月_5月_6月_7月_8月_9月_10月_11月_12月".split("_"), weekdays: "星期日_星期一_星期二_星期三_星期四_星期五_星期六".split("_"), weekdaysShort: "週日_週一_週二_週三_週四_週五_週六".split("_"), weekdaysMin: "日_一_二_三_四_五_六".split("_"), longDateFormat: { LT: "HH:mm", LTS: "HH:mm:ss", L: "YYYY/MM/DD", LL: "YYYY年M月D日", LLL: "YYYY年M月D日 HH:mm", LLLL: "YYYY年M月D日dddd HH:mm", l: "YYYY/M/D", ll: "YYYY年M月D日", lll: "YYYY年M月D日 HH:mm", llll: "YYYY年M月D日dddd HH:mm" }, meridiemParse: /凌晨|早上|上午|中午|下午|晚上/, meridiemHour: function (e, t) { return 12 === e && (e = 0), "凌晨" === t || "早上" === t || "上午" === t ? e : "中午" === t ? e >= 11 ? e : e + 12 : "下午" === t || "晚上" === t ? e + 12 : void 0 }, meridiem: function (e, t, a) { var n = 100 * e + t; return n < 600 ? "凌晨" : n < 900 ? "早上" : n < 1130 ? "上午" : n < 1230 ? "中午" : n < 1800 ? "下午" : "晚上" }, calendar: { sameDay: "[今天]LT", nextDay: "[明天]LT", nextWeek: "[下]ddddLT", lastDay: "[昨天]LT", lastWeek: "[上]ddddLT", sameElse: "L" }, dayOfMonthOrdinalParse: /\d{1,2}(日|月|週)/, ordinal: function (e, t) { switch (t) { case "d": case "D": case "DDD": return e + "日"; case "M": return e + "月"; case "w": case "W": return e + "週"; default: return e } }, relativeTime: { future: "%s內", past: "%s前", s: "幾秒", ss: "%d 秒", m: "1 分鐘", mm: "%d 分鐘", h: "1 小時", hh: "%d 小時", d: "1 天", dd: "%d 天", M: "1 個月", MM: "%d 個月", y: "1 年", yy: "%d 年" } }) }(a(0)) }, function (e, t, a) { !function (e) { "use strict"; e.defineLocale("zh-tw", { months: "一月_二月_三月_四月_五月_六月_七月_八月_九月_十月_十一月_十二月".split("_"), monthsShort: "1月_2月_3月_4月_5月_6月_7月_8月_9月_10月_11月_12月".split("_"), weekdays: "星期日_星期一_星期二_星期三_星期四_星期五_星期六".split("_"), weekdaysShort: "週日_週一_週二_週三_週四_週五_週六".split("_"), weekdaysMin: "日_一_二_三_四_五_六".split("_"), longDateFormat: { LT: "HH:mm", LTS: "HH:mm:ss", L: "YYYY/MM/DD", LL: "YYYY年M月D日", LLL: "YYYY年M月D日 HH:mm", LLLL: "YYYY年M月D日dddd HH:mm", l: "YYYY/M/D", ll: "YYYY年M月D日", lll: "YYYY年M月D日 HH:mm", llll: "YYYY年M月D日dddd HH:mm" }, meridiemParse: /凌晨|早上|上午|中午|下午|晚上/, meridiemHour: function (e, t) { return 12 === e && (e = 0), "凌晨" === t || "早上" === t || "上午" === t ? e : "中午" === t ? e >= 11 ? e : e + 12 : "下午" === t || "晚上" === t ? e + 12 : void 0 }, meridiem: function (e, t, a) { var n = 100 * e + t; return n < 600 ? "凌晨" : n < 900 ? "早上" : n < 1130 ? "上午" : n < 1230 ? "中午" : n < 1800 ? "下午" : "晚上" }, calendar: { sameDay: "[今天] LT", nextDay: "[明天] LT", nextWeek: "[下]dddd LT", lastDay: "[昨天] LT", lastWeek: "[上]dddd LT", sameElse: "L" }, dayOfMonthOrdinalParse: /\d{1,2}(日|月|週)/, ordinal: function (e, t) { switch (t) { case "d": case "D": case "DDD": return e + "日"; case "M": return e + "月"; case "w": case "W": return e + "週"; default: return e } }, relativeTime: { future: "%s內", past: "%s前", s: "幾秒", ss: "%d 秒", m: "1 分鐘", mm: "%d 分鐘", h: "1 小時", hh: "%d 小時", d: "1 天", dd: "%d 天", M: "1 個月", MM: "%d 個月", y: "1 年", yy: "%d 年" } }) }(a(0)) }, function (e, t, a) { e.exports = W; var n = a(0), s = /(\[[^\[]*\])|(\\)?j(Mo|MM?M?M?|Do|DDDo|DD?D?D?|w[o|w]?|YYYYY|YYYY|YY|gg(ggg?)?|)|(\\)?(Mo|MM?M?M?|Do|DDDo|DD?D?D?|ddd?d?|do?|w[o|w]?|W[o|W]?|YYYYY|YYYY|YY|gg(ggg?)?|GG(GGG?)?|e|E|a|A|hh?|HH?|mm?|ss?|SS?S?|X|zz?|ZZ?|.)/g, r = /(\[[^\[]*\])|(\\)?(LT|LL?L?L?|l{1,4})/g, i = /\d\d?/, d = /\d{1,3}/, _ = /\d{3}/, o = /\d{1,4}/, u = /[+\-]?\d{1,6}/, m = /[0-9]*["a-z\u00A0-\u05FF\u0700-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF]+|[\u0600-\u06FF\/]+(\s*?[\u0600-\u06FF]+){1,2}/i, l = /Z|[\+\-]\d\d:?\d\d/i, c = /T/i, h = /[\+\-]?\d+(\.\d{1,3})?/, M = { jm: "jmonth", jmonths: "jmonth", jy: "jyear", jyears: "jyear" }, L = {}, Y = "DDD w M D".split(" "), y = "M D w".split(" "), f = { jM: function () { return this.jMonth() + 1 }, jMMM: function (e) { return this.localeData().jMonthsShort(this, e) }, jMMMM: function (e) { return this.localeData().jMonths(this, e) }, jD: function () { return this.jDate() }, jDDD: function () { return this.jDayOfYear() }, jw: function () { return this.jWeek() }, jYY: function () { return T(this.jYear() % 100, 2) }, jYYYY: function () { return T(this.jYear(), 4) }, jYYYYY: function () { return T(this.jYear(), 5) }, jgg: function () { return T(this.jWeekYear() % 100, 2) }, jgggg: function () { return this.jWeekYear() }, jggggg: function () { return T(this.jWeekYear(), 5) } }; function p(e, t) { return function (a) { return T(e.call(this, a), t) } } function D(e, t) { return function (a) { return this.localeData().ordinal(e.call(this, a), t) } } function k(e, t) { var a; for (a in t) t.hasOwnProperty(a) && (e[a] = t[a]); return e } function T(e, t) { for (var a = e + ""; a.length < t;)a = "0" + a; return a } function g(e) { for (var t = 0; t < e.length; t++)(!t || "j" !== e[t - 1] && e[t - 1] !== e[t]) && ("Y" !== e[t] && "M" !== e[t] && "D" !== e[t] && "g" !== e[t] || (e = e.slice(0, t) + "j" + e.slice(t))); return e } function w(e, t) { if (F(t) && (e = function (e) { switch (e) { case "year": return "jYear"; case "month": return "jMonth"; case "months": return "jMonths"; case "monthName": case "monthsShort": return "jMonthsShort" }return e }(e)), e) { var a = e.toLowerCase(); e = M[a] || a } return "jday" === e ? e = "day" : "jd" === e && (e = "d"), e } function v(e, t, a, n) { var s = e._d; e._isUTC ? e._d = new Date(Date.UTC(t, a, n, s.getUTCHours(), s.getUTCMinutes(), s.getUTCSeconds(), s.getUTCMilliseconds())) : e._d = new Date(t, a, n, s.getHours(), s.getMinutes(), s.getSeconds(), s.getMilliseconds()) } function j(e) { function t() { } return t.prototype = e, new t } function S(e, t) { switch (e) { case "jDDDD": return _; case "jYYYY": return o; case "jYYYYY": return u; case "jDDD": return d; case "jMMM": case "jMMMM": return m; case "jMM": case "jDD": case "jYY": case "jM": case "jD": return i; case "DDDD": return _; case "YYYY": return o; case "YYYYY": return u; case "S": case "SS": case "SSS": case "DDD": return d; case "MMM": case "MMMM": case "dd": case "ddd": case "dddd": return m; case "a": case "A": return n.localeData(t._l)._meridiemParse; case "X": return h; case "Z": case "ZZ": return l; case "T": return c; case "MM": case "DD": case "YY": case "HH": case "hh": case "mm": case "ss": case "M": case "D": case "d": case "H": case "h": case "m": case "s": return i; default: return new RegExp(e.replace("\\", "")) } } function H(e) { return null === e || void 0 === e } function b(e, t, a) { var s, r = a._a; switch (e) { case "jM": case "jMM": r[1] = H(t) ? 0 : ~~t - 1; break; case "jMMM": case "jMMMM": H(s = n.localeData(a._l).jMonthsParse(t)) ? a._isValid = !1 : r[1] = s; break; case "jD": case "jDD": case "jDDD": case "jDDDD": H(t) || (r[2] = ~~t); break; case "jYY": r[0] = ~~t + (~~t > 47 ? 1300 : 1400); break; case "jYYYY": case "jYYYYY": r[0] = ~~t }H(t) && (a._isValid = !1) } function x(e) { var t, a, n, r = e._f.match(s), i = e._i + "", d = r.length; for (e._a = [], t = 0; t < d; t += 1)(n = (S(a = r[t], e).exec(i) || [])[0]) && (i = i.slice(i.indexOf(n) + n.length)), f[a] && b(a, n, e); return i && (e._il = i), function (e) { var t, a, n = e._a[0], s = e._a[1], r = e._a[2]; return H(n) && H(s) && H(r) ? [0, 0, 1] : (n = H(n) ? 0 : n, s = H(s) ? 0 : s, ((r = H(r) ? 1 : r) < 1 || r > W.jDaysInMonth(n, s) || s < 0 || s > 11) && (e._isValid = !1), a = z((t = J(n, s, r)).gy, t.gm, t.gd), e._jDiff = 0, ~~a.jy !== n && (e._jDiff += 1), ~~a.jm !== s && (e._jDiff += 1), ~~a.jd !== r && (e._jDiff += 1), [t.gy, t.gm, t.gd]) }(e) } function O(e, t, a) { var n, s = a - t, r = a - e.day(); return r > s && (r -= 7), r < s - 7 && (r += 7), n = W(e).add(r, "d"), { week: Math.ceil(n.jDayOfYear() / 7), year: n.jYear() } } function P(e, t, a, r, i) { "boolean" == typeof a && (i = r, r = a, a = void 0); var d = F(this); e && "string" == typeof e && !t && d && (e = e.replace(/\//g, "-"), /\d{4}\-\d{2}\-\d{2}/.test(e) ? t = "jYYYY-jMM-jDD" : /\d{4}\-\d{2}\-\d{1}/.test(e) ? t = "jYYYY-jMM-jD" : /\d{4}\-\d{1}\-\d{1}/.test(e) ? t = "jYYYY-jM-jD" : /\d{4}\-\d{1}\-\d{2}/.test(e) ? t = "jYYYY-jM-jDD" : /\d{4}\-W\d{2}\-\d{2}/.test(e) ? t = "jYYYY-jW-jDD" : /\d{4}\-\d{3}/.test(e) ? t = "jYYYY-jDDD" : /\d{8}/.test(e) ? t = "jYYYYjMMjDD" : /\d{4}W\d{2}\d{1}/.test(e) ? t = "jYYYYjWWjD" : /\d{4}W\d{2}/.test(e) ? t = "jYYYYjWW" : /\d{4}\d{3}/.test(e) && (t = "jYYYYjDDD")), t && d && (t = g(t)), t && "string" == typeof t && (t = E(t, n)); var _, o, u, m = { _i: e, _f: t, _l: a, _strict: r, _isUTC: i }, l = e, c = t; if (t) { if (function (e) { return "[object Array]" === Object.prototype.toString.call(e) }(t)) return function (e, t) { var a, n, s, r, i, d, _ = e._f.length; if (0 === _) return P(new Date(NaN)); for (a = 0; a < _; a += 1)n = e._f[a], i = 0, (s = P(e._i, n, e._l, e._strict, t)).isValid() && (i += s._jDiff, s._il && (i += s._il.length), (H(d) || i < d) && (d = i, r = s)); return r }(m, i); _ = x(m), function (e) { var t, a, n, r = e._i + "", i = "", d = "", _ = e._f.match(s), o = _.length; for (t = 0; t < o; t += 1)(n = (S(a = _[t], e).exec(r) || [])[0]) && (r = r.slice(r.indexOf(n) + n.length)), f[a] instanceof Function || (d += a, n && (i += n)); e._i = i, e._f = d }(m), t = "YYYY-MM-DD-" + m._f, e = T(_[0], 4) + "-" + T(_[1] + 1, 2) + "-" + T(_[2], 2) + "-" + m._i } return o = i ? n.utc(e, t, a, r) : n(e, t, a, r), (!1 === m._isValid || e && e._isAMomentObject && !e._isValid) && (o._isValid = !1), o._jDiff = m._jDiff || 0, k(u = j(W.fn), o), r && u.isValid() && (u._isValid = u.format(c) === l), e && e.calSystem && (u.calSystem = e.calSystem), u } function W(e, t, a, n) { return P(e, t, a, n, !1) } function E(e, t) { for (var a = 5, n = function (e) { return t.localeData().longDateFormat(e) || e }; a > 0 && r.test(e);)a -= 1, e = e.replace(r, n); return e } function A(e) { var t = e._d; return e._isUTC ? z(t.getUTCFullYear(), t.getUTCMonth(), t.getUTCDate()) : z(t.getFullYear(), t.getMonth(), t.getDate()) } function F(e) { return 1 === e.calSystem || n.justUseJalali && 2 !== e.calSystem } function z(e, t, a) { var n = function (e, t, a) { "[object Date]" === Object.prototype.toString.call(e) && (a = e.getDate(), t = e.getMonth() + 1, e = e.getFullYear()); return function (e) { var t, a, n, s = G(e).gy, r = s - 621, i = R(r), d = U(s, 3, i.march); if ((n = e - d) >= 0) { if (n <= 185) return a = 1 + N(n, 31), t = I(n, 31) + 1, { jy: r, jm: a, jd: t }; n -= 186 } else r -= 1, n += 179, 1 === i.leap && (n += 1); return a = 7 + N(n, 30), t = I(n, 30) + 1, { jy: r, jm: a, jd: t } }(U(e, t, a)) }(e, t + 1, a); return n.jm -= 1, n } function J(e, t, a) { var n = function (e, t, a) { return G(function (e, t, a) { var n = R(e); return U(n.gy, 3, n.march) + 31 * (t - 1) - N(t, 7) * (t - 7) + a - 1 }(e, t, a)) }(e, t + 1, a); return n.gm -= 1, n } function N(e, t) { return ~~(e / t) } function I(e, t) { return e - ~~(e / t) * t } function C(e) { return 0 === R(e).leap } function R(e) { var t, a, n, s, r, i, d = [-61, 9, 38, 199, 426, 686, 756, 818, 1111, 1181, 1210, 1635, 2060, 2097, 2192, 2262, 2324, 2394, 2456, 3178], _ = d.length, o = e + 621, u = -14, m = d[0]; if (e < m || e >= d[_ - 1]) throw new Error("Invalid Jalali year " + e); for (i = 1; i < _ && (a = (t = d[i]) - m, !(e < t)); i += 1)u = u + 8 * N(a, 33) + N(I(a, 33), 4), m = t; return u = u + 8 * N(r = e - m, 33) + N(I(r, 33) + 3, 4), 4 === I(a, 33) && a - r == 4 && (u += 1), s = 20 + u - (N(o, 4) - N(3 * (N(o, 100) + 1), 4) - 150), a - r < 6 && (r = r - a + 33 * N(a + 4, 33)), -1 === (n = I(I(r + 1, 33) - 1, 4)) && (n = 4), { leap: n, gy: o, march: s } } function U(e, t, a) { var n = N(1461 * (e + N(t - 8, 6) + 100100), 4) + N(153 * I(t + 9, 12) + 2, 5) + a - 34840408; return n = n - N(3 * N(e + 100100 + N(t - 8, 6), 100), 4) + 752 } function G(e) { var t, a, n, s; return n = N(I(a = 5 * N(I(t = (t = 4 * e + 139361631) + 4 * N(3 * N(4 * e + 183187720, 146097), 4) - 3908, 1461), 4) + 308, 153), 5) + 1, s = I(N(a, 153), 12) + 1, { gy: N(t, 1461) - 100100 + N(8 - s, 6), gm: s, gd: n } } !function () { for (var e; Y.length;)e = Y.pop(), f["j" + e + "o"] = D(f["j" + e], e); for (; y.length;)e = y.pop(), f["j" + e + e] = p(f["j" + e], 2); f.jDDDD = p(f.jDDD, 3) }(), k(function (e) { return Object.getPrototypeOf ? Object.getPrototypeOf(e) : "".__proto__ ? e.__proto__ : e.constructor.prototype }(n.localeData()), { _jMonths: ["Farvardin", "Ordibehesht", "Khordaad", "Tir", "Mordaad", "Shahrivar", "Mehr", "Aabaan", "Aazar", "Dey", "Bahman", "Esfand"], jMonths: function (e) { return e ? this._jMonths[e.jMonth()] : this._jMonths }, _jMonthsShort: ["Far", "Ord", "Kho", "Tir", "Amo", "Sha", "Meh", "Aab", "Aaz", "Dey", "Bah", "Esf"], jMonthsShort: function (e) { return e ? this._jMonthsShort[e.jMonth()] : this._jMonthsShort }, jMonthsParse: function (e) { var t, a, n; for (this._jMonthsParse || (this._jMonthsParse = []), t = 0; t < 12; t += 1)if (this._jMonthsParse[t] || (a = W([2e3, (2 + t) % 12, 25]), n = "^" + this.jMonths(a, "") + "|^" + this.jMonthsShort(a, ""), this._jMonthsParse[t] = new RegExp(n.replace(".", ""), "i")), this._jMonthsParse[t].test(e)) return t } }), k(W, n), W.fn = j(n.fn), W.utc = function (e, t, a, n) { return P(e, t, a, n, !0) }, W.unix = function (e) { return P(1e3 * e) }, W.fn.format = function (e) { return e && (F(this) && (e = g(e)), e = E(e, this), L[e] || (L[e] = function (e) { var t, a = e.match(s), n = a.length; for (t = 0; t < n; t += 1)f[a[t]] && (a[t] = f[a[t]]); return function (s) { var r = ""; for (t = 0; t < n; t += 1)r += a[t] instanceof Function ? "[" + a[t].call(s, e) + "]" : a[t]; return r } }(e)), e = L[e](this)), n.fn.format.call(this, e) }, W.fn.year = function (e) { return F(this) ? W.fn.jYear.call(this, e) : n.fn.year.call(this, e) }, W.fn.jYear = function (e) { var t, a, s; return "number" == typeof e ? (a = A(this), t = Math.min(a.jd, W.jDaysInMonth(e, a.jm)), v(this, (s = J(e, a.jm, t)).gy, s.gm, s.gd), n.updateOffset(this), this) : A(this).jy }, W.fn.month = function (e) { return F(this) ? W.fn.jMonth.call(this, e) : n.fn.month.call(this, e) }, W.fn.jMonth = function (e) { var t, a, s; return H(e) ? A(this).jm : "string" == typeof e && "number" != typeof (e = this.localeData().jMonthsParse(e)) ? this : (a = A(this), t = Math.min(a.jd, W.jDaysInMonth(a.jy, e)), this.jYear(a.jy + N(e, 12)), (e = I(e, 12)) < 0 && (e += 12, this.jYear(this.jYear() - 1)), v(this, (s = J(this.jYear(), e, t)).gy, s.gm, s.gd), n.updateOffset(this), this) }, W.fn.date = function (e) { return F(this) ? W.fn.jDate.call(this, e) : n.fn.date.call(this, e) }, W.fn.jDate = function (e) { var t, a; return "number" == typeof e ? (v(this, (a = J((t = A(this)).jy, t.jm, e)).gy, a.gm, a.gd), n.updateOffset(this), this) : A(this).jd }, W.fn.jDay = function (e) { return "number" == typeof e ? n.fn.day.call(this, e - 1) : (n.fn.day.call(this) + 1) % 7 }, W.fn.dayOfYear = function (e) { return F(this) ? W.fn.jDayOfYear.call(this, e) : n.fn.dayOfYear.call(this, e) }, W.fn.jDayOfYear = function (e) { var t = Math.round((W(this).startOf("day") - W(this).startOf("jYear")) / 864e5) + 1; return H(e) ? t : this.add(e - t, "d") }, W.fn.week = function (e) { return F(this) ? W.fn.jWeek.call(this, e) : n.fn.week.call(this, e) }, W.fn.jWeek = function (e) { var t = O(this, 6, 12).week; return H(e) ? t : this.add(7 * (e - t), "d") }, W.fn.weekYear = function (e) { return F(this) ? W.fn.jWeekYear.call(this, e) : n.fn.weekYear.call(this, e) }, W.fn.jWeekYear = function (e) { var t = O(this, 6, 12).year; return H(e) ? t : this.add(e - t, "jyear") }, W.fn.add = function (e, t) { var a; return H(t) || isNaN(+t) || (a = e, e = t, t = a), "jyear" === (t = w(t, this)) ? this.jYear(this.jYear() + e) : "jmonth" === t ? this.jMonth(this.jMonth() + e) : n.fn.add.call(this, e, t), this }, W.fn.subtract = function (e, t) { var a; return H(t) || isNaN(+t) || (a = e, e = t, t = a), "jyear" === (t = w(t, this)) ? this.jYear(this.jYear() - e) : "jmonth" === t ? this.jMonth(this.jMonth() - e) : n.fn.subtract.call(this, e, t), this }, W.fn.startOf = function (e) { return "jweek" === (e = w(e, this)) ? this.startOf("day").subtract(this.jDay(), "day") : "jyear" === e || "jmonth" === e ? ("jyear" === e && this.jMonth(0), this.jDate(1), this.hours(0), this.minutes(0), this.seconds(0), this.milliseconds(0), this) : n.fn.startOf.call(this, e) }, W.fn.endOf = function (e) { return void 0 === (e = w(e, this)) || "milisecond" === e ? this : this.startOf(e).add(1, "isoweek" === e ? "week" : e).subtract(1, "ms") }, W.fn.isSame = function (e, t) { return "jyear" === (t = w(t, this)) || "jmonth" === t ? n.fn.isSame.call(this.clone().startOf(t), e.clone().startOf(t)) : n.fn.isSame.call(this, e, t) }, W.fn.isBefore = function (e, t) { return "jyear" === (t = w(t, this)) || "jmonth" === t ? n.fn.isBefore.call(this.clone().startOf(t), e.clone().startOf(t)) : n.fn.isBefore.call(this, e, t) }, W.fn.isAfter = function (e, t) { return "jyear" === (t = w(t, this)) || "jmonth" === t ? n.fn.isAfter.call(this.clone().startOf(t), e.clone().startOf(t)) : n.fn.isAfter.call(this, e, t) }, W.fn.clone = function () { return W(this) }, W.fn.doAsJalali = function () { return this.calSystem = 1, this }, W.fn.doAsGregorian = function () { return this.calSystem = 2, this }, W.fn.jYears = W.fn.jYear, W.fn.jMonths = W.fn.jMonth, W.fn.jDates = W.fn.jDate, W.fn.jWeeks = W.fn.jWeek, W.fn.daysInMonth = function () { return F(this) ? this.jDaysInMonth() : n.fn.daysInMonth.call(this) }, W.fn.jDaysInMonth = function () { var e = this.jMonth(), t = this.jYear(); return e < 6 ? 31 : e < 11 ? 30 : W.jIsLeapYear(t) ? 30 : 29 }, W.fn.isLeapYear = function () { return F(this) ? this.jIsLeapYear() : n.fn.isLeapYear.call(this) }, W.fn.jIsLeapYear = function () { return C(this.jYear()) }, W.fn.locale = function (e) { return e && n.changeCalendarSystemByItsLocale && ("fa" === e ? this.doAsJalali() : this.doAsGregorian()), n.fn.locale.call(this, e) }, W.locale = function (e) { return e && n.changeCalendarSystemByItsLocale && ("fa" === e ? this.useJalaliSystemPrimarily() : this.useJalaliSystemSecondary()), n.locale.call(this, e) }, W.from = function (e, t, a) { var n = W.locale(); W.locale(t); var s = W(e, a); return s.locale(n), W.locale(n), s }, W.bindCalendarSystemAndLocale = function () { n.changeCalendarSystemByItsLocale = !0 }, W.unBindCalendarSystemAndLocale = function () { n.changeCalendarSystemByItsLocale = !1 }, W.useJalaliSystemPrimarily = function () { n.justUseJalali = !0 }, W.useJalaliSystemSecondary = function () { n.justUseJalali = !1 }, W.jDaysInMonth = function (e, t) { return e += N(t, 12), (t = I(t, 12)) < 0 && (t += 12, e -= 1), t < 6 ? 31 : t < 11 ? 30 : W.jIsLeapYear(e) ? 30 : 29 }, W.jIsLeapYear = C, n.defineLocale("fa", { months: "ژانویه_فوریه_مارس_آوریل_مه_ژوئن_ژوئیه_اوت_سپتامبر_اکتبر_نوامبر_دسامبر".split("_"), monthsShort: "ژانویه_فوریه_مارس_آوریل_مه_ژوئن_ژوئیه_اوت_سپتامبر_اکتبر_نوامبر_دسامبر".split("_"), weekdays: "یک‌شنبه_دوشنبه_سه‌شنبه_چهارشنبه_پنج‌شنبه_جمعه_شنبه".split("_"), weekdaysShort: "یک‌شنبه_دوشنبه_سه‌شنبه_چهارشنبه_پنج‌شنبه_جمعه_شنبه".split("_"), weekdaysMin: "ی_د_س_چ_پ_ج_ش".split("_"), longDateFormat: { LT: "HH:mm", L: "jYYYY/jMM/jDD", LL: "jD jMMMM jYYYY", LLL: "jD jMMMM jYYYY LT", LLLL: "dddd، jD jMMMM jYYYY LT" }, calendar: { sameDay: "[امروز ساعت] LT", nextDay: "[فردا ساعت] LT", nextWeek: "dddd [ساعت] LT", lastDay: "[دیروز ساعت] LT", lastWeek: "dddd [ی پیش ساعت] LT", sameElse: "L" }, relativeTime: { future: "در %s", past: "%s پیش", s: "چند ثانیه", m: "1 دقیقه", mm: "%d دقیقه", h: "1 ساعت", hh: "%d ساعت", d: "1 روز", dd: "%d روز", M: "1 ماه", MM: "%d ماه", y: "1 سال", yy: "%d سال" }, ordinal: "%dم", week: { dow: 6, doy: 12 }, meridiem: function (e) { return e < 12 ? "ق.ظ" : "ب.ظ" }, jMonths: "فروردین_اردیبهشت_خرداد_تیر_مرداد_شهریور_مهر_آبان_آذر_دی_بهمن_اسفند".split("_"), jMonthsShort: "فروردین_اردیبهشت_خرداد_تیر_مرداد_شهریور_مهر_آبان_آذر_دی_بهمن_اسفند".split("_") }), W.bindCalendarSystemAndLocale(), n.locale("en"), W.jConvert = { toJalali: z, toGregorian: J } }, function (e, t) { e.exports = function (e) { return e.webpackPolyfill || (e.deprecate = function () { }, e.paths = [], e.children || (e.children = []), Object.defineProperty(e, "loaded", { enumerable: !0, get: function () { return e.l } }), Object.defineProperty(e, "id", { enumerable: !0, get: function () { return e.i } }), e.webpackPolyfill = 1), e } }, function (e, t, a) { var n = { "./af": 1, "./af.js": 1, "./ar": 2, "./ar-dz": 3, "./ar-dz.js": 3, "./ar-kw": 4, "./ar-kw.js": 4, "./ar-ly": 5, "./ar-ly.js": 5, "./ar-ma": 6, "./ar-ma.js": 6, "./ar-sa": 7, "./ar-sa.js": 7, "./ar-tn": 8, "./ar-tn.js": 8, "./ar.js": 2, "./az": 9, "./az.js": 9, "./be": 10, "./be.js": 10, "./bg": 11, "./bg.js": 11, "./bm": 12, "./bm.js": 12, "./bn": 13, "./bn.js": 13, "./bo": 14, "./bo.js": 14, "./br": 15, "./br.js": 15, "./bs": 16, "./bs.js": 16, "./ca": 17, "./ca.js": 17, "./cs": 18, "./cs.js": 18, "./cv": 19, "./cv.js": 19, "./cy": 20, "./cy.js": 20, "./da": 21, "./da.js": 21, "./de": 22, "./de-at": 23, "./de-at.js": 23, "./de-ch": 24, "./de-ch.js": 24, "./de.js": 22, "./dv": 25, "./dv.js": 25, "./el": 26, "./el.js": 26, "./en-au": 27, "./en-au.js": 27, "./en-ca": 28, "./en-ca.js": 28, "./en-gb": 29, "./en-gb.js": 29, "./en-ie": 30, "./en-ie.js": 30, "./en-il": 31, "./en-il.js": 31, "./en-nz": 32, "./en-nz.js": 32, "./eo": 33, "./eo.js": 33, "./es": 34, "./es-do": 35, "./es-do.js": 35, "./es-us": 36, "./es-us.js": 36, "./es.js": 34, "./et": 37, "./et.js": 37, "./eu": 38, "./eu.js": 38, "./fa": 39, "./fa.js": 39, "./fi": 40, "./fi.js": 40, "./fo": 41, "./fo.js": 41, "./fr": 42, "./fr-ca": 43, "./fr-ca.js": 43, "./fr-ch": 44, "./fr-ch.js": 44, "./fr.js": 42, "./fy": 45, "./fy.js": 45, "./gd": 46, "./gd.js": 46, "./gl": 47, "./gl.js": 47, "./gom-latn": 48, "./gom-latn.js": 48, "./gu": 49, "./gu.js": 49, "./he": 50, "./he.js": 50, "./hi": 51, "./hi.js": 51, "./hr": 52, "./hr.js": 52, "./hu": 53, "./hu.js": 53, "./hy-am": 54, "./hy-am.js": 54, "./id": 55, "./id.js": 55, "./is": 56, "./is.js": 56, "./it": 57, "./it.js": 57, "./ja": 58, "./ja.js": 58, "./jv": 59, "./jv.js": 59, "./ka": 60, "./ka.js": 60, "./kk": 61, "./kk.js": 61, "./km": 62, "./km.js": 62, "./kn": 63, "./kn.js": 63, "./ko": 64, "./ko.js": 64, "./ky": 65, "./ky.js": 65, "./lb": 66, "./lb.js": 66, "./lo": 67, "./lo.js": 67, "./lt": 68, "./lt.js": 68, "./lv": 69, "./lv.js": 69, "./me": 70, "./me.js": 70, "./mi": 71, "./mi.js": 71, "./mk": 72, "./mk.js": 72, "./ml": 73, "./ml.js": 73, "./mn": 74, "./mn.js": 74, "./mr": 75, "./mr.js": 75, "./ms": 76, "./ms-my": 77, "./ms-my.js": 77, "./ms.js": 76, "./mt": 78, "./mt.js": 78, "./my": 79, "./my.js": 79, "./nb": 80, "./nb.js": 80, "./ne": 81, "./ne.js": 81, "./nl": 82, "./nl-be": 83, "./nl-be.js": 83, "./nl.js": 82, "./nn": 84, "./nn.js": 84, "./pa-in": 85, "./pa-in.js": 85, "./pl": 86, "./pl.js": 86, "./pt": 87, "./pt-br": 88, "./pt-br.js": 88, "./pt.js": 87, "./ro": 89, "./ro.js": 89, "./ru": 90, "./ru.js": 90, "./sd": 91, "./sd.js": 91, "./se": 92, "./se.js": 92, "./si": 93, "./si.js": 93, "./sk": 94, "./sk.js": 94, "./sl": 95, "./sl.js": 95, "./sq": 96, "./sq.js": 96, "./sr": 97, "./sr-cyrl": 98, "./sr-cyrl.js": 98, "./sr.js": 97, "./ss": 99, "./ss.js": 99, "./sv": 100, "./sv.js": 100, "./sw": 101, "./sw.js": 101, "./ta": 102, "./ta.js": 102, "./te": 103, "./te.js": 103, "./tet": 104, "./tet.js": 104, "./tg": 105, "./tg.js": 105, "./th": 106, "./th.js": 106, "./tl-ph": 107, "./tl-ph.js": 107, "./tlh": 108, "./tlh.js": 108, "./tr": 109, "./tr.js": 109, "./tzl": 110, "./tzl.js": 110, "./tzm": 111, "./tzm-latn": 112, "./tzm-latn.js": 112, "./tzm.js": 111, "./ug-cn": 113, "./ug-cn.js": 113, "./uk": 114, "./uk.js": 114, "./ur": 115, "./ur.js": 115, "./uz": 116, "./uz-latn": 117, "./uz-latn.js": 117, "./uz.js": 116, "./vi": 118, "./vi.js": 118, "./x-pseudo": 119, "./x-pseudo.js": 119, "./yo": 120, "./yo.js": 120, "./zh-cn": 121, "./zh-cn.js": 121, "./zh-hk": 122, "./zh-hk.js": 122, "./zh-tw": 123, "./zh-tw.js": 123 }; function s(e) { var t = r(e); return a(t) } function r(e) { var t = n[e]; if (!(t + 1)) { var a = new Error("Cannot find module '" + e + "'"); throw a.code = "MODULE_NOT_FOUND", a } return t } s.keys = function () { return Object.keys(n) }, s.resolve = r, e.exports = s, s.id = 126 }]);
//# sourceMappingURL=jalali-moment.browser.js.map
(function ($) {
  /*
** persian-datepicker - v1.1.3
** Reza Babakhani <babakhani.reza@gmail.com>
** http://babakhani.github.io/PersianWebToolkit/docs/datepicker
** Under WTFPL license
*/


  Object.entries = function (obj) {
    var ownProps = Object.keys(obj),
      i = ownProps.length,
      resArray = new Array(i); // preallocate the Array
    while (i--)
      resArray[i] = [ownProps[i], obj[ownProps[i]]];

    return resArray;
  };

  (function webpackUniversalModuleDefinition(root, factory) {
    if (typeof exports === 'object' && typeof module === 'object')
      module.exports = factory();
    else if (typeof define === 'function' && define.amd)
      define([], factory);
    else if (typeof exports === 'object')
      exports["persianDatepicker"] = factory();
    else
      root["persianDatepicker"] = factory();
  })(this, function () {
    return /******/ (function (modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if (installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
          /******/
        }
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
          /******/
        };
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
        /******/
      }
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// identity function for calling harmony imports with the correct context
/******/ 	__webpack_require__.i = function (value) { return value; };
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function (exports, name, getter) {
/******/ 		if (!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, {
/******/ 				configurable: false,
/******/ 				enumerable: true,
/******/ 				get: getter
        /******/
      });
          /******/
        }
        /******/
      };
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function (module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
        /******/
      };
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function (object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 5);
      /******/
    })
/************************************************************************/
/******/([
/* 0 */
/***/ (function (module, exports, __webpack_require__) {

        "use strict";


        var Helper = {

          // leading edge, instead of the trailing.
          debounce: function debounce(func, wait, immediate) {
            var timeout;
            return function () {
              var context = this,
                args = arguments;
              var later = function later() {
                timeout = null;
                if (!immediate) func.apply(context, args);
              };
              var callNow = immediate && !timeout;
              clearTimeout(timeout);
              timeout = setTimeout(later, wait);
              if (callNow) func.apply(context, args);
            };
          },


          /**
           * @desc normal log
           * @param input
           * @example log('whoooooha')
           */
          log: function log(input) {
            /*eslint-disable no-console */
            console.log(input);
            /*eslint-enable no-console */
          },


          /* eslint-disable no-useless-escape */
          isMobile: function () {
            var check = false;
            (function (a) {
              if (/(android|bb\d+|meego).+mobile|avantgo|bada\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|iris|kindle|lge |maemo|midp|mmp|mobile.+firefox|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\/|plucker|pocket|psp|series(4|6)0|symbian|treo|up\.(browser|link)|vodafone|wap|windows ce|xda|xiino|android|ipad|playbook|silk/i.test(a) || /1207|6310|6590|3gso|4thp|50[1-6]i|770s|802s|a wa|abac|ac(er|oo|s\-)|ai(ko|rn)|al(av|ca|co)|amoi|an(ex|ny|yw)|aptu|ar(ch|go)|as(te|us)|attw|au(di|\-m|r |s )|avan|be(ck|ll|nq)|bi(lb|rd)|bl(ac|az)|br(e|v)w|bumb|bw\-(n|u)|c55\/|capi|ccwa|cdm\-|cell|chtm|cldc|cmd\-|co(mp|nd)|craw|da(it|ll|ng)|dbte|dc\-s|devi|dica|dmob|do(c|p)o|ds(12|\-d)|el(49|ai)|em(l2|ul)|er(ic|k0)|esl8|ez([4-7]0|os|wa|ze)|fetc|fly(\-|_)|g1 u|g560|gene|gf\-5|g\-mo|go(\.w|od)|gr(ad|un)|haie|hcit|hd\-(m|p|t)|hei\-|hi(pt|ta)|hp( i|ip)|hs\-c|ht(c(\-| |_|a|g|p|s|t)|tp)|hu(aw|tc)|i\-(20|go|ma)|i230|iac( |\-|\/)|ibro|idea|ig01|ikom|im1k|inno|ipaq|iris|ja(t|v)a|jbro|jemu|jigs|kddi|keji|kgt( |\/)|klon|kpt |kwc\-|kyo(c|k)|le(no|xi)|lg( g|\/(k|l|u)|50|54|\-[a-w])|libw|lynx|m1\-w|m3ga|m50\/|ma(te|ui|xo)|mc(01|21|ca)|m\-cr|me(rc|ri)|mi(o8|oa|ts)|mmef|mo(01|02|bi|de|do|t(\-| |o|v)|zz)|mt(50|p1|v )|mwbp|mywa|n10[0-2]|n20[2-3]|n30(0|2)|n50(0|2|5)|n7(0(0|1)|10)|ne((c|m)\-|on|tf|wf|wg|wt)|nok(6|i)|nzph|o2im|op(ti|wv)|oran|owg1|p800|pan(a|d|t)|pdxg|pg(13|\-([1-8]|c))|phil|pire|pl(ay|uc)|pn\-2|po(ck|rt|se)|prox|psio|pt\-g|qa\-a|qc(07|12|21|32|60|\-[2-7]|i\-)|qtek|r380|r600|raks|rim9|ro(ve|zo)|s55\/|sa(ge|ma|mm|ms|ny|va)|sc(01|h\-|oo|p\-)|sdk\/|se(c(\-|0|1)|47|mc|nd|ri)|sgh\-|shar|sie(\-|m)|sk\-0|sl(45|id)|sm(al|ar|b3|it|t5)|so(ft|ny)|sp(01|h\-|v\-|v )|sy(01|mb)|t2(18|50)|t6(00|10|18)|ta(gt|lk)|tcl\-|tdg\-|tel(i|m)|tim\-|t\-mo|to(pl|sh)|ts(70|m\-|m3|m5)|tx\-9|up(\.b|g1|si)|utst|v400|v750|veri|vi(rg|te)|vk(40|5[0-3]|\-v)|vm40|voda|vulc|vx(52|53|60|61|70|80|81|83|85|98)|w3c(\-| )|webc|whit|wi(g |nc|nw)|wmlb|wonu|x700|yas\-|your|zeto|zte\-/i.test(a.substr(0, 4))) check = true;
            })(navigator.userAgent || navigator.vendor || window.opera);
            return check;
          }(),
          /* eslint-enable no-useless-escape */

          /**
           * @desc show debug messages if window.persianDatepickerDebug set as true
           * @param elem
           * @param input
           * @example window.persianDatepickerDebug = true;
           * debug('element','message');
           */
          debug: function debug(elem, input) {
            /*eslint-disable no-console */
            if (window.persianDatepickerDebug) {
              if (elem.constructor.name) {
                console.log('Debug: ' + elem.constructor.name + ' : ' + input);
              } else {
                console.log('Debug: ' + input);
              }
            }
            /*eslint-enable no-console */
          },
          delay: function delay(callback, ms) {
            clearTimeout(window.datepickerTimer);
            window.datepickerTimer = setTimeout(callback, ms);
          }
        };

        module.exports = Helper;

        /***/
      }),
/* 1 */
/***/ (function (module, exports, __webpack_require__) {

        "use strict";


        /**
         * @type {string}
         */
        var Template = "\n<div id=\"plotId\" class=\"datepicker-plot-area {{cssClass}}\">\n    {{#navigator.enabled}}\n        <div data-navigator class=\"datepicker-navigator\">\n            <div class=\"pwt-btn pwt-btn-next\">{{navigator.text.btnNextText}}</div>\n            <div class=\"pwt-btn pwt-btn-switch\">{{navigator.switch.text}}</div>\n            <div class=\"pwt-btn pwt-btn-prev\">{{navigator.text.btnPrevText}}</div>\n        </div>\n    {{/navigator.enabled}}\n    <div class=\"datepicker-grid-view\" >\n    {{#days.enabled}}\n        {{#days.viewMode}}\n        <div class=\"datepicker-day-view\" >    \n            <div class=\"month-grid-box\">\n                <div class=\"header\">\n                    <div class=\"title\"></div>\n                    <div class=\"header-row\">\n                        {{#weekdays.list}}\n                            <div class=\"header-row-cell\">{{.}}</div>\n                        {{/weekdays.list}}\n                    </div>\n                </div>    \n                <table cellspacing=\"0\" class=\"table-days\">\n                    <tbody>\n                        {{#days.list}}\n                           \n                            <tr>\n                                {{#.}}\n                                    {{#enabled}}\n                                        <td data-date=\"{{dataDate}}\" data-unix=\"{{dataUnix}}\" >\n                                            <span  class=\"{{#otherMonth}}other-month{{/otherMonth}}\">{{title}}</span>\n                                            {{#altCalendarShowHint}}\n                                            <i  class=\"alter-calendar-day\">{{alterCalTitle}}</i>\n                                            {{/altCalendarShowHint}}\n                                        </td>\n                                    {{/enabled}}\n                                    {{^enabled}}\n                                        <td data-date=\"{{dataDate}}\" data-unix=\"{{dataUnix}}\" class=\"disabled\">\n                                            <span class=\"{{#otherMonth}}other-month{{/otherMonth}}\">{{title}}</span>\n                                            {{#altCalendarShowHint}}\n                                            <i  class=\"alter-calendar-day\">{{alterCalTitle}}</i>\n                                            {{/altCalendarShowHint}}\n                                        </td>\n                                    {{/enabled}}\n                                    \n                                {{/.}}\n                            </tr>\n                        {{/days.list}}\n                    </tbody>\n                </table>\n            </div>\n        </div>\n        {{/days.viewMode}}\n    {{/days.enabled}}\n    \n    {{#month.enabled}}\n        {{#month.viewMode}}\n            <div class=\"datepicker-month-view\">\n                {{#month.list}}\n                    {{#enabled}}               \n                        <div data-month=\"{{dataMonth}}\" class=\"month-item {{#selected}}selected{{/selected}}\">{{title}}</small></div>\n                    {{/enabled}}\n                    {{^enabled}}               \n                        <div data-month=\"{{dataMonth}}\" class=\"month-item month-item-disable {{#selected}}selected{{/selected}}\">{{title}}</small></div>\n                    {{/enabled}}\n                {{/month.list}}\n            </div>\n        {{/month.viewMode}}\n    {{/month.enabled}}\n    \n    {{#year.enabled }}\n        {{#year.viewMode }}\n            <div class=\"datepicker-year-view\" >\n                {{#year.list}}\n                    {{#enabled}}\n                        <div data-year=\"{{dataYear}}\" class=\"year-item {{#selected}}selected{{/selected}}\">{{title}}</div>\n                    {{/enabled}}\n                    {{^enabled}}\n                        <div data-year=\"{{dataYear}}\" class=\"year-item year-item-disable {{#selected}}selected{{/selected}}\">{{title}}</div>\n                    {{/enabled}}                    \n                {{/year.list}}\n            </div>\n        {{/year.viewMode }}\n    {{/year.enabled }}\n    \n    </div>\n    {{#time}}\n    {{#enabled}}\n    <div class=\"datepicker-time-view\">\n        {{#hour.enabled}}\n            <div class=\"hour time-segment\" data-time-key=\"hour\">\n                <div class=\"up-btn\" data-time-key=\"hour\">\u25B2</div>\n                <input value=\"{{hour.title}}\" type=\"text\" placeholder=\"hour\" class=\"hour-input\">\n                <div class=\"down-btn\" data-time-key=\"hour\">\u25BC</div>                    \n            </div>       \n            <div class=\"divider\">\n                <span>:</span>\n            </div>\n        {{/hour.enabled}}\n        {{#minute.enabled}}\n            <div class=\"minute time-segment\" data-time-key=\"minute\" >\n                <div class=\"up-btn\" data-time-key=\"minute\">\u25B2</div>\n                <input disabled value=\"{{minute.title}}\" type=\"text\" placeholder=\"minute\" class=\"minute-input\">\n                <div class=\"down-btn\" data-time-key=\"minute\">\u25BC</div>\n            </div>        \n            <div class=\"divider second-divider\">\n                <span>:</span>\n            </div>\n        {{/minute.enabled}}\n        {{#second.enabled}}\n            <div class=\"second time-segment\" data-time-key=\"second\"  >\n                <div class=\"up-btn\" data-time-key=\"second\" >\u25B2</div>\n                <input disabled value=\"{{second.title}}\"  type=\"text\" placeholder=\"second\" class=\"second-input\">\n                <div class=\"down-btn\" data-time-key=\"second\" >\u25BC</div>\n            </div>\n            <div class=\"divider meridian-divider\"></div>\n            <div class=\"divider meridian-divider\"></div>\n        {{/second.enabled}}\n        {{#meridian.enabled}}\n            <div class=\"meridian time-segment\" data-time-key=\"meridian\" >\n                <div class=\"up-btn\" data-time-key=\"meridian\">\u25B2</div>\n                <input disabled value=\"{{meridian.title}}\" type=\"text\" class=\"meridian-input\">\n                <div class=\"down-btn\" data-time-key=\"meridian\">\u25BC</div>\n            </div>\n        {{/meridian.enabled}}\n    </div>\n    {{/enabled}}\n    {{/time}}\n    \n    {{#toolbox}}\n    {{#enabled}}\n    <div class=\"toolbox\">\n        {{#toolbox.submitButton.enabled}}\n            <div class=\"pwt-btn-submit\">{{submitButtonText}}</div>\n        {{/toolbox.submitButton.enabled}}        \n        {{#toolbox.todayButton.enabled}}\n            <div class=\"pwt-btn-today\">{{todayButtonText}}</div>\n        {{/toolbox.todayButton.enabled}}        \n        {{#toolbox.calendarSwitch.enabled}}\n            <div class=\"pwt-btn-calendar\">{{calendarSwitchText}}</div>\n        {{/toolbox.calendarSwitch.enabled}}\n    </div>\n    {{/enabled}}\n    {{^enabled}}\n        {{#onlyTimePicker}}\n        <div class=\"toolbox\">\n            <div class=\"pwt-btn-submit\">{{submitButtonText}}</div>\n        </div>\n        {{/onlyTimePicker}}\n    {{/enabled}}\n    {{/toolbox}}\n</div>\n";

        module.exports = Template;

        /***/
      }),
/* 2 */
/***/ (function (module, exports, __webpack_require__) {

        "use strict";


        var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

        function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

        var State = __webpack_require__(11);
        var Toolbox = __webpack_require__(12);
        var View = __webpack_require__(13);
        var Input = __webpack_require__(6);
        var API = __webpack_require__(3);
        var Navigator = __webpack_require__(7);
        var Options = __webpack_require__(8);
        var PersianDateWrapper = __webpack_require__(10);

        /**
         * Main datepicker object, manage every things
         */

        var Model = function () {

          /**
           * @param inputElement
           * @param options
           * @private
           */
          function Model(inputElement, options) {
            _classCallCheck(this, Model);

            return this.components(inputElement, options);
          }

          _createClass(Model, [{
            key: 'components',
            value: function components(inputElement, options) {
              /**
               * @desc [initialUnix=null]
               * @type {unix}
               */
              this.initialUnix = null;

              /**
               * @desc inputElement=inputElement
               * @type {Object}
               */
              this.inputElement = inputElement;

              /**
               * @desc handle works about config
               * @type {Options}
               */
              this.options = new Options(options, this);

              /**
               *
               * @type {PersianDateWrapper}
               */
              this.PersianDate = new PersianDateWrapper(this);

              /**
               * @desc set and get selected and view and other state
               * @type {State}
               */
              this.state = new State(this);

              this.api = new API(this);

              /**
               * @desc handle works about input and alt field input element
               * @type {Input}
               */
              this.input = new Input(this, inputElement);

              /**
               * @desc render datepicker view base on State
               * @type {View}
               */
              this.view = new View(this);

              /**
               * @desc handle works about toolbox
               * @type {Toolbox}
               */
              this.toolbox = new Toolbox(this);

              /**
               *
               * @param unix
               */
              this.updateInput = function (unix) {
                this.input.update(unix);
              };

              this.state.setViewDateTime('unix', this.input.getOnInitState());
              this.state.setSelectedDateTime('unix', this.input.getOnInitState());
              this.view.render();

              /**
               * @desc handle navigation and dateoicker element events
               * @type {Navigator}
               */
              this.navigator = new Navigator(this);

              return this.api;
            }
          }]);

          return Model;
        }();

        module.exports = Model;

        /***/
      }),
/* 3 */
/***/ (function (module, exports, __webpack_require__) {

        "use strict";


        var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

        function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

        /**
         * This is the API documentation for persian-datepicker
         */
        var API = function () {
          function API(model) {
            _classCallCheck(this, API);

            this.model = model;
          }

          /**
           * @description get current option object
           * @example var pd = $('.selector').persianDatepicker();
           * console.log(pd.options);
           */


          _createClass(API, [{
            key: 'show',


            /**
             * @description make datepicker visible
             * @example var pd = $('.selector').persianDatepicker();
             * pd.show();
             */
            value: function show() {
              this.model.view.show();
              this.model.options.onShow(this.model);
              return this.model;
            }

            /**
             * @description return datepicker current state
             * @since 1.0.0
             * @example var pd = $('.selector').persianDatepicker();
             * var state = pd.getState();
             *
             * console.log(state.selected);
             * console.log(state.view);
             * */

          }, {
            key: 'getState',
            value: function getState() {
              return this.model.state;
            }

            /**
             * @description make datepicker invisible
             * @example var pd = $('.selector').persianDatepicker();
             * pd.show();
             */

          }, {
            key: 'hide',
            value: function hide() {
              this.model.view.hide();
              this.model.options.onHide(this.model);
              return this.model;
            }

            /**
             * @description toggle datepicker visibility state
             * @example var pd = $('.selector').persianDatepicker();
             * pd.toggle();
             */

          }, {
            key: 'toggle',
            value: function toggle() {
              this.model.view.toggle();
              this.model.options.onToggle(this.model);
              return this.model;
            }

            /**
             * @description destroy every thing clean dom and
             * @example var pd = $('.selector').persianDatepicker();
             * pd.destroy();
             */

          }, {
            key: 'destroy',
            value: function destroy() {
              if (this.model) {
                this.model.view.destroy();
                this.model.options.onDestroy(this.model);
                delete this.model;
              }
            }

            /**
             * @description set selected date of datepicker accept unix timestamp
             * @param unix
             * @example var pd = $('.selector').persianDatepicker();
             * pd.setDate(1382276091100)
             */

          }, {
            key: 'setDate',
            value: function setDate(unix) {
              this.model.state.setSelectedDateTime('unix', unix);
              this.model.state.setViewDateTime('unix', unix);
              this.model.state.setSelectedDateTime('unix', unix);
              this.model.view.render(this.view);
              this.model.options.onSet(unix);
              return this.model;
            }
          }, {
            key: 'options',
            get: function get() {
              return this.model.options;
            }

            /**
             * @description set options live
             * @example var pd = $('.selector').persianDatepicker();
             * pd.options;
             * //return current options
             * pd.options = {};
             * // set options and render datepicker with new options
             */
            ,
            set: function set(inputOptions) {
              var opt = $.extend(true, this.model.options, inputOptions);
              this.model.view.destroy();
              this.model.components(this.model.inputElement, opt);
            }
          }]);

          return API;
        }();

        module.exports = API;

        /***/
      }),
/* 4 */
/***/ (function (module, exports, __webpack_require__) {

        "use strict";


        var Helper = __webpack_require__(0);

        /**
         * @description persian-datepicker configuration document
         */
        var Config = {

          /**
           * @description set default calendar mode of datepicker, available options: 'persian', 'gregorian'
           * @default 'persian'
           * @type string
           * @since 1.0.0
           */
          'calendarType': 'persian',

          /**
           * @description calendar type and localization configuration
           * @type object
           * @since 1.0.0
           * @example
           * {
           *     'persian': {
           *         'locale': 'fa',
           *         'showHint': false,
           *         'leapYearMode': 'algorithmic' // "astronomical"
           *     },
           *
           *     'gregorian': {
           *         'locale': 'en',
           *         'showHint': false
           *     }
           * }
           *
           *
           *
           */
          'calendar': {

            /**
             * @description Persian calendar configuration
             * @type object
             * @since 1.0.0
             */
            'persian': {

              /**
               * @description set locale of Persian calendar available options: 'fa', 'en'
               * @default 'fa'
               * @type string
               * @since 1.0.0
               */
              'locale': 'fa',

              /**
               * @description if set true, small date hint of this calendar will be shown on another calendar
               * @type boolean
               * @default false
               * @since 1.0.0
               */
              'showHint': false,

              /**
               * @description Persian calendar leap year calculation mode, available options: 'algorithmic', 'astronomical'
               * @type string
               * @link http://babakhani.github.io/PersianWebToolkit/doc/persian-date/leapyear
               * @default 'algorithmic'
               * @since 1.0.0
               */
              'leapYearMode': 'algorithmic' // "astronomical"
            },

            /**
             * @description Gregorian calendar configuration
             * @type object
             * @since 1.0.0
             */
            'gregorian': {

              /**
               * @description set locale of Gregorian calendar available options: 'fa', 'en'
               * @default 'en'
               * @type string
               * @since 1.0.0
               */
              'locale': 'en',

              /**
               * @description if set true, small date hint of this calendar will be shown on another calendar
               * @type boolean
               * @default false
               * @since 1.0.0
               */
              'showHint': false
            }
          },

          /**
           * @description if set true make enable responsive view on mobile devices
           * @type boolean
           * @since 1.0.0
           * @default true
           */
          'responsive': true,

          /**
           * @description if true datepicker render inline
           * @type boolean
           * @default false
           */
          'inline': false,

          /**
           * @description If set true datepicker init with input value date, use data-date property when you want set inline datepicker initial value
           * @type boolean
           * @default true
           */
          'initialValue': true,

          /**
           * @description Initial value calendar type, accept: 'persian', 'gregorian'
           * @type boolean
           * @default true
           */
          'initialValueType': 'gregorian',

          /**
           * @description from v1.0.0 this options is deprecated, use calendar.persian.locale instead
           * @deprecated
           * @type boolean
           * @default true
           */
          'persianDigit': true,

          /**
           * @description default view mode, Acceptable value : day,month,year
           * @type {string}
           * @default 'day'
           */
          'viewMode': 'day',

          /**
           * @description the date format, combination of d, dd, m, mm, yy, yyy.
           * @link http://babakhani.github.io/PersianWebToolkit/doc/persian-date/#format
           * @type {boolean}
           * @default 'LLLL'
           */
          'format': 'LLLL',

          /**
           * @description format value of input
           * @param unixDate
           * @default function
           * @example function (unixDate) {
           *      var self = this;
           *      var pdate = new persianDate(unixDate);
           *      pdate.formatPersian = this.persianDigit;
           *      return pdate.format(self.format);
           *  }
           */
          'formatter': function formatter(unixDate) {
            var self = this,
              pdate = this.model.PersianDate.date(unixDate);
            return pdate.format(self.format);
          },

          /**
           * @description An input element that is to be updated with the selected date from the datepicker. Use the altFormat option to change the format of the date within this field. Leave as blank for no alternate field. acceptable value: : '#elementId','.element-class'
           * @type {boolean}
           * @default false
           * @example
           * altField: '#inputAltFirld'
           *
           * altField: '.input-alt-field'
           */
          'altField': false,

          /**
           * @description the date format, combination of d, dd, m, mm, yy, yyy.
           * @link http://babakhani.github.io/PersianWebToolkit/doc/persian-date/#format
           * @type {string}
           * @default 'unix'
           */
          'altFormat': 'unix',

          /**
           * @description format value of 'altField' input
           * @param unixDate
           * @default function
           * @example function (unixDate) {
           *      var self = this;
           *      var thisAltFormat = self.altFormat.toLowerCase();
           *      if (thisAltFormat === 'gregorian' || thisAltFormat === 'g') {
           *          return new Date(unixDate);
           *      }
           *      if (thisAltFormat === 'unix' || thisAltFormat === 'u') {
           *          return unixDate;
           *      }
           *      else {
           *          var pd = new persianDate(unixDate);
           *          pd.formatPersian = this.persianDigit;
           *          return pd.format(self.altFormat);
           *      }
           *  }
           */
          'altFieldFormatter': function altFieldFormatter(unixDate) {
            var self = this,
              thisAltFormat = self.altFormat.toLowerCase(),
              pd = void 0;
            if (thisAltFormat === 'gregorian' || thisAltFormat === 'g') {
              return new Date(unixDate);
            }
            if (thisAltFormat === 'unix' || thisAltFormat === 'u') {
              return unixDate;
            } else {
              pd = this.model.PersianDate.date(unixDate);
              return pd.format(self.altFormat);
            }
          },

          /**
           * @description Set min date on datepicker, prevent user select date before given unix time
           * @property minDate
           * @type Date
           * @default null
           */
          'minDate': null,

          /**
           * @description Set max date on datepicker, prevent user select date after given unix time
           * @property maxDate
           * @type Date
           * @default null
           */
          'maxDate': null,

          /**
           * @description navigator config object
           * @type {object}
           * @default true
           */
          'navigator': {
            /**
             * @description make navigator enable or disable
             * @type boolean
             * @default true
             */
            'enabled': true,

            /**
             * @description navigate by scroll configuration
             * @type object
             * @description scroll navigation options
             */
            'scroll': {

              /**
               * @description if you want make disable scroll navigation set this option false
               * @type boolean
               * @default true
               */
              'enabled': true
            },

            /**
             * @description navigator text config object
             */
            'text': {
              /**
               * @description text of next button
               * @default '<'
               */
              'btnNextText': '<',

              /**
               * @description text of prev button
               * @default: '>'
               */
              'btnPrevText': '>'
            },

            /**
             * @description Called when navigator goes to next state
             * @event
             * @example function (navigator) {
             *      //log('navigator next ');
             *  }
             */
            'onNext': function onNext(datepickerObject) {
              Helper.debug(datepickerObject, 'Event: onNext');
            },

            /**
             * @description Called when navigator goes to previews state
             * @event
             * @example function (navigator) {
             *      //log('navigator prev ');
             *  }
             */
            'onPrev': function onPrev(datepickerObject) {
              Helper.debug(datepickerObject, 'Event: onPrev');
            },

            /**
             * @description Called when navigator switch
             * @event
             * @example function (datepickerObject) {
                    // console.log('navigator switch ');
             *  }
             */
            'onSwitch': function onSwitch(datepickerObject) {
              Helper.debug(datepickerObject, 'dayPicker Event: onSwitch');
            }
          },

          /**
           * @description toolbox config object
           * @type {object}
           * @default true
           */
          'toolbox': {

            /**
             * @description boolean option that make toolbar enable or disable
             * @type boolean
             * @default true
             */
            'enabled': true,

            /**
             * @description toolbox button text configuration
             * @type object
             * @deprecated from 1.0.0
             */
            'text': {

              /**
               * @description text of today button, deprecated from 1.0.0
               * @type string
               * @default 'امروز'
               * @deprecated from 1.0.0
               */
              btnToday: 'امروز'

            },

            /**
             * @description submit button configuration (only shown on mobile)
             * @since 1.0.0
             */
            submitButton: {

              /**
               * @description make submit button enable or disable
               * @type boolean
               * @default false
               * @since 1.0.0
               */
              enabled: Helper.isMobile,

              /**
               * @description submit button text
               * @since 1.0.0
               * @type object
               */
              text: {

                /**
                 * @description show when current calendar is Persian
                 * @since 1.0.0
                 * @type object
                 * @default تایید
                 */
                fa: 'تایید',

                /**
                 * @description show when current calendar is Gregorian
                 * @since 1.0.0
                 * @type object
                 * @default submit
                 */
                en: 'submit'
              },

              /**
               * @description Called when submit button clicked
               * @since 1.0.0
               * @type function
               * @event
               */
              onSubmit: function onSubmit(datepickerObject) {
                Helper.debug(datepickerObject, 'dayPicker Event: onSubmit');
              }
            },

            /**
             * @description toolbox today button configuration
             * @since 1.0.0
             */
            todayButton: {

              /**
               * @description make toolbox today button enable or disable
               * @type boolean
               * @since 1.0.0
               */
              enabled: true,

              /**
               * @description today button text
               * @since 1.0.0
               * @type object
               */
              text: {

                /**
                 * @description show when current calendar is Persian
                 * @since 1.0.0
                 * @type object
                 * @default امروز
                 */
                fa: 'امروز',

                /**
                 * @description show when current calendar is Gregorian
                 * @since 1.0.0
                 * @type object
                 * @default today
                 */
                en: 'today'
              },

              /**
               * @description Called when today button clicked
               * @since 1.0.0
               * @type function
               * @event
               */
              onToday: function onToday(datepickerObject) {
                Helper.debug(datepickerObject, 'dayPicker Event: onToday');
              }
            },

            /**
             * @description toolbox calendar switch configuration
             * @type object
             * @since 1.0.0
             */
            calendarSwitch: {

              /**
               * @description make calendar switch enable or disable
               * @type boolean
               * @since 1.0.0
               * @default true
               */
              enabled: true,

              /**
               * @description calendar switch text format string
               * @link http://babakhani.github.io/PersianWebToolkit/doc/persian-date/#format
               * @type string
               * @since 1.0.0
               * @default MMMM
               */
              format: 'MMMM',

              /**
               * @description Called when calendar switch clicked
               * @since 1.0.0
               * @type function
               * @event
               */
              onSwitch: function onSwitch(datepickerObject) {
                Helper.debug(datepickerObject, 'dayPicker Event: onSwitch');
              }
            },

            /**
             * @event
             * @param toolbox
             * @example function (toolbox) {
             *      //log('toolbox today btn');
             *  }
             *  @deprecated 1.0.0
             */
            onToday: function onToday(datepickerObject) {
              Helper.debug(datepickerObject, 'dayPicker Event: onToday');
            }
          },

          /**
           * @description if true all pickers hide and just show timepicker
           * @default false
           * @type boolean
           */
          'onlyTimePicker': false,

          /**
           * @description  if true date select just by click on day in month grid, and when user select month or year selected date doesnt change
           * @property justSelectOnDate
           * @type boolean
           * @default: true
           */
          'onlySelectOnDate': true,

          /**
           * @description Validate date access before render
           * @type function
           */
          'checkDate': function checkDate() {
            return true;
          },

          /**
           * @description Validate month access before render
           * @type {function}
           */
          'checkMonth': function checkMonth() {
            return true;
          },

          /**
           * @description Validate year access before render
           * @type {function}
           */
          'checkYear': function checkYear() {
            return true;
          },

          /**
           * @description timePicker configuration
           * @type {object}
           */
          'timePicker': {

            /**
             * @description make timePicker enable or disable
             * @type boolean
             */
            'enabled': false,

            /**
             * @description The amount that increases or decreases by pressing the button
             * @type number
             */
            'step': 1,

            /**
             * @description hour selector configuration
             * @type object
             */
            'hour': {

              /**
               * @description make hour selector enable or disable
               * @type boolean
               */
              'enabled': true,

              /**
               * @description The amount that increases or decreases hour, by pressing the button. overwrite by timepicker.step
               * @type boolean
               */
              'step': null
            },

            /**
             * @description minute selector configuration
             * @type object
             */
            'minute': {

              /**
               * @description make minute selector enable or disable
               * @type boolean
               */
              'enabled': true,

              /**
               * @description The amount that increases or decreases minute, by pressing the button. overwrite by timepicker.step
               * @description overwrite by parent step
               * @type boolean
               */
              'step': null
            },

            /**
             * @description second selector configuration
             * @type object
             */
            'second': {

              /**
               * @description make second selector enable or disable
               * @type boolean
               */
              'enabled': true,

              /**
               * @description The amount that increases or decreases second, by pressing the button. overwrite by timepicker.step
               * @type boolean
               */
              'step': null
            },

            /**
             * @description meridian selector configuration
             * @type object
             */
            'meridian': {

              /**
               * @description if you set this as false, datepicker timepicker system moved to 24-hour system
               * @type boolean
               */
              'enabled': false
            }
          },

          /**
           * @description dayPicker configuration
           * @type {object}
           */
          'dayPicker': {

            /**
             * @description make daypicker enable or disable
             * @type boolean
             * @default true
             */
            'enabled': true,

            /**
             * @description daypicker title format string
             * @type string
             * @default 'YYYY MMMM'
             * @link http://babakhani.github.io/PersianWebToolkit/doc/persian-date/#format
             */
            'titleFormat': 'YYYY MMMM',

            /**
             * @description daypicker title formatter function
             * @param year
             * @param month
             * @return {*}
             */
            'titleFormatter': function titleFormatter(year, month) {
              var titleDate = this.model.PersianDate.date([year, month]);
              return titleDate.format(this.model.options.dayPicker.titleFormat);
            },

            /**
             * @description fired when user select date
             * @event
             * @param selectedDayUnix
             */
            'onSelect': function onSelect(selectedDayUnix) {
              Helper.debug(this, 'dayPicker Event: onSelect : ' + selectedDayUnix);
            }

          },

          /**
           * @description monthPicker configuration
           * @type {object}
           */
          'monthPicker': {

            /**
             * @description make monthPicker enable or disable
             * @type boolean
             * @default true
             */
            'enabled': true,

            /**
             * @description monthPicker title format string
             * @type string
             * @default 'YYYY'
             */
            'titleFormat': 'YYYY',

            /**
             * @description monthPicker title formatter function
             * @param unix
             * @return {*}
             */
            'titleFormatter': function titleFormatter(unix) {
              var titleDate = this.model.PersianDate.date(unix);
              return titleDate.format(this.model.options.monthPicker.titleFormat);
            },

            /**
             * @description fired when user select month
             * @event
             * @param monthIndex
             */
            'onSelect': function onSelect(monthIndex) {
              Helper.debug(this, 'monthPicker Event: onSelect : ' + monthIndex);
            }
          },

          /**
           * @description yearPicker configuration
           * @type {object}
           */
          'yearPicker': {

            /**
             * @description make yearPicker enable or disable
             * @type boolean
             * @default true
             */
            'enabled': true,

            /**
             * @description yearPicker title format string
             * @type string
             * @default 'YYYY'
             */
            'titleFormat': 'YYYY',

            /**
             * @description yearPicker title formatter function
             * @param year
             * @return {string}
             */
            'titleFormatter': function titleFormatter(year) {
              var remaining = parseInt(year / 12, 10) * 12;
              var startYear = this.model.PersianDate.date([remaining]);
              var endYear = this.model.PersianDate.date([remaining + 11]);
              return startYear.format(this.model.options.yearPicker.titleFormat) + '-' + endYear.format(this.model.options.yearPicker.titleFormat);
            },

            /**
             * @description fired when user select year
             * @event
             * @param year
             */
            'onSelect': function onSelect(year) {
              Helper.debug(this, 'yearPicker Event: onSelect : ' + year);
            }
          },

          /**
           * @description Called when date Select by user.
           * @event
           * @param unixDate
           */
          'onSelect': function onSelect(unixDate) {
            Helper.debug(this, 'datepicker Event: onSelect : ' + unixDate);
          },

          /**
           * @description Called when date Select by api.
           * @event
           * @param unixDate
           */
          'onSet': function onSet(unixDate) {
            Helper.debug(this, 'datepicker Event: onSet : ' + unixDate);
          },

          /**
           * @description position of datepicker relative to input element
           * @type string | array
           * @default 'auto'
           * @example
           *  'position': 'auto'
           *'position': [10,10]
           */
          'position': 'auto',

          /**
           * @description A function that takes current datepicker instance. It is called just before the datepicker is displayed.
           * @event
           */
          'onShow': function onShow(datepickerObject) {
            Helper.debug(datepickerObject, 'Event: onShow ');
          },

          /**
           * @description A function that takes current datepicker instance. It is called just before the datepicker Hide.
           * @event
           */
          'onHide': function onHide(datepickerObject) {
            Helper.debug(datepickerObject, 'Event: onHide ');
          },

          /**
           * @description on toggle datepicker event
           * @event
           */
          'onToggle': function onToggle(datepickerObject) {
            Helper.debug(datepickerObject, 'Event: onToggle ');
          },

          /**
           * @description on destroy datepicker event
           * @event
           */
          'onDestroy': function onDestroy(datepickerObject) {
            Helper.debug(datepickerObject, 'Event: onDestroy ');
          },

          /**
           * @description If true datepicker close When select a date
           * @type {boolean}
           * @default false
           */
          'autoClose': false,

          /**
           * @description by default datepicker have a template string, and you can overwrite it simply by replace string in config.
           * @type string
           * @example
           * <div id="plotId" class="datepicker-plot-area datepicker-plot-area-inline-view">
           {{#navigator.enabled}}
           <div class="navigator">
           <div class="datepicker-header">
           <div class="btn btn-next">{{navigator.text.btnNextText}}</div>
           <div class="btn btn-switch">{{ navigator.switch.text }}</div>
           <div class="btn btn-prev">{{navigator.text.btnPrevText}}</div>
           </div>
           </div>
           {{/navigator.enabled}}
           <div class="datepicker-grid-view" >
           {{#days.enabled}}
           {{#days.viewMode}}
           <div class="datepicker-day-view" >
           <div class="month-grid-box">
           <div class="header">
           <div class="title"></div>
           <div class="header-row">
           <div class="header-row-cell">ش</div>
           <div class="header-row-cell">ی</div>
           <div class="header-row-cell">د</div>
           <div class="header-row-cell">س</div>
           <div class="header-row-cell">چ</div>
           <div class="header-row-cell">پ</div>
           <div class="header-row-cell">ج</div>
           </div>
           </div>
           <table cellspacing="0" class="table-days">
           <tbody>
           {{#days.list}}
            <tr>
           {{#.}}
            {{#enabled}}
           <td data-unix="{{dataUnix}}" ><span  class="{{#otherMonth}}other-month{{/otherMonth}} {{#selected}}selected{{/selected}}">{{title}}</span></td>
           {{/enabled}}
           {{^enabled}}
           <td data-unix="{{dataUnix}}" class="disabled"><span class="{{#otherMonth}}other-month{{/otherMonth}}">{{title}}</span></td>
           {{/enabled}}
            {{/.}}
           </tr>
           {{/days.list}}
           </tbody>
           </table>
           </div>
           </div>
           {{/days.viewMode}}
           {{/days.enabled}}
            {{#month.enabled}}
           {{#month.viewMode}}
           <div class="datepicker-month-view">
           {{#month.list}}
           {{#enabled}}
           <div data-month="{{dataMonth}}" class="month-item {{#selected}}selected{{/selected}}">{{title}}</small></div>
           {{/enabled}}
           {{^enabled}}
           <div data-month="{{dataMonth}}" class="month-item month-item-disable {{#selected}}selected{{/selected}}">{{title}}</small></div>
           {{/enabled}}
           {{/month.list}}
           </div>
           {{/month.viewMode}}
           {{/month.enabled}}
            {{#year.enabled }}
           {{#year.viewMode }}
           <div class="datepicker-year-view" >
           {{#year.list}}
           {{#enabled}}
           <div data-year="{{dataYear}}" class="year-item {{#selected}}selected{{/selected}}">{{title}}</div>
           {{/enabled}}
           {{^enabled}}
           <div data-year="{{dataYear}}" class="year-item year-item-disable {{#selected}}selected{{/selected}}">{{title}}</div>
           {{/enabled}}
           {{/year.list}}
           </div>
           {{/year.viewMode }}
           {{/year.enabled }}
            </div>
           {{#time}}
           {{#enabled}}
           <div class="datepicker-time-view">
           {{#hour.enabled}}
           <div class="hour time-segment" data-time-key="hour">
           <div class="up-btn" data-time-key="hour">▲</div>
           <input value="{{hour.title}}" type="text" placeholder="hour" class="hour-input">
           <div class="down-btn" data-time-key="hour">▼</div>
           </div>
           <div class="divider">:</div>
           {{/hour.enabled}}
           {{#minute.enabled}}
           <div class="minute time-segment" data-time-key="minute" >
           <div class="up-btn" data-time-key="minute">▲</div>
           <input value="{{minute.title}}" type="text" placeholder="minute" class="minute-input">
           <div class="down-btn" data-time-key="minute">▼</div>
           </div>
           <div class="divider second-divider">:</div>
           {{/minute.enabled}}
           {{#second.enabled}}
           <div class="second time-segment" data-time-key="second"  >
           <div class="up-btn" data-time-key="second" >▲</div>
           <input value="{{second.title}}"  type="text" placeholder="second" class="second-input">
           <div class="down-btn" data-time-key="second" >▼</div>
           </div>
           <div class="divider meridian-divider"></div>
           <div class="divider meridian-divider"></div>
           {{/second.enabled}}
           {{#meridian.enabled}}
           <div class="meridian time-segment" data-time-key="meridian" >
           <div class="up-btn" data-time-key="meridian">▲</div>
           <input value="{{meridian.title}}" type="text" class="meridian-input">
           <div class="down-btn" data-time-key="meridian">▼</div>
           </div>
           {{/meridian.enabled}}
           </div>
           {{/enabled}}
           {{/time}}
            {{#toolbox}}
           {{#enabled}}
           <div class="toolbox ">
           <div class="btn-today">{{text.btnToday}}</div>
           </div>
           {{/enabled}}
           {{/toolbox}}
           </div>
           */
          'template': null,

          ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////
          /////////// Under Implement ///////////////////////////////////////////////////////////////////////////////////////
          ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////

          /**
           * @description if true datepicker update self by user inputted date string, accept 'yyyy/mm/dd'
           * @example '1396/10/2', ''
           * @type {boolean}
           * @default false
           */
          'observer': false,

          ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////
          /////////// Un  implemented ///////////////////////////////////////////////////////////////////////////////////////
          ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////


          /**
           * @description waite time for last user key-down event, accept millisecond
           * @type {number}
           * @default 800
           */
          'inputDelay': 800
        };

        module.exports = Config;

        /***/
      }),
/* 5 */
/***/ (function (module, exports, __webpack_require__) {

        "use strict";


        var Model = __webpack_require__(2);

        /**
         * @author babakhani.reza@gmail.com
         * @description jquery plugin initializer
         */
        (function ($) {
          /*eslint-disable no-unused-vars */
          $.fn.persianDatepicker = $.fn.pDatepicker = function (options) {
            var args = Array.prototype.slice.call(arguments),
              output = null,
              self = this;
            if (!this) {
              $.error('Invalid selector');
            }
            $(this).each(function () {
              // encapsulation Args
              var emptyArr = [],
                tempArg = args.concat(emptyArr),
                dp = $(this).data('datepicker'),
                funcName = null;
              if (dp && typeof tempArg[0] === 'string') {
                funcName = tempArg[0];
                output = dp[funcName](tempArg[0]);
              } else {
                self.pDatePicker = new Model(this, options);
              }
            });
            $(this).data('datepicker', self.pDatePicker);
            return self.pDatePicker;
          };
          /*eslint-enable no-unused-vars */
        })(jQuery);

        /***/
      }),
/* 6 */
/***/ (function (module, exports, __webpack_require__) {

        "use strict";


        var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

        function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

        var Helper = __webpack_require__(0);
        var PersianDateParser = __webpack_require__(9);
        /**
         * Do every thing about input element like get default value, set new value, set alt field input and etc.
         */

        var Input = function () {

          /**
           * @param {Model} model
           * @param {Element}
           * @return {Input}
           */
          function Input(model, inputElement) {
            _classCallCheck(this, Input);

            /**
             * @type {Object}
             */
            this.model = model;

            /**
             * @type {boolean}
             * @private
             */
            this._firstUpdate = true;

            /**
             * @type {Element}
             */
            this.elem = inputElement;

            if (this.model.options.observer) {
              this.observe();
            }

            this.addInitialClass();

            /**
             * @type {Number}
             */
            this.initialUnix = null;

            if (this.model.options.inline == false) {
              this._attachInputElementEvents();
            }

            return this;
          }

          _createClass(Input, [{
            key: 'addInitialClass',
            value: function addInitialClass() {
              $(this.elem).addClass('pwt-datepicker-input-element');
            }
          }, {
            key: 'parseInput',
            value: function parseInput(inputString) {
              var parse = new PersianDateParser(),
                that = this;
              if (parse.parse(inputString) !== undefined) {
                var pd = this.model.PersianDate.date(parse.parse(inputString)).valueOf();
                that.model.state.setSelectedDateTime('unix', pd);
                that.model.state.setViewDateTime('unix', pd);
                that.model.view.render();
              }
            }
          }, {
            key: 'observe',
            value: function observe() {
              var that = this;
              /////////////////   Manipulate by Copy And paste
              $(that.elem).bind('paste', function (e) {
                Helper.delay(function () {
                  that.parseInput(e.target.value);
                }, 60);
              });
              var typingTimer = void 0,
                doneTypingInterval = that.model.options.inputDelay,
                ctrlDown = false,
                ctrlKey = [17, 91],
                vKey = 86;

              $(document).keydown(function (e) {
                if ($.inArray(e.keyCode, ctrlKey) > 0) ctrlDown = true;
              }).keyup(function (e) {
                if ($.inArray(e.keyCode, ctrlKey) > 0) ctrlDown = false;
              });

              $(that.elem).bind('keyup', function (e) {
                var $self = $(this);
                var trueKey = false;
                if (e.keyCode === 8 || e.keyCode < 105 && e.keyCode > 96 || e.keyCode < 58 && e.keyCode > 47 || ctrlDown && (e.keyCode == vKey || $.inArray(e.keyCode, ctrlKey) > 0)) {
                  trueKey = true;
                }
                if (trueKey) {
                  clearTimeout(typingTimer);
                  typingTimer = setTimeout(function () {
                    doneTyping($self);
                  }, doneTypingInterval);
                }
              });

              $(that.elem).on('keydown', function () {
                clearTimeout(typingTimer);
              });
              function doneTyping($self) {
                that.parseInput($self.val());
              }

              /////////////////   Manipulate by alt changes
              // TODO
              // self.model.options.altField.bind("change", function () {
              //     //if (!self._flagSelfManipulate) {
              //         let newDate = new Date($(this).val());
              //         if (newDate !== "Invalid Date") {
              //             let newPersainDate = this.model.PersianDate.date(newDate);
              //             self.selectDate(newPersainDate.valueOf());
              //         }
              //   //  }
              // });
            }

            /**
             * @private
             * @desc attach events to input field
             */

          }, {
            key: '_attachInputElementEvents',
            value: function _attachInputElementEvents() {
              var that = this;
              var closePickerHandler = function closePickerHandler(e) {
                if (!$(e.target).is(that.elem) && !$(e.target).is(that.model.view.$container) && $(e.target).closest('#' + that.model.view.$container.attr('id')).length == 0 && !$(e.target).is($(that.elem).children())) {
                  that.model.api.hide();
                  $('body').unbind('click', closePickerHandler);
                }
              };

              $(this.elem).on('focus click', Helper.debounce(function (evt) {
                that.model.api.show();
                if (that.model.state.ui.isInline === false) {
                  $('body').unbind('click', closePickerHandler).bind('click', closePickerHandler);
                }
                if (Helper.isMobile) {
                  $(this).blur();
                }
                evt.stopPropagation();
                return false;
              }, 200));
            }

            /**
             * @desc get <input/> element position
             * @return {{top: Number, left: Number}}
             * @todo remove jquery
             */

          }, {
            key: 'getInputPosition',
            value: function getInputPosition() {
              return $(this.elem).offset();
            }

            /**
             * @desc get <input/> element size
             * @return {{width: Number, height: Number}}
             * @todo remove jquery
             */

          }, {
            key: 'getInputSize',
            value: function getInputSize() {
              return {
                width: $(this.elem).outerWidth(),
                height: $(this.elem).outerHeight()
              };
            }

            /**
             * @desc update <input/> element value
             * @param {Number} unix
             * @todo remove jquery
             * @private
             */

          }, {
            key: '_updateAltField',
            value: function _updateAltField(unix) {
              var value = this.model.options.altFieldFormatter(unix);
              $(this.model.options.altField).val(value);
            }

            /**
             * @desc update <input/> element value
             * @param {Number} unix
             * @todo remove jquery
             * @private
             */

          }, {
            key: '_updateInputField',
            value: function _updateInputField(unix) {
              var value = this.model.options.formatter(unix);
              if ($(this.elem).val() != value) {
                $(this.elem).val(value);
              }
            }

            /**
             * @param unix
             */

          }, {
            key: 'update',
            value: function update(unix) {
              if (this.model.options.initialValue == false && this._firstUpdate) {
                this._firstUpdate = false;
              } else {
                this._updateInputField(unix);
                this._updateAltField(unix);
              }
            }

            /**
             * @desc return initial value
             * @return {Number} - unix
             */

          }, {
            key: 'getOnInitState',
            value: function getOnInitState() {
              var persianDatePickerTimeRegex = '^([0-1][0-9]|2[0-3]):([0-5][0-9])(?::([0-5][0-9]))?$';
              var garegurianDate = null,
                $inputElem = $(this.elem),
                inputValue = void 0;

              // Define input value by check inline mode and input mode

              if ($inputElem[0].nodeName === 'INPUT') {
                inputValue = $inputElem[0].getAttribute('value');
              } else {
                inputValue = $inputElem.data('date');
              }

              // Check time string by regex
              if (inputValue && inputValue.match(persianDatePickerTimeRegex)) {
                var timeArray = inputValue.split(':'),
                  tempDate = new Date();
                tempDate.setHours(timeArray[0]);
                tempDate.setMinutes(timeArray[1]);
                if (timeArray[2]) {
                  tempDate.setSeconds(timeArray[2]);
                } else {
                  tempDate.setSeconds(0);
                }
                this.initialUnix = tempDate.valueOf();
              } else {
                if (this.model.options.initialValueType === 'persian' && inputValue) {
                  var parse = new PersianDateParser();
                  var pd = new persianDate(parse.parse(inputValue)).valueOf();
                  garegurianDate = new Date(pd).valueOf();
                } else if (inputValue) {
                  garegurianDate = new Date(inputValue).valueOf();
                }

                if (garegurianDate && garegurianDate != 'undefined') {
                  this.initialUnix = garegurianDate;
                } else {
                  this.initialUnix = new Date().valueOf();
                }
              }
              return this.initialUnix;
            }
          }]);

          return Input;
        }();

        module.exports = Input;

        /***/
      }),
/* 7 */
/***/ (function (module, exports, __webpack_require__) {

        "use strict";


        var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

        function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

        var Hamster = __webpack_require__(14);

        /**
         * This navigator class do every thing about navigate and select date
         * @public
         */

        var Navigator = function () {

          /**
           * @param {object} datepicker
           * @return {Navigator}
           */
          function Navigator(model) {
            _classCallCheck(this, Navigator);

            /**
             * @type {Datepicker}
             */
            this.model = model;
            this.liveAttach();
            this._attachEvents();
            return this;
          }

          /**
           * @desc attach events that needed attach after every render
           * @public
           * @todo attach as a live way
           */


          _createClass(Navigator, [{
            key: 'liveAttach',
            value: function liveAttach() {
              // Check options
              if (this.model.options.navigator.scroll.enabled) {
                var that = this;
                var gridPlot = $('#' + that.model.view.id + ' .datepicker-grid-view')[0];
                Hamster(gridPlot).wheel(function (event, delta) {
                  if (delta > 0) {
                    that.model.state.navigate('next');
                  } else {
                    that.model.state.navigate('prev');
                  }
                  that.model.view.render();
                  event.preventDefault();
                });

                if (this.model.options.timePicker.enabled) {
                  $('#' + that.model.view.id + ' .time-segment').each(function () {
                    Hamster(this).wheel(function (event, delta) {
                      var $target = $(event.target);
                      var key = $target.data('time-key') ? $target.data('time-key') : $target.parents('[data-time-key]').data('time-key');
                      if (key) {
                        if (delta > 0) {
                          that.timeUp(key);
                        } else {
                          that.timeDown(key);
                        }
                      }
                      that.model.view.render();
                      event.preventDefault();
                    });
                  });
                }
              }
            }

            /**
             * @desc set time up depend to timekey
             * @param {String} timekey - accept hour, minute,second
             * @public
             */

          }, {
            key: 'timeUp',
            value: function timeUp(timekey) {
              if (this.model.options.timePicker[timekey] == undefined) {
                return;
              }
              var step = void 0,
                t = void 0,
                that = this;
              if (timekey == 'meridian') {
                step = 12;
                if (this.model.state.view.meridian == 'PM') {
                  t = this.model.PersianDate.date(this.model.state.selected.unixDate).add('hour', step).valueOf();
                } else {
                  t = this.model.PersianDate.date(this.model.state.selected.unixDate).subtract('hour', step).valueOf();
                }
                this.model.state.meridianToggle();
              } else {
                step = this.model.options.timePicker[timekey].step;
                t = this.model.PersianDate.date(this.model.state.selected.unixDate).add(timekey, step).valueOf();
              }
              this.model.state.setViewDateTime('unix', t);
              this.model.state.setSelectedDateTime('unix', t);
              this.model.view.renderTimePartial();
              clearTimeout(this.scrollDelayTimeDown);
              this.scrollDelayTimeUp = setTimeout(function () {
                that.model.view.markSelectedDay();
              }, 300);
            }

            /**
             * @desc set time down depend to timekey
             * @param {String} timekey - accept hour, minute,second
             * @public
             */

          }, {
            key: 'timeDown',
            value: function timeDown(timekey) {
              if (this.model.options.timePicker[timekey] == undefined) {
                return;
              }
              var step = void 0,
                t = void 0,
                that = this;
              if (timekey == 'meridian') {
                step = 12;
                if (this.model.state.view.meridian == 'AM') {
                  t = this.model.PersianDate.date(this.model.state.selected.unixDate).add('hour', step).valueOf();
                } else {
                  t = this.model.PersianDate.date(this.model.state.selected.unixDate).subtract('hour', step).valueOf();
                }
                this.model.state.meridianToggle();
              } else {
                step = this.model.options.timePicker[timekey].step;
                t = this.model.PersianDate.date(this.model.state.selected.unixDate).subtract(timekey, step).valueOf();
              }
              this.model.state.setViewDateTime('unix', t);
              this.model.state.setSelectedDateTime('unix', t);
              this.model.view.renderTimePartial();
              clearTimeout(this.scrollDelayTimeDown);
              this.scrollDelayTimeDown = setTimeout(function () {
                that.model.view.markSelectedDay();
              }, 300);
            }

            /**
             * @desc attach dom events
             * @todo remove jquery
             * @private
             */

          }, {
            key: '_attachEvents',
            value: function _attachEvents() {
              var that = this;

              if (this.model.options.navigator.enabled) {
                /**
                 * @description navigator click event
                 */
                $(document).on('click', '#' + that.model.view.id + ' .pwt-btn', function () {
                  if ($(this).is('.pwt-btn-next')) {
                    that.model.state.navigate('next');
                    that.model.view.render();
                    that.model.options.navigator.onNext(that.model);
                  } else if ($(this).is('.pwt-btn-switch')) {
                    that.model.state.switchViewMode();
                    that.model.view.render();
                    that.model.options.navigator.onSwitch(that.model);
                  } else if ($(this).is('.pwt-btn-prev')) {
                    that.model.state.navigate('prev');
                    that.model.view.render();
                    that.model.options.navigator.onPrev(that.model);
                  }
                });
              }

              /**
               * @description check if timePicker enabled attach Events
               */
              if (this.model.options.timePicker.enabled) {

                /**
                 * @description time up btn click event
                 */
                $(document).on('click', '#' + that.model.view.id + ' .up-btn', function () {
                  var timekey = $(this).data('time-key');
                  that.timeUp(timekey);
                  that.model.options.onSelect(that.model.state.selected.unix);
                });

                /**
                 * @description time down btn click event
                 */
                $(document).on('click', '#' + that.model.view.id + ' .down-btn', function () {
                  var timekey = $(this).data('time-key');
                  that.timeDown(timekey);
                  that.model.options.onSelect(that.model.state.selected.unix);
                });
              }

              /**
               * @description check if dayPicker enabled attach Events
               */
              if (this.model.options.dayPicker.enabled) {

                /**
                 * @description days click event
                 */
                $(document).on('click', '#' + that.model.view.id + ' .datepicker-day-view td:not(.disabled)', function () {
                  var thisUnix = $(this).data('unix'),
                    mustRender = void 0;
                  that.model.state.setSelectedDateTime('unix', thisUnix);
                  if (that.model.state.selected.month !== that.model.state.view.month) {
                    mustRender = true;
                  } else {
                    mustRender = false;
                  }
                  that.model.state.setViewDateTime('unix', that.model.state.selected.unixDate);
                  if (that.model.options.autoClose) {
                    that.model.view.hide();
                    that.model.options.onHide(that);
                  }
                  if (mustRender) {
                    that.model.view.render();
                  } else {
                    that.model.view.markSelectedDay();
                  }
                  that.model.options.dayPicker.onSelect(thisUnix);
                  that.model.options.onSelect(thisUnix);
                });
              }

              /**
               * @description check if monthPicker enabled attach Events
               */
              if (this.model.options.monthPicker.enabled) {

                /**
                 * @description month click event
                 */
                $(document).on('click', '#' + that.model.view.id + ' .datepicker-month-view .month-item:not(.month-item-disable)', function () {
                  var month = $(this).data('month');
                  that.model.state.switchViewModeTo('day');
                  if (!that.model.options.onlySelectOnDate) {
                    that.model.state.setSelectedDateTime('month', month);
                    if (that.model.options.autoClose) {
                      that.model.view.hide();
                      that.model.options.onHide(that);
                    }
                  }
                  that.model.state.setViewDateTime('month', month);
                  that.model.view.render();
                  that.model.options.monthPicker.onSelect(month);
                  that.model.options.onSelect(that.model.state.selected.unix);
                });
              }

              /**
               * @description check if yearPicker enabled attach Events
               */
              if (this.model.options.yearPicker.enabled) {

                /**
                 * @description year click event
                 */
                $(document).on('click', '#' + that.model.view.id + ' .datepicker-year-view .year-item:not(.year-item-disable)', function () {
                  var year = $(this).data('year');
                  that.model.state.switchViewModeTo('month');
                  if (!that.model.options.onlySelectOnDate) {
                    that.model.state.setSelectedDateTime('year', year);
                    if (that.model.options.autoClose) {
                      that.model.view.hide();
                      that.model.options.onHide(that);
                    }
                  }
                  that.model.state.setViewDateTime('year', year);
                  that.model.view.render();
                  that.model.options.yearPicker.onSelect(year);
                  that.model.options.onSelect(that.model.state.selected.unix);
                });
              }
            }
          }]);

          return Navigator;
        }();

        module.exports = Navigator;

        /***/
      }),
/* 8 */
/***/ (function (module, exports, __webpack_require__) {

        "use strict";


        var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

        function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

        var Config = __webpack_require__(4);
        var Template = __webpack_require__(1);
        /**
         * Extend default config from user interred and do compatibility works
         * @public
         */

        var Options = function () {

          /**
           * @param {object} options config passed when initialize
           * @return {object}
           * @todo remove jquery
           */
          function Options(options, model) {
            _classCallCheck(this, Options);

            this.model = model;
            return this._compatibility($.extend(true, this, Config, options));
          }

          /**
           * @private
           * @param options
           */


          _createClass(Options, [{
            key: '_compatibility',
            value: function _compatibility(options) {

              if (options.inline) {
                options.toolbox.submitButton.enabled = false;
              }

              if (!options.template) {
                options.template = Template;
              }
              persianDate.toCalendar(options.calendarType);
              persianDate.toLocale(options.calendar[options.calendarType].locale);
              if (options.onlyTimePicker) {
                options.dayPicker.enabled = false;
                options.monthPicker.enabled = false;
                options.yearPicker.enabled = false;
                options.navigator.enabled = false;
                options.toolbox.enabled = false;
                options.timePicker.enabled = true;
              }

              if (options.timePicker.hour.step === null) {
                options.timePicker.hour.step = options.timePicker.step;
              }
              if (options.timePicker.minute.step === null) {
                options.timePicker.minute.step = options.timePicker.step;
              }
              if (options.timePicker.second.step === null) {
                options.timePicker.second.step = options.timePicker.step;
              }

              if (options.dayPicker.enabled === false) {
                options.onlySelectOnDate = false;
              }

              options._viewModeList = [];
              if (options.dayPicker.enabled) {
                options._viewModeList.push('day');
              }
              if (options.monthPicker.enabled) {
                options._viewModeList.push('month');
              }
              if (options.yearPicker.enabled) {
                options._viewModeList.push('year');
              }
            }
          }]);

          return Options;
        }();

        module.exports = Options;

        /***/
      }),
/* 9 */
/***/ (function (module, exports, __webpack_require__) {

        "use strict";


        var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

        function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

        var PersianDateParser = function () {
          function PersianDateParser() {
            _classCallCheck(this, PersianDateParser);

            this.pattern = {
              jalali: /^[1-4]\d{3}(\/|-|\.)((0?[1-6](\/|-|\.)((3[0-1])|([1-2][0-9])|(0?[1-9])))|((1[0-2]|(0?[7-9]))(\/|-|\.)(30|([1-2][0-9])|(0?[1-9]))))$/g
            };
          }

          _createClass(PersianDateParser, [{
            key: 'parse',
            value: function parse(inputString) {
              var that = this,
                persianDateArray = void 0,
                jalaliPat = new RegExp(that.pattern.jalali);

              String.prototype.toEnglishDigits = function () {
                var charCodeZero = '۰'.charCodeAt(0);
                return this.replace(/[۰-۹]/g, function (w) {
                  return w.charCodeAt(0) - charCodeZero;
                });
              };

              inputString = inputString.toEnglishDigits();

              if (jalaliPat.test(inputString)) {
                /* eslint-disable no-useless-escape */
                persianDateArray = inputString.split(/\/|-|\,|\./).map(Number);
                /* eslint-enable no-useless-escape */
                return persianDateArray;
              } else {
                return undefined;
              }
            }
          }]);

          return PersianDateParser;
        }();

        module.exports = PersianDateParser;

        /***/
      }),
/* 10 */
/***/ (function (module, exports, __webpack_require__) {

        "use strict";


        var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

        function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

        var PersianDateWrapper = function () {
          function PersianDateWrapper(model) {
            _classCallCheck(this, PersianDateWrapper);

            this.model = model;
            this.model.options.calendar_ = this.model.options.calendarType;
            this.model.options.locale_ = this.model.options.calendar[this.model.options.calendarType].locale;
            return this;
          }

          _createClass(PersianDateWrapper, [{
            key: "date",
            value: function date(input) {
              if (window.inspdCount || window.inspdCount === 0) {
                window.inspdCount++;
              } else {
                window.inspdCount = 0;
              }
              var that = this;
              var output = void 0,
                cp = void 0;
              cp = persianDate.toCalendar(that.model.options.calendar_);
              if (this.model.options.calendar[this.model.options.calendarType].leapYearMode) {
                cp.toLeapYearMode(this.model.options.calendar[this.model.options.calendarType].leapYearMode);
              }
              output = new cp(input);
              return output.toLocale(that.model.options.locale_);
            }
          }]);

          return PersianDateWrapper;
        }();

        module.exports = PersianDateWrapper;

        /***/
      }),
/* 11 */
/***/ (function (module, exports, __webpack_require__) {

        "use strict";


        var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

        function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

        /**
         * All state set in his object and get from this
         * also this object notify other object to update self or update view or etc.
         */
        var State = function () {

          /**
           * @param {model} model
           * @return {State}
           */
          function State(model) {
            _classCallCheck(this, State);

            /**
             * @type {object}
             */
            this.model = model;

            /**
             * @type {Boolean}
             */
            this.filetredDate = this.model.options.minDate || this.model.options.maxDate;

            /**
             * @desc get generated view mode list from options object
             * @type {Array}
             */
            this.viewModeList = this.model.options._viewModeList;

            /**
             * @desc view mode string day, month, year
             * @type {String}
             * @default day
             * @todo add time to view modes
             */
            this.viewMode = this.viewModeList.indexOf(model.options.viewMode) > 0 ? model.options.viewMode : this.viewModeList[0];

            /**
             * @desc view mode string index in view mode list
             * @type {number}
             */
            this.viewModeIndex = this.viewModeList.indexOf(model.options.viewMode) > 0 ? this.viewModeList.indexOf(model.options.viewMode) : 0; // defaul 'day'


            /**
             * @desc contain filtered date objects
             * @type {{start: {year: number, month: number, date: number, hour: number, minute: number, second: number, unixDate: number}, end: {year: number, month: number, date: number, hour: number, minute: number, second: number, unixDate: number}}}
             */
            this.filterDate = {
              start: {
                year: 0,
                month: 0,
                date: 0,
                hour: 0,
                minute: 0,
                second: 0,
                unixDate: 0
              },
              end: {
                year: 0,
                month: 0,
                date: 0,
                hour: 0,
                minute: 0,
                second: 0,
                unixDate: 0
              }
            };

            /**
             * @desc contain view date object
             * @type {{year: number, month: number, date: number, hour: number, minute: number, second: number, unixDate: number, dateObject: null, meridian: string}}
             */
            this.view = {
              year: 0,
              month: 0,
              date: 0,
              hour: 0,
              minute: 0,
              second: 0,
              unixDate: 0,
              dateObject: null,
              meridian: 'AM'
            };

            /**
             * @desc contain selected date object
             * @type {{year: number, month: number, date: number, hour: number, minute: number, second: number, unixDate: number, dateObject: null}}
             */
            this.selected = {
              year: 0,
              month: 0,
              date: 0,
              hour: 0,
              hour12: 0,
              minute: 0,
              second: 0,
              unixDate: 0,
              dateObject: null
            };

            this.ui = {
              isOpen: false,
              isInline: this.model.options.inline
            };

            this._setFilterDate(this.model.options.minDate, this.model.options.maxDate);
            return this;
          }

          /**
           * @private
           * @param minDate
           * @param maxDate
           */


          _createClass(State, [{
            key: '_setFilterDate',
            value: function _setFilterDate(minDate, maxDate) {
              var self = this;
              if (!minDate) {
                minDate = -2000000000000000;
              }
              if (!maxDate) {
                maxDate = 2000000000000000;
              }
              var pd = self.model.PersianDate.date(minDate);
              self.filterDate.start.unixDate = minDate;
              self.filterDate.start.hour = pd.hour();
              self.filterDate.start.minute = pd.minute();
              self.filterDate.start.second = pd.second();
              self.filterDate.start.month = pd.month();
              self.filterDate.start.date = pd.date();
              self.filterDate.start.year = pd.year();

              var pdEnd = self.model.PersianDate.date(maxDate);
              self.filterDate.end.unixDate = maxDate;
              self.filterDate.end.hour = pdEnd.hour();
              self.filterDate.end.minute = pdEnd.minute();
              self.filterDate.end.second = pdEnd.second();
              self.filterDate.end.month = pdEnd.month();
              self.filterDate.end.date = pdEnd.date();
              self.filterDate.end.year = pdEnd.year();
            }

            /**
             * @desc change view state
             * @param {String} nav - accept next, prev
             */

          }, {
            key: 'navigate',
            value: function navigate(nav) {
              if (nav == 'next') {
                if (this.viewMode == 'year') {
                  this.setViewDateTime('year', this.view.year + 12);
                }
                if (this.viewMode == 'month') {
                  var newYear = this.view.year + 1;
                  if (newYear === 0) {
                    newYear = 1;
                  }
                  this.setViewDateTime('year', newYear);
                }
                if (this.viewMode == 'day') {
                  var _newYear = this.view.year + 1;
                  if (_newYear === 0) {
                    _newYear = 1;
                  }
                  if (this.view.month + 1 == 13) {
                    this.setViewDateTime('year', _newYear);
                    this.setViewDateTime('month', 1);
                  } else {
                    this.setViewDateTime('month', this.view.month + 1);
                  }
                }
              } else {
                if (this.viewMode == 'year') {
                  this.setViewDateTime('year', this.view.year - 12);
                }
                if (this.viewMode == 'month') {
                  var _newYear2 = this.view.year - 1;
                  if (_newYear2 === 0) {
                    _newYear2 = -1;
                  }
                  this.setViewDateTime('year', _newYear2);
                }
                if (this.viewMode == 'day') {
                  if (this.view.month - 1 <= 0) {
                    var _newYear3 = this.view.year - 1;
                    if (_newYear3 === 0) {
                      _newYear3 = -1;
                    }
                    this.setViewDateTime('year', _newYear3);
                    this.setViewDateTime('month', 12);
                  } else {
                    this.setViewDateTime('month', this.view.month - 1);
                  }
                }
              }
            }

            /**
             * @public
             * @desc every time called view state changed to next in queue
             * @return {State}
             */

          }, {
            key: 'switchViewMode',
            value: function switchViewMode() {
              this.viewModeIndex = this.viewModeIndex + 1 >= this.viewModeList.length ? 0 : this.viewModeIndex + 1;
              this.viewMode = this.viewModeList[this.viewModeIndex] ? this.viewModeList[this.viewModeIndex] : this.viewModeList[0];
              this._setViewDateTimeUnix();
              return this;
            }

            /**
             * @desc switch to specified view mode
             * @param {String} viewMode - accept date, month, year
             */

          }, {
            key: 'switchViewModeTo',
            value: function switchViewModeTo(viewMode) {
              if (this.viewModeList.indexOf(viewMode) >= 0) {
                this.viewMode = viewMode;
                this.viewModeIndex = this.viewModeList.indexOf(viewMode);
              }
            }

            /**
             * @desc called on date select
             * @param {String} key - accept date, month, year, hour, minute, second
             * @param {Number} value
             * @public
             * @return {State}
             */

          }, {
            key: 'setSelectedDateTime',
            value: function setSelectedDateTime(key, value) {
              var that = this;
              switch (key) {
                case 'unix':
                  that.selected.unixDate = value;
                  var pd = this.model.PersianDate.date(value);
                  that.selected.year = pd.year();
                  that.selected.month = pd.month();
                  that.selected.date = pd.date();
                  that.selected.hour = pd.hour();
                  that.selected.hour12 = pd.format('hh');
                  that.selected.minute = pd.minute();
                  that.selected.second = pd.second();
                  break;
                case 'year':
                  this.selected.year = value;
                  break;
                case 'month':
                  this.selected.month = value;
                  break;
                case 'date':
                  this.selected.date = value;
                  break;
                case 'hour':
                  this.selected.hour = value;
                  break;
                case 'minute':
                  this.selected.minute = value;
                  break;
                case 'second':
                  this.selected.second = value;
                  break;
              }
              that._updateSelectedUnix();
              return this;
            }

            /**
             * @return {State}
             * @private
             */

          }, {
            key: '_updateSelectedUnix',
            value: function _updateSelectedUnix() {
              this.selected.dateObject = this.model.PersianDate.date([this.selected.year, this.selected.month, this.selected.date, this.view.hour, this.view.minute, this.view.second]);
              this.selected.unixDate = this.selected.dateObject.valueOf();
              this.model.updateInput(this.selected.unixDate);
              return this;
            }

            /**
             *
             * @return {State}
             * @private
             */

          }, {
            key: '_setViewDateTimeUnix',
            value: function _setViewDateTimeUnix() {
              this.view.dateObject = this.model.PersianDate.date([this.view.year, this.view.month, this.view.date, this.view.hour, this.view.minute, this.view.second]);
              this.view.year = this.view.dateObject.year();
              this.view.month = this.view.dateObject.month();
              this.view.date = this.view.dateObject.date();
              this.view.hour = this.view.dateObject.hour();
              this.view.hour12 = this.view.dateObject.format('hh');
              this.view.minute = this.view.dateObject.minute();
              this.view.second = this.view.dateObject.second();
              this.view.unixDate = this.view.dateObject.valueOf();
              return this;
            }

            /**
             *
             * @param {String} key -  accept date, month, year, hour, minute, second
             * @param {Number} value
             * @return {State}
             */

          }, {
            key: 'setViewDateTime',
            value: function setViewDateTime(key, value) {
              var self = this;
              switch (key) {
                case 'unix':
                  var pd = this.model.PersianDate.date(value);
                  self.view.year = pd.year();
                  self.view.month = pd.month();
                  self.view.date = pd.date();
                  self.view.hour = pd.hour();
                  self.view.minute = pd.minute();
                  self.view.second = pd.second();
                  break;
                case 'year':
                  this.view.year = value;
                  break;
                case 'month':
                  this.view.month = value;
                  break;
                case 'date':
                  this.view.date = value;
                  break;
                case 'hour':
                  this.view.hour = value;
                  break;
                case 'minute':
                  this.view.minute = value;
                  break;
                case 'second':
                  this.view.second = value;
                  break;
              }
              this._setViewDateTimeUnix();
              return this;
            }

            /**
             * desc change meridian state
             */

          }, {
            key: 'meridianToggle',
            value: function meridianToggle() {
              var self = this;
              if (self.view.meridian === 'AM') {
                self.view.meridian = 'PM';
              } else if (self.view.meridian === 'PM') {
                self.view.meridian = 'AM';
              }
            }
          }]);

          return State;
        }();

        module.exports = State;

        /***/
      }),
/* 12 */
/***/ (function (module, exports, __webpack_require__) {

        "use strict";


        var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

        function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

        /**
         * Do every things about toolbox, like attach events to toolbox elements
         */
        var Toolbox = function () {

          /**
           * @param {Datepicker} datepicker
           * @return {Toolbox}
           */
          function Toolbox(model) {
            _classCallCheck(this, Toolbox);

            /**
             * @type {Datepicker}
             */
            this.model = model;
            this._attachEvents();
            return this;
          }

          _createClass(Toolbox, [{
            key: '_toggleCalendartype',
            value: function _toggleCalendartype() {
              var that = this;
              if (that.model.options.calendar_ == 'persian') {
                that.model.options.calendar_ = 'gregorian';
                that.model.options.locale_ = this.model.options.calendar.gregorian.locale;
              } else {
                that.model.options.calendar_ = 'persian';
                that.model.options.locale_ = this.model.options.calendar.persian.locale;
              }
            }

            /**
             * attach all events about toolbox
             */

          }, {
            key: '_attachEvents',
            value: function _attachEvents() {
              var that = this;
              $(document).on('click', '#' + that.model.view.id + ' .pwt-btn-today', function () {
                that.model.state.setSelectedDateTime('unix', new Date().valueOf());
                that.model.state.setViewDateTime('unix', new Date().valueOf());
                that.model.view.reRender();
                /**
                 * @deprecated
                 * @todo remove this
                 */
                that.model.options.toolbox.onToday(that.model);
                that.model.options.toolbox.todayButton.onToday(that.model);
              });

              $(document).on('click', '#' + that.model.view.id + ' .pwt-btn-calendar', function () {
                that._toggleCalendartype();
                that.model.state.setSelectedDateTime('unix', that.model.state.selected.unixDate);
                that.model.state.setViewDateTime('unix', that.model.state.view.unixDate);
                that.model.view.render();
                that.model.options.toolbox.calendarSwitch.onSwitch(that.model);
              });

              $(document).on('click', '#' + that.model.view.id + ' .pwt-btn-submit', function () {
                that.model.view.hide();
                that.model.options.toolbox.submitButton.onSubmit(that.model);
                that.model.options.onHide(this);
              });
            }
          }]);

          return Toolbox;
        }();

        module.exports = Toolbox;

        /***/
      }),
/* 13 */
/***/ (function (module, exports, __webpack_require__) {

        "use strict";


        var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

        var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

        function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

        function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

        var Template = __webpack_require__(1);
        var Helper = __webpack_require__(0);
        var Mustache = __webpack_require__(15);

        /**
         * As its name suggests, all rendering works do in this object
         */

        var View = function () {

          /**
           *
           * @param {Datepicker} model
           * @return {View}
           */
          function View(model) {
            _classCallCheck(this, View);

            /**
             * @type {number}
             */
            this.yearsViewCount = 12;

            /**
             *
             * @type {Datepicker}
             */
            this.model = model;

            /**
             *
             * @type {null}
             */
            this.rendered = null;

            /**
             *
             * @type {null}
             */
            this.$container = null;

            /**
             *
             * @type {string}
             */
            this.id = 'persianDateInstance-' + parseInt(Math.random(100) * 1000);
            var that = this;

            if (this.model.state.ui.isInline) {
              this.$container = $('<div  id="' + this.id + '" class="datepicker-container-inline"></div>').appendTo(that.model.inputElement);
            } else {
              this.$container = $('<div  id="' + this.id + '" class="datepicker-container"></div>').appendTo('body');
              this.hide();
              this.setPickerBoxPosition();
              this.addCompatibilityClass();
            }
            return this;
          }

          /**
           * @desc add css class to handle compatibility ui things
           */


          _createClass(View, [{
            key: 'addCompatibilityClass',
            value: function addCompatibilityClass() {
              if (Helper.isMobile && this.model.options.responsive) {
                this.$container.addClass('pwt-mobile-view');
              }
            }

            /**
             * @desc remove datepicker container element from dom
             */

          }, {
            key: 'destroy',
            value: function destroy() {
              this.$container.remove();
            }

            /**
             * @desc set datepicker container element based on <input/> element position
             */

          }, {
            key: 'setPickerBoxPosition',
            value: function setPickerBoxPosition() {
              var inputPosition = this.model.input.getInputPosition(),
                inputSize = this.model.input.getInputSize();

              if (Helper.isMobile && this.model.options.responsive) {
                return false;
              }

              if (this.model.options.position === 'auto') {
                this.$container.css({
                  left: inputPosition.left + 'px',
                  top: inputSize.height + inputPosition.top + 'px'
                });
              } else {
                this.$container.css({
                  left: this.model.options.position[1] + 'px',
                  top: this.model.options.position[0] + 'px'
                });
              }
            }

            /**
             * @desc show datepicker container element
             */

          }, {
            key: 'show',
            value: function show() {
              this.$container.removeClass('pwt-hide');
              this.setPickerBoxPosition();
            }

            /**
             * @desc hide datepicker container element
             */

          }, {
            key: 'hide',
            value: function hide() {
              this.$container.addClass('pwt-hide');
            }

            /**
             * @desc toggle datepicker container element
             */

          }, {
            key: 'toggle',
            value: function toggle() {
              this.$container.toggleClass('pwt-hide');
            }

            /**
             * @desc return navigator switch text
             * @param {String} data -  accept day, month, year
             * @private
             * @return {String}
             */

          }, {
            key: '_getNavSwitchText',
            value: function _getNavSwitchText(data) {
              var output = void 0;
              if (this.model.state.viewMode == 'day') {
                output = this.model.options.dayPicker.titleFormatter.call(this, data.year, data.month);
              } else if (this.model.state.viewMode == 'month') {
                output = this.model.options.monthPicker.titleFormatter.call(this, data.dateObject.valueOf());
              } else if (this.model.state.viewMode == 'year') {
                output = this.model.options.yearPicker.titleFormatter.call(this, data.year);
              }
              return output;
            }

            /**
             * @desc check year is accessible
             * @param {Number} year - year number
             * @return {Boolean}
             */

          }, {
            key: 'checkYearAccess',
            value: function checkYearAccess(year) {
              var output = true;
              if (this.model.state.filetredDate) {
                var startYear = this.model.state.filterDate.start.year,
                  endYear = this.model.state.filterDate.end.year;
                if (startYear && year < startYear) {
                  return false;
                } else if (endYear && year > endYear) {
                  return false;
                }
              }
              if (output) {
                return this.model.options.checkYear(year);
              }
            }

            /**
             * @private
             * @param viewState
             * @return {{enabled: boolean, viewMode: boolean, list: Array}}
             */

          }, {
            key: '_getYearViewModel',
            value: function _getYearViewModel(viewState) {
              var _this = this;

              var isEnabled = this.model.options.yearPicker.enabled;
              // Make performance better
              if (!isEnabled) {
                return {
                  enabled: false
                };
              }
              /**
               * @description Generate years list based on viewState year
               * @return ['1380',n+12,'1392']
               */

              var list = [];
              for (var value = 0; value < _this.yearsViewCount; value++) {
                list[value] = value + parseInt(viewState.year / _this.yearsViewCount) * _this.yearsViewCount;
              }

              /*
               * @description Generate years object based on list
               */
              var yearsModel = [],
                yearStr = this.model.PersianDate.date();
              var _iteratorNormalCompletion = true;
              var _didIteratorError = false;
              var _iteratorError = undefined;

              try {
                for (var _iterator = list[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
                  var i = _step.value;

                  yearStr.year([i]);
                  yearsModel.push({
                    title: yearStr.format('YYYY'),
                    enabled: this.checkYearAccess(i),
                    dataYear: i,
                    selected: this.model.state.selected.year == i
                  });
                }
              } catch (err) {
                _didIteratorError = true;
                _iteratorError = err;
              } finally {
                try {
                  if (!_iteratorNormalCompletion && _iterator.return) {
                    _iterator.return();
                  }
                } finally {
                  if (_didIteratorError) {
                    throw _iteratorError;
                  }
                }
              }

              return {
                enabled: isEnabled,
                viewMode: this.model.state.viewMode == 'year',
                list: yearsModel
              };
            }

            /**
             * @desc check month is accessible
             * @param {Number} month - month number
             * @return {Boolean}
             */

          }, {
            key: 'checkMonthAccess',
            value: function checkMonthAccess(month) {
              month = month + 1;
              var output = true,
                y = this.model.state.view.year;
              if (this.model.state.filetredDate) {
                var startMonth = this.model.state.filterDate.start.month,
                  endMonth = this.model.state.filterDate.end.month,
                  startYear = this.model.state.filterDate.start.year,
                  endYear = this.model.state.filterDate.end.year;
                if (startMonth && endMonth && (y == endYear && month > endMonth || y > endYear) || y == startYear && month < startMonth || y < startYear) {
                  return false;
                } else if (endMonth && (y == endYear && month > endMonth || y > endYear)) {
                  return false;
                } else if (startMonth && (y == startYear && month < startMonth || y < startYear)) {
                  return false;
                }
              }
              if (output) {
                return this.model.options.checkMonth(month, y);
              }
            }

            /**
             * @private
             * @return {{enabled: boolean, viewMode: boolean, list: Array}}
             */

          }, {
            key: '_getMonthViewModel',
            value: function _getMonthViewModel() {
              var isEnaled = this.model.options.monthPicker.enabled;
              // Make performance better
              if (!isEnaled) {
                return {
                  enabled: false
                };
              }

              var monthModel = [],
                that = this;
              var _iteratorNormalCompletion2 = true;
              var _didIteratorError2 = false;
              var _iteratorError2 = undefined;
              var i = 0;

              try {
                for (var _iterator2 = that.model.PersianDate.date().rangeName().months.entries()[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {

                  var index = i,
                    month = that.model.PersianDate.date().rangeName().months[index];

                  monthModel.push({
                    title: month,
                    enabled: this.checkMonthAccess(index),
                    year: this.model.state.view.year,
                    dataMonth: index + 1,
                    selected: this.model.state.selected.year == this.model.state.view.year && this.model.state.selected.month == index + 1
                  });
                  i++
                }
              } catch (err) {
                _didIteratorError2 = true;
                _iteratorError2 = err;
              } finally {
                try {
                  if (!_iteratorNormalCompletion2 && _iterator2.return) {
                    _iterator2.return();
                  }
                } finally {
                  if (_didIteratorError2) {
                    throw _iteratorError2;
                  }
                }
              }

              return {
                enabled: isEnaled,
                viewMode: this.model.state.viewMode == 'month',
                list: monthModel
              };
            }

            /**
             * @desc check day is accessible
             * @param {Number} thisUnix - month number
             * @return {Boolean}
             */

          }, {
            key: 'checkDayAccess',
            value: function checkDayAccess(unixtimespan) {
              var self = this,
                output = true;
              self.minDate = this.model.options.minDate;
              self.maxDate = this.model.options.maxDate;

              if (self.model.state.filetredDate) {
                if (self.minDate && self.maxDate) {
                  self.minDate = self.model.PersianDate.date(self.minDate).startOf('day').valueOf();
                  self.maxDate = self.model.PersianDate.date(self.maxDate).endOf('day').valueOf();
                  if (!(unixtimespan >= self.minDate && unixtimespan <= self.maxDate)) {
                    return false;
                  }
                } else if (self.minDate) {
                  self.minDate = self.model.PersianDate.date(self.minDate).startOf('day').valueOf();
                  if (unixtimespan <= self.minDate) {
                    return false;
                  }
                } else if (self.maxDate) {
                  self.maxDate = self.model.PersianDate.date(self.maxDate).endOf('day').valueOf();
                  if (unixtimespan >= self.maxDate) {
                    return false;
                  }
                }
              }
              if (output) {
                return self.model.options.checkDate(unixtimespan);
              }
            }

            /**
             * @private
             * @return {object}
             */

          }, {
            key: '_getDayViewModel',
            value: function _getDayViewModel() {
              if (this.model.state.viewMode != 'day') {
                return [];
              }

              var isEnabled = this.model.options.dayPicker.enabled;
              // Make performance better
              if (!isEnabled) {
                return {
                  enabled: false
                };
              }

              //log('if you see this many time your code has performance issue');
              var viewMonth = this.model.state.view.month,
                viewYear = this.model.state.view.year;
              var pdateInstance = this.model.PersianDate.date(),
                daysCount = pdateInstance.daysInMonth(viewYear, viewMonth),
                firstWeekDayOfMonth = pdateInstance.getFirstWeekDayOfMonth(viewYear, viewMonth) - 1,
                outputList = [],
                daysListindex = 0,
                nextMonthListIndex = 0,
                daysMatrix = [['null', 'null', 'null', 'null', 'null', 'null', 'null'], ['null', 'null', 'null', 'null', 'null', 'null', 'null'], ['null', 'null', 'null', 'null', 'null', 'null', 'null'], ['null', 'null', 'null', 'null', 'null', 'null', 'null'], ['null', 'null', 'null', 'null', 'null', 'null', 'null'], ['null', 'null', 'null', 'null', 'null', 'null', 'null']];

              var anotherCalendar = this._getAnotherCalendar();
              var pdate = this.model.PersianDate.date();
              var _iteratorNormalCompletion3 = true;
              var _didIteratorError3 = false;
              var _iteratorError3 = undefined;
              var i = 0;
              var j = 0;

              try {
                for (var _iterator3 = daysMatrix.entries()[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {
                  var _step3$value = _slicedToArray(_step3.value, 2),
                    rowIndex = i,
                    daysRow = _step3$value.map(function (value) { return [value]; });
                  outputList[rowIndex] = [];
                  var _iteratorNormalCompletion4 = true;
                  var _didIteratorError4 = false;
                  var _iteratorError4 = undefined;
                  j = 0;
                  i++;


                  try {
                    for (var _iterator4 = daysRow.entries()[Symbol.iterator](), _step4; !(_iteratorNormalCompletion4 = (_step4 = _iterator4.next()).done); _iteratorNormalCompletion4 = true) {
                      var _step4$value = _slicedToArray(_step4.value, 1),
                        dayIndex = j;
                      j++;

                      var calcedDate = void 0,
                        otherMonth = void 0;
                      if (rowIndex === 0 && dayIndex < firstWeekDayOfMonth) {
                        calcedDate = pdate.unix(this.model.state.view.dateObject.startOf('month').valueOf() / 1000).subtract('days', firstWeekDayOfMonth - dayIndex);
                        otherMonth = true;
                      } else if (rowIndex === 0 && dayIndex >= firstWeekDayOfMonth || rowIndex <= 5 && daysListindex < daysCount) {
                        if (this.model.state.view.year) {
                          daysListindex += 1;
                          calcedDate = pdate.year(this.model.state.view.year).month(this.model.state.view.month).date(daysListindex);
                          otherMonth = false;
                        }
                      } else {
                        nextMonthListIndex += 1;
                        calcedDate = pdate.unix(this.model.state.view.dateObject.endOf('month').valueOf() / 1000).add('days', nextMonthListIndex);
                        otherMonth = true;
                      }
                      outputList[rowIndex].push({
                        title: calcedDate.format('D'),
                        alterCalTitle: new persianDate(calcedDate.valueOf()).toCalendar(anotherCalendar[0]).toLocale(anotherCalendar[1]).format('D'),
                        dataDate: [calcedDate.year(), calcedDate.month(), calcedDate.date()].join(','),
                        dataUnix: calcedDate.valueOf(),
                        otherMonth: otherMonth,
                        // TODO: make configurable
                        enabled: this.checkDayAccess(calcedDate.valueOf())
                      });
                    }
                  } catch (err) {
                    _didIteratorError4 = true;
                    _iteratorError4 = err;
                  } finally {
                    try {
                      if (!_iteratorNormalCompletion4 && _iterator4.return) {
                        _iterator4.return();
                      }
                    } finally {
                      if (_didIteratorError4) {
                        throw _iteratorError4;
                      }
                    }
                  }
                }
              } catch (err) {
                _didIteratorError3 = true;
                _iteratorError3 = err;
              } finally {
                try {
                  if (!_iteratorNormalCompletion3 && _iterator3.return) {
                    _iterator3.return();
                  }
                } finally {
                  if (_didIteratorError3) {
                    throw _iteratorError3;
                  }
                }
              }

              return {
                enabled: isEnabled,
                viewMode: this.model.state.viewMode == 'day',
                list: outputList
              };
            }
          }, {
            key: 'markSelectedDay',
            value: function markSelectedDay() {
              var selected = this.model.state.selected;
              this.$container.find('.table-days td').each(function () {
                if ($(this).data('date') == [selected.year, selected.month, selected.date].join(',')) {
                  $(this).addClass('selected');
                } else {
                  $(this).removeClass('selected');
                }
              });
            }
          }, {
            key: 'markToday',
            value: function markToday() {
              var today = new persianDate();
              this.$container.find('.table-days td').each(function () {
                if ($(this).data('date') == [today.year(), today.month(), today.date()].join(',')) {
                  $(this).addClass('today');
                } else {
                  $(this).removeClass('today');
                }
              });
            }

            /**
             * @private
             * @return {{enabled: boolean, hour: {title, enabled: boolean}, minute: {title, enabled: boolean}, second: {title, enabled: boolean}, meridian: {title: (meridian|{title, enabled}|ClassDatepicker.ClassConfig.timePicker.meridian|{enabled}|string|string), enabled: boolean}}}
             */

          }, {
            key: '_getTimeViewModel',
            value: function _getTimeViewModel() {

              var isEnabled = this.model.options.timePicker.enabled;
              // Make performance better
              if (!isEnabled) {
                return {
                  enabled: false
                };
              }

              var hourTitle = void 0;
              if (this.model.options.timePicker.meridian.enabled) {
                hourTitle = this.model.state.view.dateObject.format('hh');
              } else {
                hourTitle = this.model.state.view.dateObject.format('HH');
              }

              return {
                enabled: isEnabled,
                hour: {
                  title: hourTitle,
                  enabled: this.model.options.timePicker.hour.enabled
                },
                minute: {
                  title: this.model.state.view.dateObject.format('mm'),
                  enabled: this.model.options.timePicker.minute.enabled
                },
                second: {
                  title: this.model.state.view.dateObject.format('ss'),
                  enabled: this.model.options.timePicker.second.enabled
                },
                meridian: {
                  title: this.model.state.view.dateObject.format('a'),
                  enabled: this.model.options.timePicker.meridian.enabled
                }
              };
            }

            /**
             *
             * @return {{enabled: boolean, list: (*|Array)}}
             * @private
             */

          }, {
            key: '_getWeekViewModel',
            value: function _getWeekViewModel() {
              return {
                enabled: true,
                list: this.model.PersianDate.date().rangeName().weekdaysMin
              };
            }

            /**
             *
             * @return {string}
             */

          }, {
            key: 'getCssClass',
            value: function getCssClass() {
              return [this.model.state.ui.isInline ? 'datepicker-plot-area-inline-view' : '', !this.model.options.timePicker.meridian.enabled ? 'datepicker-state-no-meridian' : '', this.model.options.onlyTimePicker ? 'datepicker-state-only-time' : '', !this.model.options.timePicker.second.enabled ? 'datepicker-state-no-second' : '', this.model.options.calendar_ == 'gregorian' ? 'datepicker-gregorian' : 'datepicker-persian'].join(' ');
            }

            /**
             * @param data
             * @return {*}
             */

          }, {
            key: 'getViewModel',
            value: function getViewModel(data) {
              var anotherCalendar = this._getAnotherCalendar();
              return {
                plotId: '',
                navigator: {
                  enabled: this.model.options.navigator.enabled,
                  switch: {
                    enabled: true,
                    text: this._getNavSwitchText(data)
                  },
                  text: this.model.options.navigator.text
                },
                selected: this.model.state.selected,
                time: this._getTimeViewModel(data),
                days: this._getDayViewModel(data),
                weekdays: this._getWeekViewModel(data),
                month: this._getMonthViewModel(data),
                year: this._getYearViewModel(data),
                toolbox: this.model.options.toolbox,
                cssClass: this.getCssClass(),
                onlyTimePicker: this.model.options.onlyTimePicker,
                altCalendarShowHint: this.model.options.calendar[anotherCalendar[0]].showHint,
                calendarSwitchText: this.model.state.view.dateObject.toCalendar(anotherCalendar[0]).toLocale(anotherCalendar[1]).format(this.model.options.toolbox.calendarSwitch.format),
                todayButtonText: this._getButtonText().todayButtontext,
                submitButtonText: this._getButtonText().submitButtonText
              };
            }
          }, {
            key: '_getButtonText',
            value: function _getButtonText() {
              var output = {};
              if (this.model.options.locale_ == 'fa') {
                output.todayButtontext = this.model.options.toolbox.todayButton.text.fa;
                output.submitButtonText = this.model.options.toolbox.submitButton.text.fa;
              } else if (this.model.options.locale_ == 'en') {
                output.todayButtontext = this.model.options.toolbox.todayButton.text.en;
                output.submitButtonText = this.model.options.toolbox.submitButton.text.en;
              }
              return output;
            }
          }, {
            key: '_getAnotherCalendar',
            value: function _getAnotherCalendar() {
              var that = this,
                cal = void 0,
                loc = void 0;
              if (that.model.options.calendar_ == 'persian') {
                cal = 'gregorian';
                loc = that.model.options.calendar.gregorian.locale;
              } else {
                cal = 'persian';
                loc = that.model.options.calendar.persian.locale;
              }
              return [cal, loc];
            }

            /**
             * @desc render times area, prevent performance issue with scroll and time section
             */

          }, {
            key: 'renderTimePartial',
            value: function renderTimePartial() {
              var timeViewModel = this._getTimeViewModel(this.model.state.view);
              this.$container.find('[data-time-key="hour"] input').val(timeViewModel.hour.title);
              this.$container.find('[data-time-key="minute"] input').val(timeViewModel.minute.title);
              this.$container.find('[data-time-key="second"] input').val(timeViewModel.second.title);
              this.$container.find('[data-time-key="meridian"] input').val(timeViewModel.meridian.title);
            }

            /**
             * @render datepicker view element
             * @param data
             */

          }, {
            key: 'render',
            value: function render(data) {
              if (!data) {
                data = this.model.state.view;
              }
              Helper.debug(this, 'render');
              Mustache.parse(Template);
              this.rendered = $(Mustache.render(this.model.options.template, this.getViewModel(data)));
              this.$container.empty().append(this.rendered);
              this.markSelectedDay();
              this.markToday();
              this.afterRender();
            }
          }, {
            key: 'reRender',
            value: function reRender() {
              var data = this.model.state.view;
              this.render(data);
            }

            /**
             * @desc do after render work like attache events
             */

          }, {
            key: 'afterRender',
            value: function afterRender() {
              if (this.model.navigator) {
                this.model.navigator.liveAttach();
              }
            }
          }]);

          return View;
        }();

        module.exports = View;

        /***/
      }),
/* 14 */
/***/ (function (module, exports, __webpack_require__) {

        /*
         * Hamster.js v1.1.2
         * (c) 2013 Monospaced http://monospaced.com
         * License: MIT
         */

        (function (window, document) {
          'use strict';

          /**
           * Hamster
           * use this to create instances
           * @returns {Hamster.Instance}
           * @constructor
           */
          var Hamster = function (element) {
            return new Hamster.Instance(element);
          };

          // default event name
          Hamster.SUPPORT = 'wheel';

          // default DOM methods
          Hamster.ADD_EVENT = 'addEventListener';
          Hamster.REMOVE_EVENT = 'removeEventListener';
          Hamster.PREFIX = '';

          // until browser inconsistencies have been fixed...
          Hamster.READY = false;

          Hamster.Instance = function (element) {
            if (!Hamster.READY) {
              // fix browser inconsistencies
              Hamster.normalise.browser();

              // Hamster is ready...!
              Hamster.READY = true;
            }

            this.element = element;

            // store attached event handlers
            this.handlers = [];

            // return instance
            return this;
          };

          /**
           * create new hamster instance
           * all methods should return the instance itself, so it is chainable.
           * @param   {HTMLElement}       element
           * @returns {Hamster.Instance}
           * @constructor
           */
          Hamster.Instance.prototype = {
            /**
             * bind events to the instance
             * @param   {Function}    handler
             * @param   {Boolean}     useCapture
             * @returns {Hamster.Instance}
             */
            wheel: function onEvent(handler, useCapture) {
              Hamster.event.add(this, Hamster.SUPPORT, handler, useCapture);

              // handle MozMousePixelScroll in older Firefox
              if (Hamster.SUPPORT === 'DOMMouseScroll') {
                Hamster.event.add(this, 'MozMousePixelScroll', handler, useCapture);
              }

              return this;
            },

            /**
             * unbind events to the instance
             * @param   {Function}    handler
             * @param   {Boolean}     useCapture
             * @returns {Hamster.Instance}
             */
            unwheel: function offEvent(handler, useCapture) {
              // if no handler argument,
              // unbind the last bound handler (if exists)
              if (handler === undefined && (handler = this.handlers.slice(-1)[0])) {
                handler = handler.original;
              }

              Hamster.event.remove(this, Hamster.SUPPORT, handler, useCapture);

              // handle MozMousePixelScroll in older Firefox
              if (Hamster.SUPPORT === 'DOMMouseScroll') {
                Hamster.event.remove(this, 'MozMousePixelScroll', handler, useCapture);
              }

              return this;
            }
          };

          Hamster.event = {
            /**
             * cross-browser 'addWheelListener'
             * @param   {Instance}    hamster
             * @param   {String}      eventName
             * @param   {Function}    handler
             * @param   {Boolean}     useCapture
             */
            add: function add(hamster, eventName, handler, useCapture) {
              // store the original handler
              var originalHandler = handler;

              // redefine the handler
              handler = function (originalEvent) {

                if (!originalEvent) {
                  originalEvent = window.event;
                }

                // create a normalised event object,
                // and normalise "deltas" of the mouse wheel
                var event = Hamster.normalise.event(originalEvent),
                  delta = Hamster.normalise.delta(originalEvent);

                // fire the original handler with normalised arguments
                return originalHandler(event, delta[0], delta[1], delta[2]);

              };

              // cross-browser addEventListener
              hamster.element[Hamster.ADD_EVENT](Hamster.PREFIX + eventName, handler, useCapture || false);

              // store original and normalised handlers on the instance
              hamster.handlers.push({
                original: originalHandler,
                normalised: handler
              });
            },

            /**
             * removeWheelListener
             * @param   {Instance}    hamster
             * @param   {String}      eventName
             * @param   {Function}    handler
             * @param   {Boolean}     useCapture
             */
            remove: function remove(hamster, eventName, handler, useCapture) {
              // find the normalised handler on the instance
              var originalHandler = handler,
                lookup = {},
                handlers;
              for (var i = 0, len = hamster.handlers.length; i < len; ++i) {
                lookup[hamster.handlers[i].original] = hamster.handlers[i];
              }
              handlers = lookup[originalHandler];
              handler = handlers.normalised;

              // cross-browser removeEventListener
              hamster.element[Hamster.REMOVE_EVENT](Hamster.PREFIX + eventName, handler, useCapture || false);

              // remove original and normalised handlers from the instance
              for (var h in hamster.handlers) {
                if (hamster.handlers[h] == handlers) {
                  hamster.handlers.splice(h, 1);
                  break;
                }
              }
            }
          };

          /**
           * these hold the lowest deltas,
           * used to normalise the delta values
           * @type {Number}
           */
          var lowestDelta,
            lowestDeltaXY;

          Hamster.normalise = {
            /**
             * fix browser inconsistencies
             */
            browser: function normaliseBrowser() {
              // detect deprecated wheel events
              if (!('onwheel' in document || document.documentMode >= 9)) {
                Hamster.SUPPORT = document.onmousewheel !== undefined ?
                  'mousewheel' : // webkit and IE < 9 support at least "mousewheel"
                  'DOMMouseScroll'; // assume remaining browsers are older Firefox
              }

              // detect deprecated event model
              if (!window.addEventListener) {
                // assume IE < 9
                Hamster.ADD_EVENT = 'attachEvent';
                Hamster.REMOVE_EVENT = 'detachEvent';
                Hamster.PREFIX = 'on';
              }

            },

            /**
             * create a normalised event object
             * @param   {Function}    originalEvent
             * @returns {Object}      event
             */
            event: function normaliseEvent(originalEvent) {
              var event = {
                // keep a reference to the original event object
                originalEvent: originalEvent,
                target: originalEvent.target || originalEvent.srcElement,
                type: 'wheel',
                deltaMode: originalEvent.type === 'MozMousePixelScroll' ? 0 : 1,
                deltaX: 0,
                delatZ: 0,
                preventDefault: function () {
                  if (originalEvent.preventDefault) {
                    originalEvent.preventDefault();
                  } else {
                    originalEvent.returnValue = false;
                  }
                },
                stopPropagation: function () {
                  if (originalEvent.stopPropagation) {
                    originalEvent.stopPropagation();
                  } else {
                    originalEvent.cancelBubble = false;
                  }
                }
              };

              // calculate deltaY (and deltaX) according to the event

              // 'mousewheel'
              if (originalEvent.wheelDelta) {
                event.deltaY = - 1 / 40 * originalEvent.wheelDelta;
              }
              // webkit
              if (originalEvent.wheelDeltaX) {
                event.deltaX = - 1 / 40 * originalEvent.wheelDeltaX;
              }

              // 'DomMouseScroll'
              if (originalEvent.detail) {
                event.deltaY = originalEvent.detail;
              }

              return event;
            },

            /**
             * normalise 'deltas' of the mouse wheel
             * @param   {Function}    originalEvent
             * @returns {Array}       deltas
             */
            delta: function normaliseDelta(originalEvent) {
              var delta = 0,
                deltaX = 0,
                deltaY = 0,
                absDelta = 0,
                absDeltaXY = 0,
                fn;

              // normalise deltas according to the event

              // 'wheel' event
              if (originalEvent.deltaY) {
                deltaY = originalEvent.deltaY * -1;
                delta = deltaY;
              }
              if (originalEvent.deltaX) {
                deltaX = originalEvent.deltaX;
                delta = deltaX * -1;
              }

              // 'mousewheel' event
              if (originalEvent.wheelDelta) {
                delta = originalEvent.wheelDelta;
              }
              // webkit
              if (originalEvent.wheelDeltaY) {
                deltaY = originalEvent.wheelDeltaY;
              }
              if (originalEvent.wheelDeltaX) {
                deltaX = originalEvent.wheelDeltaX * -1;
              }

              // 'DomMouseScroll' event
              if (originalEvent.detail) {
                delta = originalEvent.detail * -1;
              }

              // Don't return NaN
              if (delta === 0) {
                return [0, 0, 0];
              }

              // look for lowest delta to normalize the delta values
              absDelta = Math.abs(delta);
              if (!lowestDelta || absDelta < lowestDelta) {
                lowestDelta = absDelta;
              }
              absDeltaXY = Math.max(Math.abs(deltaY), Math.abs(deltaX));
              if (!lowestDeltaXY || absDeltaXY < lowestDeltaXY) {
                lowestDeltaXY = absDeltaXY;
              }

              // convert deltas to whole numbers
              fn = delta > 0 ? 'floor' : 'ceil';
              delta = Math[fn](delta / lowestDelta);
              deltaX = Math[fn](deltaX / lowestDeltaXY);
              deltaY = Math[fn](deltaY / lowestDeltaXY);

              return [delta, deltaX, deltaY];
            }
          };

          if (typeof window.define === 'function' && window.define.amd) {
            // AMD
            window.define('hamster', [], function () {
              return Hamster;
            });
          } else if (true) {
            // CommonJS
            module.exports = Hamster;
          } else {
            // Browser global
            window.Hamster = Hamster;
          }

        })(window, window.document);


        /***/
      }),
/* 15 */
/***/ (function (module, exports, __webpack_require__) {

        var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*!
 * mustache.js - Logic-less {{mustache}} templates with JavaScript
 * http://github.com/janl/mustache.js
 */

        /*global define: false Mustache: true*/

        (function defineMustache(global, factory) {
          if (typeof exports === 'object' && exports && typeof exports.nodeName !== 'string') {
            factory(exports); // CommonJS
          } else if (true) {
            !(__WEBPACK_AMD_DEFINE_ARRAY__ = [exports], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory),
              __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?
                (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__),
              __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__)); // AMD
          } else {
            global.Mustache = {};
            factory(global.Mustache); // script, wsh, asp
          }
        }(this, function mustacheFactory(mustache) {

          var objectToString = Object.prototype.toString;
          var isArray = Array.isArray || function isArrayPolyfill(object) {
            return objectToString.call(object) === '[object Array]';
          };

          function isFunction(object) {
            return typeof object === 'function';
          }

          /**
           * More correct typeof string handling array
           * which normally returns typeof 'object'
           */
          function typeStr(obj) {
            return isArray(obj) ? 'array' : typeof obj;
          }

          function escapeRegExp(string) {
            return string.replace(/[\-\[\]{}()*+?.,\\\^$|#\s]/g, '\\$&');
          }

          /**
           * Null safe way of checking whether or not an object,
           * including its prototype, has a given property
           */
          function hasProperty(obj, propName) {
            return obj != null && typeof obj === 'object' && (propName in obj);
          }

          // Workaround for https://issues.apache.org/jira/browse/COUCHDB-577
          // See https://github.com/janl/mustache.js/issues/189
          var regExpTest = RegExp.prototype.test;
          function testRegExp(re, string) {
            return regExpTest.call(re, string);
          }

          var nonSpaceRe = /\S/;
          function isWhitespace(string) {
            return !testRegExp(nonSpaceRe, string);
          }

          var entityMap = {
            '&': '&amp;',
            '<': '&lt;',
            '>': '&gt;',
            '"': '&quot;',
            "'": '&#39;',
            '/': '&#x2F;',
            '`': '&#x60;',
            '=': '&#x3D;'
          };

          function escapeHtml(string) {
            return String(string).replace(/[&<>"'`=\/]/g, function fromEntityMap(s) {
              return entityMap[s];
            });
          }

          var whiteRe = /\s*/;
          var spaceRe = /\s+/;
          var equalsRe = /\s*=/;
          var curlyRe = /\s*\}/;
          var tagRe = /#|\^|\/|>|\{|&|=|!/;

          /**
           * Breaks up the given `template` string into a tree of tokens. If the `tags`
           * argument is given here it must be an array with two string values: the
           * opening and closing tags used in the template (e.g. [ "<%", "%>" ]). Of
           * course, the default is to use mustaches (i.e. mustache.tags).
           *
           * A token is an array with at least 4 elements. The first element is the
           * mustache symbol that was used inside the tag, e.g. "#" or "&". If the tag
           * did not contain a symbol (i.e. {{myValue}}) this element is "name". For
           * all text that appears outside a symbol this element is "text".
           *
           * The second element of a token is its "value". For mustache tags this is
           * whatever else was inside the tag besides the opening symbol. For text tokens
           * this is the text itself.
           *
           * The third and fourth elements of the token are the start and end indices,
           * respectively, of the token in the original template.
           *
           * Tokens that are the root node of a subtree contain two more elements: 1) an
           * array of tokens in the subtree and 2) the index in the original template at
           * which the closing tag for that section begins.
           */
          function parseTemplate(template, tags) {
            if (!template)
              return [];

            var sections = [];     // Stack to hold section tokens
            var tokens = [];       // Buffer to hold the tokens
            var spaces = [];       // Indices of whitespace tokens on the current line
            var hasTag = false;    // Is there a {{tag}} on the current line?
            var nonSpace = false;  // Is there a non-space char on the current line?

            // Strips all whitespace tokens array for the current line
            // if there was a {{#tag}} on it and otherwise only space.
            function stripSpace() {
              if (hasTag && !nonSpace) {
                while (spaces.length)
                  delete tokens[spaces.pop()];
              } else {
                spaces = [];
              }

              hasTag = false;
              nonSpace = false;
            }

            var openingTagRe, closingTagRe, closingCurlyRe;
            function compileTags(tagsToCompile) {
              if (typeof tagsToCompile === 'string')
                tagsToCompile = tagsToCompile.split(spaceRe, 2);

              if (!isArray(tagsToCompile) || tagsToCompile.length !== 2)
                throw new Error('Invalid tags: ' + tagsToCompile);

              openingTagRe = new RegExp(escapeRegExp(tagsToCompile[0]) + '\\s*');
              closingTagRe = new RegExp('\\s*' + escapeRegExp(tagsToCompile[1]));
              closingCurlyRe = new RegExp('\\s*' + escapeRegExp('}' + tagsToCompile[1]));
            }

            compileTags(tags || mustache.tags);

            var scanner = new Scanner(template);

            var start, type, value, chr, token, openSection;
            while (!scanner.eos()) {
              start = scanner.pos;

              // Match any text between tags.
              value = scanner.scanUntil(openingTagRe);

              if (value) {
                for (var i = 0, valueLength = value.length; i < valueLength; ++i) {
                  chr = value.charAt(i);

                  if (isWhitespace(chr)) {
                    spaces.push(tokens.length);
                  } else {
                    nonSpace = true;
                  }

                  tokens.push(['text', chr, start, start + 1]);
                  start += 1;

                  // Check for whitespace on the current line.
                  if (chr === '\n')
                    stripSpace();
                }
              }

              // Match the opening tag.
              if (!scanner.scan(openingTagRe))
                break;

              hasTag = true;

              // Get the tag type.
              type = scanner.scan(tagRe) || 'name';
              scanner.scan(whiteRe);

              // Get the tag value.
              if (type === '=') {
                value = scanner.scanUntil(equalsRe);
                scanner.scan(equalsRe);
                scanner.scanUntil(closingTagRe);
              } else if (type === '{') {
                value = scanner.scanUntil(closingCurlyRe);
                scanner.scan(curlyRe);
                scanner.scanUntil(closingTagRe);
                type = '&';
              } else {
                value = scanner.scanUntil(closingTagRe);
              }

              // Match the closing tag.
              if (!scanner.scan(closingTagRe))
                throw new Error('Unclosed tag at ' + scanner.pos);

              token = [type, value, start, scanner.pos];
              tokens.push(token);

              if (type === '#' || type === '^') {
                sections.push(token);
              } else if (type === '/') {
                // Check section nesting.
                openSection = sections.pop();

                if (!openSection)
                  throw new Error('Unopened section "' + value + '" at ' + start);

                if (openSection[1] !== value)
                  throw new Error('Unclosed section "' + openSection[1] + '" at ' + start);
              } else if (type === 'name' || type === '{' || type === '&') {
                nonSpace = true;
              } else if (type === '=') {
                // Set the tags for the next time around.
                compileTags(value);
              }
            }

            // Make sure there are no open sections when we're done.
            openSection = sections.pop();

            if (openSection)
              throw new Error('Unclosed section "' + openSection[1] + '" at ' + scanner.pos);

            return nestTokens(squashTokens(tokens));
          }

          /**
           * Combines the values of consecutive text tokens in the given `tokens` array
           * to a single token.
           */
          function squashTokens(tokens) {
            var squashedTokens = [];

            var token, lastToken;
            for (var i = 0, numTokens = tokens.length; i < numTokens; ++i) {
              token = tokens[i];

              if (token) {
                if (token[0] === 'text' && lastToken && lastToken[0] === 'text') {
                  lastToken[1] += token[1];
                  lastToken[3] = token[3];
                } else {
                  squashedTokens.push(token);
                  lastToken = token;
                }
              }
            }

            return squashedTokens;
          }

          /**
           * Forms the given array of `tokens` into a nested tree structure where
           * tokens that represent a section have two additional items: 1) an array of
           * all tokens that appear in that section and 2) the index in the original
           * template that represents the end of that section.
           */
          function nestTokens(tokens) {
            var nestedTokens = [];
            var collector = nestedTokens;
            var sections = [];

            var token, section;
            for (var i = 0, numTokens = tokens.length; i < numTokens; ++i) {
              token = tokens[i];

              switch (token[0]) {
                case '#':
                case '^':
                  collector.push(token);
                  sections.push(token);
                  collector = token[4] = [];
                  break;
                case '/':
                  section = sections.pop();
                  section[5] = token[2];
                  collector = sections.length > 0 ? sections[sections.length - 1][4] : nestedTokens;
                  break;
                default:
                  collector.push(token);
              }
            }

            return nestedTokens;
          }

          /**
           * A simple string scanner that is used by the template parser to find
           * tokens in template strings.
           */
          function Scanner(string) {
            this.string = string;
            this.tail = string;
            this.pos = 0;
          }

          /**
           * Returns `true` if the tail is empty (end of string).
           */
          Scanner.prototype.eos = function eos() {
            return this.tail === '';
          };

          /**
           * Tries to match the given regular expression at the current position.
           * Returns the matched text if it can match, the empty string otherwise.
           */
          Scanner.prototype.scan = function scan(re) {
            var match = this.tail.match(re);

            if (!match || match.index !== 0)
              return '';

            var string = match[0];

            this.tail = this.tail.substring(string.length);
            this.pos += string.length;

            return string;
          };

          /**
           * Skips all text until the given regular expression can be matched. Returns
           * the skipped string, which is the entire tail if no match can be made.
           */
          Scanner.prototype.scanUntil = function scanUntil(re) {
            var index = this.tail.search(re), match;

            switch (index) {
              case -1:
                match = this.tail;
                this.tail = '';
                break;
              case 0:
                match = '';
                break;
              default:
                match = this.tail.substring(0, index);
                this.tail = this.tail.substring(index);
            }

            this.pos += match.length;

            return match;
          };

          /**
           * Represents a rendering context by wrapping a view object and
           * maintaining a reference to the parent context.
           */
          function Context(view, parentContext) {
            this.view = view;
            this.cache = { '.': this.view };
            this.parent = parentContext;
          }

          /**
           * Creates a new context using the given view with this context
           * as the parent.
           */
          Context.prototype.push = function push(view) {
            return new Context(view, this);
          };

          /**
           * Returns the value of the given name in this context, traversing
           * up the context hierarchy if the value is absent in this context's view.
           */
          Context.prototype.lookup = function lookup(name) {
            var cache = this.cache;

            var value;
            if (cache.hasOwnProperty(name)) {
              value = cache[name];
            } else {
              var context = this, names, index, lookupHit = false;

              while (context) {
                if (name.indexOf('.') > 0) {
                  value = context.view;
                  names = name.split('.');
                  index = 0;

                  /**
                   * Using the dot notion path in `name`, we descend through the
                   * nested objects.
                   *
                   * To be certain that the lookup has been successful, we have to
                   * check if the last object in the path actually has the property
                   * we are looking for. We store the result in `lookupHit`.
                   *
                   * This is specially necessary for when the value has been set to
                   * `undefined` and we want to avoid looking up parent contexts.
                   **/
                  while (value != null && index < names.length) {
                    if (index === names.length - 1)
                      lookupHit = hasProperty(value, names[index]);

                    value = value[names[index++]];
                  }
                } else {
                  value = context.view[name];
                  lookupHit = hasProperty(context.view, name);
                }

                if (lookupHit)
                  break;

                context = context.parent;
              }

              cache[name] = value;
            }

            if (isFunction(value))
              value = value.call(this.view);

            return value;
          };

          /**
           * A Writer knows how to take a stream of tokens and render them to a
           * string, given a context. It also maintains a cache of templates to
           * avoid the need to parse the same template twice.
           */
          function Writer() {
            this.cache = {};
          }

          /**
           * Clears all cached templates in this writer.
           */
          Writer.prototype.clearCache = function clearCache() {
            this.cache = {};
          };

          /**
           * Parses and caches the given `template` and returns the array of tokens
           * that is generated from the parse.
           */
          Writer.prototype.parse = function parse(template, tags) {
            var cache = this.cache;
            var tokens = cache[template];

            if (tokens == null)
              tokens = cache[template] = parseTemplate(template, tags);

            return tokens;
          };

          /**
           * High-level method that is used to render the given `template` with
           * the given `view`.
           *
           * The optional `partials` argument may be an object that contains the
           * names and templates of partials that are used in the template. It may
           * also be a function that is used to load partial templates on the fly
           * that takes a single argument: the name of the partial.
           */
          Writer.prototype.render = function render(template, view, partials) {
            var tokens = this.parse(template);
            var context = (view instanceof Context) ? view : new Context(view);
            return this.renderTokens(tokens, context, partials, template);
          };

          /**
           * Low-level method that renders the given array of `tokens` using
           * the given `context` and `partials`.
           *
           * Note: The `originalTemplate` is only ever used to extract the portion
           * of the original template that was contained in a higher-order section.
           * If the template doesn't use higher-order sections, this argument may
           * be omitted.
           */
          Writer.prototype.renderTokens = function renderTokens(tokens, context, partials, originalTemplate) {
            var buffer = '';

            var token, symbol, value;
            for (var i = 0, numTokens = tokens.length; i < numTokens; ++i) {
              value = undefined;
              token = tokens[i];
              symbol = token[0];

              if (symbol === '#') value = this.renderSection(token, context, partials, originalTemplate);
              else if (symbol === '^') value = this.renderInverted(token, context, partials, originalTemplate);
              else if (symbol === '>') value = this.renderPartial(token, context, partials, originalTemplate);
              else if (symbol === '&') value = this.unescapedValue(token, context);
              else if (symbol === 'name') value = this.escapedValue(token, context);
              else if (symbol === 'text') value = this.rawValue(token);

              if (value !== undefined)
                buffer += value;
            }

            return buffer;
          };

          Writer.prototype.renderSection = function renderSection(token, context, partials, originalTemplate) {
            var self = this;
            var buffer = '';
            var value = context.lookup(token[1]);

            // This function is used to render an arbitrary template
            // in the current context by higher-order sections.
            function subRender(template) {
              return self.render(template, context, partials);
            }

            if (!value) return;

            if (isArray(value)) {
              for (var j = 0, valueLength = value.length; j < valueLength; ++j) {
                buffer += this.renderTokens(token[4], context.push(value[j]), partials, originalTemplate);
              }
            } else if (typeof value === 'object' || typeof value === 'string' || typeof value === 'number') {
              buffer += this.renderTokens(token[4], context.push(value), partials, originalTemplate);
            } else if (isFunction(value)) {
              if (typeof originalTemplate !== 'string')
                throw new Error('Cannot use higher-order sections without the original template');

              // Extract the portion of the original template that the section contains.
              value = value.call(context.view, originalTemplate.slice(token[3], token[5]), subRender);

              if (value != null)
                buffer += value;
            } else {
              buffer += this.renderTokens(token[4], context, partials, originalTemplate);
            }
            return buffer;
          };

          Writer.prototype.renderInverted = function renderInverted(token, context, partials, originalTemplate) {
            var value = context.lookup(token[1]);

            // Use JavaScript's definition of falsy. Include empty arrays.
            // See https://github.com/janl/mustache.js/issues/186
            if (!value || (isArray(value) && value.length === 0))
              return this.renderTokens(token[4], context, partials, originalTemplate);
          };

          Writer.prototype.renderPartial = function renderPartial(token, context, partials) {
            if (!partials) return;

            var value = isFunction(partials) ? partials(token[1]) : partials[token[1]];
            if (value != null)
              return this.renderTokens(this.parse(value), context, partials, value);
          };

          Writer.prototype.unescapedValue = function unescapedValue(token, context) {
            var value = context.lookup(token[1]);
            if (value != null)
              return value;
          };

          Writer.prototype.escapedValue = function escapedValue(token, context) {
            var value = context.lookup(token[1]);
            if (value != null)
              return mustache.escape(value);
          };

          Writer.prototype.rawValue = function rawValue(token) {
            return token[1];
          };

          mustache.name = 'mustache.js';
          mustache.version = '2.3.0';
          mustache.tags = ['{{', '}}'];

          // All high-level mustache.* functions use this writer.
          var defaultWriter = new Writer();

          /**
           * Clears all cached templates in the default writer.
           */
          mustache.clearCache = function clearCache() {
            return defaultWriter.clearCache();
          };

          /**
           * Parses and caches the given template in the default writer and returns the
           * array of tokens it contains. Doing this ahead of time avoids the need to
           * parse templates on the fly as they are rendered.
           */
          mustache.parse = function parse(template, tags) {
            return defaultWriter.parse(template, tags);
          };

          /**
           * Renders the `template` with the given `view` and `partials` using the
           * default writer.
           */
          mustache.render = function render(template, view, partials) {
            if (typeof template !== 'string') {
              throw new TypeError('Invalid template! Template should be a "string" ' +
                'but "' + typeStr(template) + '" was given as the first ' +
                'argument for mustache#render(template, view, partials)');
            }

            return defaultWriter.render(template, view, partials);
          };

          // This is here for backwards compatibility with 0.4.x.,
          /*eslint-disable */ // eslint wants camel cased function name
          mustache.to_html = function to_html(template, view, partials, send) {
            /*eslint-enable*/

            var result = mustache.render(template, view, partials);

            if (isFunction(send)) {
              send(result);
            } else {
              return result;
            }
          };

          // Export the escaping function so that the user may override it.
          // See https://github.com/janl/mustache.js/issues/244
          mustache.escape = escapeHtml;

          // Export these mainly for testing, but also for advanced usage.
          mustache.Scanner = Scanner;
          mustache.Context = Context;
          mustache.Writer = Writer;

          return mustache;
        }));


        /***/
      })
/******/]);
  });
})(jQuery)
  /*!
   *
   * persian-date -  1.0.4
   * Reza Babakhani <babakhani.reza@gmail.com>
   * http://babakhani.github.io/PersianWebToolkit/docs/persian-date/
   * Under WTFPL license
   *
   *
   */
  ; (function webpackUniversalModuleDefinition(root, factory) {
    if (typeof exports === 'object' && typeof module === 'object')
      module.exports = factory();
    else if (typeof define === 'function' && define.amd)
      define([], factory);
    else if (typeof exports === 'object')
      exports["persianDate"] = factory();
    else
      root["persianDate"] = factory();
  })(this, function () {
    return /******/ (function (modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if (installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;
/******/
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
          /******/
        };
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
        /******/
      }
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// identity function for calling harmony imports with the correct context
/******/ 	__webpack_require__.i = function (value) { return value; };
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function (exports, name, getter) {
/******/ 		if (!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, {
/******/ 				configurable: false,
/******/ 				enumerable: true,
/******/ 				get: getter
        /******/
      });
          /******/
        }
        /******/
      };
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function (module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
        /******/
      };
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function (object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 8);
      /******/
    })
/************************************************************************/
/******/([
/* 0 */
/***/ (function (module, exports, __webpack_require__) {

        "use strict";


        var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

        function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

        var durationUnit = __webpack_require__(4).durationUnit;

        var Helpers = function () {
          function Helpers() {
            _classCallCheck(this, Helpers);
          }

          _createClass(Helpers, [{
            key: 'toPersianDigit',


            /**
             * @description return converted string to persian digit
             * @param digit
             * @returns {string|*}
             */
            value: function toPersianDigit(digit) {
              var latinDigit = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;

              return digit.toString().replace(/\d+/g, function (digit) {
                var enDigitArr = [],
                  peDigitArr = [],
                  i = void 0,
                  j = void 0;
                for (i = 0; i < digit.length; i += 1) {
                  enDigitArr.push(digit.charCodeAt(i));
                }
                for (j = 0; j < enDigitArr.length; j += 1) {
                  peDigitArr.push(String.fromCharCode(enDigitArr[j] + (!!latinDigit && latinDigit === true ? 1584 : 1728)));
                }
                return peDigitArr.join('');
              });
            }

            /**
             * @param number
             * @param targetLength
             * @returns {string}
             */

          }, {
            key: 'leftZeroFill',
            value: function leftZeroFill(number, targetLength) {
              var output = number + '';
              while (output.length < targetLength) {
                output = '0' + output;
              }
              return output;
            }

            /**
             * @description normalize duration params and return valid param
             * @return {{unit: *, value: *}}
             */

          }, {
            key: 'normalizeDuration',
            value: function normalizeDuration() {
              var unit = void 0,
                value = void 0;
              if (typeof arguments[0] === 'string') {
                unit = arguments[0];
                value = arguments[1];
              } else {
                value = arguments[0];
                unit = arguments[1];
              }
              if (durationUnit.year.indexOf(unit) > -1) {
                unit = 'year';
              } else if (durationUnit.month.indexOf(unit) > -1) {
                unit = 'month';
              } else if (durationUnit.day.indexOf(unit) > -1) {
                unit = 'day';
              } else if (durationUnit.hour.indexOf(unit) > -1) {
                unit = 'hour';
              } else if (durationUnit.minute.indexOf(unit) > -1) {
                unit = 'minute';
              } else if (durationUnit.second.indexOf(unit) > -1) {
                unit = 'second';
              } else if (durationUnit.millisecond.indexOf(unit) > -1) {
                unit = 'millisecond';
              }
              return {
                unit: unit,
                value: value
              };
            }

            /**
             *
             * @param number
             * @returns {number}
             */

          }, {
            key: 'absRound',
            value: function absRound(number) {
              if (number < 0) {
                return Math.ceil(number);
              } else {
                return Math.floor(number);
              }
            }

            /**
             *
             * @param number
             * @return {number}
             */

          }, {
            key: 'absFloor',
            value: function absFloor(number) {
              if (number < 0) {
                // -0 -> 0
                return Math.ceil(number) || 0;
              } else {
                return Math.floor(number);
              }
            }
          }]);

          return Helpers;
        }();

        module.exports = Helpers;

        /***/
      }),
/* 1 */
/***/ (function (module, exports, __webpack_require__) {

        "use strict";


        var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

        function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

        var TypeChecking = __webpack_require__(10);
        var Algorithms = __webpack_require__(2);
        var Helpers = __webpack_require__(0);
        var Duration = __webpack_require__(5);
        var toPersianDigit = new Helpers().toPersianDigit;
        var leftZeroFill = new Helpers().leftZeroFill;
        var normalizeDuration = new Helpers().normalizeDuration;
        var fa = __webpack_require__(7);
        var en = __webpack_require__(6);

        /**
         * @description persian date class
         */

        var PersianDateClass = function () {

          /**
           * @param input
           * @return {PersianDateClass}
           */
          function PersianDateClass(input) {
            _classCallCheck(this, PersianDateClass);

            this.calendarType = PersianDateClass.calendarType;
            this.localType = PersianDateClass.localType;
            this.leapYearMode = PersianDateClass.leapYearMode;

            this.algorithms = new Algorithms(this);
            this.version = "1.0.4";
            this._utcMode = false;
            if (this.localType !== 'fa') {
              this.formatPersian = false;
            } else {
              this.formatPersian = '_default';
            }
            this.setup(input);
            this.ON = this.algorithms.ON;
            return this;
          }

          /**
           * @param input
           */


          _createClass(PersianDateClass, [{
            key: 'setup',
            value: function setup(input) {
              // Convert Any thing to Gregorian Date
              if (TypeChecking.isDate(input)) {
                this._gDateToCalculators(input);
              } else if (TypeChecking.isArray(input)) {
                this.algorithmsCalc([input[0], input[1] ? input[1] : 1, input[2] ? input[2] : 1, input[3], input[4], input[5], input[6] ? input[6] : 0]);
              } else if (TypeChecking.isNumber(input)) {
                var fromUnix = new Date(input);
                this._gDateToCalculators(fromUnix);
              }
              // instance of pDate
              else if (input instanceof PersianDateClass) {
                this.algorithmsCalc([input.year(), input.month(), input.date(), input.hour(), input.minute(), input.second(), input.millisecond()]);
              }
              // ASP.NET JSON Date
              else if (input && input.substring(0, 6) === '/Date(') {
                var fromDotNet = new Date(parseInt(input.substr(6)));
                this._gDateToCalculators(fromDotNet);
              } else {
                var now = new Date();
                this._gDateToCalculators(now);
              }
            }

            /**
             * @param input
             * @return {*}
             * @private
             */

          }, {
            key: '_getSyncedClass',
            value: function _getSyncedClass(input) {
              var syncedCelander = PersianDateClass.toCalendar(this.calendarType).toLocale(this.localType).toLeapYearMode(this.leapYearMode);
              return new syncedCelander(input);
            }

            /**
             * @param inputgDate
             * @private
             */

          }, {
            key: '_gDateToCalculators',
            value: function _gDateToCalculators(inputgDate) {
              this.algorithms.calcGregorian([inputgDate.getFullYear(), inputgDate.getMonth(), inputgDate.getDate(), inputgDate.getHours(), inputgDate.getMinutes(), inputgDate.getSeconds(), inputgDate.getMilliseconds()]);
            }

            /**
             * @since 1.0.0
             * @description Helper method that return date range name like week days name, month names, month days names (specially in persian calendar).
             * @static
             * @return {*}
             */

          }, {
            key: 'rangeName',


            /**
             * @since 1.0.0
             * @description Helper method that return date range name like week days name, month names, month days names (specially in persian calendar).
             * @return {*}
             */
            value: function rangeName() {
              var t = this.calendarType;
              if (this.localType === 'fa') {
                if (t === 'persian') {
                  return fa.persian;
                } else {
                  return fa.gregorian;
                }
              } else {
                if (t === 'persian') {
                  return en.persian;
                } else {
                  return en.gregorian;
                }
              }
            }

            /**
             * @since 1.0.0
             * @param input
             * @return {PersianDateClass}
             */

          }, {
            key: 'toLeapYearMode',
            value: function toLeapYearMode(input) {
              this.leapYearMode = input;
              if (input === 'astronomical' && this.calendarType == 'persian') {
                this.leapYearMode = 'astronomical';
              } else if (input === 'algorithmic' && this.calendarType == 'persian') {
                this.leapYearMode = 'algorithmic';
              }
              this.algorithms.updateFromGregorian();
              return this;
            }

            /**
             * @since 1.0.0
             * @static
             * @param input
             * @return {PersianDateClass}
             */

          }, {
            key: 'toCalendar',


            /**
             * @since 1.0.0
             * @param input
             * @return {PersianDateClass}
             */
            value: function toCalendar(input) {
              this.calendarType = input;
              this.algorithms.updateFromGregorian();
              return this;
            }

            /**
             * @since 1.0.0
             * @static
             * @param input
             * @return {PersianDateClass}
             */

          }, {
            key: 'toLocale',


            /**
             * @since 1.0.0
             * @param input
             * @return {PersianDateClass}
             */
            value: function toLocale(input) {
              this.localType = input;
              if (this.localType !== 'fa') {
                this.formatPersian = false;
              } else {
                this.formatPersian = '_default';
              }
              return this;
            }

            /**
             * @return {*}
             * @private
             */

          }, {
            key: '_locale',
            value: function _locale() {
              var t = this.calendarType;
              if (this.localType === 'fa') {
                if (t === 'persian') {
                  return fa.persian;
                } else {
                  return fa.gregorian;
                }
              } else {
                if (t === 'persian') {
                  return en.persian;
                } else {
                  return en.gregorian;
                }
              }
            }

            /**
             * @param input
             * @private
             */

          }, {
            key: '_weekName',
            value: function _weekName(input) {
              return this._locale().weekdays[input - 1];
            }

            /**
             * @param input
             * @private
             */

          }, {
            key: '_weekNameShort',
            value: function _weekNameShort(input) {
              return this._locale().weekdaysShort[input - 1];
            }

            /**
             * @param input
             * @private
             */

          }, {
            key: '_weekNameMin',
            value: function _weekNameMin(input) {
              return this._locale().weekdaysMin[input - 1];
            }

            /**
             * @param input
             * @return {*}
             * @private
             */

          }, {
            key: '_dayName',
            value: function _dayName(input) {
              return this._locale().persianDaysName[input - 1];
            }

            /**
             * @param input
             * @private
             */

          }, {
            key: '_monthName',
            value: function _monthName(input) {
              return this._locale().months[input - 1];
            }

            /**
             * @param input
             * @private
             */

          }, {
            key: '_monthNameShort',
            value: function _monthNameShort(input) {
              return this._locale().monthsShort[input - 1];
            }

            /**
             * @param obj
             * @returns {boolean}
             */

          }, {
            key: 'isPersianDate',


            /**
             * @param obj
             * @return {boolean}
             */
            value: function isPersianDate(obj) {
              return obj instanceof PersianDateClass;
            }

            /**
             * @returns {PersianDate}
             */

          }, {
            key: 'clone',
            value: function clone() {
              return this._getSyncedClass(this.ON.gDate);
            }

            /**
             * @since 1.0.0
             * @param dateArray
             * @return {*}
             */

          }, {
            key: 'algorithmsCalc',
            value: function algorithmsCalc(dateArray) {
              if (this.isPersianDate(dateArray)) {
                dateArray = [dateArray.year(), dateArray.month(), dateArray.date(), dateArray.hour(), dateArray.minute(), dateArray.second(), dateArray.millisecond()];
              }
              if (this.calendarType === 'persian' && this.leapYearMode == 'algorithmic') {
                return this.algorithms.calcPersian(dateArray);
              } else if (this.calendarType === 'persian' && this.leapYearMode == 'astronomical') {
                return this.algorithms.calcPersiana(dateArray);
              } else if (this.calendarType === 'gregorian') {
                dateArray[1] = dateArray[1] - 1;
                return this.algorithms.calcGregorian(dateArray);
              }
            }

            /**
             * @since 1.0.0
             * @return {*}
             */

          }, {
            key: 'calendar',
            value: function calendar() {
              var key = void 0;
              if (this.calendarType == 'persian') {
                if (this.leapYearMode == 'astronomical') {
                  key = 'persianAstro';
                } else if (this.leapYearMode == 'algorithmic') {
                  key = 'persianAlgo';
                }
              } else {
                key = 'gregorian';
              }
              return this.ON[key];
            }

            /**
             * @description return Duration object
             * @param input
             * @param key
             * @returns {Duration}
             */

          }, {
            key: 'duration',


            /**
             * @description return Duration object
             * @param input
             * @param key
             * @returns {Duration}
             */
            value: function duration(input, key) {
              return new Duration(input, key);
            }

            /**
             * @description check if passed object is duration
             * @param obj
             * @returns {boolean}
             */

          }, {
            key: 'isDuration',


            /**
             * @description check if passed object is duration
             * @param obj
             * @returns {boolean}
             */
            value: function isDuration(obj) {
              return obj instanceof Duration;
            }

            /**
             * @param input
             * @returns {*}
             */

          }, {
            key: 'years',
            value: function years(input) {
              return this.year(input);
            }

            /**
             * @param input
             * @returns {*}
             */

          }, {
            key: 'year',
            value: function year(input) {
              if (input || input === 0) {
                this.algorithmsCalc([input, this.month(), this.date(), this.hour(), this.minute(), this.second(), this.millisecond()]);
                return this;
              } else {
                return this.calendar().year;
              }
            }

            /**
             * @param input
             * @returns {*}
             */

          }, {
            key: 'month',
            value: function month(input) {
              if (input || input === 0) {
                this.algorithmsCalc([this.year(), input, this.date()]);
                return this;
              } else {
                return this.calendar().month + 1;
              }
            }

            /**
             * Day of week
             * @returns {Function|Date.toJSON.day|date_json.day|PersianDate.day|day|output.day|*}
             */

          }, {
            key: 'days',
            value: function days() {
              return this.day();
            }

            /**
             * @returns {Function|Date.toJSON.day|date_json.day|PersianDate.day|day|output.day|*}
             */

          }, {
            key: 'day',
            value: function day() {
              return this.calendar().weekday;
            }

            /**
             * Day of Months
             * @param input
             * @returns {*}
             */

          }, {
            key: 'dates',
            value: function dates(input) {
              return this.date(input);
            }

            /**
             * @param input
             * @returns {*}
             */

          }, {
            key: 'date',
            value: function date(input) {
              if (input || input === 0) {
                this.algorithmsCalc([this.year(), this.month(), input]);
                return this;
              } else {
                return this.calendar().day;
              }
            }

            /**
             * @param input
             * @returns {*}
             */

          }, {
            key: 'hour',
            value: function hour(input) {
              return this.hours(input);
            }

            /**
             * @param input
             * @returns {*}
             */

          }, {
            key: 'hours',
            value: function hours(input) {
              if (input || input === 0) {
                this.algorithmsCalc([this.year(), this.month(), this.date(), input]);
                return this;
              } else {
                return this.ON.gDate.getHours();
              }
            }

            /**
             * @param input
             * @returns {*}
             */

          }, {
            key: 'minute',
            value: function minute(input) {
              return this.minutes(input);
            }

            /**
             * @param input
             * @returns {*}
             */

          }, {
            key: 'minutes',
            value: function minutes(input) {
              if (input || input === 0) {
                this.algorithmsCalc([this.year(), this.month(), this.date(), this.hour(), input]);
                return this;
              } else {
                return this.ON.gDate.getMinutes();
              }
            }

            /**
             * @param input
             * @returns {*}
             */

          }, {
            key: 'second',
            value: function second(input) {
              return this.seconds(input);
            }

            /**
             * @param input
             * @returns {*}
             */

          }, {
            key: 'seconds',
            value: function seconds(input) {
              if (input || input === 0) {
                this.algorithmsCalc([this.year(), this.month(), this.date(), this.hour(), this.minute(), input]);
                return this;
              } else {
                return this.ON.gDate.getSeconds();
              }
            }

            /**
             * @param input
             * @returns {*}
             * Getter Setter
             */

          }, {
            key: 'millisecond',
            value: function millisecond(input) {
              return this.milliseconds(input);
            }

            /**
             * @param input
             * @returns {*}
             */

          }, {
            key: 'milliseconds',
            value: function milliseconds(input) {
              if (input || input === 0) {
                this.algorithmsCalc([this.year(), this.month(), this.date(), this.hour(), this.minute(), this.second(), input]);
                return this;
              } else {
                return this.ON.gregorian.millisecond;
              }
            }

            /**
             * Return Milliseconds since the Unix Epoch (1318874398806)
             * @returns {*}
             * @private
             */
            //    _valueOf () {
            //        return this.ON.gDate.valueOf();
            //    }


          }, {
            key: 'unix',


            /**
             * Return Unix Timestamp (1318874398)
             * @param timestamp
             * @returns {*}
             */
            value: function unix(timestamp) {
              var output = void 0;
              if (timestamp) {
                return this._getSyncedClass(timestamp * 1000);
              } else {
                var str = this.ON.gDate.valueOf().toString();
                output = str.substring(0, str.length - 3);
              }
              return parseInt(output);
            }

            /**
             * @returns {*}
             */

          }, {
            key: 'valueOf',
            value: function valueOf() {
              return this.ON.gDate.valueOf();
            }

            /**
             * @param year
             * @param month
             * @returns {*}
             * @since 1.0.0
             */

          }, {
            key: 'getFirstWeekDayOfMonth',


            /**
             * @param year
             * @param month
             * @returns {*}
             * @since 1.0.0
             */
            value: function getFirstWeekDayOfMonth(year, month) {
              return this._getSyncedClass([year, month, 1]).day();
            }

            /**
             * @param input
             * @param val
             * @param asFloat
             * @returns {*}
             */

          }, {
            key: 'diff',
            value: function diff(input, val, asFloat) {
              var self = this,
                inputMoment = input,
                zoneDiff = 0,
                diff = self.ON.gDate - inputMoment.toDate() - zoneDiff,
                year = self.year() - inputMoment.year(),
                month = self.month() - inputMoment.month(),
                date = (self.date() - inputMoment.date()) * -1,
                output = void 0;

              if (val === 'months' || val === 'month') {
                output = year * 12 + month + date / 30;
              } else if (val === 'years' || val === 'year') {
                output = year + (month + date / 30) / 12;
              } else {
                output = val === 'seconds' || val === 'second' ? diff / 1e3 : // 1000
                  val === 'minutes' || val === 'minute' ? diff / 6e4 : // 1000 * 60
                    val === 'hours' || val === 'hour' ? diff / 36e5 : // 1000 * 60 * 60
                      val === 'days' || val === 'day' ? diff / 864e5 : // 1000 * 60 * 60 * 24
                        val === 'weeks' || val === 'week' ? diff / 6048e5 : // 1000 * 60 * 60 * 24 * 7
                          diff;
              }
              if (output < 0) {
                output = output * -1;
              }
              return asFloat ? output : Math.round(output);
            }

            /**
             * @param key
             * @returns {*}
             */

          }, {
            key: 'startOf',
            value: function startOf(key) {
              var syncedCelander = PersianDateClass.toCalendar(this.calendarType).toLocale(this.localType);
              // Simplify this\
              /* jshint ignore:start */
              switch (key) {
                case 'years':
                case 'year':
                  return new syncedCelander([this.year(), 1, 1]);
                case 'months':
                case 'month':
                  return new syncedCelander([this.year(), this.month(), 1]);
                case 'days':
                case 'day':
                  return new syncedCelander([this.year(), this.month(), this.date(), 0, 0, 0]);
                case 'hours':
                case 'hour':
                  return new syncedCelander([this.year(), this.month(), this.date(), this.hours(), 0, 0]);
                case 'minutes':
                case 'minute':
                  return new syncedCelander([this.year(), this.month(), this.date(), this.hours(), this.minutes(), 0]);
                case 'seconds':
                case 'second':
                  return new syncedCelander([this.year(), this.month(), this.date(), this.hours(), this.minutes(), this.seconds()]);
                case 'weeks':
                case 'week':
                  return new syncedCelander([this.year(), this.month(), this.date() - (this.calendar().weekday - 1)]);
                default:
                  return this.clone();
              }
              /* jshint ignore:end */
            }

            /**
             * @param key
             * @returns {*}
             */
            /* eslint-disable no-case-declarations */

          }, {
            key: 'endOf',
            value: function endOf(key) {
              var syncedCelander = PersianDateClass.toCalendar(this.calendarType).toLocale(this.localType);
              // Simplify this
              switch (key) {
                case 'years':
                case 'year':
                  var days = this.isLeapYear() ? 30 : 29;
                  return new syncedCelander([this.year(), 12, days, 23, 59, 59]);
                case 'months':
                case 'month':
                  var monthDays = this.daysInMonth(this.year(), this.month());
                  return new syncedCelander([this.year(), this.month(), monthDays, 23, 59, 59]);
                case 'days':
                case 'day':
                  return new syncedCelander([this.year(), this.month(), this.date(), 23, 59, 59]);
                case 'hours':
                case 'hour':
                  return new syncedCelander([this.year(), this.month(), this.date(), this.hours(), 59, 59]);
                case 'minutes':
                case 'minute':
                  return new syncedCelander([this.year(), this.month(), this.date(), this.hours(), this.minutes(), 59]);
                case 'seconds':
                case 'second':
                  return new syncedCelander([this.year(), this.month(), this.date(), this.hours(), this.minutes(), this.seconds()]);
                case 'weeks':
                case 'week':
                  var weekDayNumber = this.calendar().weekday;
                  return new syncedCelander([this.year(), this.month(), this.date() + (7 - weekDayNumber)]);
                default:
                  return this.clone();
              }
              /* eslint-enable no-case-declarations */
            }

            /**
             * @returns {*}
             */

          }, {
            key: 'sod',
            value: function sod() {
              return this.startOf('day');
            }

            /**
             * @returns {*}
             */

          }, {
            key: 'eod',
            value: function eod() {
              return this.endOf('day');
            }

            /** Get the timezone offset in minutes.
             * @return {*}
             */

          }, {
            key: 'zone',
            value: function zone(input) {
              if (input || input === 0) {
                this.ON.zone = input;
                return this;
              } else {
                return this.ON.zone;
              }
            }

            /**
             * @returns {PersianDate}
             */

          }, {
            key: 'local',
            value: function local() {
              var utcStamp = void 0;
              if (this._utcMode) {
                var ThatDayOffset = new Date(this.toDate()).getTimezoneOffset();
                var offsetMils = ThatDayOffset * 60 * 1000;
                if (ThatDayOffset < 0) {
                  utcStamp = this.valueOf() - offsetMils;
                } else {
                  /* istanbul ignore next */
                  utcStamp = this.valueOf() + offsetMils;
                }
                this.toCalendar(PersianDateClass.calendarType);
                var utcDate = new Date(utcStamp);
                this._gDateToCalculators(utcDate);
                this._utcMode = false;
                this.zone(ThatDayOffset);
                return this;
              } else {
                return this;
              }
            }

            /**
             * @param input
             * @return {*}
             */

          }, {
            key: 'utc',


            /**
             * @description Current date/time in UTC mode
             * @param input
             * @returns {*}
             */
            value: function utc(input) {
              var utcStamp = void 0;
              if (input) {
                return this._getSyncedClass(input).utc();
              }
              if (this._utcMode) {
                return this;
              } else {
                var offsetMils = this.zone() * 60 * 1000;
                if (this.zone() < 0) {
                  utcStamp = this.valueOf() + offsetMils;
                } else {
                  /* istanbul ignore next */
                  utcStamp = this.valueOf() - offsetMils;
                }
                var utcDate = new Date(utcStamp),
                  d = this._getSyncedClass(utcDate);
                this.algorithmsCalc(d);
                this._utcMode = true;
                this.zone(0);
                return this;
              }
            }

            /**
             * @returns {boolean}
             */

          }, {
            key: 'isUtc',
            value: function isUtc() {
              return this._utcMode;
            }

            /**
             * @returns {boolean}
             * @link https://fa.wikipedia.org/wiki/%D8%B3%D8%A7%D8%B9%D8%AA_%D8%AA%D8%A7%D8%A8%D8%B3%D8%AA%D8%A7%D9%86%DB%8C
             */

          }, {
            key: 'isDST',
            value: function isDST() {
              var month = this.month(),
                day = this.date();
              if (month == 1 && day > 1 || month == 6 && day < 31 || month < 6 && month >= 2) {
                return true;
              } else {
                return false;
              }
            }

            /**
             * @returns {boolean}
             */

          }, {
            key: 'isLeapYear',
            value: function isLeapYear(year) {
              if (year === undefined) {
                year = this.year();
              }
              if (this.calendarType == 'persian' && this.leapYearMode === 'algorithmic') {
                return this.algorithms.leap_persian(year);
              }
              if (this.calendarType == 'persian' && this.leapYearMode === 'astronomical') {
                return this.algorithms.leap_persiana(year);
              } else if (this.calendarType == 'gregorian') {
                return this.algorithms.leap_gregorian(year);
              }
            }

            /**
             * @param yearInput
             * @param monthInput
             * @returns {number}
             */

          }, {
            key: 'daysInMonth',
            value: function daysInMonth(yearInput, monthInput) {
              var year = yearInput ? yearInput : this.year(),
                month = monthInput ? monthInput : this.month();
              if (this.calendarType === 'persian') {
                if (month < 1 || month > 12) return 0;
                if (month < 7) return 31;
                if (month < 12) return 30;
                if (this.isLeapYear(year)) {
                  return 30;
                }
                return 29;
              }
              if (this.calendarType === 'gregorian') {
                return new Date(year, month, 0).getDate();
              }
            }

            /**
             * @description Return Native Javascript Date
             * @returns {*|PersianDate.gDate}
             */

          }, {
            key: 'toDate',
            value: function toDate() {
              return this.ON.gDate;
            }

            /**
             * @description Returns Array Of Persian Date
             * @returns {array}
             */

          }, {
            key: 'toArray',
            value: function toArray() {
              return [this.year(), this.month(), this.date(), this.hour(), this.minute(), this.second(), this.millisecond()];
            }

            /**
             * @returns {*}
             */

          }, {
            key: 'formatNumber',
            value: function formatNumber() {
              var output = void 0,
                self = this;

              // if default conf dosent set follow golbal config
              if (this.formatPersian === '_default') {
                if (typeof module !== 'undefined' && typeof module.exports !== 'undefined') {
                  /* istanbul ignore next */
                  if (self.formatPersian === false) {
                    output = false;
                  } else {
                    // Default Conf
                    output = true;
                  }
                }
                /* istanbul ignore next */
                else {
                  if (window.formatPersian === false) {
                    output = false;
                  } else {
                    // Default Conf
                    output = true;
                  }
                }
              } else {
                if (this.formatPersian === true) {
                  output = true;
                } else if (this.formatPersian === false) {
                  output = false;
                } else {
                  Error('Invalid Config "formatPersian" !!');
                }
              }
              return output;
            }

            /**
             * @param inputString
             * @returns {*}
             */

          }, {
            key: 'format',
            value: function format(inputString) {
              var self = this,
                formattingTokens = /([[^[]*])|(\\)?(Mo|MM?M?M?|Do|DD?D?D?|dddddd?|ddddd?|dddd?|do?|w[o|w]?|YYYY|YY|a|A|hh?|HH?|mm?|ss?|SS?S?|zz?|ZZ?|X|LT|ll?l?l?|LL?L?L?)/g,
                info = {
                  year: self.year(),
                  month: self.month(),
                  hour: self.hours(),
                  minute: self.minutes(),
                  second: self.seconds(),
                  date: self.date(),
                  timezone: self.zone(),
                  unix: self.unix()
                },
                formatToPersian = self.formatNumber();

              var checkPersian = function checkPersian(i) {
                if (formatToPersian) {
                  return toPersianDigit(i);
                } else {
                  return i;
                }
              };

              /* jshint ignore:start */
              function replaceFunction(input) {
                switch (input) {
                  // AM/PM
                  case 'a':
                    {
                      if (formatToPersian) return info.hour >= 12 ? 'ب ظ' : 'ق ظ'; else return info.hour >= 12 ? 'PM' : 'AM';
                    }
                  // Hours (Int)
                  case 'H':
                    {
                      return checkPersian(info.hour);
                    }
                  case 'HH':
                    {
                      return checkPersian(leftZeroFill(info.hour, 2));
                    }
                  case 'h':
                    {
                      return checkPersian(info.hour % 12);
                    }
                  case 'hh':
                    {
                      return checkPersian(leftZeroFill(info.hour % 12, 2));
                    }
                  // Minutes
                  case 'm':
                    {
                      return checkPersian(leftZeroFill(info.minute, 2));
                    }
                  // Two Digit Minutes
                  case 'mm':
                    {
                      return checkPersian(leftZeroFill(info.minute, 2));
                    }
                  // Second
                  case 's':
                    {
                      return checkPersian(info.second);
                    }
                  case 'ss':
                    {
                      return checkPersian(leftZeroFill(info.second, 2));
                    }
                  // Day (Int)
                  case 'D':
                    {
                      return checkPersian(leftZeroFill(info.date));
                    }
                  // Return Two Digit
                  case 'DD':
                    {
                      return checkPersian(leftZeroFill(info.date, 2));
                    }
                  // Return day Of Month
                  case 'DDD':
                    {
                      var t = self.startOf('year');
                      return checkPersian(leftZeroFill(self.diff(t, 'days'), 3));
                    }
                  // Return Day of Year
                  case 'DDDD':
                    {
                      var _t = self.startOf('year');
                      return checkPersian(leftZeroFill(self.diff(_t, 'days'), 3));
                    }
                  // Return day Of week
                  case 'd':
                    {
                      return checkPersian(self.calendar().weekday);
                    }
                  // Return week day name abbr
                  case 'ddd':
                    {
                      return self._weekNameShort(self.calendar().weekday);
                    }
                  case 'dddd':
                    {
                      return self._weekName(self.calendar().weekday);
                    }
                  // Return Persian Day Name
                  case 'ddddd':
                    {
                      return self._dayName(self.calendar().day);
                    }
                  // Return Persian Day Name
                  case 'dddddd':
                    {
                      return self._weekNameMin(self.calendar().weekday);
                    }
                  // Return Persian Day Name
                  case 'w':
                    {
                      var _t2 = self.startOf('year'),
                        day = parseInt(self.diff(_t2, 'days') / 7) + 1;
                      return checkPersian(day);
                    }
                  // Return Persian Day Name
                  case 'ww':
                    {
                      var _t3 = self.startOf('year'),
                        _day = leftZeroFill(parseInt(self.diff(_t3, 'days') / 7) + 1, 2);
                      return checkPersian(_day);
                    }
                  // Month  (Int)
                  case 'M':
                    {
                      return checkPersian(info.month);
                    }
                  // Two Digit Month (Str)
                  case 'MM':
                    {
                      return checkPersian(leftZeroFill(info.month, 2));
                    }
                  // Abbr String of Month (Str)
                  case 'MMM':
                    {
                      return self._monthNameShort(info.month);
                    }
                  // Full String name of Month (Str)
                  case 'MMMM':
                    {
                      return self._monthName(info.month);
                    }
                  // Year
                  // Two Digit Year (Str)
                  case 'YY':
                    {
                      var yearDigitArray = info.year.toString().split('');
                      return checkPersian(yearDigitArray[2] + yearDigitArray[3]);
                    }
                  // Full Year (Int)
                  case 'YYYY':
                    {
                      return checkPersian(info.year);
                    }
                  /* istanbul ignore next */
                  case 'Z':
                    {
                      var flag = '+',
                        hours = Math.round(info.timezone / 60),
                        minutes = info.timezone % 60;

                      if (minutes < 0) {
                        minutes *= -1;
                      }
                      if (hours < 0) {
                        flag = '-';
                        hours *= -1;
                      }

                      var z = flag + leftZeroFill(hours, 2) + ':' + leftZeroFill(minutes, 2);
                      return checkPersian(z);
                    }
                  /* istanbul ignore next */
                  case 'ZZ':
                    {
                      var _flag = '+',
                        _hours = Math.round(info.timezone / 60),
                        _minutes = info.timezone % 60;

                      if (_minutes < 0) {
                        _minutes *= -1;
                      }
                      if (_hours < 0) {
                        _flag = '-';
                        _hours *= -1;
                      }
                      var _z = _flag + leftZeroFill(_hours, 2) + '' + leftZeroFill(_minutes, 2);
                      return checkPersian(_z);
                    }
                  /* istanbul ignore next */
                  case 'X':
                    {
                      return self.unix();
                    }
                  // 8:30 PM
                  case 'LT':
                    {
                      return self.format('H:m a');
                    }
                  // 09/04/1986
                  case 'L':
                    {
                      return self.format('YYYY/MM/DD');
                    }
                  // 9/4/1986
                  case 'l':
                    {
                      return self.format('YYYY/M/D');
                    }
                  // September 4th 1986
                  case 'LL':
                    {
                      return self.format('MMMM DD YYYY');
                    }
                  // Sep 4 1986
                  case 'll':
                    {
                      return self.format('MMM DD YYYY');
                    }
                  //September 4th 1986 8:30 PM
                  case 'LLL':
                    {
                      return self.format('MMMM YYYY DD   H:m  a');
                    }
                  // Sep 4 1986 8:30 PM
                  case 'lll':
                    {
                      return self.format('MMM YYYY DD   H:m  a');
                    }
                  //Thursday, September 4th 1986 8:30 PM
                  case 'LLLL':
                    {
                      return self.format('dddd D MMMM YYYY  H:m  a');
                    }
                  // Thu, Sep 4 1986 8:30 PM
                  case 'llll':
                    {
                      return self.format('ddd D MMM YYYY  H:m  a');
                    }
                }
              }

              /* jshint ignore:end */

              if (inputString) {
                return inputString.replace(formattingTokens, replaceFunction);
              } else {
                var _inputString = 'YYYY-MM-DD HH:mm:ss a';
                return _inputString.replace(formattingTokens, replaceFunction);
              }
            }

            /**
             * @param key
             * @param value
             * @returns {PersianDate}
             */

          }, {
            key: 'add',
            value: function add(key, value) {
              var duration = new Duration(key, value)._data,
                unit = normalizeDuration(key, value).unit;
              value = normalizeDuration(key, value).value;

              if (unit === 'year' || unit === 'month') {
                if (duration.years > 0) {
                  var newYear = this.year() + duration.years;
                  this.year(newYear);
                }
                if (duration.months > 0) {
                  var oldDate = this.date();
                  var newMonth = this.month() + duration.months;
                  var thisMonthDaysCount = this.daysInMonth(this.year(), newMonth);
                  if (oldDate >= thisMonthDaysCount) {
                    oldDate = thisMonthDaysCount;
                  }
                  this.date(oldDate);
                  this.month(newMonth);
                }
              }
              if (unit === 'day') {
                var oldHour = this.hour();
                var newDate = this.valueOf() + value * 24 * 60 * 60 * 1000;
                return this.unix(newDate / 1000).hour(oldHour);
              }
              if (unit === 'hour') {
                var _newDate = this.valueOf() + value * 60 * 60 * 1000;
                return this.unix(_newDate / 1000);
              }
              if (unit === 'minute') {
                var _newDate2 = this.valueOf() + value * 60 * 1000;
                return this.unix(_newDate2 / 1000);
              }
              if (unit === 'second') {
                var _newDate3 = this.valueOf() + value * 1000;
                return this.unix(_newDate3 / 1000);
              }
              if (unit === 'millisecond') {
                // log('add millisecond')
                var newMillisecond = this.valueOf() + value;
                return this.unix(newMillisecond / 1000);
              }
              return this._getSyncedClass(this.valueOf());
            }

            /**
             * @param key
             * @param value
             * @returns {PersianDate}
             */

          }, {
            key: 'subtract',
            value: function subtract(key, value) {
              var duration = new Duration(key, value)._data;
              var unit = normalizeDuration(key, value).unit;
              value = normalizeDuration(key, value).value;

              if (unit === 'year' || unit === 'month') {
                if (duration.years > 0) {
                  var newYear = this.year() - duration.years;
                  this.year(newYear);
                }
                if (duration.months > 0) {
                  var oldDate = this.date();
                  var newMonth = this.month() - duration.months;
                  this.month(newMonth);
                  var thisMonthDaysCount = this.daysInMonth(this.year(), this.month());
                  if (oldDate > thisMonthDaysCount) {
                    oldDate = thisMonthDaysCount;
                  }
                  this.date(oldDate);
                }
              }
              if (unit === 'day') {
                var oldHour = this.hour();
                var newDate = this.valueOf() - value * 24 * 60 * 60 * 1000;
                return this.unix(newDate / 1000).hour(oldHour);
              }
              if (unit === 'hour') {
                var _newDate4 = this.valueOf() - value * 60 * 60 * 1000;
                return this.unix(_newDate4 / 1000);
              }
              if (unit === 'minute') {
                var _newDate5 = this.valueOf() - value * 60 * 1000;
                return this.unix(_newDate5 / 1000);
              }
              if (unit === 'second') {
                var _newDate6 = this.valueOf() - value * 1000;
                return this.unix(_newDate6 / 1000);
              }
              if (unit === 'millisecond') {
                // log('add millisecond')
                var newMillisecond = this.valueOf() - value;
                return this.unix(newMillisecond / 1000);
              }
              return this._getSyncedClass(this.valueOf());
            }

            /**
             * check if a date is same as b
             * @param dateA
             * @param dateB
             * @since 1.0.0
             * @return {boolean}
             * @static
             */

          }, {
            key: 'isSameDay',


            /**
             * @param dateB
             * @since 1.0.0
             * @return {PersianDateClass|*|boolean}
             */
            value: function isSameDay(dateB) {
              return this && dateB && this.date() == dateB.date() && this.year() == dateB.year() && this.month() == dateB.month();
            }

            /**
             * @desc check if a month is same as b
             * @param {Date} dateA
             * @param {Date} dateB
             * @return {boolean}
             * @since 1.0.0
             * @static
             */

          }, {
            key: 'isSameMonth',


            /**
             * @desc check two for month similarity
             * @param dateA
             * @param dateB
             * @since 1.0.0
             * @return {*|boolean}
             */
            value: function isSameMonth(dateB) {
              return this && dateB && this.year() == this.year() && this.month() == dateB.month();
            }
          }], [{
            key: 'rangeName',
            value: function rangeName() {
              var p = PersianDateClass,
                t = p.calendarType;
              if (p.localType === 'fa') {
                if (t === 'persian') {
                  return fa.persian;
                } else {
                  return fa.gregorian;
                }
              } else {
                if (t === 'persian') {
                  return en.persian;
                } else {
                  return en.gregorian;
                }
              }
            }
          }, {
            key: 'toLeapYearMode',
            value: function toLeapYearMode(input) {
              var d = PersianDateClass;
              d.leapYearMode = input;
              return d;
            }
          }, {
            key: 'toCalendar',
            value: function toCalendar(input) {
              var d = PersianDateClass;
              d.calendarType = input;
              return d;
            }

            /**
             * @since 1.0.0
             * @static
             * @param input
             * @return {PersianDateClass}
             */

          }, {
            key: 'toLocale',
            value: function toLocale(input) {
              var d = PersianDateClass;
              d.localType = input;
              if (d.localType !== 'fa') {
                d.formatPersian = false;
              } else {
                d.formatPersian = '_default';
              }
              return d;
            }
          }, {
            key: 'isPersianDate',
            value: function isPersianDate(obj) {
              return obj instanceof PersianDateClass;
            }
          }, {
            key: 'duration',
            value: function duration(input, key) {
              return new Duration(input, key);
            }
          }, {
            key: 'isDuration',
            value: function isDuration(obj) {
              return obj instanceof Duration;
            }
          }, {
            key: 'unix',
            value: function unix(timestamp) {
              if (timestamp) {
                return new PersianDateClass(timestamp * 1000).unix();
              } else {
                return new PersianDateClass().unix();
              }
            }
          }, {
            key: 'getFirstWeekDayOfMonth',
            value: function getFirstWeekDayOfMonth(year, month) {
              return new PersianDateClass([year, month, 1]).day();
            }
          }, {
            key: 'utc',
            value: function utc(input) {
              if (input) {
                return new PersianDateClass(input).utc();
              } else {
                return new PersianDateClass().utc();
              }
            }
          }, {
            key: 'isSameDay',
            value: function isSameDay(dateA, dateB) {
              return dateA && dateB && dateA.date() == dateB.date() && dateA.year() == dateB.year() && dateA.month() == dateB.month();
            }
          }, {
            key: 'isSameMonth',
            value: function isSameMonth(dateA, dateB) {
              return dateA && dateB && dateA.year() == dateB.year() && dateA.month() == dateB.month();
            }
          }]);

          return PersianDateClass;
        }();

        /**
         * @type {PersianDateClass}
         */


        module.exports = PersianDateClass;

        /***/
      }),
/* 2 */
/***/ (function (module, exports, __webpack_require__) {

        "use strict";


        var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

        function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

        // Start algorithm class
        var ASTRO = __webpack_require__(3);
        var ON = __webpack_require__(9);

        var Algorithms = function () {
          function Algorithms(parent) {
            _classCallCheck(this, Algorithms);

            this.parent = parent;
            this.ASTRO = new ASTRO();
            this.ON = new ON();
            /*  You may notice that a variety of array variables logically local
             to functions are declared globally here.  In JavaScript, construction
             of an array variable from source code occurs as the code is
             interpreted.  Making these variables pseudo-globals permits us
             to avoid overhead constructing and disposing of them in each
             call on the function in which whey are used.  */
            // TODO this block didnt used in main agorithm
            this.J0000 = 1721424.5; // Julian date of Gregorian epoch: 0000-01-01
            this.J1970 = 2440587.5; // Julian date at Unix epoch: 1970-01-01
            this.JMJD = 2400000.5; // Epoch of Modified Julian Date system
            this.NormLeap = [false /*"Normal year"*/, true /*"Leap year"*/];
            // TODO END
            this.GREGORIAN_EPOCH = 1721425.5;
            this.PERSIAN_EPOCH = 1948320.5;
          }

          /**
           * @desc LEAP_GREGORIAN  --  Is a given year in the Gregorian calendar a leap year ?
           * @param year
           * @return {boolean}
           */


          _createClass(Algorithms, [{
            key: 'leap_gregorian',
            value: function leap_gregorian(year) {
              return year % 4 === 0 && !(year % 100 === 0 && year % 400 !== 0);
            }

            /**
             * @desc Determine Julian day number from Gregorian calendar date
             * @param {*} year
             * @param {*} month
             * @param {*} day
             */

          }, {
            key: 'gregorian_to_jd',
            value: function gregorian_to_jd(year, month, day) {
              return this.GREGORIAN_EPOCH - 1 + 365 * (year - 1) + Math.floor((year - 1) / 4) + -Math.floor((year - 1) / 100) + Math.floor((year - 1) / 400) + Math.floor((367 * month - 362) / 12 + (month <= 2 ? 0 : this.leap_gregorian(year) ? -1 : -2) + day);
            }

            /**
             * @desc Calculate Gregorian calendar date from Julian day
             * @param {*} jd
             */

          }, {
            key: 'jd_to_gregorian',
            value: function jd_to_gregorian(jd) {
              var wjd = void 0,
                depoch = void 0,
                quadricent = void 0,
                dqc = void 0,
                cent = void 0,
                dcent = void 0,
                quad = void 0,
                dquad = void 0,
                yindex = void 0,
                year = void 0,
                yearday = void 0,
                leapadj = void 0,
                month = void 0,
                day = void 0;

              wjd = Math.floor(jd - 0.5) + 0.5;
              depoch = wjd - this.GREGORIAN_EPOCH;
              quadricent = Math.floor(depoch / 146097);
              dqc = this.ASTRO.mod(depoch, 146097);
              cent = Math.floor(dqc / 36524);
              dcent = this.ASTRO.mod(dqc, 36524);
              quad = Math.floor(dcent / 1461);
              dquad = this.ASTRO.mod(dcent, 1461);
              yindex = Math.floor(dquad / 365);
              year = quadricent * 400 + cent * 100 + quad * 4 + yindex;
              if (!(cent === 4 || yindex === 4)) {
                year++;
              }
              yearday = wjd - this.gregorian_to_jd(year, 1, 1);
              leapadj = wjd < this.gregorian_to_jd(year, 3, 1) ? 0 : this.leap_gregorian(year) ? 1 : 2;
              month = Math.floor(((yearday + leapadj) * 12 + 373) / 367);
              day = wjd - this.gregorian_to_jd(year, month, 1) + 1;

              return [year, month, day];
            }

            /**
             * @param {*} year
             */
            //    leap_julian (year) {
            //        return this.ASTRO.mod(year, 4) === ((year > 0) ? 0 : 3);
            //    }


            /**
             * @desc Calculate Julian calendar date from Julian day
             * @param {*} td
             */
            //    jd_to_julian (td) {
            //        let z, a, b, c, d, e, year, month, day;
            //
            //        td += 0.5;
            //        z = Math.floor(td);
            //
            //        a = z;
            //        b = a + 1524;
            //        c = Math.floor((b - 122.1) / 365.25);
            //        d = Math.floor(365.25 * c);
            //        e = Math.floor((b - d) / 30.6001);
            //
            //        month = Math.floor((e < 14) ? (e - 1) : (e - 13));
            //        year = Math.floor((month > 2) ? (c - 4716) : (c - 4715));
            //        day = b - d - Math.floor(30.6001 * e);
            //
            //        /*  If year is less than 1, subtract one to convert from
            //         a zero based date system to the common era system in
            //         which the year -1 (1 B.C.E) is followed by year 1 (1 C.E.).  */
            //
            //        if (year < 1) {
            //            year--;
            //        }
            //
            //        return [year, month, day];
            //    }


            /**
             * @desc TEHRAN_EQUINOX  --  Determine Julian day and fraction of the
             March equinox at the Tehran meridian in
             a given Gregorian year.
             * @param {*} year
             */

          }, {
            key: 'tehran_equinox',
            value: function tehran_equinox(year) {
              var equJED = void 0,
                equJD = void 0,
                equAPP = void 0,
                equTehran = void 0,
                dtTehran = void 0;

              //  March equinox in dynamical time
              equJED = this.ASTRO.equinox(year, 0);

              //  Correct for delta T to obtain Universal time
              equJD = equJED - this.ASTRO.deltat(year) / (24 * 60 * 60);

              //  Apply the equation of time to yield the apparent time at Greenwich
              equAPP = equJD + this.ASTRO.equationOfTime(equJED);

              /*  Finally, we must correct for the constant difference between
               the Greenwich meridian andthe time zone standard for
               Iran Standard time, 52°30' to the East.  */

              dtTehran = (52 + 30 / 60.0 + 0 / (60.0 * 60.0)) / 360;
              equTehran = equAPP + dtTehran;

              return equTehran;
            }

            /**
             * @desc TEHRAN_EQUINOX_JD  --  Calculate Julian day during which the
             March equinox, reckoned from the Tehran
             meridian, occurred for a given Gregorian
             year.
             * @param {*} year
             */

          }, {
            key: 'tehran_equinox_jd',
            value: function tehran_equinox_jd(year) {
              var ep = void 0,
                epg = void 0;

              ep = this.tehran_equinox(year);
              epg = Math.floor(ep);

              return epg;
            }

            /**
             * @desc  PERSIANA_YEAR  --  Determine the year in the Persian
             astronomical calendar in which a
             given Julian day falls.  Returns an
             array of two elements:
              [0]  Persian year
             [1]  Julian day number containing
             equinox for this year.
             * @param {*} jd
             */

          }, {
            key: 'persiana_year',
            value: function persiana_year(jd) {
              var guess = this.jd_to_gregorian(jd)[0] - 2,
                lasteq = void 0,
                nexteq = void 0,
                adr = void 0;

              lasteq = this.tehran_equinox_jd(guess);
              while (lasteq > jd) {
                guess--;
                lasteq = this.tehran_equinox_jd(guess);
              }
              nexteq = lasteq - 1;
              while (!(lasteq <= jd && jd < nexteq)) {
                lasteq = nexteq;
                guess++;
                nexteq = this.tehran_equinox_jd(guess);
              }
              adr = Math.round((lasteq - this.PERSIAN_EPOCH) / this.ASTRO.TropicalYear) + 1;

              return [adr, lasteq];
            }

            /**
             * @desc Calculate date in the Persian astronomical
             calendar from Julian day.
             * @param {*} jd
             */

          }, {
            key: 'jd_to_persiana',
            value: function jd_to_persiana(jd) {
              var year = void 0,
                month = void 0,
                day = void 0,
                adr = void 0,
                equinox = void 0,
                yday = void 0;

              jd = Math.floor(jd) + 0.5;
              adr = this.persiana_year(jd);
              year = adr[0];
              equinox = adr[1];
              day = Math.floor((jd - equinox) / 30) + 1;

              yday = Math.floor(jd) - this.persiana_to_jd(year, 1, 1) + 1;
              month = yday <= 186 ? Math.ceil(yday / 31) : Math.ceil((yday - 6) / 30);
              day = Math.floor(jd) - this.persiana_to_jd(year, month, 1) + 1;

              return [year, month, day];
            }

            /**
             * @desc Obtain Julian day from a given Persian
             astronomical calendar date.
             * @param {*} year
             * @param {*} month
             * @param {*} day
             */

          }, {
            key: 'persiana_to_jd',
            value: function persiana_to_jd(year, month, day) {
              var adr = void 0,
                equinox = void 0,
                guess = void 0,
                jd = void 0;

              guess = this.PERSIAN_EPOCH - 1 + this.ASTRO.TropicalYear * (year - 1 - 1);
              adr = [year - 1, 0];

              while (adr[0] < year) {
                adr = this.persiana_year(guess);
                guess = adr[1] + (this.ASTRO.TropicalYear + 2);
              }
              equinox = adr[1];

              jd = equinox + (month <= 7 ? (month - 1) * 31 : (month - 1) * 30 + 6) + (day - 1);
              return jd;
            }

            /**
             * @desc Is a given year a leap year in the Persian astronomical calendar ?
             * @param {*} year
             */

          }, {
            key: 'leap_persiana',
            value: function leap_persiana(year) {
              return this.persiana_to_jd(year + 1, 1, 1) - this.persiana_to_jd(year, 1, 1) > 365;
            }

            /**
             * @desc Is a given year a leap year in the Persian calendar ?
             * also nasa use this algorithm https://eclipse.gsfc.nasa.gov/SKYCAL/algorithm.js search for 'getLastDayOfPersianMonth' and you can find it
             * @param {*} year
             *
             */

          }, {
            key: 'leap_persian',
            value: function leap_persian(year) {
              return ((year - (year > 0 ? 474 : 473)) % 2820 + 474 + 38) * 682 % 2816 < 682;
            }

            /**
             * @desc Determine Julian day from Persian date
             * @param {*} year
             * @param {*} month
             * @param {*} day
             */

          }, {
            key: 'persian_to_jd',
            value: function persian_to_jd(year, month, day) {
              var epbase = void 0,
                epyear = void 0;

              epbase = year - (year >= 0 ? 474 : 473);
              epyear = 474 + this.ASTRO.mod(epbase, 2820);

              return day + (month <= 7 ? (month - 1) * 31 : (month - 1) * 30 + 6) + Math.floor((epyear * 682 - 110) / 2816) + (epyear - 1) * 365 + Math.floor(epbase / 2820) * 1029983 + (this.PERSIAN_EPOCH - 1);
            }

            /**
             * @desc Calculate Persian date from Julian day
             * @param {*} jd
             */

          }, {
            key: 'jd_to_persian',
            value: function jd_to_persian(jd) {
              var year = void 0,
                month = void 0,
                day = void 0,
                depoch = void 0,
                cycle = void 0,
                cyear = void 0,
                ycycle = void 0,
                aux1 = void 0,
                aux2 = void 0,
                yday = void 0;

              jd = Math.floor(jd) + 0.5;

              depoch = jd - this.persian_to_jd(475, 1, 1);
              cycle = Math.floor(depoch / 1029983);
              cyear = this.ASTRO.mod(depoch, 1029983);
              if (cyear === 1029982) {
                ycycle = 2820;
              } else {
                aux1 = Math.floor(cyear / 366);
                aux2 = this.ASTRO.mod(cyear, 366);
                ycycle = Math.floor((2134 * aux1 + 2816 * aux2 + 2815) / 1028522) + aux1 + 1;
              }
              year = ycycle + 2820 * cycle + 474;
              if (year <= 0) {
                year--;
              }
              yday = jd - this.persian_to_jd(year, 1, 1) + 1;
              month = yday <= 186 ? Math.ceil(yday / 31) : Math.ceil((yday - 6) / 30);
              day = jd - this.persian_to_jd(year, month, 1) + 1;
              return [year, month, day];
            }

            /**
             *
             * @param {*} weekday
             */

          }, {
            key: 'gWeekDayToPersian',
            value: function gWeekDayToPersian(weekday) {
              if (weekday + 2 === 8) {
                return 1;
              } else if (weekday + 2 === 7) {
                return 7;
              } else {
                return weekday + 2;
              }
            }

            /**
             * @desc updateFromGregorian  --  Update all calendars from Gregorian.
             "Why not Julian date?" you ask.  Because
             starting from Gregorian guarantees we're
             already snapped to an integral second, so
             we don't get roundoff errors in other
             calendars.
             */

          }, {
            key: 'updateFromGregorian',
            value: function updateFromGregorian() {
              var j = void 0,
                year = void 0,
                mon = void 0,
                mday = void 0,
                hour = void 0,
                min = void 0,
                sec = void 0,
                weekday = void 0,
                utime = void 0,
                perscal = void 0;

              year = this.ON.gregorian.year;
              mon = this.ON.gregorian.month;
              mday = this.ON.gregorian.day;
              hour = 0; //this.ON.gregorian.hour;
              min = 0; //this.ON.gregorian.minute;
              sec = 0; //this.ON.gregorian.second;

              this.ON.gDate = new Date(year, mon, mday, this.ON.gregorian.hour, this.ON.gregorian.minute, this.ON.gregorian.second, this.ON.gregorian.millisecond);

              if (this.parent._utcMode === false) {
                this.ON.zone = this.ON.gDate.getTimezoneOffset();
              }

              // Added for this algorithms cant parse 2016,13,32 successfully
              this.ON.gregorian.year = this.ON.gDate.getFullYear();
              this.ON.gregorian.month = this.ON.gDate.getMonth();
              this.ON.gregorian.day = this.ON.gDate.getDate();

              //  Update Julian day
              // ---------------------------------------------------------------------------
              j = this.gregorian_to_jd(year, mon + 1, mday) + Math.floor(sec + 60 * (min + 60 * hour) + 0.5) / 86400.0;

              this.ON.julianday = j;
              this.ON.modifiedjulianday = j - this.JMJD;

              //  Update day of week in Gregorian box
              // ---------------------------------------------------------------------------
              weekday = this.ASTRO.jwday(j);
              // Move to 1 indexed number
              this.ON.gregorian.weekday = weekday + 1;

              //  Update leap year status in Gregorian box
              // ---------------------------------------------------------------------------
              this.ON.gregorian.leap = this.NormLeap[this.leap_gregorian(year) ? 1 : 0];

              //  Update Julian Calendar
              // ---------------------------------------------------------------------------
              //        julcal = this.jd_to_julian(j);
              //
              //        this.ON.juliancalendar.year = julcal[0];
              //        this.ON.juliancalendar.month = julcal[1] - 1;
              //        this.ON.juliancalendar.day = julcal[2];
              //        this.ON.juliancalendar.leap = this.NormLeap[this.leap_julian(julcal[0]) ? 1 : 0];
              weekday = this.ASTRO.jwday(j);
              //        this.ON.juliancalendar.weekday = weekday;

              //  Update Persian Calendar
              // ---------------------------------------------------------------------------
              if (this.parent.calendarType == 'persian' && this.parent.leapYearMode == 'algorithmic') {
                perscal = this.jd_to_persian(j);
                this.ON.persian.year = perscal[0];
                this.ON.persian.month = perscal[1] - 1;
                this.ON.persian.day = perscal[2];
                this.ON.persian.weekday = this.gWeekDayToPersian(weekday);
                this.ON.persian.leap = this.NormLeap[this.leap_persian(perscal[0]) ? 1 : 0];
              }

              //  Update Persian Astronomical Calendar
              // ---------------------------------------------------------------------------
              if (this.parent.calendarType == 'persian' && this.parent.leapYearMode == 'astronomical') {
                perscal = this.jd_to_persiana(j);
                this.ON.persianAstro.year = perscal[0];
                this.ON.persianAstro.month = perscal[1] - 1;
                this.ON.persianAstro.day = perscal[2];
                this.ON.persianAstro.weekday = this.gWeekDayToPersian(weekday);
                this.ON.persianAstro.leap = this.NormLeap[this.leap_persiana(perscal[0]) ? 1 : 0];
              }
              //  Update Gregorian serial number
              // ---------------------------------------------------------------------------
              if (this.ON.gregserial.day !== null) {
                this.ON.gregserial.day = j - this.J0000;
              }

              //  Update Unix time()
              // ---------------------------------------------------------------------------
              utime = (j - this.J1970) * (60 * 60 * 24 * 1000);

              this.ON.unixtime = Math.round(utime / 1000);
            }

            /**
             * @desc Perform calculation starting with a Gregorian date
             * @param {*} dateArray
             */

          }, {
            key: 'calcGregorian',
            value: function calcGregorian(dateArray) {
              if (dateArray[0] || dateArray[0] === 0) {
                this.ON.gregorian.year = dateArray[0];
              }
              if (dateArray[1] || dateArray[1] === 0) {
                this.ON.gregorian.month = dateArray[1];
              }
              if (dateArray[2] || dateArray[2] === 0) {
                this.ON.gregorian.day = dateArray[2];
              }
              if (dateArray[3] || dateArray[3] === 0) {
                this.ON.gregorian.hour = dateArray[3];
              }
              if (dateArray[4] || dateArray[4] === 0) {
                this.ON.gregorian.minute = dateArray[4];
              }
              if (dateArray[5] || dateArray[5] === 0) {
                this.ON.gregorian.second = dateArray[5];
              }
              if (dateArray[6] || dateArray[6] === 0) {
                this.ON.gregorian.millisecond = dateArray[6];
              }
              this.updateFromGregorian();
            }

            /**
             * @desc Perform calculation starting with a Julian date
             */

          }, {
            key: 'calcJulian',
            value: function calcJulian() {
              var j = void 0,
                date = void 0;
              j = this.ON.julianday;
              date = this.jd_to_gregorian(j);
              this.ON.gregorian.year = date[0];
              this.ON.gregorian.month = date[1] - 1;
              this.ON.gregorian.day = date[2];
              //        this.ON.gregorian.hour = this.pad(time[0], 2, " ");
              //        this.ON.gregorian.minute = this.pad(time[1], 2, "0");
              //        this.ON.gregorian.second = this.pad(time[2], 2, "0");
              this.updateFromGregorian();
            }

            /**
             * @desc Set Julian date and update all calendars
             * @param {*} j
             */

          }, {
            key: 'setJulian',
            value: function setJulian(j) {
              this.ON.julianday = j;
              this.calcJulian();
            }

            /**
             * @desc  Update from Persian calendar
             * @param {*} dateArray
             */

          }, {
            key: 'calcPersian',
            value: function calcPersian(dateArray) {
              if (dateArray[0]) {
                this.ON.persian.year = dateArray[0];
              }
              if (dateArray[1]) {
                this.ON.persian.month = dateArray[1];
              }
              if (dateArray[2]) {
                this.ON.persian.day = dateArray[2];
              }
              if (dateArray[3]) {
                this.ON.gregorian.hour = dateArray[3];
              }
              if (dateArray[4]) {
                this.ON.gregorian.minute = dateArray[4];
              }
              if (dateArray[5]) {
                this.ON.gregorian.second = dateArray[5];
              }
              if (dateArray[6]) {
                this.ON.gregorian.millisecond = dateArray[6];
              }

              this.setJulian(this.persian_to_jd(this.ON.persian.year, this.ON.persian.month, this.ON.persian.day));
            }

            /**
             * @desc Update from Persian astronomical calendar
             * @param {*} dateArray
             */

          }, {
            key: 'calcPersiana',
            value: function calcPersiana(dateArray) {
              if (dateArray[0]) {
                this.ON.persianAstro.year = dateArray[0];
              }
              if (dateArray[1]) {
                this.ON.persianAstro.month = dateArray[1];
              }
              if (dateArray[2]) {
                this.ON.persianAstro.day = dateArray[2];
              }

              if (dateArray[3]) {
                this.ON.gregorian.hour = dateArray[3];
              }
              if (dateArray[4]) {
                this.ON.gregorian.minute = dateArray[4];
              }
              if (dateArray[5]) {
                this.ON.gregorian.second = dateArray[5];
              }
              if (dateArray[6]) {
                this.ON.gregorian.millisecond = dateArray[6];
              }
              this.setJulian(this.persiana_to_jd(this.ON.persianAstro.year, this.ON.persianAstro.month, this.ON.persianAstro.day + 0.5));
            }
          }]);

          return Algorithms;
        }();

        module.exports = Algorithms;

        /***/
      }),
/* 3 */
/***/ (function (module, exports, __webpack_require__) {

        "use strict";


        var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

        function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

        /*
         JavaScript functions for positional astronomy
         by John Walker  --  September, MIM
         http://www.fourmilab.ch/
         This program is in the public domain.
         */

        var ASTRO = function () {
          function ASTRO() {
            _classCallCheck(this, ASTRO);

            //  Frequently-used constants
            this.J2000 = 2451545.0; // Julian day of J2000 epoch
            this.JulianCentury = 36525.0; // Days in Julian century
            this.JulianMillennium = this.JulianCentury * 10; // Days in Julian millennium
            //        this.AstronomicalUnit = 149597870.0;           // Astronomical unit in kilometres
            this.TropicalYear = 365.24219878; // Mean solar tropical year

            /*  OBLIQEQ  --  Calculate the obliquity of the ecliptic for a given
             Julian date.  This uses Laskar's tenth-degree
             polynomial fit (J. Laskar, Astronomy and
             Astrophysics, Vol. 157, page 68 [1986]) which is
             accurate to within 0.01 arc second between AD 1000
             and AD 3000, and within a few seconds of arc for
             +/-10000 years around AD 2000.  If we're outside the
             range in which this fit is valid (deep time) we
             simply return the J2000 value of the obliquity, which
             happens to be almost precisely the mean.  */
            this.oterms = [-4680.93, -1.55, 1999.25, -51.38, -249.67, -39.05, 7.12, 27.87, 5.79, 2.45];
            /* Periodic terms for nutation in longiude (delta \Psi) and
             obliquity (delta \Epsilon) as given in table 21.A of
             Meeus, "Astronomical Algorithms", first edition. */
            this.nutArgMult = [0, 0, 0, 0, 1, -2, 0, 0, 2, 2, 0, 0, 0, 2, 2, 0, 0, 0, 0, 2, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, -2, 1, 0, 2, 2, 0, 0, 0, 2, 1, 0, 0, 1, 2, 2, -2, -1, 0, 2, 2, -2, 0, 1, 0, 0, -2, 0, 0, 2, 1, 0, 0, -1, 2, 2, 2, 0, 0, 0, 0, 0, 0, 1, 0, 1, 2, 0, -1, 2, 2, 0, 0, -1, 0, 1, 0, 0, 1, 2, 1, -2, 0, 2, 0, 0, 0, 0, -2, 2, 1, 2, 0, 0, 2, 2, 0, 0, 2, 2, 2, 0, 0, 2, 0, 0, -2, 0, 1, 2, 2, 0, 0, 0, 2, 0, -2, 0, 0, 2, 0, 0, 0, -1, 2, 1, 0, 2, 0, 0, 0, 2, 0, -1, 0, 1, -2, 2, 0, 2, 2, 0, 1, 0, 0, 1, -2, 0, 1, 0, 1, 0, -1, 0, 0, 1, 0, 0, 2, -2, 0, 2, 0, -1, 2, 1, 2, 0, 1, 2, 2, 0, 1, 0, 2, 2, -2, 1, 1, 0, 0, 0, -1, 0, 2, 2, 2, 0, 0, 2, 1, 2, 0, 1, 0, 0, -2, 0, 2, 2, 2, -2, 0, 1, 2, 1, 2, 0, -2, 0, 1, 2, 0, 0, 0, 1, 0, -1, 1, 0, 0, -2, -1, 0, 2, 1, -2, 0, 0, 0, 1, 0, 0, 2, 2, 1, -2, 0, 2, 0, 1, -2, 1, 0, 2, 1, 0, 0, 1, -2, 0, -1, 0, 1, 0, 0, -2, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 2, 0, -1, -1, 1, 0, 0, 0, 1, 1, 0, 0, 0, -1, 1, 2, 2, 2, -1, -1, 2, 2, 0, 0, -2, 2, 2, 0, 0, 3, 2, 2, 2, -1, 0, 2, 2];

            this.nutArgCoeff = [-171996, -1742, 92095, 89, /*  0,  0,  0,  0,  1 */
            -13187, -16, 5736, -31, /* -2,  0,  0,  2,  2 */
            -2274, -2, 977, -5, /*  0,  0,  0,  2,  2 */
              2062, 2, -895, 5, /*  0,  0,  0,  0,  2 */
              1426, -34, 54, -1, /*  0,  1,  0,  0,  0 */
              712, 1, -7, 0, /*  0,  0,  1,  0,  0 */
            -517, 12, 224, -6, /* -2,  1,  0,  2,  2 */
            -386, -4, 200, 0, /*  0,  0,  0,  2,  1 */
            -301, 0, 129, -1, /*  0,  0,  1,  2,  2 */
              217, -5, -95, 3, /* -2, -1,  0,  2,  2 */
            -158, 0, 0, 0, /* -2,  0,  1,  0,  0 */
              129, 1, -70, 0, /* -2,  0,  0,  2,  1 */
              123, 0, -53, 0, /*  0,  0, -1,  2,  2 */
              63, 0, 0, 0, /*  2,  0,  0,  0,  0 */
              63, 1, -33, 0, /*  0,  0,  1,  0,  1 */
            -59, 0, 26, 0, /*  2,  0, -1,  2,  2 */
            -58, -1, 32, 0, /*  0,  0, -1,  0,  1 */
            -51, 0, 27, 0, /*  0,  0,  1,  2,  1 */
              48, 0, 0, 0, /* -2,  0,  2,  0,  0 */
              46, 0, -24, 0, /*  0,  0, -2,  2,  1 */
            -38, 0, 16, 0, /*  2,  0,  0,  2,  2 */
            -31, 0, 13, 0, /*  0,  0,  2,  2,  2 */
              29, 0, 0, 0, /*  0,  0,  2,  0,  0 */
              29, 0, -12, 0, /* -2,  0,  1,  2,  2 */
              26, 0, 0, 0, /*  0,  0,  0,  2,  0 */
            -22, 0, 0, 0, /* -2,  0,  0,  2,  0 */
              21, 0, -10, 0, /*  0,  0, -1,  2,  1 */
              17, -1, 0, 0, /*  0,  2,  0,  0,  0 */
              16, 0, -8, 0, /*  2,  0, -1,  0,  1 */
            -16, 1, 7, 0, /* -2,  2,  0,  2,  2 */
            -15, 0, 9, 0, /*  0,  1,  0,  0,  1 */
            -13, 0, 7, 0, /* -2,  0,  1,  0,  1 */
            -12, 0, 6, 0, /*  0, -1,  0,  0,  1 */
              11, 0, 0, 0, /*  0,  0,  2, -2,  0 */
            -10, 0, 5, 0, /*  2,  0, -1,  2,  1 */
            -8, 0, 3, 0, /*  2,  0,  1,  2,  2 */
              7, 0, -3, 0, /*  0,  1,  0,  2,  2 */
            -7, 0, 0, 0, /* -2,  1,  1,  0,  0 */
            -7, 0, 3, 0, /*  0, -1,  0,  2,  2 */
            -7, 0, 3, 0, /*  2,  0,  0,  2,  1 */
              6, 0, 0, 0, /*  2,  0,  1,  0,  0 */
              6, 0, -3, 0, /* -2,  0,  2,  2,  2 */
              6, 0, -3, 0, /* -2,  0,  1,  2,  1 */
            -6, 0, 3, 0, /*  2,  0, -2,  0,  1 */
            -6, 0, 3, 0, /*  2,  0,  0,  0,  1 */
              5, 0, 0, 0, /*  0, -1,  1,  0,  0 */
            -5, 0, 3, 0, /* -2, -1,  0,  2,  1 */
            -5, 0, 3, 0, /* -2,  0,  0,  0,  1 */
            -5, 0, 3, 0, /*  0,  0,  2,  2,  1 */
              4, 0, 0, 0, /* -2,  0,  2,  0,  1 */
              4, 0, 0, 0, /* -2,  1,  0,  2,  1 */
              4, 0, 0, 0, /*  0,  0,  1, -2,  0 */
            -4, 0, 0, 0, /* -1,  0,  1,  0,  0 */
            -4, 0, 0, 0, /* -2,  1,  0,  0,  0 */
            -4, 0, 0, 0, /*  1,  0,  0,  0,  0 */
              3, 0, 0, 0, /*  0,  0,  1,  2,  0 */
            -3, 0, 0, 0, /* -1, -1,  1,  0,  0 */
            -3, 0, 0, 0, /*  0,  1,  1,  0,  0 */
            -3, 0, 0, 0, /*  0, -1,  1,  2,  2 */
            -3, 0, 0, 0, /*  2, -1, -1,  2,  2 */
            -3, 0, 0, 0, /*  0,  0, -2,  2,  2 */
            -3, 0, 0, 0, /*  0,  0,  3,  2,  2 */
            -3, 0, 0, 0 /*  2, -1,  0,  2,  2 */
            ];

            /**
             * @desc Table of observed Delta T values at the beginning of even numbered years from 1620 through 2002.
             * @type Array
             */
            this.deltaTtab = [121, 112, 103, 95, 88, 82, 77, 72, 68, 63, 60, 56, 53, 51, 48, 46, 44, 42, 40, 38, 35, 33, 31, 29, 26, 24, 22, 20, 18, 16, 14, 12, 11, 10, 9, 8, 7, 7, 7, 7, 7, 7, 8, 8, 9, 9, 9, 9, 9, 10, 10, 10, 10, 10, 10, 10, 10, 11, 11, 11, 11, 11, 12, 12, 12, 12, 13, 13, 13, 14, 14, 14, 14, 15, 15, 15, 15, 15, 16, 16, 16, 16, 16, 16, 16, 16, 15, 15, 14, 13, 13.1, 12.5, 12.2, 12, 12, 12, 12, 12, 12, 11.9, 11.6, 11, 10.2, 9.2, 8.2, 7.1, 6.2, 5.6, 5.4, 5.3, 5.4, 5.6, 5.9, 6.2, 6.5, 6.8, 7.1, 7.3, 7.5, 7.6, 7.7, 7.3, 6.2, 5.2, 2.7, 1.4, -1.2, -2.8, -3.8, -4.8, -5.5, -5.3, -5.6, -5.7, -5.9, -6, -6.3, -6.5, -6.2, -4.7, -2.8, -0.1, 2.6, 5.3, 7.7, 10.4, 13.3, 16, 18.2, 20.2, 21.1, 22.4, 23.5, 23.8, 24.3, 24, 23.9, 23.9, 23.7, 24, 24.3, 25.3, 26.2, 27.3, 28.2, 29.1, 30, 30.7, 31.4, 32.2, 33.1, 34, 35, 36.5, 38.3, 40.2, 42.2, 44.5, 46.5, 48.5, 50.5, 52.2, 53.8, 54.9, 55.8, 56.9, 58.3, 60, 61.6, 63, 65, 66.6];

            /*  EQUINOX  --  Determine the Julian Ephemeris Day of an
             equinox or solstice.  The "which" argument
             selects the item to be computed:
              0   March equinox
             1   June solstice
             2   September equinox
             3   December solstice
              */
            /**
             * @desc Periodic terms to obtain true time
             * @type Array
             */
            this.EquinoxpTerms = [485, 324.96, 1934.136, 203, 337.23, 32964.467, 199, 342.08, 20.186, 182, 27.85, 445267.112, 156, 73.14, 45036.886, 136, 171.52, 22518.443, 77, 222.54, 65928.934, 74, 296.72, 3034.906, 70, 243.58, 9037.513, 58, 119.81, 33718.147, 52, 297.17, 150.678, 50, 21.02, 2281.226, 45, 247.54, 29929.562, 44, 325.15, 31555.956, 29, 60.93, 4443.417, 18, 155.12, 67555.328, 17, 288.79, 4562.452, 16, 198.04, 62894.029, 14, 199.76, 31436.921, 12, 95.39, 14577.848, 12, 287.11, 31931.756, 12, 320.81, 34777.259, 9, 227.73, 1222.114, 8, 15.45, 16859.074];

            this.JDE0tab1000 = [new Array(1721139.29189, 365242.13740, 0.06134, 0.00111, -0.00071), new Array(1721233.25401, 365241.72562, -0.05323, 0.00907, 0.00025), new Array(1721325.70455, 365242.49558, -0.11677, -0.00297, 0.00074), new Array(1721414.39987, 365242.88257, -0.00769, -0.00933, -0.00006)];

            this.JDE0tab2000 = [new Array(2451623.80984, 365242.37404, 0.05169, -0.00411, -0.00057), new Array(2451716.56767, 365241.62603, 0.00325, 0.00888, -0.00030), new Array(2451810.21715, 365242.01767, -0.11575, 0.00337, 0.00078), new Array(2451900.05952, 365242.74049, -0.06223, -0.00823, 0.00032)];
          }

          /**
           *
           * @param Degrees to radians.
           * @return {number}
           */


          _createClass(ASTRO, [{
            key: "dtr",
            value: function dtr(d) {
              return d * Math.PI / 180.0;
            }

            /**
             * @desc Radians to degrees.
             * @param r
             * @return {number}
             */

          }, {
            key: "rtd",
            value: function rtd(r) {
              return r * 180.0 / Math.PI;
            }

            /**
             * @desc Range reduce angle in degrees.
             * @param a
             * @return {number}
             */

          }, {
            key: "fixangle",
            value: function fixangle(a) {
              return a - 360.0 * Math.floor(a / 360.0);
            }

            /**
             * @desc Range reduce angle in radians.
             * @param a
             * @return {number}
             */

          }, {
            key: "fixangr",
            value: function fixangr(a) {
              return a - 2 * Math.PI * Math.floor(a / (2 * Math.PI));
            }

            /**
             * @desc  Sine of an angle in degrees
             * @param d
             * @return {number}
             */

          }, {
            key: "dsin",
            value: function dsin(d) {
              return Math.sin(this.dtr(d));
            }

            /**
             * @desc Cosine of an angle in degrees
             * @param d
             * @return {number}
             */

          }, {
            key: "dcos",
            value: function dcos(d) {
              return Math.cos(this.dtr(d));
            }

            /**
             * @desc Modulus function which works for non-integers.
             * @param a
             * @param b
             * @return {number}
             */

          }, {
            key: "mod",
            value: function mod(a, b) {
              return a - b * Math.floor(a / b);
            }

            /**
             *
             * @param j
             * @return {number}
             */

          }, {
            key: "jwday",
            value: function jwday(j) {
              return this.mod(Math.floor(j + 1.5), 7);
            }

            /**
             *
             * @param jd
             * @return {number|*}
             */

          }, {
            key: "obliqeq",
            value: function obliqeq(jd) {
              var eps, u, v, i;
              v = u = (jd - this.J2000) / (this.JulianCentury * 100);
              eps = 23 + 26 / 60.0 + 21.448 / 3600.0;

              if (Math.abs(u) < 1.0) {
                for (i = 0; i < 10; i++) {
                  eps += this.oterms[i] / 3600.0 * v;
                  v *= u;
                }
              }
              return eps;
            }

            /**
             * @desc  Calculate the nutation in longitude, deltaPsi, and
             obliquity, deltaEpsilon for a given Julian date
             jd.  Results are returned as a two element Array
             giving (deltaPsi, deltaEpsilon) in degrees.
             * @param jd
             * @return Object
             */

          }, {
            key: "nutation",
            value: function nutation(jd) {
              var deltaPsi,
                deltaEpsilon,
                i,
                j,
                t = (jd - 2451545.0) / 36525.0,
                t2,
                t3,
                to10,
                ta = [],
                dp = 0,
                de = 0,
                ang;

              t3 = t * (t2 = t * t);

              /* Calculate angles.  The correspondence between the elements
               of our array and the terms cited in Meeus are:
                ta[0] = D  ta[0] = M  ta[2] = M'  ta[3] = F  ta[4] = \Omega
                */

              ta[0] = this.dtr(297.850363 + 445267.11148 * t - 0.0019142 * t2 + t3 / 189474.0);
              ta[1] = this.dtr(357.52772 + 35999.05034 * t - 0.0001603 * t2 - t3 / 300000.0);
              ta[2] = this.dtr(134.96298 + 477198.867398 * t + 0.0086972 * t2 + t3 / 56250.0);
              ta[3] = this.dtr(93.27191 + 483202.017538 * t - 0.0036825 * t2 + t3 / 327270);
              ta[4] = this.dtr(125.04452 - 1934.136261 * t + 0.0020708 * t2 + t3 / 450000.0);

              /* Range reduce the angles in case the sine and cosine functions
               don't do it as accurately or quickly. */

              for (i = 0; i < 5; i++) {
                ta[i] = this.fixangr(ta[i]);
              }

              to10 = t / 10.0;
              for (i = 0; i < 63; i++) {
                ang = 0;
                for (j = 0; j < 5; j++) {
                  if (this.nutArgMult[i * 5 + j] !== 0) {
                    ang += this.nutArgMult[i * 5 + j] * ta[j];
                  }
                }
                dp += (this.nutArgCoeff[i * 4 + 0] + this.nutArgCoeff[i * 4 + 1] * to10) * Math.sin(ang);
                de += (this.nutArgCoeff[i * 4 + 2] + this.nutArgCoeff[i * 4 + 3] * to10) * Math.cos(ang);
              }

              /* Return the result, converting from ten thousandths of arc
               seconds to radians in the process. */

              deltaPsi = dp / (3600.0 * 10000.0);
              deltaEpsilon = de / (3600.0 * 10000.0);

              return [deltaPsi, deltaEpsilon];
            }

            /**
             * @desc  Determine the difference, in seconds, between
             Dynamical time and Universal time.
             * @param year
             * @return {*}
             */

          }, {
            key: "deltat",
            value: function deltat(year) {
              var dt, f, i, t;

              if (year >= 1620 && year <= 2000) {
                i = Math.floor((year - 1620) / 2);
                f = (year - 1620) / 2 - i;
                /* Fractional part of year */
                dt = this.deltaTtab[i] + (this.deltaTtab[i + 1] - this.deltaTtab[i]) * f;
              } else {
                t = (year - 2000) / 100;
                if (year < 948) {
                  dt = 2177 + 497 * t + 44.1 * t * t;
                } else {
                  dt = 102 + 102 * t + 25.3 * t * t;
                  if (year > 2000 && year < 2100) {
                    dt += 0.37 * (year - 2100);
                  }
                }
              }
              return dt;
            }

            /**
             *
             * @param year
             * @param which
             * @return {*}
             */

          }, {
            key: "equinox",
            value: function equinox(year, which) {
              var deltaL = void 0,
                i = void 0,
                j = void 0,
                JDE0 = void 0,
                JDE = void 0,
                JDE0tab = void 0,
                S = void 0,
                T = void 0,
                W = void 0,
                Y = void 0;
              /*  Initialise terms for mean equinox and solstices.  We
               have two sets: one for years prior to 1000 and a second
               for subsequent years.  */

              if (year < 1000) {
                JDE0tab = this.JDE0tab1000;
                Y = year / 1000;
              } else {
                JDE0tab = this.JDE0tab2000;
                Y = (year - 2000) / 1000;
              }

              JDE0 = JDE0tab[which][0] + JDE0tab[which][1] * Y + JDE0tab[which][2] * Y * Y + JDE0tab[which][3] * Y * Y * Y + JDE0tab[which][4] * Y * Y * Y * Y;
              T = (JDE0 - 2451545.0) / 36525;
              W = 35999.373 * T - 2.47;
              deltaL = 1 + 0.0334 * this.dcos(W) + 0.0007 * this.dcos(2 * W);
              S = 0;
              for (i = j = 0; i < 24; i++) {
                S += this.EquinoxpTerms[j] * this.dcos(this.EquinoxpTerms[j + 1] + this.EquinoxpTerms[j + 2] * T);
                j += 3;
              }
              JDE = JDE0 + S * 0.00001 / deltaL;
              return JDE;
            }

            /**
             * @desc  Position of the Sun.  Please see the comments
             on the return statement at the end of this function
             which describe the array it returns.  We return
             intermediate values because they are useful in a
             variety of other contexts.
             * @param jd
             * @return Object
             */

          }, {
            key: "sunpos",
            value: function sunpos(jd) {
              var T = void 0,
                T2 = void 0,
                L0 = void 0,
                M = void 0,
                e = void 0,
                C = void 0,
                sunLong = void 0,
                sunAnomaly = void 0,
                sunR = void 0,
                Omega = void 0,
                Lambda = void 0,
                epsilon = void 0,
                epsilon0 = void 0,
                Alpha = void 0,
                Delta = void 0,
                AlphaApp = void 0,
                DeltaApp = void 0;

              T = (jd - this.J2000) / this.JulianCentury;
              T2 = T * T;
              L0 = 280.46646 + 36000.76983 * T + 0.0003032 * T2;
              L0 = this.fixangle(L0);
              M = 357.52911 + 35999.05029 * T + -0.0001537 * T2;
              M = this.fixangle(M);
              e = 0.016708634 + -0.000042037 * T + -0.0000001267 * T2;
              C = (1.914602 + -0.004817 * T + -0.000014 * T2) * this.dsin(M) + (0.019993 - 0.000101 * T) * this.dsin(2 * M) + 0.000289 * this.dsin(3 * M);
              sunLong = L0 + C;
              sunAnomaly = M + C;
              sunR = 1.000001018 * (1 - e * e) / (1 + e * this.dcos(sunAnomaly));
              Omega = 125.04 - 1934.136 * T;
              Lambda = sunLong + -0.00569 + -0.00478 * this.dsin(Omega);
              epsilon0 = this.obliqeq(jd);
              epsilon = epsilon0 + 0.00256 * this.dcos(Omega);
              Alpha = this.rtd(Math.atan2(this.dcos(epsilon0) * this.dsin(sunLong), this.dcos(sunLong)));
              Alpha = this.fixangle(Alpha);
              Delta = this.rtd(Math.asin(this.dsin(epsilon0) * this.dsin(sunLong)));
              AlphaApp = this.rtd(Math.atan2(this.dcos(epsilon) * this.dsin(Lambda), this.dcos(Lambda)));
              AlphaApp = this.fixangle(AlphaApp);
              DeltaApp = this.rtd(Math.asin(this.dsin(epsilon) * this.dsin(Lambda)));

              return [//  Angular quantities are expressed in decimal degrees
                L0, //  [0] Geometric mean longitude of the Sun
                M, //  [1] Mean anomaly of the Sun
                e, //  [2] Eccentricity of the Earth's orbit
                C, //  [3] Sun's equation of the Centre
                sunLong, //  [4] Sun's true longitude
                sunAnomaly, //  [5] Sun's true anomaly
                sunR, //  [6] Sun's radius vector in AU
                Lambda, //  [7] Sun's apparent longitude at true equinox of the date
                Alpha, //  [8] Sun's true right ascension
                Delta, //  [9] Sun's true declination
                AlphaApp, // [10] Sun's apparent right ascension
                DeltaApp // [11] Sun's apparent declination
              ];
            }

            /**
             * @desc Compute equation of time for a given moment. Returns the equation of time as a fraction of a day.
             * @param jd
             * @return {number|*}
             */

          }, {
            key: "equationOfTime",
            value: function equationOfTime(jd) {
              var alpha = void 0,
                deltaPsi = void 0,
                E = void 0,
                epsilon = void 0,
                L0 = void 0,
                tau = void 0;
              tau = (jd - this.J2000) / this.JulianMillennium;
              L0 = 280.4664567 + 360007.6982779 * tau + 0.03032028 * tau * tau + tau * tau * tau / 49931 + -(tau * tau * tau * tau / 15300) + -(tau * tau * tau * tau * tau / 2000000);
              L0 = this.fixangle(L0);
              alpha = this.sunpos(jd)[10];
              deltaPsi = this.nutation(jd)[0];
              epsilon = this.obliqeq(jd) + this.nutation(jd)[1];
              E = L0 + -0.0057183 + -alpha + deltaPsi * this.dcos(epsilon);
              E = E - 20.0 * Math.floor(E / 20.0);
              E = E / (24 * 60);
              return E;
            }
          }]);

          return ASTRO;
        }();

        module.exports = ASTRO;

        /***/
      }),
/* 4 */
/***/ (function (module, exports, __webpack_require__) {

        "use strict";


        /**
         * Constants
         * @module constants
         */

        module.exports = {
          durationUnit: {
            year: ['y', 'years', 'year'],
            month: ['M', 'months', 'month'],
            day: ['d', 'days', 'day'],
            hour: ['h', 'hours', 'hour'],
            minute: ['m', 'minutes', 'minute'],
            second: ['s', 'second', 'seconds'],
            millisecond: ['ms', 'milliseconds', 'millisecond'],
            week: ['w', '', 'weeks', 'week']
          }
        };

        /***/
      }),
/* 5 */
/***/ (function (module, exports, __webpack_require__) {

        "use strict";


        var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

        function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

        var Helpers = __webpack_require__(0);
        var normalizeDuration = new Helpers().normalizeDuration;
        var absRound = new Helpers().absRound;
        var absFloor = new Helpers().absFloor;
        /**
         * Duration object constructor
         * @param duration
         * @class Duration
         * @constructor
         */

        var Duration = function () {
          function Duration(key, value) {
            _classCallCheck(this, Duration);

            var duration = {},
              data = this._data = {},
              milliseconds = 0,
              normalizedUnit = normalizeDuration(key, value),
              unit = normalizedUnit.unit;
            duration[unit] = normalizedUnit.value;
            milliseconds = duration.milliseconds || duration.millisecond || duration.ms || 0;

            var years = duration.years || duration.year || duration.y || 0,
              months = duration.months || duration.month || duration.M || 0,
              weeks = duration.weeks || duration.w || duration.week || 0,
              days = duration.days || duration.d || duration.day || 0,
              hours = duration.hours || duration.hour || duration.h || 0,
              minutes = duration.minutes || duration.minute || duration.m || 0,
              seconds = duration.seconds || duration.second || duration.s || 0;
            // representation for dateAddRemove
            this._milliseconds = milliseconds + seconds * 1e3 + minutes * 6e4 + hours * 36e5;
            // Because of dateAddRemove treats 24 hours as different from a
            // day when working around DST, we need to store them separately
            this._days = days + weeks * 7;
            // It is impossible translate months into days without knowing
            // which months you are are talking about, so we have to store
            // it separately.
            this._months = months + years * 12;
            // The following code bubbles up values, see the tests for
            // examples of what that means.
            data.milliseconds = milliseconds % 1000;
            seconds += absFloor(milliseconds / 1000);
            data.seconds = seconds % 60;
            minutes += absRound(seconds / 60);
            data.minutes = minutes % 60;
            hours += absRound(minutes / 60);
            data.hours = hours % 24;
            days += absRound(hours / 24);
            days += weeks * 7;
            data.days = days % 30;
            months += absRound(days / 30);
            data.months = months % 12;
            years += absRound(months / 12);
            data.years = years;
            return this;
          }

          _createClass(Duration, [{
            key: 'valueOf',
            value: function valueOf() {
              return this._milliseconds + this._days * 864e5 + this._months * 2592e6;
            }
          }]);

          return Duration;
        }();

        module.exports = Duration;

        /***/
      }),
/* 6 */
/***/ (function (module, exports, __webpack_require__) {

        "use strict";


        /**
         * Constants
         * @module constants
         */

        module.exports = {
          gregorian: {
            months: ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'],
            monthsShort: ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'],
            weekdays: ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'],
            weekdaysShort: ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'],
            weekdaysMin: ['Su', 'Mo', 'Tu', 'We', 'Th', 'Fr', 'Sa']
          },
          persian: {
            months: ['Farvardin', 'Ordibehesht', 'Khordad', 'Tir', 'Mordad', 'Shahrivar', 'Mehr', 'Aban', 'Azar', 'Dey', 'Bahman', 'Esfand'],
            monthsShort: ['Far', 'Ord', 'Kho', 'Tir', 'Mor', 'Sha', 'Meh', 'Aba', 'Aza', 'Dey', 'Bah', 'Esf'],
            weekdays: ['Saturday', 'Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday'],
            weekdaysShort: ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'],
            weekdaysMin: ['Su', 'Mo', 'Tu', 'We', 'Th', 'Fr', 'Sa'],
            persianDaysName: ['Urmazd', 'Bahman', 'Ordibehesht', 'Shahrivar', 'Sepandarmaz', 'Khurdad', 'Amordad', 'Dey-be-azar', 'Azar', 'Aban', 'Khorshid', 'Mah', 'Tir', 'Gush', 'Dey-be-mehr', 'Mehr', 'Sorush', 'Rashn', 'Farvardin', 'Bahram', 'Ram', 'Bad', 'Dey-be-din', 'Din', 'Ord', 'Ashtad', 'Asman', 'Zamyad', 'Mantre-sepand', 'Anaram', 'Ziadi']
          }
        };

        /***/
      }),
/* 7 */
/***/ (function (module, exports, __webpack_require__) {

        "use strict";


        /**
         * Constants
         * @module constants
         */

        module.exports = {
          gregorian: {
            months: 'ژانویه_فوریه_مارس_آوریل_مه_ژوئن_ژوئیه_اوت_سپتامبر_اکتبر_نوامبر_دسامبر'.split('_'),
            monthsShort: 'ژانویه_فوریه_مارس_آوریل_مه_ژوئن_ژوئیه_اوت_سپتامبر_اکتبر_نوامبر_دسامبر'.split('_'),
            weekdays: '\u06CC\u06A9\u200C\u0634\u0646\u0628\u0647_\u062F\u0648\u0634\u0646\u0628\u0647_\u0633\u0647\u200C\u0634\u0646\u0628\u0647_\u0686\u0647\u0627\u0631\u0634\u0646\u0628\u0647_\u067E\u0646\u062C\u200C\u0634\u0646\u0628\u0647_\u062C\u0645\u0639\u0647_\u0634\u0646\u0628\u0647'.split('_'),
            weekdaysShort: '\u06CC\u06A9\u200C\u0634\u0646\u0628\u0647_\u062F\u0648\u0634\u0646\u0628\u0647_\u0633\u0647\u200C\u0634\u0646\u0628\u0647_\u0686\u0647\u0627\u0631\u0634\u0646\u0628\u0647_\u067E\u0646\u062C\u200C\u0634\u0646\u0628\u0647_\u062C\u0645\u0639\u0647_\u0634\u0646\u0628\u0647'.split('_'),
            weekdaysMin: 'ی_د_س_چ_پ_ج_ش'.split('_')
          },
          persian: {
            months: ['فروردین', 'اردیبهشت', 'خرداد', 'تیر', 'مرداد', 'شهریور', 'مهر', 'آبان', 'آذر', 'دی', 'بهمن', 'اسفند'],
            monthsShort: ['فرو', 'ارد', 'خرد', 'تیر', 'مرد', 'شهر', 'مهر', 'آبا', 'آذر', 'دی', 'بهم', 'اسف'],
            weekdays: ['شنبه', 'یکشنبه', 'دوشنبه', 'سه شنبه', 'چهار شنبه', '\u067E\u0646\u062C\u200C\u0634\u0646\u0628\u0647', 'جمعه'],
            weekdaysShort: ['ش', 'ی', 'د', 'س', 'چ', 'پ', 'ج'],
            weekdaysMin: ['ش', 'ی', 'د', 'س', 'چ', 'پ', 'ج'],
            persianDaysName: ['اورمزد', 'بهمن', 'اوردیبهشت', 'شهریور', 'سپندارمذ', 'خورداد', 'امرداد', 'دی به آذز', 'آذز', 'آبان', 'خورشید', 'ماه', 'تیر', 'گوش', 'دی به مهر', 'مهر', 'سروش', 'رشن', 'فروردین', 'بهرام', 'رام', 'باد', 'دی به دین', 'دین', 'ارد', 'اشتاد', 'آسمان', 'زامیاد', 'مانتره سپند', 'انارام', 'زیادی']
          }
        };

        /***/
      }),
/* 8 */
/***/ (function (module, exports, __webpack_require__) {

        "use strict";


        var PersianDateClass = __webpack_require__(1);
        PersianDateClass.calendarType = 'persian';
        PersianDateClass.leapYearMode = 'astronomical';
        PersianDateClass.localType = 'fa';
        module.exports = PersianDateClass;

        /***/
      }),
/* 9 */
/***/ (function (module, exports, __webpack_require__) {

        "use strict";


        function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

        var Container = function Container() {
          _classCallCheck(this, Container);

          this.gDate = null;
          /**
           *
           * @type {number}
           */
          this.modifiedjulianday = 0;

          /**
           *
           * @type {number}
           */
          this.julianday = 0;

          /**
           *
           * @type {{day: number}}
           */
          this.gregserial = {
            day: 0
          };

          this.zone = 0;

          /**
           *
           * @type {{year: number, month: number, day: number, hour: number, minute: number, second: number, millisecond: number, weekday: number, unix: number, leap: number}}
           */
          this.gregorian = {
            year: 0,
            month: 0,
            day: 0,
            hour: 0,
            minute: 0,
            second: 0,
            millisecond: 0,
            weekday: 0,
            unix: 0,
            leap: 0
          };

          /**
           *
           * @type {{year: number, month: number, day: number, leap: number, weekday: number}}
           */
          this.juliancalendar = {
            year: 0,
            month: 0,
            day: 0,
            leap: 0,
            weekday: 0
          };

          /**
           *
           * @type {{year: number, month: number, day: number, leap: number, weekday: number}}
           */
          this.islamic = {
            year: 0,
            month: 0,
            day: 0,
            leap: 0,
            weekday: 0
          };

          /**
           *
           * @type {{year: number, month: number, day: number, leap: number, weekday: number}}
           */
          this.persianAlgo = this.persian = {
            year: 0,
            month: 0,
            day: 0,
            leap: 0,
            weekday: 0
          };

          /**
           *
           * @type {{year: number, month: number, day: number, leap: number, weekday: number}}
           */
          this.persianAstro = {
            year: 0,
            month: 0,
            day: 0,
            leap: 0,
            weekday: 0
          };

          /**
           *
           * @type {{year: number, week: number, day: number}}
           */
          this.isoweek = {
            year: 0,
            week: 0,
            day: 0
          };

          /**
           *
           * @type {{year: number, day: number}}
           */
          this.isoday = {
            year: 0,
            day: 0
          };
        };

        module.exports = Container;

        /***/
      }),
/* 10 */
/***/ (function (module, exports, __webpack_require__) {

        "use strict";


        module.exports = {
          /**
           * @param input
           * @returns {boolean}
           */
          isArray: function isArray(input) {
            return Object.prototype.toString.call(input) === '[object Array]';
          },


          /**
           *
           * @param input
           * @returns {boolean}
           */
          isNumber: function isNumber(input) {
            return typeof input === 'number';
          },


          /**
           *
           * @param input
           * @returns {boolean}
           */
          isDate: function isDate(input) {
            return input instanceof Date;
          }
        };

        /***/
      })
/******/]);
  });
(function ($) {
  $(document).ready(
    function () {
      if (Object.keys(WT)) {
        var imagesList = {
          changedate: '<i class="fas fa-calendar-alt"></i>',
          flights: '<i class="fas fa-plane"></i>',
          passengers: '<i class="fas fa-users"></i>',
          ssr: '<i class="fas fa-briefcase"></i>',
          seatselect: '<i class="fas fa-loveseat"></i>',
          hotels: '<i class="fas fa-hotel"></i>',
          hotel: '<i class="fas fa-hotel"></i>',
          room: '<i class="fas fa-bed"></i>',
          'flight + hotel': '<i class="fas fa-hotel"></i>',
          'guest and contact': '<i class="fas fa-file-alt"></i>',
          contact: '<i class="fas fa-user-friends"></i>',
          checkout: '<i class="fas fa-shopping-cart"></i>',
          pay: '<svg version="1.1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" x="0px" y="0px" viewBox="0 0 1000 1000" enable-background="new 0 0 1000 1000" xml:space="preserve"><g><path d="M762.7,159.8C742.4,79.1,660.6,29,579.5,48.2L85.4,164.3h678.5L762.7,159.8z"/><path d="M650.8,578.9c0,41.5,35.8,53.1,66.7,53.1c31.3,0,46.4-11.7,46.4-53.1s-24.5-55.4-55.8-55.4C676.8,523.5,650.8,537.5,650.8,578.9z"/><path d="M990,465.9V352.8c0-62.6-50.5-113.1-113.1-113.1H123.1C60.5,239.7,10,290.2,10,352.8v490c0,62.6,50.5,113.1,113.1,113.1h754.2c62.6,0,112.7-50.5,112.3-113.1L988.9,692c-3.8,1.5-354.7,0.8-354.7,0.8c-28.3,0-63.7-26.4-63.7-55l-1.9-114.2c0-29,44.5-57.7,72.7-57.7C641.3,465.9,986.2,464.4,990,465.9z"/></g></svg>',
          cancel: '<svg xmlns="http://www.w3.org/2000/svg" width="18.5" height="21.618" viewBox="0 0 18.5 21.618"><path d="M17.994.87v10.592a.87.87 0 0 1-1.741 0V1.741H1.741v18.136h6.674a.87.87 0 0 1 0 1.741H.87a.873.873 0 0 1-.87-.87V.87A.873.873 0 0 1 .87 0h16.25a.873.873 0 0 1 .874.87zM5.223 6.819h7.835a.87.87 0 1 0 0-1.741H5.223a.87.87 0 1 0 0 1.741zm8.705 3.917a.873.873 0 0 0-.87-.87H5.223a.87.87 0 1 0 0 1.741h7.835a.873.873 0 0 0 .87-.871zm-8.705 3.772a.87.87 0 1 0 0 1.741h2.321a.87.87 0 1 0 0-1.741zm13.014.044a.885.885 0 0 0-1.233 0l-2.06 2.06-2.075-2.075a.872.872 0 0 0-1.233 1.233l2.075 2.075-2.075 2.075a.885.885 0 0 0 0 1.233.859.859 0 0 0 .609.261.835.835 0 0 0 .609-.261l2.075-2.075 2.075 2.075a.859.859 0 0 0 .609.261.835.835 0 0 0 .609-.261.885.885 0 0 0 0-1.233l-2.046-2.075 2.075-2.075a.854.854 0 0 0-.014-1.218z" fill="#fff"/></svg>',
          refund: '<svg xmlns="http://www.w3.org/2000/svg" width="23.765" height="27" viewBox="0 0 23.765 27"><defs><style>.a{fill:#fff}</style></defs><path class="a" d="M19.172 5.727L17.87 7.4a9.769 9.769 0 1 1-5.451-2.034L10.586 7.29l1.36 1.3 2.893-3.04 1.3-1.361-1.359-1.3L11.74 0l-1.3 1.361 1.979 1.885a11.882 11.882 0 0 0-2.385 23.607 12.009 12.009 0 0 0 1.874.147 11.887 11.887 0 0 0 7.264-21.273z"/><path class="a" d="M13.046 21.176v-1.22a2.9 2.9 0 0 0 2.854-2.811c0-2.358-2.192-2.628-3.793-2.825-1.024-.122-1.807-.264-1.807-.885 0-.862 1.215-.955 1.738-.955a2.359 2.359 0 0 1 1.885.83l.082.135 1.608-.744-.08-.162a3.174 3.174 0 0 0-2.487-1.723V9.742h-1.882v1.07c-1.753.259-2.794 1.232-2.794 2.624 0 2.27 2.061 2.5 3.565 2.669 1.34.158 1.964.489 1.964 1.041 0 1.054-1.459 1.136-1.907 1.136a2.454 2.454 0 0 1-2.235-1.153l-.069-.163-1.747.741.07.163a3.685 3.685 0 0 0 3.153 2.149v1.162z"/></svg>'
        };

        WT.Utiles.SVGIconsList = imagesList;
      }
    }
  );
})(jQuery);
(function ($) {
  $(document).ready(
    function () {
      if (Object.keys(WT)) {
        var spread = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };
        WT.Utiles.spread = spread;
      }
    }
  );
})(jQuery);
/*!
 * Bootstrap v3.3.6 (http://getbootstrap.com)
 * Copyright 2011-2015 Twitter, Inc.
 * Licensed under the MIT license
 */

if (typeof jQuery === 'undefined') {
  throw new Error('Bootstrap\'s JavaScript requires jQuery')
}

+function ($) {
  'use strict';
  var version = $.fn.jquery.split(' ')[0].split('.')
  if ((version[0] < 2 && version[1] < 9) || (version[0] == 1 && version[1] == 9 && version[2] < 1) || (version[0] > 2)) {
    throw new Error('Bootstrap\'s JavaScript requires jQuery version 1.9.1 or higher, but lower than version 3')
  }
}(jQuery);

/* ========================================================================
 * Bootstrap: transition.js v3.3.6
 * http://getbootstrap.com/javascript/#transitions
 * ========================================================================
 * Copyright 2011-2015 Twitter, Inc.
 * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)
 * ======================================================================== */


+function ($) {
  'use strict';

  // CSS TRANSITION SUPPORT (Shoutout: http://www.modernizr.com/)
  // ============================================================

  function transitionEnd() {
    var el = document.createElement('bootstrap')

    var transEndEventNames = {
      WebkitTransition: 'webkitTransitionEnd',
      MozTransition: 'transitionend',
      OTransition: 'oTransitionEnd otransitionend',
      transition: 'transitionend'
    }

    for (var name in transEndEventNames) {
      if (el.style[name] !== undefined) {
        return { end: transEndEventNames[name] }
      }
    }

    return false // explicit for ie8 (  ._.)
  }

  // http://blog.alexmaccaw.com/css-transitions
  $.fn.emulateTransitionEnd = function (duration) {
    var called = false
    var $el = this
    $(this).one('bsTransitionEnd', function () { called = true })
    var callback = function () { if (!called) $($el).trigger($.support.transition.end) }
    setTimeout(callback, duration)
    return this
  }

  $(function () {
    $.support.transition = transitionEnd()

    if (!$.support.transition) return

    $.event.special.bsTransitionEnd = {
      bindType: $.support.transition.end,
      delegateType: $.support.transition.end,
      handle: function (e) {
        if ($(e.target).is(this)) return e.handleObj.handler.apply(this, arguments)
      }
    }
  })

}(jQuery);

/* ========================================================================
 * Bootstrap: alert.js v3.3.6
 * http://getbootstrap.com/javascript/#alerts
 * ========================================================================
 * Copyright 2011-2015 Twitter, Inc.
 * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)
 * ======================================================================== */


+function ($) {
  'use strict';

  // ALERT CLASS DEFINITION
  // ======================

  var dismiss = '[data-dismiss="alert"]'
  var Alert = function (el) {
    $(el).on('click', dismiss, this.close)
  }

  Alert.VERSION = '3.3.6'

  Alert.TRANSITION_DURATION = 150

  Alert.prototype.close = function (e) {
    var $this = $(this)
    var selector = $this.attr('data-target')

    if (!selector) {
      selector = $this.attr('href')
      selector = selector && selector.replace(/.*(?=#[^\s]*$)/, '') // strip for ie7
    }

    var $parent = $(selector)

    if (e) e.preventDefault()

    if (!$parent.length) {
      $parent = $this.closest('.alert')
    }

    $parent.trigger(e = $.Event('close.bs.alert'))

    if (e.isDefaultPrevented()) return

    $parent.removeClass('in')

    function removeElement() {
      // detach from parent, fire event then clean up data
      $parent.detach().trigger('closed.bs.alert').remove()
    }

    $.support.transition && $parent.hasClass('fade') ?
      $parent
        .one('bsTransitionEnd', removeElement)
        .emulateTransitionEnd(Alert.TRANSITION_DURATION) :
      removeElement()
  }


  // ALERT PLUGIN DEFINITION
  // =======================

  function Plugin(option) {
    return this.each(function () {
      var $this = $(this)
      var data = $this.data('bs.alert')

      if (!data) $this.data('bs.alert', (data = new Alert(this)))
      if (typeof option == 'string') data[option].call($this)
    })
  }

  var old = $.fn.alert

  $.fn.alert = Plugin
  $.fn.alert.Constructor = Alert


  // ALERT NO CONFLICT
  // =================

  $.fn.alert.noConflict = function () {
    $.fn.alert = old
    return this
  }


  // ALERT DATA-API
  // ==============

  $(document).on('click.bs.alert.data-api', dismiss, Alert.prototype.close)

}(jQuery);

/* ========================================================================
 * Bootstrap: button.js v3.3.6
 * http://getbootstrap.com/javascript/#buttons
 * ========================================================================
 * Copyright 2011-2015 Twitter, Inc.
 * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)
 * ======================================================================== */


+function ($) {
  'use strict';

  // BUTTON PUBLIC CLASS DEFINITION
  // ==============================

  var Button = function (element, options) {
    this.$element = $(element)
    this.options = $.extend({}, Button.DEFAULTS, options)
    this.isLoading = false
  }

  Button.VERSION = '3.3.6'

  Button.DEFAULTS = {
    loadingText: 'loading...'
  }

  Button.prototype.setState = function (state) {
    var d = 'disabled'
    var $el = this.$element
    var val = $el.is('input') ? 'val' : 'html'
    var data = $el.data()

    state += 'Text'

    if (data.resetText == null) $el.data('resetText', $el[val]())

    // push to event loop to allow forms to submit
    setTimeout($.proxy(function () {
      $el[val](data[state] == null ? this.options[state] : data[state])

      if (state == 'loadingText') {
        this.isLoading = true
        $el.addClass(d).attr(d, d)
      } else if (this.isLoading) {
        this.isLoading = false
        $el.removeClass(d).removeAttr(d)
      }
    }, this), 0)
  }

  Button.prototype.toggle = function () {
    var changed = true
    var $parent = this.$element.closest('[data-toggle="buttons"]')

    if ($parent.length) {
      var $input = this.$element.find('input')
      if ($input.prop('type') == 'radio') {
        if ($input.prop('checked')) changed = false
        $parent.find('.active').removeClass('active')
        this.$element.addClass('active')
      } else if ($input.prop('type') == 'checkbox') {
        if (($input.prop('checked')) !== this.$element.hasClass('active')) changed = false
        this.$element.toggleClass('active')
      }
      $input.prop('checked', this.$element.hasClass('active'))
      if (changed) $input.trigger('change')
    } else {
      this.$element.attr('aria-pressed', !this.$element.hasClass('active'))
      this.$element.toggleClass('active')
    }
  }


  // BUTTON PLUGIN DEFINITION
  // ========================

  function Plugin(option) {
    return this.each(function () {
      var $this = $(this)
      var data = $this.data('bs.button')
      var options = typeof option == 'object' && option

      if (!data) $this.data('bs.button', (data = new Button(this, options)))

      if (option == 'toggle') data.toggle()
      else if (option) data.setState(option)
    })
  }

  var old = $.fn.button

  $.fn.button = Plugin
  $.fn.button.Constructor = Button


  // BUTTON NO CONFLICT
  // ==================

  $.fn.button.noConflict = function () {
    $.fn.button = old
    return this
  }


  // BUTTON DATA-API
  // ===============

  $(document)
    .on('click.bs.button.data-api', '[data-toggle^="button"]', function (e) {
      var $btn = $(e.target)
      if (!$btn.hasClass('btn')) $btn = $btn.closest('.btn')
      Plugin.call($btn, 'toggle')
      if (!($(e.target).is('input[type="radio"]') || $(e.target).is('input[type="checkbox"]'))) e.preventDefault()
    })
    .on('focus.bs.button.data-api blur.bs.button.data-api', '[data-toggle^="button"]', function (e) {
      $(e.target).closest('.btn').toggleClass('focus', /^focus(in)?$/.test(e.type))
    })

}(jQuery);

/* ========================================================================
 * Bootstrap: carousel.js v3.3.6
 * http://getbootstrap.com/javascript/#carousel
 * ========================================================================
 * Copyright 2011-2015 Twitter, Inc.
 * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)
 * ======================================================================== */


+function ($) {
  'use strict';

  // CAROUSEL CLASS DEFINITION
  // =========================

  var Carousel = function (element, options) {
    this.$element = $(element)
    this.$indicators = this.$element.find('.carousel-indicators')
    this.options = options
    this.paused = null
    this.sliding = null
    this.interval = null
    this.$active = null
    this.$items = null

    this.options.keyboard && this.$element.on('keydown.bs.carousel', $.proxy(this.keydown, this))

    this.options.pause == 'hover' && !('ontouchstart' in document.documentElement) && this.$element
      .on('mouseenter.bs.carousel', $.proxy(this.pause, this))
      .on('mouseleave.bs.carousel', $.proxy(this.cycle, this))
  }

  Carousel.VERSION = '3.3.6'

  Carousel.TRANSITION_DURATION = 600

  Carousel.DEFAULTS = {
    interval: 5000,
    pause: 'hover',
    wrap: true,
    keyboard: true
  }

  Carousel.prototype.keydown = function (e) {
    if (/input|textarea/i.test(e.target.tagName)) return
    switch (e.which) {
      case 37: this.prev(); break
      case 39: this.next(); break
      default: return
    }

    e.preventDefault()
  }

  Carousel.prototype.cycle = function (e) {
    e || (this.paused = false)

    this.interval && clearInterval(this.interval)

    this.options.interval
      && !this.paused
      && (this.interval = setInterval($.proxy(this.next, this), this.options.interval))

    return this
  }

  Carousel.prototype.getItemIndex = function (item) {
    this.$items = item.parent().children('.item')
    return this.$items.index(item || this.$active)
  }

  Carousel.prototype.getItemForDirection = function (direction, active) {
    var activeIndex = this.getItemIndex(active)
    var willWrap = (direction == 'prev' && activeIndex === 0)
      || (direction == 'next' && activeIndex == (this.$items.length - 1))
    if (willWrap && !this.options.wrap) return active
    var delta = direction == 'prev' ? -1 : 1
    var itemIndex = (activeIndex + delta) % this.$items.length
    return this.$items.eq(itemIndex)
  }

  Carousel.prototype.to = function (pos) {
    var that = this
    var activeIndex = this.getItemIndex(this.$active = this.$element.find('.item.active'))

    if (pos > (this.$items.length - 1) || pos < 0) return

    if (this.sliding) return this.$element.one('slid.bs.carousel', function () { that.to(pos) }) // yes, "slid"
    if (activeIndex == pos) return this.pause().cycle()

    return this.slide(pos > activeIndex ? 'next' : 'prev', this.$items.eq(pos))
  }

  Carousel.prototype.pause = function (e) {
    e || (this.paused = true)

    if (this.$element.find('.next, .prev').length && $.support.transition) {
      this.$element.trigger($.support.transition.end)
      this.cycle(true)
    }

    this.interval = clearInterval(this.interval)

    return this
  }

  Carousel.prototype.next = function () {
    if (this.sliding) return
    return this.slide('next')
  }

  Carousel.prototype.prev = function () {
    if (this.sliding) return
    return this.slide('prev')
  }

  Carousel.prototype.slide = function (type, next) {
    var $active = this.$element.find('.item.active')
    var $next = next || this.getItemForDirection(type, $active)
    var isCycling = this.interval
    var direction = type == 'next' ? 'left' : 'right'
    var that = this

    if ($next.hasClass('active')) return (this.sliding = false)

    var relatedTarget = $next[0]
    var slideEvent = $.Event('slide.bs.carousel', {
      relatedTarget: relatedTarget,
      direction: direction
    })
    this.$element.trigger(slideEvent)
    if (slideEvent.isDefaultPrevented()) return

    this.sliding = true

    isCycling && this.pause()

    if (this.$indicators.length) {
      this.$indicators.find('.active').removeClass('active')
      var $nextIndicator = $(this.$indicators.children()[this.getItemIndex($next)])
      $nextIndicator && $nextIndicator.addClass('active')
    }

    var slidEvent = $.Event('slid.bs.carousel', { relatedTarget: relatedTarget, direction: direction }) // yes, "slid"
    if ($.support.transition && this.$element.hasClass('slide')) {
      $next.addClass(type)
      $next[0].offsetWidth // force reflow
      $active.addClass(direction)
      $next.addClass(direction)
      $active
        .one('bsTransitionEnd', function () {
          $next.removeClass([type, direction].join(' ')).addClass('active')
          $active.removeClass(['active', direction].join(' '))
          that.sliding = false
          setTimeout(function () {
            that.$element.trigger(slidEvent)
          }, 0)
        })
        .emulateTransitionEnd(Carousel.TRANSITION_DURATION)
    } else {
      $active.removeClass('active')
      $next.addClass('active')
      this.sliding = false
      this.$element.trigger(slidEvent)
    }

    isCycling && this.cycle()

    return this
  }


  // CAROUSEL PLUGIN DEFINITION
  // ==========================

  function Plugin(option) {
    return this.each(function () {
      var $this = $(this)
      var data = $this.data('bs.carousel')
      var options = $.extend({}, Carousel.DEFAULTS, $this.data(), typeof option == 'object' && option)
      var action = typeof option == 'string' ? option : options.slide

      if (!data) $this.data('bs.carousel', (data = new Carousel(this, options)))
      if (typeof option == 'number') data.to(option)
      else if (action) data[action]()
      else if (options.interval) data.pause().cycle()
    })
  }

  var old = $.fn.carousel

  $.fn.carousel = Plugin
  $.fn.carousel.Constructor = Carousel


  // CAROUSEL NO CONFLICT
  // ====================

  $.fn.carousel.noConflict = function () {
    $.fn.carousel = old
    return this
  }


  // CAROUSEL DATA-API
  // =================

  var clickHandler = function (e) {
    var href
    var $this = $(this)
    var $target = $($this.attr('data-target') || (href = $this.attr('href')) && href.replace(/.*(?=#[^\s]+$)/, '')) // strip for ie7
    if (!$target.hasClass('carousel')) return
    var options = $.extend({}, $target.data(), $this.data())
    var slideIndex = $this.attr('data-slide-to')
    if (slideIndex) options.interval = false

    Plugin.call($target, options)

    if (slideIndex) {
      $target.data('bs.carousel').to(slideIndex)
    }

    e.preventDefault()
  }

  $(document)
    .on('click.bs.carousel.data-api', '[data-slide]', clickHandler)
    .on('click.bs.carousel.data-api', '[data-slide-to]', clickHandler)

  $(window).on('load', function () {
    $('[data-ride="carousel"]').each(function () {
      var $carousel = $(this)
      Plugin.call($carousel, $carousel.data())
    })
  })

}(jQuery);

/* ========================================================================
 * Bootstrap: collapse.js v3.3.6
 * http://getbootstrap.com/javascript/#collapse
 * ========================================================================
 * Copyright 2011-2015 Twitter, Inc.
 * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)
 * ======================================================================== */


+function ($) {
  'use strict';

  // COLLAPSE PUBLIC CLASS DEFINITION
  // ================================

  var Collapse = function (element, options) {
    this.$element = $(element)
    this.options = $.extend({}, Collapse.DEFAULTS, options)
    this.$trigger = $('[data-toggle="collapse"][href="#' + element.id + '"],' +
      '[data-toggle="collapse"][data-target="#' + element.id + '"]')
    this.transitioning = null

    if (this.options.parent) {
      this.$parent = this.getParent()
    } else {
      this.addAriaAndCollapsedClass(this.$element, this.$trigger)
    }

    if (this.options.toggle) this.toggle()
  }

  Collapse.VERSION = '3.3.6'

  Collapse.TRANSITION_DURATION = 350

  Collapse.DEFAULTS = {
    toggle: true
  }

  Collapse.prototype.dimension = function () {
    var hasWidth = this.$element.hasClass('width')
    return hasWidth ? 'width' : 'height'
  }

  Collapse.prototype.show = function () {
    if (this.transitioning || this.$element.hasClass('in')) return

    var activesData
    var actives = this.$parent && this.$parent.children('.panel').children('.in, .collapsing')

    if (actives && actives.length) {
      activesData = actives.data('bs.collapse')
      if (activesData && activesData.transitioning) return
    }

    var startEvent = $.Event('show.bs.collapse')
    this.$element.trigger(startEvent)
    if (startEvent.isDefaultPrevented()) return

    if (actives && actives.length) {
      Plugin.call(actives, 'hide')
      activesData || actives.data('bs.collapse', null)
    }

    var dimension = this.dimension()

    this.$element
      .removeClass('collapse')
      .addClass('collapsing')[dimension](0)
      .attr('aria-expanded', true)

    this.$trigger
      .removeClass('collapsed')
      .attr('aria-expanded', true)

    this.transitioning = 1

    var complete = function () {
      this.$element
        .removeClass('collapsing')
        .addClass('collapse in')[dimension]('')
      this.transitioning = 0
      this.$element
        .trigger('shown.bs.collapse')
    }

    if (!$.support.transition) return complete.call(this)

    var scrollSize = $.camelCase(['scroll', dimension].join('-'))

    this.$element
      .one('bsTransitionEnd', $.proxy(complete, this))
      .emulateTransitionEnd(Collapse.TRANSITION_DURATION)[dimension](this.$element[0][scrollSize])
  }

  Collapse.prototype.hide = function () {
    if (this.transitioning || !this.$element.hasClass('in')) return

    var startEvent = $.Event('hide.bs.collapse')
    this.$element.trigger(startEvent)
    if (startEvent.isDefaultPrevented()) return

    var dimension = this.dimension()

    this.$element[dimension](this.$element[dimension]())[0].offsetHeight

    this.$element
      .addClass('collapsing')
      .removeClass('collapse in')
      .attr('aria-expanded', false)

    this.$trigger
      .addClass('collapsed')
      .attr('aria-expanded', false)

    this.transitioning = 1

    var complete = function () {
      this.transitioning = 0
      this.$element
        .removeClass('collapsing')
        .addClass('collapse')
        .trigger('hidden.bs.collapse')
    }

    if (!$.support.transition) return complete.call(this)

    this.$element
    [dimension](0)
      .one('bsTransitionEnd', $.proxy(complete, this))
      .emulateTransitionEnd(Collapse.TRANSITION_DURATION)
  }

  Collapse.prototype.toggle = function () {
    this[this.$element.hasClass('in') ? 'hide' : 'show']()
  }

  Collapse.prototype.getParent = function () {
    return $(this.options.parent)
      .find('[data-toggle="collapse"][data-parent="' + this.options.parent + '"]')
      .each($.proxy(function (i, element) {
        var $element = $(element)
        this.addAriaAndCollapsedClass(getTargetFromTrigger($element), $element)
      }, this))
      .end()
  }

  Collapse.prototype.addAriaAndCollapsedClass = function ($element, $trigger) {
    var isOpen = $element.hasClass('in')

    $element.attr('aria-expanded', isOpen)
    $trigger
      .toggleClass('collapsed', !isOpen)
      .attr('aria-expanded', isOpen)
  }

  function getTargetFromTrigger($trigger) {
    var href
    var target = $trigger.attr('data-target')
      || (href = $trigger.attr('href')) && href.replace(/.*(?=#[^\s]+$)/, '') // strip for ie7

    return $(target)
  }


  // COLLAPSE PLUGIN DEFINITION
  // ==========================

  function Plugin(option) {
    return this.each(function () {
      var $this = $(this)
      var data = $this.data('bs.collapse')
      var options = $.extend({}, Collapse.DEFAULTS, $this.data(), typeof option == 'object' && option)

      if (!data && options.toggle && /show|hide/.test(option)) options.toggle = false
      if (!data) $this.data('bs.collapse', (data = new Collapse(this, options)))
      if (typeof option == 'string') data[option]()
    })
  }

  var old = $.fn.collapse

  $.fn.collapse = Plugin
  $.fn.collapse.Constructor = Collapse


  // COLLAPSE NO CONFLICT
  // ====================

  $.fn.collapse.noConflict = function () {
    $.fn.collapse = old
    return this
  }


  // COLLAPSE DATA-API
  // =================

  $(document).on('click.bs.collapse.data-api', '[data-toggle="collapse"]', function (e) {
    var $this = $(this)

    if (!$this.attr('data-target')) e.preventDefault()

    var $target = getTargetFromTrigger($this)
    var data = $target.data('bs.collapse')
    var option = data ? 'toggle' : $this.data()

    Plugin.call($target, option)
  })

}(jQuery);

/* ========================================================================
 * Bootstrap: dropdown.js v3.3.6
 * http://getbootstrap.com/javascript/#dropdowns
 * ========================================================================
 * Copyright 2011-2015 Twitter, Inc.
 * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)
 * ======================================================================== */


+function ($) {
  'use strict';

  // DROPDOWN CLASS DEFINITION
  // =========================

  var backdrop = '.dropdown-backdrop'
  var toggle = '[data-toggle="dropdown"]'
  var Dropdown = function (element) {
    $(element).on('click.bs.dropdown', this.toggle)
  }

  Dropdown.VERSION = '3.3.6'

  function getParent($this) {
    var selector = $this.attr('data-target')

    if (!selector) {
      selector = $this.attr('href')
      selector = selector && /#[A-Za-z]/.test(selector) && selector.replace(/.*(?=#[^\s]*$)/, '') // strip for ie7
    }

    var $parent = selector && $(selector)

    return $parent && $parent.length ? $parent : $this.parent()
  }

  function clearMenus(e) {
    if (e && e.which === 3) return
    $(backdrop).remove()
    $(toggle).each(function () {
      var $this = $(this)
      var $parent = getParent($this)
      var relatedTarget = { relatedTarget: this }

      if (!$parent.hasClass('open')) return

      if (e && e.type == 'click' && /input|textarea/i.test(e.target.tagName) && $.contains($parent[0], e.target)) return

      $parent.trigger(e = $.Event('hide.bs.dropdown', relatedTarget))

      if (e.isDefaultPrevented()) return

      $this.attr('aria-expanded', 'false')
      $parent.removeClass('open').trigger($.Event('hidden.bs.dropdown', relatedTarget))
    })
  }

  Dropdown.prototype.toggle = function (e) {
    var $this = $(this)

    if ($this.is('.disabled, :disabled')) return

    var $parent = getParent($this)
    var isActive = $parent.hasClass('open')

    clearMenus()

    if (!isActive) {
      if ('ontouchstart' in document.documentElement && !$parent.closest('.navbar-nav').length) {
        // if mobile we use a backdrop because click events don't delegate
        $(document.createElement('div'))
          .addClass('dropdown-backdrop')
          .insertAfter($(this))
          .on('click', clearMenus)
      }

      var relatedTarget = { relatedTarget: this }
      $parent.trigger(e = $.Event('show.bs.dropdown', relatedTarget))

      if (e.isDefaultPrevented()) return

      $this
        .trigger('focus')
        .attr('aria-expanded', 'true')

      $parent
        .toggleClass('open')
        .trigger($.Event('shown.bs.dropdown', relatedTarget))
    }

    return false
  }

  Dropdown.prototype.keydown = function (e) {
    if (!/(38|40|27|32)/.test(e.which) || /input|textarea/i.test(e.target.tagName)) return

    var $this = $(this)

    e.preventDefault()
    e.stopPropagation()

    if ($this.is('.disabled, :disabled')) return

    var $parent = getParent($this)
    var isActive = $parent.hasClass('open')

    if (!isActive && e.which != 27 || isActive && e.which == 27) {
      if (e.which == 27) $parent.find(toggle).trigger('focus')
      return $this.trigger('click')
    }

    var desc = ' li:not(.disabled):visible a'
    var $items = $parent.find('.dropdown-menu' + desc)

    if (!$items.length) return

    var index = $items.index(e.target)

    if (e.which == 38 && index > 0) index--         // up
    if (e.which == 40 && index < $items.length - 1) index++         // down
    if (!~index) index = 0

    $items.eq(index).trigger('focus')
  }


  // DROPDOWN PLUGIN DEFINITION
  // ==========================

  function Plugin(option) {
    return this.each(function () {
      var $this = $(this)
      var data = $this.data('bs.dropdown')

      if (!data) $this.data('bs.dropdown', (data = new Dropdown(this)))
      if (typeof option == 'string') data[option].call($this)
    })
  }

  var old = $.fn.dropdown

  $.fn.dropdown = Plugin
  $.fn.dropdown.Constructor = Dropdown


  // DROPDOWN NO CONFLICT
  // ====================

  $.fn.dropdown.noConflict = function () {
    $.fn.dropdown = old
    return this
  }


  // APPLY TO STANDARD DROPDOWN ELEMENTS
  // ===================================

  $(document)
    .on('click.bs.dropdown.data-api', clearMenus)
    .on('click.bs.dropdown.data-api', '.dropdown form', function (e) { e.stopPropagation() })
    .on('click.bs.dropdown.data-api', toggle, Dropdown.prototype.toggle)
    .on('keydown.bs.dropdown.data-api', toggle, Dropdown.prototype.keydown)
    .on('keydown.bs.dropdown.data-api', '.dropdown-menu', Dropdown.prototype.keydown)

}(jQuery);

/* ========================================================================
 * Bootstrap: modal.js v3.3.0
 * http://getbootstrap.com/javascript/#modals
 * ========================================================================
 * Copyright 2011-2014 Twitter, Inc.
 * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)
 * ======================================================================== */


+function ($) {
  'use strict';

  // MODAL CLASS DEFINITION
  // ======================

  var Modal = function (element, options) {
    this.options = options
    this.$body = $(document.body)
    this.$element = $(element)
    this.$backdrop =
      this.isShown = null
    this.scrollbarWidth = 0

    if (this.options.remote) {
      this.$element
        .find('.modal-content')
        .load(this.options.remote, $.proxy(function () {
          this.$element.trigger('loaded.bs.modal')
        }, this))
    }
  }

  Modal.VERSION = '3.3.0'

  Modal.TRANSITION_DURATION = 300
  Modal.BACKDROP_TRANSITION_DURATION = 150

  Modal.DEFAULTS = {
    backdrop: true,
    keyboard: true,
    show: true
  }

  Modal.prototype.toggle = function (_relatedTarget) {
    return this.isShown ? this.hide() : this.show(_relatedTarget)
  }

  Modal.prototype.show = function (_relatedTarget) {
    var that = this
    var e = $.Event('show.bs.modal', { relatedTarget: _relatedTarget })

    this.$element.trigger(e)

    if (this.isShown || e.isDefaultPrevented()) return

    this.isShown = true

    this.checkScrollbar()
    this.$body.addClass('modal-open')

    this.setScrollbar()
    this.escape()

    this.$element.on('click.dismiss.bs.modal', '[data-dismiss="modal"]', $.proxy(this.hide, this))

    this.backdrop(function () {
      var transition = $.support.transition && that.$element.hasClass('fade')

      if (!that.$element.parent().length) {
        that.$element.appendTo(that.$body) // don't move modals dom position
      }

      that.$element
        .show()
        .scrollTop(0)

      if (transition) {
        that.$element[0].offsetWidth // force reflow
      }

      that.$element
        .addClass('in')
        .attr('aria-hidden', false)

      that.enforceFocus()

      var e = $.Event('shown.bs.modal', { relatedTarget: _relatedTarget })

      transition ?
        that.$element.find('.modal-dialog') // wait for modal to slide in
          .one('bsTransitionEnd', function () {
            that.$element.trigger('focus').trigger(e)
          })
          .emulateTransitionEnd(Modal.TRANSITION_DURATION) :
        that.$element.trigger('focus').trigger(e)
    })
  }

  Modal.prototype.hide = function (e) {
    if (e) e.preventDefault()

    e = $.Event('hide.bs.modal')

    this.$element.trigger(e)

    if (!this.isShown || e.isDefaultPrevented()) return

    this.isShown = false

    this.escape()

    $(document).off('focusin.bs.modal')

    this.$element
      .removeClass('in')
      .attr('aria-hidden', true)
      .off('click.dismiss.bs.modal')

    $.support.transition && this.$element.hasClass('fade') ?
      this.$element
        .one('bsTransitionEnd', $.proxy(this.hideModal, this))
        .emulateTransitionEnd(Modal.TRANSITION_DURATION) :
      this.hideModal()
  }

  Modal.prototype.enforceFocus = function () {
    $(document)
      .off('focusin.bs.modal') // guard against infinite focus loop
      .on('focusin.bs.modal', $.proxy(function (e) {
        if (this.$element[0] !== e.target && !this.$element.has(e.target).length) {
          this.$element.trigger('focus')
        }
      }, this))
  }

  Modal.prototype.escape = function () {
    if (this.isShown && this.options.keyboard) {
      this.$element.on('keydown.dismiss.bs.modal', $.proxy(function (e) {
        e.which == 27 && this.hide()
      }, this))
    } else if (!this.isShown) {
      this.$element.off('keydown.dismiss.bs.modal')
    }
  }

  Modal.prototype.hideModal = function () {
    var that = this
    this.$element.hide()
    this.backdrop(function () {
      that.$body.removeClass('modal-open')
      that.resetScrollbar()
      that.$element.trigger('hidden.bs.modal')
    })
  }

  Modal.prototype.removeBackdrop = function () {
    this.$backdrop && this.$backdrop.remove()
    this.$backdrop = null
  }

  Modal.prototype.backdrop = function (callback) {
    var that = this
    var animate = this.$element.hasClass('fade') ? 'fade' : ''

    if (this.isShown && this.options.backdrop) {
      var doAnimate = $.support.transition && animate

      this.$backdrop = $('<div class="modal-backdrop ' + animate + '" />')
        .prependTo(this.$element)
        .on('click.dismiss.bs.modal', $.proxy(function (e) {
          if (e.target !== e.currentTarget) return
          this.options.backdrop == 'static'
            ? this.$element[0].focus.call(this.$element[0])
            : this.hide.call(this)
        }, this))

      if (doAnimate) this.$backdrop[0].offsetWidth // force reflow

      this.$backdrop.addClass('in')

      if (!callback) return

      doAnimate ?
        this.$backdrop
          .one('bsTransitionEnd', callback)
          .emulateTransitionEnd(Modal.BACKDROP_TRANSITION_DURATION) :
        callback()

    } else if (!this.isShown && this.$backdrop) {
      this.$backdrop.removeClass('in')

      var callbackRemove = function () {
        that.removeBackdrop()
        callback && callback()
      }
      $.support.transition && this.$element.hasClass('fade') ?
        this.$backdrop
          .one('bsTransitionEnd', callbackRemove)
          .emulateTransitionEnd(Modal.BACKDROP_TRANSITION_DURATION) :
        callbackRemove()

    } else if (callback) {
      callback()
    }
  }

  Modal.prototype.checkScrollbar = function () {
    this.scrollbarWidth = this.measureScrollbar()
  }

  Modal.prototype.setScrollbar = function () {
    var bodyPad = parseInt((this.$body.css('padding-right') || 0), 10)
    if (this.scrollbarWidth) this.$body.css('padding-right', bodyPad + this.scrollbarWidth)
  }

  Modal.prototype.resetScrollbar = function () {
    this.$body.css('padding-right', '')
  }

  Modal.prototype.measureScrollbar = function () { // thx walsh
    if (document.body.clientWidth >= window.innerWidth) return 0
    var scrollDiv = document.createElement('div')
    scrollDiv.className = 'modal-scrollbar-measure'
    this.$body.append(scrollDiv)
    var scrollbarWidth = scrollDiv.offsetWidth - scrollDiv.clientWidth
    this.$body[0].removeChild(scrollDiv)
    return scrollbarWidth
  }


  // MODAL PLUGIN DEFINITION
  // =======================

  function Plugin(option, _relatedTarget) {
    return this.each(function () {
      var $this = $(this)
      var data = $this.data('bs.modal')
      var options = $.extend({}, Modal.DEFAULTS, $this.data(), typeof option == 'object' && option)

      if (!data) $this.data('bs.modal', (data = new Modal(this, options)))
      if (typeof option == 'string') data[option](_relatedTarget)
      else if (options.show) data.show(_relatedTarget)
    })
  }

  var old = $.fn.modal

  $.fn.modal = Plugin
  $.fn.modal.Constructor = Modal


  // MODAL NO CONFLICT
  // =================

  $.fn.modal.noConflict = function () {
    $.fn.modal = old
    return this
  }


  // MODAL DATA-API
  // ==============

  $(document).on('click.bs.modal.data-api', '[data-toggle="modal"]', function (e) {
    var $this = $(this)
    var href = $this.attr('href')
    var $target = $($this.attr('data-target') || (href && href.replace(/.*(?=#[^\s]+$)/, ''))) // strip for ie7
    var option = $target.data('bs.modal') ? 'toggle' : $.extend({ remote: !/#/.test(href) && href }, $target.data(), $this.data())

    if ($this.is('a')) e.preventDefault()

    $target.one('show.bs.modal', function (showEvent) {
      if (showEvent.isDefaultPrevented()) return // only register focus restorer if modal will actually get shown
      $target.one('hidden.bs.modal', function () {
        $this.is(':visible') && $this.trigger('focus')
      })
    })
    Plugin.call($target, option, this)
  })

}(jQuery);

/* ========================================================================
 * Bootstrap: tooltip.js v3.3.6
 * http://getbootstrap.com/javascript/#tooltip
 * Inspired by the original jQuery.tipsy by Jason Frame
 * ========================================================================
 * Copyright 2011-2015 Twitter, Inc.
 * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)
 * ======================================================================== */


+function ($) {
  'use strict';

  // TOOLTIP PUBLIC CLASS DEFINITION
  // ===============================

  var Tooltip = function (element, options) {
    this.type = null
    this.options = null
    this.enabled = null
    this.timeout = null
    this.hoverState = null
    this.$element = null
    this.inState = null

    this.init('tooltip', element, options)
  }

  Tooltip.VERSION = '3.3.6'

  Tooltip.TRANSITION_DURATION = 150

  Tooltip.DEFAULTS = {
    animation: true,
    placement: 'top',
    selector: false,
    template: '<div class="tooltip" role="tooltip"><div class="tooltip-arrow"></div><div class="tooltip-inner"></div></div>',
    trigger: 'hover focus',
    title: '',
    delay: 0,
    html: false,
    container: false,
    viewport: {
      selector: 'body',
      padding: 0
    }
  }

  Tooltip.prototype.init = function (type, element, options) {
    this.enabled = true
    this.type = type
    this.$element = $(element)
    this.options = this.getOptions(options)
    this.$viewport = this.options.viewport && $($.isFunction(this.options.viewport) ? this.options.viewport.call(this, this.$element) : (this.options.viewport.selector || this.options.viewport))
    this.inState = { click: false, hover: false, focus: false }

    if (this.$element[0] instanceof document.constructor && !this.options.selector) {
      throw new Error('`selector` option must be specified when initializing ' + this.type + ' on the window.document object!')
    }

    var triggers = this.options.trigger.split(' ')

    for (var i = triggers.length; i--;) {
      var trigger = triggers[i]

      if (trigger == 'click') {
        this.$element.on('click.' + this.type, this.options.selector, $.proxy(this.toggle, this))
      } else if (trigger != 'manual') {
        var eventIn = trigger == 'hover' ? 'mouseenter' : 'focusin'
        var eventOut = trigger == 'hover' ? 'mouseleave' : 'focusout'

        this.$element.on(eventIn + '.' + this.type, this.options.selector, $.proxy(this.enter, this))
        this.$element.on(eventOut + '.' + this.type, this.options.selector, $.proxy(this.leave, this))
      }
    }

    this.options.selector ?
      (this._options = $.extend({}, this.options, { trigger: 'manual', selector: '' })) :
      this.fixTitle()
  }

  Tooltip.prototype.getDefaults = function () {
    return Tooltip.DEFAULTS
  }

  Tooltip.prototype.getOptions = function (options) {
    options = $.extend({}, this.getDefaults(), this.$element.data(), options)

    if (options.delay && typeof options.delay == 'number') {
      options.delay = {
        show: options.delay,
        hide: options.delay
      }
    }

    return options
  }

  Tooltip.prototype.getDelegateOptions = function () {
    var options = {}
    var defaults = this.getDefaults()

    this._options && $.each(this._options, function (key, value) {
      if (defaults[key] != value) options[key] = value
    })

    return options
  }

  Tooltip.prototype.enter = function (obj) {
    var self = obj instanceof this.constructor ?
      obj : $(obj.currentTarget).data('bs.' + this.type)

    if (!self) {
      self = new this.constructor(obj.currentTarget, this.getDelegateOptions())
      $(obj.currentTarget).data('bs.' + this.type, self)
    }

    if (obj instanceof $.Event) {
      self.inState[obj.type == 'focusin' ? 'focus' : 'hover'] = true
    }

    if (self.tip().hasClass('in') || self.hoverState == 'in') {
      self.hoverState = 'in'
      return
    }

    clearTimeout(self.timeout)

    self.hoverState = 'in'

    if (!self.options.delay || !self.options.delay.show) return self.show()

    self.timeout = setTimeout(function () {
      if (self.hoverState == 'in') self.show()
    }, self.options.delay.show)
  }

  Tooltip.prototype.isInStateTrue = function () {
    for (var key in this.inState) {
      if (this.inState[key]) return true
    }

    return false
  }

  Tooltip.prototype.leave = function (obj) {
    var self = obj instanceof this.constructor ?
      obj : $(obj.currentTarget).data('bs.' + this.type)

    if (!self) {
      self = new this.constructor(obj.currentTarget, this.getDelegateOptions())
      $(obj.currentTarget).data('bs.' + this.type, self)
    }

    if (obj instanceof $.Event) {
      self.inState[obj.type == 'focusout' ? 'focus' : 'hover'] = false
    }

    if (self.isInStateTrue()) return

    clearTimeout(self.timeout)

    self.hoverState = 'out'

    if (!self.options.delay || !self.options.delay.hide) return self.hide()

    self.timeout = setTimeout(function () {
      if (self.hoverState == 'out') self.hide()
    }, self.options.delay.hide)
  }

  Tooltip.prototype.show = function () {
    var e = $.Event('show.bs.' + this.type)

    if (this.hasContent() && this.enabled) {
      // this.$element.trigger(e)  /*prototype fix*/

      var inDom = $.contains(this.$element[0].ownerDocument.documentElement, this.$element[0])
      if (e.isDefaultPrevented() || !inDom) return
      var that = this

      var $tip = this.tip()

      var tipId = this.getUID(this.type)

      this.setContent()
      $tip.attr('id', tipId)
      this.$element.attr('aria-describedby', tipId)

      if (this.options.animation) $tip.addClass('fade')

      var placement = typeof this.options.placement == 'function' ?
        this.options.placement.call(this, $tip[0], this.$element[0]) :
        this.options.placement

      var autoToken = /\s?auto?\s?/i
      var autoPlace = autoToken.test(placement)
      if (autoPlace) placement = placement.replace(autoToken, '') || 'top'

      $tip
        .detach()
        .css({ top: 0, left: 0, display: 'block' })
        .addClass(placement)
        .data('bs.' + this.type, this)

      this.options.container ? $tip.appendTo(this.options.container) : $tip.insertAfter(this.$element)
      this.$element.trigger('inserted.bs.' + this.type)

      var pos = this.getPosition()
      var actualWidth = $tip[0].offsetWidth
      var actualHeight = $tip[0].offsetHeight

      if (autoPlace) {
        var orgPlacement = placement
        var viewportDim = this.getPosition(this.$viewport)

        placement = placement == 'bottom' && pos.bottom + actualHeight > viewportDim.bottom ? 'top' :
          placement == 'top' && pos.top - actualHeight < viewportDim.top ? 'bottom' :
            placement == 'right' && pos.right + actualWidth > viewportDim.width ? 'left' :
              placement == 'left' && pos.left - actualWidth < viewportDim.left ? 'right' :
                placement

        $tip
          .removeClass(orgPlacement)
          .addClass(placement)
      }

      var calculatedOffset = this.getCalculatedOffset(placement, pos, actualWidth, actualHeight)

      this.applyPlacement(calculatedOffset, placement)

      var complete = function () {
        var prevHoverState = that.hoverState
        that.$element.trigger('shown.bs.' + that.type)
        that.hoverState = null

        if (prevHoverState == 'out') that.leave(that)
      }

      $.support.transition && this.$tip.hasClass('fade') ?
        $tip
          .one('bsTransitionEnd', complete)
          .emulateTransitionEnd(Tooltip.TRANSITION_DURATION) :
        complete()
    }
  }

  Tooltip.prototype.applyPlacement = function (offset, placement) {
    var $tip = this.tip()
    var width = $tip[0].offsetWidth
    var height = $tip[0].offsetHeight

    // manually read margins because getBoundingClientRect includes difference
    var marginTop = parseInt($tip.css('margin-top'), 10)
    var marginLeft = parseInt($tip.css('margin-left'), 10)

    // we must check for NaN for ie 8/9
    if (isNaN(marginTop)) marginTop = 0
    if (isNaN(marginLeft)) marginLeft = 0

    offset.top += marginTop
    offset.left += marginLeft

    // $.fn.offset doesn't round pixel values
    // so we use setOffset directly with our own function B-0
    $.offset.setOffset($tip[0], $.extend({
      using: function (props) {
        $tip.css({
          top: Math.round(props.top),
          left: Math.round(props.left)
        })
      }
    }, offset), 0)

    $tip.addClass('in')

    // check to see if placing tip in new offset caused the tip to resize itself
    var actualWidth = $tip[0].offsetWidth
    var actualHeight = $tip[0].offsetHeight

    if (placement == 'top' && actualHeight != height) {
      offset.top = offset.top + height - actualHeight
    }

    var delta = this.getViewportAdjustedDelta(placement, offset, actualWidth, actualHeight)

    if (delta.left) offset.left += delta.left
    else offset.top += delta.top

    var isVertical = /top|bottom/.test(placement)
    var arrowDelta = isVertical ? delta.left * 2 - width + actualWidth : delta.top * 2 - height + actualHeight
    var arrowOffsetPosition = isVertical ? 'offsetWidth' : 'offsetHeight'

    $tip.offset(offset)
    this.replaceArrow(arrowDelta, $tip[0][arrowOffsetPosition], isVertical)
  }

  Tooltip.prototype.replaceArrow = function (delta, dimension, isVertical) {
    this.arrow()
      .css(isVertical ? 'left' : 'top', 50 * (1 - delta / dimension) + '%')
      .css(isVertical ? 'top' : 'left', '')
  }

  Tooltip.prototype.setContent = function () {
    var $tip = this.tip()
    var title = this.getTitle()

    $tip.find('.tooltip-inner')[this.options.html ? 'html' : 'text'](title)
    $tip.removeClass('fade in top bottom left right')
  }

  Tooltip.prototype.hide = function (callback) {
    var that = this
    var $tip = $(this.$tip)
    var e = $.Event('hide.bs.' + this.type)

    function complete() {
      if (that.hoverState != 'in') $tip.detach()
      that.$element
        .removeAttr('aria-describedby')
        .trigger('hidden.bs.' + that.type)
      callback && callback()
    }

    //this.$element.trigger(e)

    if (e.isDefaultPrevented()) return

    $tip.removeClass('in')

    $.support.transition && $tip.hasClass('fade') ?
      $tip
        .one('bsTransitionEnd', complete)
        .emulateTransitionEnd(Tooltip.TRANSITION_DURATION) :
      complete()

    this.hoverState = null

    return this
  }

  Tooltip.prototype.fixTitle = function () {
    var $e = this.$element
    if ($e.attr('title') || typeof $e.attr('data-original-title') != 'string') {
      $e.attr('data-original-title', $e.attr('title') || '').attr('title', '')
    }
  }

  Tooltip.prototype.hasContent = function () {
    return this.getTitle()
  }

  Tooltip.prototype.getPosition = function ($element) {
    $element = $element || this.$element

    var el = $element[0]
    var isBody = el.tagName == 'BODY'

    var elRect = el.getBoundingClientRect()
    if (elRect.width == null) {
      // width and height are missing in IE8, so compute them manually; see https://github.com/twbs/bootstrap/issues/14093
      elRect = $.extend({}, elRect, { width: elRect.right - elRect.left, height: elRect.bottom - elRect.top })
    }
    var elOffset = isBody ? { top: 0, left: 0 } : $element.offset()
    var scroll = { scroll: isBody ? document.documentElement.scrollTop || document.body.scrollTop : $element.scrollTop() }
    var outerDims = isBody ? { width: $(window).width(), height: $(window).height() } : null

    return $.extend({}, elRect, scroll, outerDims, elOffset)
  }

  Tooltip.prototype.getCalculatedOffset = function (placement, pos, actualWidth, actualHeight) {
    return placement == 'bottom' ? { top: pos.top + pos.height, left: pos.left + pos.width / 2 - actualWidth / 2 } :
      placement == 'top' ? { top: pos.top - actualHeight, left: pos.left + pos.width / 2 - actualWidth / 2 } :
        placement == 'left' ? { top: pos.top + pos.height / 2 - actualHeight / 2, left: pos.left - actualWidth } :
        /* placement == 'right' */ { top: pos.top + pos.height / 2 - actualHeight / 2, left: pos.left + pos.width }

  }

  Tooltip.prototype.getViewportAdjustedDelta = function (placement, pos, actualWidth, actualHeight) {
    var delta = { top: 0, left: 0 }
    if (!this.$viewport) return delta

    var viewportPadding = this.options.viewport && this.options.viewport.padding || 0
    var viewportDimensions = this.getPosition(this.$viewport)

    if (/right|left/.test(placement)) {
      var topEdgeOffset = pos.top - viewportPadding - viewportDimensions.scroll
      var bottomEdgeOffset = pos.top + viewportPadding - viewportDimensions.scroll + actualHeight
      if (topEdgeOffset < viewportDimensions.top) { // top overflow
        delta.top = viewportDimensions.top - topEdgeOffset
      } else if (bottomEdgeOffset > viewportDimensions.top + viewportDimensions.height) { // bottom overflow
        delta.top = viewportDimensions.top + viewportDimensions.height - bottomEdgeOffset
      }
    } else {
      var leftEdgeOffset = pos.left - viewportPadding
      var rightEdgeOffset = pos.left + viewportPadding + actualWidth
      if (leftEdgeOffset < viewportDimensions.left) { // left overflow
        delta.left = viewportDimensions.left - leftEdgeOffset
      } else if (rightEdgeOffset > viewportDimensions.right) { // right overflow
        delta.left = viewportDimensions.left + viewportDimensions.width - rightEdgeOffset
      }
    }

    return delta
  }

  Tooltip.prototype.getTitle = function () {
    var title
    var $e = this.$element
    var o = this.options

    title = $e.attr('data-original-title')
      || (typeof o.title == 'function' ? o.title.call($e[0]) : o.title)

    return title
  }

  Tooltip.prototype.getUID = function (prefix) {
    do prefix += ~~(Math.random() * 1000000)
    while (document.getElementById(prefix))
    return prefix
  }

  Tooltip.prototype.tip = function () {
    if (!this.$tip) {
      this.$tip = $(this.options.template)
      if (this.$tip.length != 1) {
        throw new Error(this.type + ' `template` option must consist of exactly 1 top-level element!')
      }
    }
    return this.$tip
  }

  Tooltip.prototype.arrow = function () {
    return (this.$arrow = this.$arrow || this.tip().find('.tooltip-arrow'))
  }

  Tooltip.prototype.enable = function () {
    this.enabled = true
  }

  Tooltip.prototype.disable = function () {
    this.enabled = false
  }

  Tooltip.prototype.toggleEnabled = function () {
    this.enabled = !this.enabled
  }

  Tooltip.prototype.toggle = function (e) {
    var self = this
    if (e) {
      self = $(e.currentTarget).data('bs.' + this.type)
      if (!self) {
        self = new this.constructor(e.currentTarget, this.getDelegateOptions())
        $(e.currentTarget).data('bs.' + this.type, self)
      }
    }

    if (e) {
      self.inState.click = !self.inState.click
      if (self.isInStateTrue()) self.enter(self)
      else self.leave(self)
    } else {
      self.tip().hasClass('in') ? self.leave(self) : self.enter(self)
    }
  }

  Tooltip.prototype.destroy = function () {
    var that = this
    clearTimeout(this.timeout)
    this.hide(function () {
      that.$element.off('.' + that.type).removeData('bs.' + that.type)
      if (that.$tip) {
        that.$tip.detach()
      }
      that.$tip = null
      that.$arrow = null
      that.$viewport = null
    })
  }


  // TOOLTIP PLUGIN DEFINITION
  // =========================

  function Plugin(option) {
    return this.each(function () {
      var $this = $(this)
      var data = $this.data('bs.tooltip')
      var options = typeof option == 'object' && option

      if (!data && /destroy|hide/.test(option)) return
      if (!data) $this.data('bs.tooltip', (data = new Tooltip(this, options)))
      if (typeof option == 'string') data[option]()
    })
  }

  var old = $.fn.tooltip

  $.fn.tooltip = Plugin
  $.fn.tooltip.Constructor = Tooltip


  // TOOLTIP NO CONFLICT
  // ===================

  $.fn.tooltip.noConflict = function () {
    $.fn.tooltip = old
    return this
  }

}(jQuery);

/* ========================================================================
 * Bootstrap: popover.js v3.3.6
 * http://getbootstrap.com/javascript/#popovers
 * ========================================================================
 * Copyright 2011-2015 Twitter, Inc.
 * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)
 * ======================================================================== */

+function ($) {
  'use strict';

  // TAB CLASS DEFINITION
  // ====================

  var Tab = function (element) {
    this.element = $(element)
  }

  Tab.VERSION = '3.3.0'

  Tab.TRANSITION_DURATION = 150

  Tab.prototype.show = function () {
    var $this = this.element
    var $ul = $this.closest('ul:not(.dropdown-menu)')
    var selector = $this.data('target')

    if (!selector) {
      selector = $this.attr('href')
      selector = selector && selector.replace(/.*(?=#[^\s]*$)/, '') // strip for ie7
    }

    if ($this.parent('li').hasClass('active')) return

    var $previous = $ul.find('.active:last a')
    var hideEvent = $.Event('hide.bs.tab', {
      relatedTarget: $this[0]
    })
    var showEvent = $.Event('show.bs.tab', {
      relatedTarget: $previous[0]
    })

    // $previous.trigger(hideEvent)
    $this.trigger(showEvent)

    if (showEvent.isDefaultPrevented() || hideEvent.isDefaultPrevented()) return

    var $target = $(selector)

    this.activate($this.closest('li'), $ul)
    this.activate($target, $target.parent(), function () {
      $previous.trigger({
        type: 'hidden.bs.tab',
        relatedTarget: $this[0]
      })
      $this.trigger({
        type: 'shown.bs.tab',
        relatedTarget: $previous[0]
      })
    })
  }

  Tab.prototype.activate = function (element, container, callback) {
    var $active = container.find('> .active')
    var transition = callback
      && $.support.transition
      && (($active.length && $active.hasClass('fade')) || !!container.find('> .fade').length)

    function next() {
      $active
        .removeClass('active')
        .find('> .dropdown-menu > .active')
        .removeClass('active')
        .end()
        .find('[data-toggle="tab"]')
        .attr('aria-expanded', false)

      element
        .addClass('active')
        .find('[data-toggle="tab"]')
        .attr('aria-expanded', true)

      if (transition) {
        element[0].offsetWidth // reflow for transition
        element.addClass('in')
      } else {
        element.removeClass('fade')
      }

      if (element.parent('.dropdown-menu')) {
        element
          .closest('li.dropdown')
          .addClass('active')
          .end()
          .find('[data-toggle="tab"]')
          .attr('aria-expanded', true)
      }

      callback && callback()
    }

    $active.length && transition ?
      $active
        .one('bsTransitionEnd', next)
        .emulateTransitionEnd(Tab.TRANSITION_DURATION) :
      next()

    $active.removeClass('in')
  }


  // TAB PLUGIN DEFINITION
  // =====================

  function Plugin(option) {
    return this.each(function () {
      var $this = $(this)
      var data = $this.data('bs.tab')

      if (!data) $this.data('bs.tab', (data = new Tab(this)))
      if (typeof option == 'string') data[option]()
    })
  }

  var old = $.fn.tab

  $.fn.tab = Plugin
  $.fn.tab.Constructor = Tab


  // TAB NO CONFLICT
  // ===============

  $.fn.tab.noConflict = function () {
    $.fn.tab = old
    return this
  }


  // TAB DATA-API
  // ============

  var clickHandler = function (e) {
    e.preventDefault()
    Plugin.call($(this), 'show')
  }

  $(document)
    .on('click.bs.tab.data-api', '[data-toggle="tab"]', clickHandler)
    .on('click.bs.tab.data-api', '[data-toggle="pill"]', clickHandler)

}(jQuery);

/* ========================================================================
 * Bootstrap: scrollspy.js v3.3.6
 * http://getbootstrap.com/javascript/#scrollspy
 * ========================================================================
 * Copyright 2011-2015 Twitter, Inc.
 * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)
 * ======================================================================== */


+function ($) {
  'use strict';

  // SCROLLSPY CLASS DEFINITION
  // ==========================

  function ScrollSpy(element, options) {
    this.$body = $(document.body)
    this.$scrollElement = $(element).is(document.body) ? $(window) : $(element)
    this.options = $.extend({}, ScrollSpy.DEFAULTS, options)
    this.selector = (this.options.target || '') + ' .nav li > a'
    this.offsets = []
    this.targets = []
    this.activeTarget = null
    this.scrollHeight = 0

    this.$scrollElement.on('scroll.bs.scrollspy', $.proxy(this.process, this))
    this.refresh()
    this.process()
  }

  ScrollSpy.VERSION = '3.3.6'

  ScrollSpy.DEFAULTS = {
    offset: 10
  }

  ScrollSpy.prototype.getScrollHeight = function () {
    return this.$scrollElement[0].scrollHeight || Math.max(this.$body[0].scrollHeight, document.documentElement.scrollHeight)
  }

  ScrollSpy.prototype.refresh = function () {
    var that = this
    var offsetMethod = 'offset'
    var offsetBase = 0

    this.offsets = []
    this.targets = []
    this.scrollHeight = this.getScrollHeight()

    if (!$.isWindow(this.$scrollElement[0])) {
      offsetMethod = 'position'
      offsetBase = this.$scrollElement.scrollTop()
    }

    this.$body
      .find(this.selector)
      .map(function () {
        var $el = $(this)
        var href = $el.data('target') || $el.attr('href')
        var $href = /^#./.test(href) && $(href)

        return ($href
          && $href.length
          && $href.is(':visible')
          && [[$href[offsetMethod]().top + offsetBase, href]]) || null
      })
      .sort(function (a, b) { return a[0] - b[0] })
      .each(function () {
        that.offsets.push(this[0])
        that.targets.push(this[1])
      })
  }

  ScrollSpy.prototype.process = function () {
    var scrollTop = this.$scrollElement.scrollTop() + this.options.offset
    var scrollHeight = this.getScrollHeight()
    var maxScroll = this.options.offset + scrollHeight - this.$scrollElement.height()
    var offsets = this.offsets
    var targets = this.targets
    var activeTarget = this.activeTarget
    var i

    if (this.scrollHeight != scrollHeight) {
      this.refresh()
    }

    if (scrollTop >= maxScroll) {
      return activeTarget != (i = targets[targets.length - 1]) && this.activate(i)
    }

    if (activeTarget && scrollTop < offsets[0]) {
      this.activeTarget = null
      return this.clear()
    }

    for (i = offsets.length; i--;) {
      activeTarget != targets[i]
        && scrollTop >= offsets[i]
        && (offsets[i + 1] === undefined || scrollTop < offsets[i + 1])
        && this.activate(targets[i])
    }
  }

  ScrollSpy.prototype.activate = function (target) {
    this.activeTarget = target

    this.clear()

    var selector = this.selector +
      '[data-target="' + target + '"],' +
      this.selector + '[href="' + target + '"]'

    var active = $(selector)
      .parents('li')
      .addClass('active')

    if (active.parent('.dropdown-menu').length) {
      active = active
        .closest('li.dropdown')
        .addClass('active')
    }

    active.trigger('activate.bs.scrollspy')
  }

  ScrollSpy.prototype.clear = function () {
    $(this.selector)
      .parentsUntil(this.options.target, '.active')
      .removeClass('active')
  }


  // SCROLLSPY PLUGIN DEFINITION
  // ===========================

  function Plugin(option) {
    return this.each(function () {
      var $this = $(this)
      var data = $this.data('bs.scrollspy')
      var options = typeof option == 'object' && option

      if (!data) $this.data('bs.scrollspy', (data = new ScrollSpy(this, options)))
      if (typeof option == 'string') data[option]()
    })
  }

  var old = $.fn.scrollspy

  $.fn.scrollspy = Plugin
  $.fn.scrollspy.Constructor = ScrollSpy


  // SCROLLSPY NO CONFLICT
  // =====================

  $.fn.scrollspy.noConflict = function () {
    $.fn.scrollspy = old
    return this
  }


  // SCROLLSPY DATA-API
  // ==================

  $(window).on('load.bs.scrollspy.data-api', function () {
    $('[data-spy="scroll"]').each(function () {
      var $spy = $(this)
      Plugin.call($spy, $spy.data())
    })
  })

}(jQuery);

/* ========================================================================
 * Bootstrap: tab.js v3.3.6
 * http://getbootstrap.com/javascript/#tabs
 * ========================================================================
 * Copyright 2011-2015 Twitter, Inc.
 * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)
 * ======================================================================== */


+function ($) {
  'use strict';

  // TAB CLASS DEFINITION
  // ====================

  var Tab = function (element) {
    // jscs:disable requireDollarBeforejQueryAssignment
    this.element = $(element)
    // jscs:enable requireDollarBeforejQueryAssignment
  }

  Tab.VERSION = '3.3.6'

  Tab.TRANSITION_DURATION = 150

  Tab.prototype.show = function () {
    var $this = this.element
    var $ul = $this.closest('ul:not(.dropdown-menu)')
    var selector = $this.data('target')

    if (!selector) {
      selector = $this.attr('href')
      selector = selector && selector.replace(/.*(?=#[^\s]*$)/, '') // strip for ie7
    }

    if ($this.parent('li').hasClass('active')) return

    var $previous = $ul.find('.active:last a')
    var hideEvent = $.Event('hide.bs.tab', {
      relatedTarget: $this[0]
    })
    var showEvent = $.Event('show.bs.tab', {
      relatedTarget: $previous[0]
    })

    $previous.trigger(hideEvent)
    $this.trigger(showEvent)

    if (showEvent.isDefaultPrevented() || hideEvent.isDefaultPrevented()) return

    var $target = $(selector)

    this.activate($this.closest('li'), $ul)
    this.activate($target, $target.parent(), function () {
      $previous.trigger({
        type: 'hidden.bs.tab',
        relatedTarget: $this[0]
      })
      $this.trigger({
        type: 'shown.bs.tab',
        relatedTarget: $previous[0]
      })
    })
  }

  Tab.prototype.activate = function (element, container, callback) {
    var $active = container.find('> .active')
    var transition = callback
      && $.support.transition
      && ($active.length && $active.hasClass('fade') || !!container.find('> .fade').length)

    function next() {
      $active
        .removeClass('active')
        .find('> .dropdown-menu > .active')
        .removeClass('active')
        .end()
        .find('[data-toggle="tab"]')
        .attr('aria-expanded', false)

      element
        .addClass('active')
        .find('[data-toggle="tab"]')
        .attr('aria-expanded', true)

      if (transition) {
        element[0].offsetWidth // reflow for transition
        element.addClass('in')
      } else {
        element.removeClass('fade')
      }

      if (element.parent('.dropdown-menu').length) {
        element
          .closest('li.dropdown')
          .addClass('active')
          .end()
          .find('[data-toggle="tab"]')
          .attr('aria-expanded', true)
      }

      callback && callback()
    }

    $active.length && transition ?
      $active
        .one('bsTransitionEnd', next)
        .emulateTransitionEnd(Tab.TRANSITION_DURATION) :
      next()

    $active.removeClass('in')
  }


  // TAB PLUGIN DEFINITION
  // =====================

  function Plugin(option) {
    return this.each(function () {
      var $this = $(this)
      var data = $this.data('bs.tab')

      if (!data) $this.data('bs.tab', (data = new Tab(this)))
      if (typeof option == 'string') data[option]()
    })
  }

  var old = $.fn.tab

  $.fn.tab = Plugin
  $.fn.tab.Constructor = Tab


  // TAB NO CONFLICT
  // ===============

  $.fn.tab.noConflict = function () {
    $.fn.tab = old
    return this
  }


  // TAB DATA-API
  // ============

  var clickHandler = function (e) {
    e.preventDefault()
    Plugin.call($(this), 'show')
  }

  $(document)
    .on('click.bs.tab.data-api', '[data-toggle="tab"]', clickHandler)
    .on('click.bs.tab.data-api', '[data-toggle="pill"]', clickHandler)

}(jQuery);

/* ========================================================================
 * Bootstrap: affix.js v3.3.6
 * http://getbootstrap.com/javascript/#affix
 * ========================================================================
 * Copyright 2011-2015 Twitter, Inc.
 * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)
 * ======================================================================== */


+function ($) {
  'use strict';

  // AFFIX CLASS DEFINITION
  // ======================

  var Affix = function (element, options) {
    this.options = $.extend({}, Affix.DEFAULTS, options)

    this.$target = $(this.options.target)
      .on('scroll.bs.affix.data-api', $.proxy(this.checkPosition, this))
      .on('click.bs.affix.data-api', $.proxy(this.checkPositionWithEventLoop, this))

    this.$element = $(element)
    this.affixed = null
    this.unpin = null
    this.pinnedOffset = null

    this.checkPosition()
  }

  Affix.VERSION = '3.3.6'

  Affix.RESET = 'affix affix-top affix-bottom'

  Affix.DEFAULTS = {
    offset: 0,
    target: window
  }

  Affix.prototype.getState = function (scrollHeight, height, offsetTop, offsetBottom) {
    var scrollTop = this.$target.scrollTop()
    var position = this.$element.offset()
    var targetHeight = this.$target.height()

    if (offsetTop != null && this.affixed == 'top') return scrollTop < offsetTop ? 'top' : false

    if (this.affixed == 'bottom') {
      if (offsetTop != null) return (scrollTop + this.unpin <= position.top) ? false : 'bottom'
      return (scrollTop + targetHeight <= scrollHeight - offsetBottom) ? false : 'bottom'
    }

    var initializing = this.affixed == null
    var colliderTop = initializing ? scrollTop : position.top
    var colliderHeight = initializing ? targetHeight : height

    if (offsetTop != null && scrollTop <= offsetTop) return 'top'
    if (offsetBottom != null && (colliderTop + colliderHeight >= scrollHeight - offsetBottom)) return 'bottom'

    return false
  }

  Affix.prototype.getPinnedOffset = function () {
    if (this.pinnedOffset) return this.pinnedOffset
    this.$element.removeClass(Affix.RESET).addClass('affix')
    var scrollTop = this.$target.scrollTop()
    var position = this.$element.offset()
    return (this.pinnedOffset = position.top - scrollTop)
  }

  Affix.prototype.checkPositionWithEventLoop = function () {
    setTimeout($.proxy(this.checkPosition, this), 1)
  }

  Affix.prototype.checkPosition = function () {
    if (!this.$element.is(':visible')) return

    var height = this.$element.height()
    var offset = this.options.offset
    var offsetTop = offset.top
    var offsetBottom = offset.bottom
    var scrollHeight = Math.max($(document).height(), $(document.body).height())

    if (typeof offset != 'object') offsetBottom = offsetTop = offset
    if (typeof offsetTop == 'function') offsetTop = offset.top(this.$element)
    if (typeof offsetBottom == 'function') offsetBottom = offset.bottom(this.$element)

    var affix = this.getState(scrollHeight, height, offsetTop, offsetBottom)

    if (this.affixed != affix) {
      if (this.unpin != null) this.$element.css('top', '')

      var affixType = 'affix' + (affix ? '-' + affix : '')
      var e = $.Event(affixType + '.bs.affix')

      this.$element.trigger(e)

      if (e.isDefaultPrevented()) return

      this.affixed = affix
      this.unpin = affix == 'bottom' ? this.getPinnedOffset() : null

      this.$element
        .removeClass(Affix.RESET)
        .addClass(affixType)
        .trigger(affixType.replace('affix', 'affixed') + '.bs.affix')
    }

    if (affix == 'bottom') {
      this.$element.offset({
        top: scrollHeight - height - offsetBottom
      })
    }
  }


  // AFFIX PLUGIN DEFINITION
  // =======================

  function Plugin(option) {
    return this.each(function () {
      var $this = $(this)
      var data = $this.data('bs.affix')
      var options = typeof option == 'object' && option

      if (!data) $this.data('bs.affix', (data = new Affix(this, options)))
      if (typeof option == 'string') data[option]()
    })
  }

  var old = $.fn.affix

  $.fn.affix = Plugin
  $.fn.affix.Constructor = Affix


  // AFFIX NO CONFLICT
  // =================

  $.fn.affix.noConflict = function () {
    $.fn.affix = old
    return this
  }


  // AFFIX DATA-API
  // ==============

  $(window).on('load', function () {
    $('[data-spy="affix"]').each(function () {
      var $spy = $(this)
      var data = $spy.data()

      data.offset = data.offset || {}

      if (data.offsetBottom != null) data.offset.bottom = data.offsetBottom
      if (data.offsetTop != null) data.offset.top = data.offsetTop

      Plugin.call($spy, data)
    })
  })

}(jQuery);

/*!

 handlebars v4.0.5

Copyright (C) 2011-2015 by Yehuda Katz

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.

@license
*/
(function webpackUniversalModuleDefinition(root, factory) {
  if (typeof exports === 'object' && typeof module === 'object')
    module.exports = factory();
  else if (typeof define === 'function' && define.amd)
    define([], factory);
  else if (typeof exports === 'object')
    exports["Handlebars"] = factory();
  else
    root["Handlebars"] = factory();
})(this, function () {
  return /******/ (function (modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};

/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {

/******/ 		// Check if module is in cache
/******/ 		if (installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;

/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
        /******/
      };

/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);

/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;

/******/ 		// Return the exports of the module
/******/ 		return module.exports;
      /******/
    }


/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;

/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;

/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";

/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
    /******/
  })
/************************************************************************/
/******/([
/* 0 */
/***/ function (module, exports, __webpack_require__) {

      'use strict';

      var _interopRequireDefault = __webpack_require__(1)['default'];

      exports.__esModule = true;

      var _handlebarsRuntime = __webpack_require__(2);

      var _handlebarsRuntime2 = _interopRequireDefault(_handlebarsRuntime);

      // Compiler imports

      var _handlebarsCompilerAst = __webpack_require__(21);

      var _handlebarsCompilerAst2 = _interopRequireDefault(_handlebarsCompilerAst);

      var _handlebarsCompilerBase = __webpack_require__(22);

      var _handlebarsCompilerCompiler = __webpack_require__(27);

      var _handlebarsCompilerJavascriptCompiler = __webpack_require__(28);

      var _handlebarsCompilerJavascriptCompiler2 = _interopRequireDefault(_handlebarsCompilerJavascriptCompiler);

      var _handlebarsCompilerVisitor = __webpack_require__(25);

      var _handlebarsCompilerVisitor2 = _interopRequireDefault(_handlebarsCompilerVisitor);

      var _handlebarsNoConflict = __webpack_require__(20);

      var _handlebarsNoConflict2 = _interopRequireDefault(_handlebarsNoConflict);

      var _create = _handlebarsRuntime2['default'].create;
      function create() {
        var hb = _create();

        hb.compile = function (input, options) {
          return _handlebarsCompilerCompiler.compile(input, options, hb);
        };
        hb.precompile = function (input, options) {
          return _handlebarsCompilerCompiler.precompile(input, options, hb);
        };

        hb.AST = _handlebarsCompilerAst2['default'];
        hb.Compiler = _handlebarsCompilerCompiler.Compiler;
        hb.JavaScriptCompiler = _handlebarsCompilerJavascriptCompiler2['default'];
        hb.Parser = _handlebarsCompilerBase.parser;
        hb.parse = _handlebarsCompilerBase.parse;

        return hb;
      }

      var inst = create();
      inst.create = create;

      _handlebarsNoConflict2['default'](inst);

      inst.Visitor = _handlebarsCompilerVisitor2['default'];

      inst['default'] = inst;

      exports['default'] = inst;
      module.exports = exports['default'];

      /***/
    },
/* 1 */
/***/ function (module, exports) {

      "use strict";

      exports["default"] = function (obj) {
        return obj && obj.__esModule ? obj : {
          "default": obj
        };
      };

      exports.__esModule = true;

      /***/
    },
/* 2 */
/***/ function (module, exports, __webpack_require__) {

      'use strict';

      var _interopRequireWildcard = __webpack_require__(3)['default'];

      var _interopRequireDefault = __webpack_require__(1)['default'];

      exports.__esModule = true;

      var _handlebarsBase = __webpack_require__(4);

      var base = _interopRequireWildcard(_handlebarsBase);

      // Each of these augment the Handlebars object. No need to setup here.
      // (This is done to easily share code between commonjs and browse envs)

      var _handlebarsSafeString = __webpack_require__(18);

      var _handlebarsSafeString2 = _interopRequireDefault(_handlebarsSafeString);

      var _handlebarsException = __webpack_require__(6);

      var _handlebarsException2 = _interopRequireDefault(_handlebarsException);

      var _handlebarsUtils = __webpack_require__(5);

      var Utils = _interopRequireWildcard(_handlebarsUtils);

      var _handlebarsRuntime = __webpack_require__(19);

      var runtime = _interopRequireWildcard(_handlebarsRuntime);

      var _handlebarsNoConflict = __webpack_require__(20);

      var _handlebarsNoConflict2 = _interopRequireDefault(_handlebarsNoConflict);

      // For compatibility and usage outside of module systems, make the Handlebars object a namespace
      function create() {
        var hb = new base.HandlebarsEnvironment();

        Utils.extend(hb, base);
        hb.SafeString = _handlebarsSafeString2['default'];
        hb.Exception = _handlebarsException2['default'];
        hb.Utils = Utils;
        hb.escapeExpression = Utils.escapeExpression;

        hb.VM = runtime;
        hb.template = function (spec) {
          return runtime.template(spec, hb);
        };

        return hb;
      }

      var inst = create();
      inst.create = create;

      _handlebarsNoConflict2['default'](inst);

      inst['default'] = inst;

      exports['default'] = inst;
      module.exports = exports['default'];

      /***/
    },
/* 3 */
/***/ function (module, exports) {

      "use strict";

      exports["default"] = function (obj) {
        if (obj && obj.__esModule) {
          return obj;
        } else {
          var newObj = {};

          if (obj != null) {
            for (var key in obj) {
              if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];
            }
          }

          newObj["default"] = obj;
          return newObj;
        }
      };

      exports.__esModule = true;

      /***/
    },
/* 4 */
/***/ function (module, exports, __webpack_require__) {

      'use strict';

      var _interopRequireDefault = __webpack_require__(1)['default'];

      exports.__esModule = true;
      exports.HandlebarsEnvironment = HandlebarsEnvironment;

      var _utils = __webpack_require__(5);

      var _exception = __webpack_require__(6);

      var _exception2 = _interopRequireDefault(_exception);

      var _helpers = __webpack_require__(7);

      var _decorators = __webpack_require__(15);

      var _logger = __webpack_require__(17);

      var _logger2 = _interopRequireDefault(_logger);

      var VERSION = '4.0.5';
      exports.VERSION = VERSION;
      var COMPILER_REVISION = 7;

      exports.COMPILER_REVISION = COMPILER_REVISION;
      var REVISION_CHANGES = {
        1: '<= 1.0.rc.2', // 1.0.rc.2 is actually rev2 but doesn't report it
        2: '== 1.0.0-rc.3',
        3: '== 1.0.0-rc.4',
        4: '== 1.x.x',
        5: '== 2.0.0-alpha.x',
        6: '>= 2.0.0-beta.1',
        7: '>= 4.0.0'
      };

      exports.REVISION_CHANGES = REVISION_CHANGES;
      var objectType = '[object Object]';

      function HandlebarsEnvironment(helpers, partials, decorators) {
        this.helpers = helpers || {};
        this.partials = partials || {};
        this.decorators = decorators || {};

        _helpers.registerDefaultHelpers(this);
        _decorators.registerDefaultDecorators(this);
      }

      HandlebarsEnvironment.prototype = {
        constructor: HandlebarsEnvironment,

        logger: _logger2['default'],
        log: _logger2['default'].log,

        registerHelper: function registerHelper(name, fn) {
          if (_utils.toString.call(name) === objectType) {
            if (fn) {
              throw new _exception2['default']('Arg not supported with multiple helpers');
            }
            _utils.extend(this.helpers, name);
          } else {
            this.helpers[name] = fn;
          }
        },
        unregisterHelper: function unregisterHelper(name) {
          delete this.helpers[name];
        },

        registerPartial: function registerPartial(name, partial) {
          if (_utils.toString.call(name) === objectType) {
            _utils.extend(this.partials, name);
          } else {
            if (typeof partial === 'undefined') {
              throw new _exception2['default']('Attempting to register a partial called "' + name + '" as undefined');
            }
            this.partials[name] = partial;
          }
        },
        unregisterPartial: function unregisterPartial(name) {
          delete this.partials[name];
        },

        registerDecorator: function registerDecorator(name, fn) {
          if (_utils.toString.call(name) === objectType) {
            if (fn) {
              throw new _exception2['default']('Arg not supported with multiple decorators');
            }
            _utils.extend(this.decorators, name);
          } else {
            this.decorators[name] = fn;
          }
        },
        unregisterDecorator: function unregisterDecorator(name) {
          delete this.decorators[name];
        }
      };

      var log = _logger2['default'].log;

      exports.log = log;
      exports.createFrame = _utils.createFrame;
      exports.logger = _logger2['default'];

      /***/
    },
/* 5 */
/***/ function (module, exports) {

      'use strict';

      exports.__esModule = true;
      exports.extend = extend;
      exports.indexOf = indexOf;
      exports.escapeExpression = escapeExpression;
      exports.isEmpty = isEmpty;
      exports.createFrame = createFrame;
      exports.blockParams = blockParams;
      exports.appendContextPath = appendContextPath;
      var escape = {
        '&': '&amp;',
        '<': '&lt;',
        '>': '&gt;',
        '"': '&quot;',
        "'": '&#x27;',
        '`': '&#x60;',
        '=': '&#x3D;'
      };

      var badChars = /[&<>"'`=]/g,
        possible = /[&<>"'`=]/;

      function escapeChar(chr) {
        return escape[chr];
      }

      function extend(obj /* , ...source */) {
        for (var i = 1; i < arguments.length; i++) {
          for (var key in arguments[i]) {
            if (Object.prototype.hasOwnProperty.call(arguments[i], key)) {
              obj[key] = arguments[i][key];
            }
          }
        }

        return obj;
      }

      var toString = Object.prototype.toString;

      exports.toString = toString;
      // Sourced from lodash
      // https://github.com/bestiejs/lodash/blob/master/LICENSE.txt
      /* eslint-disable func-style */
      var isFunction = function isFunction(value) {
        return typeof value === 'function';
      };
      // fallback for older versions of Chrome and Safari
      /* istanbul ignore next */
      if (isFunction(/x/)) {
        exports.isFunction = isFunction = function (value) {
          return typeof value === 'function' && toString.call(value) === '[object Function]';
        };
      }
      exports.isFunction = isFunction;

      /* eslint-enable func-style */

      /* istanbul ignore next */
      var isArray = Array.isArray || function (value) {
        return value && typeof value === 'object' ? toString.call(value) === '[object Array]' : false;
      };

      exports.isArray = isArray;
      // Older IE versions do not directly support indexOf so we must implement our own, sadly.

      function indexOf(array, value) {
        for (var i = 0, len = array.length; i < len; i++) {
          if (array[i] === value) {
            return i;
          }
        }
        return -1;
      }

      function escapeExpression(string) {
        if (typeof string !== 'string') {
          // don't escape SafeStrings, since they're already safe
          if (string && string.toHTML) {
            return string.toHTML();
          } else if (string == null) {
            return '';
          } else if (!string) {
            return string + '';
          }

          // Force a string conversion as this will be done by the append regardless and
          // the regex test will do this transparently behind the scenes, causing issues if
          // an object's to string has escaped characters in it.
          string = '' + string;
        }

        if (!possible.test(string)) {
          return string;
        }
        return string.replace(badChars, escapeChar);
      }

      function isEmpty(value) {
        if (!value && value !== 0) {
          return true;
        } else if (isArray(value) && value.length === 0) {
          return true;
        } else {
          return false;
        }
      }

      function createFrame(object) {
        var frame = extend({}, object);
        frame._parent = object;
        return frame;
      }

      function blockParams(params, ids) {
        params.path = ids;
        return params;
      }

      function appendContextPath(contextPath, id) {
        return (contextPath ? contextPath + '.' : '') + id;
      }

      /***/
    },
/* 6 */
/***/ function (module, exports) {

      'use strict';

      exports.__esModule = true;

      var errorProps = ['description', 'fileName', 'lineNumber', 'message', 'name', 'number', 'stack'];

      function Exception(message, node) {
        var loc = node && node.loc,
          line = undefined,
          column = undefined;
        if (loc) {
          line = loc.start.line;
          column = loc.start.column;

          message += ' - ' + line + ':' + column;
        }

        var tmp = Error.prototype.constructor.call(this, message);

        // Unfortunately errors are not enumerable in Chrome (at least), so `for prop in tmp` doesn't work.
        for (var idx = 0; idx < errorProps.length; idx++) {
          this[errorProps[idx]] = tmp[errorProps[idx]];
        }

        /* istanbul ignore else */
        if (Error.captureStackTrace) {
          Error.captureStackTrace(this, Exception);
        }

        if (loc) {
          this.lineNumber = line;
          this.column = column;
        }
      }

      Exception.prototype = new Error();

      exports['default'] = Exception;
      module.exports = exports['default'];

      /***/
    },
/* 7 */
/***/ function (module, exports, __webpack_require__) {

      'use strict';

      var _interopRequireDefault = __webpack_require__(1)['default'];

      exports.__esModule = true;
      exports.registerDefaultHelpers = registerDefaultHelpers;

      var _helpersBlockHelperMissing = __webpack_require__(8);

      var _helpersBlockHelperMissing2 = _interopRequireDefault(_helpersBlockHelperMissing);

      var _helpersEach = __webpack_require__(9);

      var _helpersEach2 = _interopRequireDefault(_helpersEach);

      var _helpersHelperMissing = __webpack_require__(10);

      var _helpersHelperMissing2 = _interopRequireDefault(_helpersHelperMissing);

      var _helpersIf = __webpack_require__(11);

      var _helpersIf2 = _interopRequireDefault(_helpersIf);

      var _helpersLog = __webpack_require__(12);

      var _helpersLog2 = _interopRequireDefault(_helpersLog);

      var _helpersLookup = __webpack_require__(13);

      var _helpersLookup2 = _interopRequireDefault(_helpersLookup);

      var _helpersWith = __webpack_require__(14);

      var _helpersWith2 = _interopRequireDefault(_helpersWith);

      function registerDefaultHelpers(instance) {
        _helpersBlockHelperMissing2['default'](instance);
        _helpersEach2['default'](instance);
        _helpersHelperMissing2['default'](instance);
        _helpersIf2['default'](instance);
        _helpersLog2['default'](instance);
        _helpersLookup2['default'](instance);
        _helpersWith2['default'](instance);
      }

      /***/
    },
/* 8 */
/***/ function (module, exports, __webpack_require__) {

      'use strict';

      exports.__esModule = true;

      var _utils = __webpack_require__(5);

      exports['default'] = function (instance) {
        instance.registerHelper('blockHelperMissing', function (context, options) {
          var inverse = options.inverse,
            fn = options.fn;

          if (context === true) {
            return fn(this);
          } else if (context === false || context == null) {
            return inverse(this);
          } else if (_utils.isArray(context)) {
            if (context.length > 0) {
              if (options.ids) {
                options.ids = [options.name];
              }

              return instance.helpers.each(context, options);
            } else {
              return inverse(this);
            }
          } else {
            if (options.data && options.ids) {
              var data = _utils.createFrame(options.data);
              data.contextPath = _utils.appendContextPath(options.data.contextPath, options.name);
              options = { data: data };
            }

            return fn(context, options);
          }
        });
      };

      module.exports = exports['default'];

      /***/
    },
/* 9 */
/***/ function (module, exports, __webpack_require__) {

      'use strict';

      var _interopRequireDefault = __webpack_require__(1)['default'];

      exports.__esModule = true;

      var _utils = __webpack_require__(5);

      var _exception = __webpack_require__(6);

      var _exception2 = _interopRequireDefault(_exception);

      exports['default'] = function (instance) {
        instance.registerHelper('each', function (context, options) {
          if (!options) {
            throw new _exception2['default']('Must pass iterator to #each');
          }

          var fn = options.fn,
            inverse = options.inverse,
            i = 0,
            ret = '',
            data = undefined,
            contextPath = undefined;

          if (options.data && options.ids) {
            contextPath = _utils.appendContextPath(options.data.contextPath, options.ids[0]) + '.';
          }

          if (_utils.isFunction(context)) {
            context = context.call(this);
          }

          if (options.data) {
            data = _utils.createFrame(options.data);
          }

          function execIteration(field, index, last) {
            if (data) {
              data.key = field;
              data.index = index;
              data.first = index === 0;
              data.last = !!last;

              if (contextPath) {
                data.contextPath = contextPath + field;
              }
            }

            ret = ret + fn(context[field], {
              data: data,
              blockParams: _utils.blockParams([context[field], field], [contextPath + field, null])
            });
          }

          if (context && typeof context === 'object') {
            if (_utils.isArray(context)) {
              for (var j = context.length; i < j; i++) {
                if (i in context) {
                  execIteration(i, i, i === context.length - 1);
                }
              }
            } else {
              var priorKey = undefined;

              for (var key in context) {
                if (context.hasOwnProperty(key)) {
                  // We're running the iterations one step out of sync so we can detect
                  // the last iteration without have to scan the object twice and create
                  // an itermediate keys array.
                  if (priorKey !== undefined) {
                    execIteration(priorKey, i - 1);
                  }
                  priorKey = key;
                  i++;
                }
              }
              if (priorKey !== undefined) {
                execIteration(priorKey, i - 1, true);
              }
            }
          }

          if (i === 0) {
            ret = inverse(this);
          }

          return ret;
        });
      };

      module.exports = exports['default'];

      /***/
    },
/* 10 */
/***/ function (module, exports, __webpack_require__) {

      'use strict';

      var _interopRequireDefault = __webpack_require__(1)['default'];

      exports.__esModule = true;

      var _exception = __webpack_require__(6);

      var _exception2 = _interopRequireDefault(_exception);

      exports['default'] = function (instance) {
        instance.registerHelper('helperMissing', function () /* [args, ]options */ {
          if (arguments.length === 1) {
            // A missing field in a {{foo}} construct.
            return undefined;
          } else {
            // Someone is actually trying to call something, blow up.
            throw new _exception2['default']('Missing helper: "' + arguments[arguments.length - 1].name + '"');
          }
        });
      };

      module.exports = exports['default'];

      /***/
    },
/* 11 */
/***/ function (module, exports, __webpack_require__) {

      'use strict';

      exports.__esModule = true;

      var _utils = __webpack_require__(5);

      exports['default'] = function (instance) {
        instance.registerHelper('if', function (conditional, options) {
          if (_utils.isFunction(conditional)) {
            conditional = conditional.call(this);
          }

          // Default behavior is to render the positive path if the value is truthy and not empty.
          // The `includeZero` option may be set to treat the condtional as purely not empty based on the
          // behavior of isEmpty. Effectively this determines if 0 is handled by the positive path or negative.
          if (!options.hash.includeZero && !conditional || _utils.isEmpty(conditional)) {
            return options.inverse(this);
          } else {
            return options.fn(this);
          }
        });

        instance.registerHelper('unless', function (conditional, options) {
          return instance.helpers['if'].call(this, conditional, { fn: options.inverse, inverse: options.fn, hash: options.hash });
        });
      };

      module.exports = exports['default'];

      /***/
    },
/* 12 */
/***/ function (module, exports) {

      'use strict';

      exports.__esModule = true;

      exports['default'] = function (instance) {
        instance.registerHelper('log', function () /* message, options */ {
          var args = [undefined],
            options = arguments[arguments.length - 1];
          for (var i = 0; i < arguments.length - 1; i++) {
            args.push(arguments[i]);
          }

          var level = 1;
          if (options.hash.level != null) {
            level = options.hash.level;
          } else if (options.data && options.data.level != null) {
            level = options.data.level;
          }
          args[0] = level;

          instance.log.apply(instance, args);
        });
      };

      module.exports = exports['default'];

      /***/
    },
/* 13 */
/***/ function (module, exports) {

      'use strict';

      exports.__esModule = true;

      exports['default'] = function (instance) {
        instance.registerHelper('lookup', function (obj, field) {
          return obj && obj[field];
        });
      };

      module.exports = exports['default'];

      /***/
    },
/* 14 */
/***/ function (module, exports, __webpack_require__) {

      'use strict';

      exports.__esModule = true;

      var _utils = __webpack_require__(5);

      exports['default'] = function (instance) {
        instance.registerHelper('with', function (context, options) {
          if (_utils.isFunction(context)) {
            context = context.call(this);
          }

          var fn = options.fn;

          if (!_utils.isEmpty(context)) {
            var data = options.data;
            if (options.data && options.ids) {
              data = _utils.createFrame(options.data);
              data.contextPath = _utils.appendContextPath(options.data.contextPath, options.ids[0]);
            }

            return fn(context, {
              data: data,
              blockParams: _utils.blockParams([context], [data && data.contextPath])
            });
          } else {
            return options.inverse(this);
          }
        });
      };

      module.exports = exports['default'];

      /***/
    },
/* 15 */
/***/ function (module, exports, __webpack_require__) {

      'use strict';

      var _interopRequireDefault = __webpack_require__(1)['default'];

      exports.__esModule = true;
      exports.registerDefaultDecorators = registerDefaultDecorators;

      var _decoratorsInline = __webpack_require__(16);

      var _decoratorsInline2 = _interopRequireDefault(_decoratorsInline);

      function registerDefaultDecorators(instance) {
        _decoratorsInline2['default'](instance);
      }

      /***/
    },
/* 16 */
/***/ function (module, exports, __webpack_require__) {

      'use strict';

      exports.__esModule = true;

      var _utils = __webpack_require__(5);

      exports['default'] = function (instance) {
        instance.registerDecorator('inline', function (fn, props, container, options) {
          var ret = fn;
          if (!props.partials) {
            props.partials = {};
            ret = function (context, options) {
              // Create a new partials stack frame prior to exec.
              var original = container.partials;
              container.partials = _utils.extend({}, original, props.partials);
              var ret = fn(context, options);
              container.partials = original;
              return ret;
            };
          }

          props.partials[options.args[0]] = options.fn;

          return ret;
        });
      };

      module.exports = exports['default'];

      /***/
    },
/* 17 */
/***/ function (module, exports, __webpack_require__) {

      'use strict';

      exports.__esModule = true;

      var _utils = __webpack_require__(5);

      var logger = {
        methodMap: ['debug', 'info', 'warn', 'error'],
        level: 'info',

        // Maps a given level value to the `methodMap` indexes above.
        lookupLevel: function lookupLevel(level) {
          if (typeof level === 'string') {
            var levelMap = _utils.indexOf(logger.methodMap, level.toLowerCase());
            if (levelMap >= 0) {
              level = levelMap;
            } else {
              level = parseInt(level, 10);
            }
          }

          return level;
        },

        // Can be overridden in the host environment
        log: function log(level) {
          level = logger.lookupLevel(level);

          if (typeof console !== 'undefined' && logger.lookupLevel(logger.level) <= level) {
            var method = logger.methodMap[level];
            if (!console[method]) {
              // eslint-disable-line no-console
              method = 'log';
            }

            for (var _len = arguments.length, message = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
              message[_key - 1] = arguments[_key];
            }

            console[method].apply(console, message); // eslint-disable-line no-console
          }
        }
      };

      exports['default'] = logger;
      module.exports = exports['default'];

      /***/
    },
/* 18 */
/***/ function (module, exports) {

      // Build out our basic SafeString type
      'use strict';

      exports.__esModule = true;
      function SafeString(string) {
        this.string = string;
      }

      SafeString.prototype.toString = SafeString.prototype.toHTML = function () {
        return '' + this.string;
      };

      exports['default'] = SafeString;
      module.exports = exports['default'];

      /***/
    },
/* 19 */
/***/ function (module, exports, __webpack_require__) {

      'use strict';

      var _interopRequireWildcard = __webpack_require__(3)['default'];

      var _interopRequireDefault = __webpack_require__(1)['default'];

      exports.__esModule = true;
      exports.checkRevision = checkRevision;
      exports.template = template;
      exports.wrapProgram = wrapProgram;
      exports.resolvePartial = resolvePartial;
      exports.invokePartial = invokePartial;
      exports.noop = noop;

      var _utils = __webpack_require__(5);

      var Utils = _interopRequireWildcard(_utils);

      var _exception = __webpack_require__(6);

      var _exception2 = _interopRequireDefault(_exception);

      var _base = __webpack_require__(4);

      function checkRevision(compilerInfo) {
        var compilerRevision = compilerInfo && compilerInfo[0] || 1,
          currentRevision = _base.COMPILER_REVISION;

        if (compilerRevision !== currentRevision) {
          if (compilerRevision < currentRevision) {
            var runtimeVersions = _base.REVISION_CHANGES[currentRevision],
              compilerVersions = _base.REVISION_CHANGES[compilerRevision];
            throw new _exception2['default']('Template was precompiled with an older version of Handlebars than the current runtime. ' + 'Please update your precompiler to a newer version (' + runtimeVersions + ') or downgrade your runtime to an older version (' + compilerVersions + ').');
          } else {
            // Use the embedded version info since the runtime doesn't know about this revision yet
            throw new _exception2['default']('Template was precompiled with a newer version of Handlebars than the current runtime. ' + 'Please update your runtime to a newer version (' + compilerInfo[1] + ').');
          }
        }
      }

      function template(templateSpec, env) {
        /* istanbul ignore next */
        if (!env) {
          throw new _exception2['default']('No environment passed to template');
        }
        if (!templateSpec || !templateSpec.main) {
          throw new _exception2['default']('Unknown template object: ' + typeof templateSpec);
        }

        templateSpec.main.decorator = templateSpec.main_d;

        // Note: Using env.VM references rather than local var references throughout this section to allow
        // for external users to override these as psuedo-supported APIs.
        env.VM.checkRevision(templateSpec.compiler);

        function invokePartialWrapper(partial, context, options) {
          if (options.hash) {
            context = Utils.extend({}, context, options.hash);
            if (options.ids) {
              options.ids[0] = true;
            }
          }

          partial = env.VM.resolvePartial.call(this, partial, context, options);
          var result = env.VM.invokePartial.call(this, partial, context, options);

          if (result == null && env.compile) {
            options.partials[options.name] = env.compile(partial, templateSpec.compilerOptions, env);
            result = options.partials[options.name](context, options);
          }
          if (result != null) {
            if (options.indent) {
              var lines = result.split('\n');
              for (var i = 0, l = lines.length; i < l; i++) {
                if (!lines[i] && i + 1 === l) {
                  break;
                }

                lines[i] = options.indent + lines[i];
              }
              result = lines.join('\n');
            }
            return result;
          } else {
            throw new _exception2['default']('The partial ' + options.name + ' could not be compiled when running in runtime-only mode');
          }
        }

        // Just add water
        var container = {
          strict: function strict(obj, name) {
            if (!(name in obj)) {
              throw new _exception2['default']('"' + name + '" not defined in ' + obj);
            }
            return obj[name];
          },
          lookup: function lookup(depths, name) {
            var len = depths.length;
            for (var i = 0; i < len; i++) {
              if (depths[i] && depths[i][name] != null) {
                return depths[i][name];
              }
            }
          },
          lambda: function lambda(current, context) {
            return typeof current === 'function' ? current.call(context) : current;
          },

          escapeExpression: Utils.escapeExpression,
          invokePartial: invokePartialWrapper,

          fn: function fn(i) {
            var ret = templateSpec[i];
            ret.decorator = templateSpec[i + '_d'];
            return ret;
          },

          programs: [],
          program: function program(i, data, declaredBlockParams, blockParams, depths) {
            var programWrapper = this.programs[i],
              fn = this.fn(i);
            if (data || depths || blockParams || declaredBlockParams) {
              programWrapper = wrapProgram(this, i, fn, data, declaredBlockParams, blockParams, depths);
            } else if (!programWrapper) {
              programWrapper = this.programs[i] = wrapProgram(this, i, fn);
            }
            return programWrapper;
          },

          data: function data(value, depth) {
            while (value && depth--) {
              value = value._parent;
            }
            return value;
          },
          merge: function merge(param, common) {
            var obj = param || common;

            if (param && common && param !== common) {
              obj = Utils.extend({}, common, param);
            }

            return obj;
          },

          noop: env.VM.noop,
          compilerInfo: templateSpec.compiler
        };

        function ret(context) {
          var options = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];

          var data = options.data;

          ret._setup(options);
          if (!options.partial && templateSpec.useData) {
            data = initData(context, data);
          }
          var depths = undefined,
            blockParams = templateSpec.useBlockParams ? [] : undefined;
          if (templateSpec.useDepths) {
            if (options.depths) {
              depths = context !== options.depths[0] ? [context].concat(options.depths) : options.depths;
            } else {
              depths = [context];
            }
          }

          function main(context /*, options*/) {
            return '' + templateSpec.main(container, context, container.helpers, container.partials, data, blockParams, depths);
          }
          main = executeDecorators(templateSpec.main, main, container, options.depths || [], data, blockParams);
          return main(context, options);
        }
        ret.isTop = true;

        ret._setup = function (options) {
          if (!options.partial) {
            container.helpers = container.merge(options.helpers, env.helpers);

            if (templateSpec.usePartial) {
              container.partials = container.merge(options.partials, env.partials);
            }
            if (templateSpec.usePartial || templateSpec.useDecorators) {
              container.decorators = container.merge(options.decorators, env.decorators);
            }
          } else {
            container.helpers = options.helpers;
            container.partials = options.partials;
            container.decorators = options.decorators;
          }
        };

        ret._child = function (i, data, blockParams, depths) {
          if (templateSpec.useBlockParams && !blockParams) {
            throw new _exception2['default']('must pass block params');
          }
          if (templateSpec.useDepths && !depths) {
            throw new _exception2['default']('must pass parent depths');
          }

          return wrapProgram(container, i, templateSpec[i], data, 0, blockParams, depths);
        };
        return ret;
      }

      function wrapProgram(container, i, fn, data, declaredBlockParams, blockParams, depths) {
        function prog(context) {
          var options = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];

          var currentDepths = depths;
          if (depths && context !== depths[0]) {
            currentDepths = [context].concat(depths);
          }

          return fn(container, context, container.helpers, container.partials, options.data || data, blockParams && [options.blockParams].concat(blockParams), currentDepths);
        }

        prog = executeDecorators(fn, prog, container, depths, data, blockParams);

        prog.program = i;
        prog.depth = depths ? depths.length : 0;
        prog.blockParams = declaredBlockParams || 0;
        return prog;
      }

      function resolvePartial(partial, context, options) {
        if (!partial) {
          if (options.name === '@partial-block') {
            partial = options.data['partial-block'];
          } else {
            partial = options.partials[options.name];
          }
        } else if (!partial.call && !options.name) {
          // This is a dynamic partial that returned a string
          options.name = partial;
          partial = options.partials[partial];
        }
        return partial;
      }

      function invokePartial(partial, context, options) {
        options.partial = true;
        if (options.ids) {
          options.data.contextPath = options.ids[0] || options.data.contextPath;
        }

        var partialBlock = undefined;
        if (options.fn && options.fn !== noop) {
          options.data = _base.createFrame(options.data);
          partialBlock = options.data['partial-block'] = options.fn;

          if (partialBlock.partials) {
            options.partials = Utils.extend({}, options.partials, partialBlock.partials);
          }
        }

        if (partial === undefined && partialBlock) {
          partial = partialBlock;
        }

        if (partial === undefined) {
          throw new _exception2['default']('The partial ' + options.name + ' could not be found');
        } else if (partial instanceof Function) {
          return partial(context, options);
        }
      }

      function noop() {
        return '';
      }

      function initData(context, data) {
        if (!data || !('root' in data)) {
          data = data ? _base.createFrame(data) : {};
          data.root = context;
        }
        return data;
      }

      function executeDecorators(fn, prog, container, depths, data, blockParams) {
        if (fn.decorator) {
          var props = {};
          prog = fn.decorator(prog, props, container, depths && depths[0], data, blockParams, depths);
          Utils.extend(prog, props);
        }
        return prog;
      }

      /***/
    },
/* 20 */
/***/ function (module, exports) {

	/* WEBPACK VAR INJECTION */(function (global) {/* global window */
        'use strict';

        exports.__esModule = true;

        exports['default'] = function (Handlebars) {
          /* istanbul ignore next */
          var root = typeof global !== 'undefined' ? global : window,
            $Handlebars = root.Handlebars;
          /* istanbul ignore next */
          Handlebars.noConflict = function () {
            if (root.Handlebars === Handlebars) {
              root.Handlebars = $Handlebars;
            }
            return Handlebars;
          };
        };

        module.exports = exports['default'];
        /* WEBPACK VAR INJECTION */
      }.call(exports, (function () { return this; }())))

      /***/
    },
/* 21 */
/***/ function (module, exports) {

      'use strict';

      exports.__esModule = true;
      var AST = {
        // Public API used to evaluate derived attributes regarding AST nodes
        helpers: {
          // a mustache is definitely a helper if:
          // * it is an eligible helper, and
          // * it has at least one parameter or hash segment
          helperExpression: function helperExpression(node) {
            return node.type === 'SubExpression' || (node.type === 'MustacheStatement' || node.type === 'BlockStatement') && !!(node.params && node.params.length || node.hash);
          },

          scopedId: function scopedId(path) {
            return (/^\.|this\b/.test(path.original)
            );
          },

          // an ID is simple if it only has one part, and that part is not
          // `..` or `this`.
          simpleId: function simpleId(path) {
            return path.parts.length === 1 && !AST.helpers.scopedId(path) && !path.depth;
          }
        }
      };

      // Must be exported as an object rather than the root of the module as the jison lexer
      // must modify the object to operate properly.
      exports['default'] = AST;
      module.exports = exports['default'];

      /***/
    },
/* 22 */
/***/ function (module, exports, __webpack_require__) {

      'use strict';

      var _interopRequireDefault = __webpack_require__(1)['default'];

      var _interopRequireWildcard = __webpack_require__(3)['default'];

      exports.__esModule = true;
      exports.parse = parse;

      var _parser = __webpack_require__(23);

      var _parser2 = _interopRequireDefault(_parser);

      var _whitespaceControl = __webpack_require__(24);

      var _whitespaceControl2 = _interopRequireDefault(_whitespaceControl);

      var _helpers = __webpack_require__(26);

      var Helpers = _interopRequireWildcard(_helpers);

      var _utils = __webpack_require__(5);

      exports.parser = _parser2['default'];

      var yy = {};
      _utils.extend(yy, Helpers);

      function parse(input, options) {
        // Just return if an already-compiled AST was passed in.
        if (input.type === 'Program') {
          return input;
        }

        _parser2['default'].yy = yy;

        // Altering the shared object here, but this is ok as parser is a sync operation
        yy.locInfo = function (locInfo) {
          return new yy.SourceLocation(options && options.srcName, locInfo);
        };

        var strip = new _whitespaceControl2['default'](options);
        return strip.accept(_parser2['default'].parse(input));
      }

      /***/
    },
/* 23 */
/***/ function (module, exports) {

      /* istanbul ignore next */
      /* Jison generated parser */
      "use strict";

      var handlebars = (function () {
        var parser = {
          trace: function trace() { },
          yy: {},
          symbols_: { "error": 2, "root": 3, "program": 4, "EOF": 5, "program_repetition0": 6, "statement": 7, "mustache": 8, "block": 9, "rawBlock": 10, "partial": 11, "partialBlock": 12, "content": 13, "COMMENT": 14, "CONTENT": 15, "openRawBlock": 16, "rawBlock_repetition_plus0": 17, "END_RAW_BLOCK": 18, "OPEN_RAW_BLOCK": 19, "helperName": 20, "openRawBlock_repetition0": 21, "openRawBlock_option0": 22, "CLOSE_RAW_BLOCK": 23, "openBlock": 24, "block_option0": 25, "closeBlock": 26, "openInverse": 27, "block_option1": 28, "OPEN_BLOCK": 29, "openBlock_repetition0": 30, "openBlock_option0": 31, "openBlock_option1": 32, "CLOSE": 33, "OPEN_INVERSE": 34, "openInverse_repetition0": 35, "openInverse_option0": 36, "openInverse_option1": 37, "openInverseChain": 38, "OPEN_INVERSE_CHAIN": 39, "openInverseChain_repetition0": 40, "openInverseChain_option0": 41, "openInverseChain_option1": 42, "inverseAndProgram": 43, "INVERSE": 44, "inverseChain": 45, "inverseChain_option0": 46, "OPEN_ENDBLOCK": 47, "OPEN": 48, "mustache_repetition0": 49, "mustache_option0": 50, "OPEN_UNESCAPED": 51, "mustache_repetition1": 52, "mustache_option1": 53, "CLOSE_UNESCAPED": 54, "OPEN_PARTIAL": 55, "partialName": 56, "partial_repetition0": 57, "partial_option0": 58, "openPartialBlock": 59, "OPEN_PARTIAL_BLOCK": 60, "openPartialBlock_repetition0": 61, "openPartialBlock_option0": 62, "param": 63, "sexpr": 64, "OPEN_SEXPR": 65, "sexpr_repetition0": 66, "sexpr_option0": 67, "CLOSE_SEXPR": 68, "hash": 69, "hash_repetition_plus0": 70, "hashSegment": 71, "ID": 72, "EQUALS": 73, "blockParams": 74, "OPEN_BLOCK_PARAMS": 75, "blockParams_repetition_plus0": 76, "CLOSE_BLOCK_PARAMS": 77, "path": 78, "dataName": 79, "STRING": 80, "NUMBER": 81, "BOOLEAN": 82, "UNDEFINED": 83, "NULL": 84, "DATA": 85, "pathSegments": 86, "SEP": 87, "$accept": 0, "$end": 1 },
          terminals_: { 2: "error", 5: "EOF", 14: "COMMENT", 15: "CONTENT", 18: "END_RAW_BLOCK", 19: "OPEN_RAW_BLOCK", 23: "CLOSE_RAW_BLOCK", 29: "OPEN_BLOCK", 33: "CLOSE", 34: "OPEN_INVERSE", 39: "OPEN_INVERSE_CHAIN", 44: "INVERSE", 47: "OPEN_ENDBLOCK", 48: "OPEN", 51: "OPEN_UNESCAPED", 54: "CLOSE_UNESCAPED", 55: "OPEN_PARTIAL", 60: "OPEN_PARTIAL_BLOCK", 65: "OPEN_SEXPR", 68: "CLOSE_SEXPR", 72: "ID", 73: "EQUALS", 75: "OPEN_BLOCK_PARAMS", 77: "CLOSE_BLOCK_PARAMS", 80: "STRING", 81: "NUMBER", 82: "BOOLEAN", 83: "UNDEFINED", 84: "NULL", 85: "DATA", 87: "SEP" },
          productions_: [0, [3, 2], [4, 1], [7, 1], [7, 1], [7, 1], [7, 1], [7, 1], [7, 1], [7, 1], [13, 1], [10, 3], [16, 5], [9, 4], [9, 4], [24, 6], [27, 6], [38, 6], [43, 2], [45, 3], [45, 1], [26, 3], [8, 5], [8, 5], [11, 5], [12, 3], [59, 5], [63, 1], [63, 1], [64, 5], [69, 1], [71, 3], [74, 3], [20, 1], [20, 1], [20, 1], [20, 1], [20, 1], [20, 1], [20, 1], [56, 1], [56, 1], [79, 2], [78, 1], [86, 3], [86, 1], [6, 0], [6, 2], [17, 1], [17, 2], [21, 0], [21, 2], [22, 0], [22, 1], [25, 0], [25, 1], [28, 0], [28, 1], [30, 0], [30, 2], [31, 0], [31, 1], [32, 0], [32, 1], [35, 0], [35, 2], [36, 0], [36, 1], [37, 0], [37, 1], [40, 0], [40, 2], [41, 0], [41, 1], [42, 0], [42, 1], [46, 0], [46, 1], [49, 0], [49, 2], [50, 0], [50, 1], [52, 0], [52, 2], [53, 0], [53, 1], [57, 0], [57, 2], [58, 0], [58, 1], [61, 0], [61, 2], [62, 0], [62, 1], [66, 0], [66, 2], [67, 0], [67, 1], [70, 1], [70, 2], [76, 1], [76, 2]],
          performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$
	        /**/) {

            var $0 = $$.length - 1;
            switch (yystate) {
              case 1:
                return $$[$0 - 1];
                break;
              case 2:
                this.$ = yy.prepareProgram($$[$0]);
                break;
              case 3:
                this.$ = $$[$0];
                break;
              case 4:
                this.$ = $$[$0];
                break;
              case 5:
                this.$ = $$[$0];
                break;
              case 6:
                this.$ = $$[$0];
                break;
              case 7:
                this.$ = $$[$0];
                break;
              case 8:
                this.$ = $$[$0];
                break;
              case 9:
                this.$ = {
                  type: 'CommentStatement',
                  value: yy.stripComment($$[$0]),
                  strip: yy.stripFlags($$[$0], $$[$0]),
                  loc: yy.locInfo(this._$)
                };

                break;
              case 10:
                this.$ = {
                  type: 'ContentStatement',
                  original: $$[$0],
                  value: $$[$0],
                  loc: yy.locInfo(this._$)
                };

                break;
              case 11:
                this.$ = yy.prepareRawBlock($$[$0 - 2], $$[$0 - 1], $$[$0], this._$);
                break;
              case 12:
                this.$ = { path: $$[$0 - 3], params: $$[$0 - 2], hash: $$[$0 - 1] };
                break;
              case 13:
                this.$ = yy.prepareBlock($$[$0 - 3], $$[$0 - 2], $$[$0 - 1], $$[$0], false, this._$);
                break;
              case 14:
                this.$ = yy.prepareBlock($$[$0 - 3], $$[$0 - 2], $$[$0 - 1], $$[$0], true, this._$);
                break;
              case 15:
                this.$ = { open: $$[$0 - 5], path: $$[$0 - 4], params: $$[$0 - 3], hash: $$[$0 - 2], blockParams: $$[$0 - 1], strip: yy.stripFlags($$[$0 - 5], $$[$0]) };
                break;
              case 16:
                this.$ = { path: $$[$0 - 4], params: $$[$0 - 3], hash: $$[$0 - 2], blockParams: $$[$0 - 1], strip: yy.stripFlags($$[$0 - 5], $$[$0]) };
                break;
              case 17:
                this.$ = { path: $$[$0 - 4], params: $$[$0 - 3], hash: $$[$0 - 2], blockParams: $$[$0 - 1], strip: yy.stripFlags($$[$0 - 5], $$[$0]) };
                break;
              case 18:
                this.$ = { strip: yy.stripFlags($$[$0 - 1], $$[$0 - 1]), program: $$[$0] };
                break;
              case 19:
                var inverse = yy.prepareBlock($$[$0 - 2], $$[$0 - 1], $$[$0], $$[$0], false, this._$),
                  program = yy.prepareProgram([inverse], $$[$0 - 1].loc);
                program.chained = true;

                this.$ = { strip: $$[$0 - 2].strip, program: program, chain: true };

                break;
              case 20:
                this.$ = $$[$0];
                break;
              case 21:
                this.$ = { path: $$[$0 - 1], strip: yy.stripFlags($$[$0 - 2], $$[$0]) };
                break;
              case 22:
                this.$ = yy.prepareMustache($$[$0 - 3], $$[$0 - 2], $$[$0 - 1], $$[$0 - 4], yy.stripFlags($$[$0 - 4], $$[$0]), this._$);
                break;
              case 23:
                this.$ = yy.prepareMustache($$[$0 - 3], $$[$0 - 2], $$[$0 - 1], $$[$0 - 4], yy.stripFlags($$[$0 - 4], $$[$0]), this._$);
                break;
              case 24:
                this.$ = {
                  type: 'PartialStatement',
                  name: $$[$0 - 3],
                  params: $$[$0 - 2],
                  hash: $$[$0 - 1],
                  indent: '',
                  strip: yy.stripFlags($$[$0 - 4], $$[$0]),
                  loc: yy.locInfo(this._$)
                };

                break;
              case 25:
                this.$ = yy.preparePartialBlock($$[$0 - 2], $$[$0 - 1], $$[$0], this._$);
                break;
              case 26:
                this.$ = { path: $$[$0 - 3], params: $$[$0 - 2], hash: $$[$0 - 1], strip: yy.stripFlags($$[$0 - 4], $$[$0]) };
                break;
              case 27:
                this.$ = $$[$0];
                break;
              case 28:
                this.$ = $$[$0];
                break;
              case 29:
                this.$ = {
                  type: 'SubExpression',
                  path: $$[$0 - 3],
                  params: $$[$0 - 2],
                  hash: $$[$0 - 1],
                  loc: yy.locInfo(this._$)
                };

                break;
              case 30:
                this.$ = { type: 'Hash', pairs: $$[$0], loc: yy.locInfo(this._$) };
                break;
              case 31:
                this.$ = { type: 'HashPair', key: yy.id($$[$0 - 2]), value: $$[$0], loc: yy.locInfo(this._$) };
                break;
              case 32:
                this.$ = yy.id($$[$0 - 1]);
                break;
              case 33:
                this.$ = $$[$0];
                break;
              case 34:
                this.$ = $$[$0];
                break;
              case 35:
                this.$ = { type: 'StringLiteral', value: $$[$0], original: $$[$0], loc: yy.locInfo(this._$) };
                break;
              case 36:
                this.$ = { type: 'NumberLiteral', value: Number($$[$0]), original: Number($$[$0]), loc: yy.locInfo(this._$) };
                break;
              case 37:
                this.$ = { type: 'BooleanLiteral', value: $$[$0] === 'true', original: $$[$0] === 'true', loc: yy.locInfo(this._$) };
                break;
              case 38:
                this.$ = { type: 'UndefinedLiteral', original: undefined, value: undefined, loc: yy.locInfo(this._$) };
                break;
              case 39:
                this.$ = { type: 'NullLiteral', original: null, value: null, loc: yy.locInfo(this._$) };
                break;
              case 40:
                this.$ = $$[$0];
                break;
              case 41:
                this.$ = $$[$0];
                break;
              case 42:
                this.$ = yy.preparePath(true, $$[$0], this._$);
                break;
              case 43:
                this.$ = yy.preparePath(false, $$[$0], this._$);
                break;
              case 44:
                $$[$0 - 2].push({ part: yy.id($$[$0]), original: $$[$0], separator: $$[$0 - 1] }); this.$ = $$[$0 - 2];
                break;
              case 45:
                this.$ = [{ part: yy.id($$[$0]), original: $$[$0] }];
                break;
              case 46:
                this.$ = [];
                break;
              case 47:
                $$[$0 - 1].push($$[$0]);
                break;
              case 48:
                this.$ = [$$[$0]];
                break;
              case 49:
                $$[$0 - 1].push($$[$0]);
                break;
              case 50:
                this.$ = [];
                break;
              case 51:
                $$[$0 - 1].push($$[$0]);
                break;
              case 58:
                this.$ = [];
                break;
              case 59:
                $$[$0 - 1].push($$[$0]);
                break;
              case 64:
                this.$ = [];
                break;
              case 65:
                $$[$0 - 1].push($$[$0]);
                break;
              case 70:
                this.$ = [];
                break;
              case 71:
                $$[$0 - 1].push($$[$0]);
                break;
              case 78:
                this.$ = [];
                break;
              case 79:
                $$[$0 - 1].push($$[$0]);
                break;
              case 82:
                this.$ = [];
                break;
              case 83:
                $$[$0 - 1].push($$[$0]);
                break;
              case 86:
                this.$ = [];
                break;
              case 87:
                $$[$0 - 1].push($$[$0]);
                break;
              case 90:
                this.$ = [];
                break;
              case 91:
                $$[$0 - 1].push($$[$0]);
                break;
              case 94:
                this.$ = [];
                break;
              case 95:
                $$[$0 - 1].push($$[$0]);
                break;
              case 98:
                this.$ = [$$[$0]];
                break;
              case 99:
                $$[$0 - 1].push($$[$0]);
                break;
              case 100:
                this.$ = [$$[$0]];
                break;
              case 101:
                $$[$0 - 1].push($$[$0]);
                break;
            }
          },
          table: [{ 3: 1, 4: 2, 5: [2, 46], 6: 3, 14: [2, 46], 15: [2, 46], 19: [2, 46], 29: [2, 46], 34: [2, 46], 48: [2, 46], 51: [2, 46], 55: [2, 46], 60: [2, 46] }, { 1: [3] }, { 5: [1, 4] }, { 5: [2, 2], 7: 5, 8: 6, 9: 7, 10: 8, 11: 9, 12: 10, 13: 11, 14: [1, 12], 15: [1, 20], 16: 17, 19: [1, 23], 24: 15, 27: 16, 29: [1, 21], 34: [1, 22], 39: [2, 2], 44: [2, 2], 47: [2, 2], 48: [1, 13], 51: [1, 14], 55: [1, 18], 59: 19, 60: [1, 24] }, { 1: [2, 1] }, { 5: [2, 47], 14: [2, 47], 15: [2, 47], 19: [2, 47], 29: [2, 47], 34: [2, 47], 39: [2, 47], 44: [2, 47], 47: [2, 47], 48: [2, 47], 51: [2, 47], 55: [2, 47], 60: [2, 47] }, { 5: [2, 3], 14: [2, 3], 15: [2, 3], 19: [2, 3], 29: [2, 3], 34: [2, 3], 39: [2, 3], 44: [2, 3], 47: [2, 3], 48: [2, 3], 51: [2, 3], 55: [2, 3], 60: [2, 3] }, { 5: [2, 4], 14: [2, 4], 15: [2, 4], 19: [2, 4], 29: [2, 4], 34: [2, 4], 39: [2, 4], 44: [2, 4], 47: [2, 4], 48: [2, 4], 51: [2, 4], 55: [2, 4], 60: [2, 4] }, { 5: [2, 5], 14: [2, 5], 15: [2, 5], 19: [2, 5], 29: [2, 5], 34: [2, 5], 39: [2, 5], 44: [2, 5], 47: [2, 5], 48: [2, 5], 51: [2, 5], 55: [2, 5], 60: [2, 5] }, { 5: [2, 6], 14: [2, 6], 15: [2, 6], 19: [2, 6], 29: [2, 6], 34: [2, 6], 39: [2, 6], 44: [2, 6], 47: [2, 6], 48: [2, 6], 51: [2, 6], 55: [2, 6], 60: [2, 6] }, { 5: [2, 7], 14: [2, 7], 15: [2, 7], 19: [2, 7], 29: [2, 7], 34: [2, 7], 39: [2, 7], 44: [2, 7], 47: [2, 7], 48: [2, 7], 51: [2, 7], 55: [2, 7], 60: [2, 7] }, { 5: [2, 8], 14: [2, 8], 15: [2, 8], 19: [2, 8], 29: [2, 8], 34: [2, 8], 39: [2, 8], 44: [2, 8], 47: [2, 8], 48: [2, 8], 51: [2, 8], 55: [2, 8], 60: [2, 8] }, { 5: [2, 9], 14: [2, 9], 15: [2, 9], 19: [2, 9], 29: [2, 9], 34: [2, 9], 39: [2, 9], 44: [2, 9], 47: [2, 9], 48: [2, 9], 51: [2, 9], 55: [2, 9], 60: [2, 9] }, { 20: 25, 72: [1, 35], 78: 26, 79: 27, 80: [1, 28], 81: [1, 29], 82: [1, 30], 83: [1, 31], 84: [1, 32], 85: [1, 34], 86: 33 }, { 20: 36, 72: [1, 35], 78: 26, 79: 27, 80: [1, 28], 81: [1, 29], 82: [1, 30], 83: [1, 31], 84: [1, 32], 85: [1, 34], 86: 33 }, { 4: 37, 6: 3, 14: [2, 46], 15: [2, 46], 19: [2, 46], 29: [2, 46], 34: [2, 46], 39: [2, 46], 44: [2, 46], 47: [2, 46], 48: [2, 46], 51: [2, 46], 55: [2, 46], 60: [2, 46] }, { 4: 38, 6: 3, 14: [2, 46], 15: [2, 46], 19: [2, 46], 29: [2, 46], 34: [2, 46], 44: [2, 46], 47: [2, 46], 48: [2, 46], 51: [2, 46], 55: [2, 46], 60: [2, 46] }, { 13: 40, 15: [1, 20], 17: 39 }, { 20: 42, 56: 41, 64: 43, 65: [1, 44], 72: [1, 35], 78: 26, 79: 27, 80: [1, 28], 81: [1, 29], 82: [1, 30], 83: [1, 31], 84: [1, 32], 85: [1, 34], 86: 33 }, { 4: 45, 6: 3, 14: [2, 46], 15: [2, 46], 19: [2, 46], 29: [2, 46], 34: [2, 46], 47: [2, 46], 48: [2, 46], 51: [2, 46], 55: [2, 46], 60: [2, 46] }, { 5: [2, 10], 14: [2, 10], 15: [2, 10], 18: [2, 10], 19: [2, 10], 29: [2, 10], 34: [2, 10], 39: [2, 10], 44: [2, 10], 47: [2, 10], 48: [2, 10], 51: [2, 10], 55: [2, 10], 60: [2, 10] }, { 20: 46, 72: [1, 35], 78: 26, 79: 27, 80: [1, 28], 81: [1, 29], 82: [1, 30], 83: [1, 31], 84: [1, 32], 85: [1, 34], 86: 33 }, { 20: 47, 72: [1, 35], 78: 26, 79: 27, 80: [1, 28], 81: [1, 29], 82: [1, 30], 83: [1, 31], 84: [1, 32], 85: [1, 34], 86: 33 }, { 20: 48, 72: [1, 35], 78: 26, 79: 27, 80: [1, 28], 81: [1, 29], 82: [1, 30], 83: [1, 31], 84: [1, 32], 85: [1, 34], 86: 33 }, { 20: 42, 56: 49, 64: 43, 65: [1, 44], 72: [1, 35], 78: 26, 79: 27, 80: [1, 28], 81: [1, 29], 82: [1, 30], 83: [1, 31], 84: [1, 32], 85: [1, 34], 86: 33 }, { 33: [2, 78], 49: 50, 65: [2, 78], 72: [2, 78], 80: [2, 78], 81: [2, 78], 82: [2, 78], 83: [2, 78], 84: [2, 78], 85: [2, 78] }, { 23: [2, 33], 33: [2, 33], 54: [2, 33], 65: [2, 33], 68: [2, 33], 72: [2, 33], 75: [2, 33], 80: [2, 33], 81: [2, 33], 82: [2, 33], 83: [2, 33], 84: [2, 33], 85: [2, 33] }, { 23: [2, 34], 33: [2, 34], 54: [2, 34], 65: [2, 34], 68: [2, 34], 72: [2, 34], 75: [2, 34], 80: [2, 34], 81: [2, 34], 82: [2, 34], 83: [2, 34], 84: [2, 34], 85: [2, 34] }, { 23: [2, 35], 33: [2, 35], 54: [2, 35], 65: [2, 35], 68: [2, 35], 72: [2, 35], 75: [2, 35], 80: [2, 35], 81: [2, 35], 82: [2, 35], 83: [2, 35], 84: [2, 35], 85: [2, 35] }, { 23: [2, 36], 33: [2, 36], 54: [2, 36], 65: [2, 36], 68: [2, 36], 72: [2, 36], 75: [2, 36], 80: [2, 36], 81: [2, 36], 82: [2, 36], 83: [2, 36], 84: [2, 36], 85: [2, 36] }, { 23: [2, 37], 33: [2, 37], 54: [2, 37], 65: [2, 37], 68: [2, 37], 72: [2, 37], 75: [2, 37], 80: [2, 37], 81: [2, 37], 82: [2, 37], 83: [2, 37], 84: [2, 37], 85: [2, 37] }, { 23: [2, 38], 33: [2, 38], 54: [2, 38], 65: [2, 38], 68: [2, 38], 72: [2, 38], 75: [2, 38], 80: [2, 38], 81: [2, 38], 82: [2, 38], 83: [2, 38], 84: [2, 38], 85: [2, 38] }, { 23: [2, 39], 33: [2, 39], 54: [2, 39], 65: [2, 39], 68: [2, 39], 72: [2, 39], 75: [2, 39], 80: [2, 39], 81: [2, 39], 82: [2, 39], 83: [2, 39], 84: [2, 39], 85: [2, 39] }, { 23: [2, 43], 33: [2, 43], 54: [2, 43], 65: [2, 43], 68: [2, 43], 72: [2, 43], 75: [2, 43], 80: [2, 43], 81: [2, 43], 82: [2, 43], 83: [2, 43], 84: [2, 43], 85: [2, 43], 87: [1, 51] }, { 72: [1, 35], 86: 52 }, { 23: [2, 45], 33: [2, 45], 54: [2, 45], 65: [2, 45], 68: [2, 45], 72: [2, 45], 75: [2, 45], 80: [2, 45], 81: [2, 45], 82: [2, 45], 83: [2, 45], 84: [2, 45], 85: [2, 45], 87: [2, 45] }, { 52: 53, 54: [2, 82], 65: [2, 82], 72: [2, 82], 80: [2, 82], 81: [2, 82], 82: [2, 82], 83: [2, 82], 84: [2, 82], 85: [2, 82] }, { 25: 54, 38: 56, 39: [1, 58], 43: 57, 44: [1, 59], 45: 55, 47: [2, 54] }, { 28: 60, 43: 61, 44: [1, 59], 47: [2, 56] }, { 13: 63, 15: [1, 20], 18: [1, 62] }, { 15: [2, 48], 18: [2, 48] }, { 33: [2, 86], 57: 64, 65: [2, 86], 72: [2, 86], 80: [2, 86], 81: [2, 86], 82: [2, 86], 83: [2, 86], 84: [2, 86], 85: [2, 86] }, { 33: [2, 40], 65: [2, 40], 72: [2, 40], 80: [2, 40], 81: [2, 40], 82: [2, 40], 83: [2, 40], 84: [2, 40], 85: [2, 40] }, { 33: [2, 41], 65: [2, 41], 72: [2, 41], 80: [2, 41], 81: [2, 41], 82: [2, 41], 83: [2, 41], 84: [2, 41], 85: [2, 41] }, { 20: 65, 72: [1, 35], 78: 26, 79: 27, 80: [1, 28], 81: [1, 29], 82: [1, 30], 83: [1, 31], 84: [1, 32], 85: [1, 34], 86: 33 }, { 26: 66, 47: [1, 67] }, { 30: 68, 33: [2, 58], 65: [2, 58], 72: [2, 58], 75: [2, 58], 80: [2, 58], 81: [2, 58], 82: [2, 58], 83: [2, 58], 84: [2, 58], 85: [2, 58] }, { 33: [2, 64], 35: 69, 65: [2, 64], 72: [2, 64], 75: [2, 64], 80: [2, 64], 81: [2, 64], 82: [2, 64], 83: [2, 64], 84: [2, 64], 85: [2, 64] }, { 21: 70, 23: [2, 50], 65: [2, 50], 72: [2, 50], 80: [2, 50], 81: [2, 50], 82: [2, 50], 83: [2, 50], 84: [2, 50], 85: [2, 50] }, { 33: [2, 90], 61: 71, 65: [2, 90], 72: [2, 90], 80: [2, 90], 81: [2, 90], 82: [2, 90], 83: [2, 90], 84: [2, 90], 85: [2, 90] }, { 20: 75, 33: [2, 80], 50: 72, 63: 73, 64: 76, 65: [1, 44], 69: 74, 70: 77, 71: 78, 72: [1, 79], 78: 26, 79: 27, 80: [1, 28], 81: [1, 29], 82: [1, 30], 83: [1, 31], 84: [1, 32], 85: [1, 34], 86: 33 }, { 72: [1, 80] }, { 23: [2, 42], 33: [2, 42], 54: [2, 42], 65: [2, 42], 68: [2, 42], 72: [2, 42], 75: [2, 42], 80: [2, 42], 81: [2, 42], 82: [2, 42], 83: [2, 42], 84: [2, 42], 85: [2, 42], 87: [1, 51] }, { 20: 75, 53: 81, 54: [2, 84], 63: 82, 64: 76, 65: [1, 44], 69: 83, 70: 77, 71: 78, 72: [1, 79], 78: 26, 79: 27, 80: [1, 28], 81: [1, 29], 82: [1, 30], 83: [1, 31], 84: [1, 32], 85: [1, 34], 86: 33 }, { 26: 84, 47: [1, 67] }, { 47: [2, 55] }, { 4: 85, 6: 3, 14: [2, 46], 15: [2, 46], 19: [2, 46], 29: [2, 46], 34: [2, 46], 39: [2, 46], 44: [2, 46], 47: [2, 46], 48: [2, 46], 51: [2, 46], 55: [2, 46], 60: [2, 46] }, { 47: [2, 20] }, { 20: 86, 72: [1, 35], 78: 26, 79: 27, 80: [1, 28], 81: [1, 29], 82: [1, 30], 83: [1, 31], 84: [1, 32], 85: [1, 34], 86: 33 }, { 4: 87, 6: 3, 14: [2, 46], 15: [2, 46], 19: [2, 46], 29: [2, 46], 34: [2, 46], 47: [2, 46], 48: [2, 46], 51: [2, 46], 55: [2, 46], 60: [2, 46] }, { 26: 88, 47: [1, 67] }, { 47: [2, 57] }, { 5: [2, 11], 14: [2, 11], 15: [2, 11], 19: [2, 11], 29: [2, 11], 34: [2, 11], 39: [2, 11], 44: [2, 11], 47: [2, 11], 48: [2, 11], 51: [2, 11], 55: [2, 11], 60: [2, 11] }, { 15: [2, 49], 18: [2, 49] }, { 20: 75, 33: [2, 88], 58: 89, 63: 90, 64: 76, 65: [1, 44], 69: 91, 70: 77, 71: 78, 72: [1, 79], 78: 26, 79: 27, 80: [1, 28], 81: [1, 29], 82: [1, 30], 83: [1, 31], 84: [1, 32], 85: [1, 34], 86: 33 }, { 65: [2, 94], 66: 92, 68: [2, 94], 72: [2, 94], 80: [2, 94], 81: [2, 94], 82: [2, 94], 83: [2, 94], 84: [2, 94], 85: [2, 94] }, { 5: [2, 25], 14: [2, 25], 15: [2, 25], 19: [2, 25], 29: [2, 25], 34: [2, 25], 39: [2, 25], 44: [2, 25], 47: [2, 25], 48: [2, 25], 51: [2, 25], 55: [2, 25], 60: [2, 25] }, { 20: 93, 72: [1, 35], 78: 26, 79: 27, 80: [1, 28], 81: [1, 29], 82: [1, 30], 83: [1, 31], 84: [1, 32], 85: [1, 34], 86: 33 }, { 20: 75, 31: 94, 33: [2, 60], 63: 95, 64: 76, 65: [1, 44], 69: 96, 70: 77, 71: 78, 72: [1, 79], 75: [2, 60], 78: 26, 79: 27, 80: [1, 28], 81: [1, 29], 82: [1, 30], 83: [1, 31], 84: [1, 32], 85: [1, 34], 86: 33 }, { 20: 75, 33: [2, 66], 36: 97, 63: 98, 64: 76, 65: [1, 44], 69: 99, 70: 77, 71: 78, 72: [1, 79], 75: [2, 66], 78: 26, 79: 27, 80: [1, 28], 81: [1, 29], 82: [1, 30], 83: [1, 31], 84: [1, 32], 85: [1, 34], 86: 33 }, { 20: 75, 22: 100, 23: [2, 52], 63: 101, 64: 76, 65: [1, 44], 69: 102, 70: 77, 71: 78, 72: [1, 79], 78: 26, 79: 27, 80: [1, 28], 81: [1, 29], 82: [1, 30], 83: [1, 31], 84: [1, 32], 85: [1, 34], 86: 33 }, { 20: 75, 33: [2, 92], 62: 103, 63: 104, 64: 76, 65: [1, 44], 69: 105, 70: 77, 71: 78, 72: [1, 79], 78: 26, 79: 27, 80: [1, 28], 81: [1, 29], 82: [1, 30], 83: [1, 31], 84: [1, 32], 85: [1, 34], 86: 33 }, { 33: [1, 106] }, { 33: [2, 79], 65: [2, 79], 72: [2, 79], 80: [2, 79], 81: [2, 79], 82: [2, 79], 83: [2, 79], 84: [2, 79], 85: [2, 79] }, { 33: [2, 81] }, { 23: [2, 27], 33: [2, 27], 54: [2, 27], 65: [2, 27], 68: [2, 27], 72: [2, 27], 75: [2, 27], 80: [2, 27], 81: [2, 27], 82: [2, 27], 83: [2, 27], 84: [2, 27], 85: [2, 27] }, { 23: [2, 28], 33: [2, 28], 54: [2, 28], 65: [2, 28], 68: [2, 28], 72: [2, 28], 75: [2, 28], 80: [2, 28], 81: [2, 28], 82: [2, 28], 83: [2, 28], 84: [2, 28], 85: [2, 28] }, { 23: [2, 30], 33: [2, 30], 54: [2, 30], 68: [2, 30], 71: 107, 72: [1, 108], 75: [2, 30] }, { 23: [2, 98], 33: [2, 98], 54: [2, 98], 68: [2, 98], 72: [2, 98], 75: [2, 98] }, { 23: [2, 45], 33: [2, 45], 54: [2, 45], 65: [2, 45], 68: [2, 45], 72: [2, 45], 73: [1, 109], 75: [2, 45], 80: [2, 45], 81: [2, 45], 82: [2, 45], 83: [2, 45], 84: [2, 45], 85: [2, 45], 87: [2, 45] }, { 23: [2, 44], 33: [2, 44], 54: [2, 44], 65: [2, 44], 68: [2, 44], 72: [2, 44], 75: [2, 44], 80: [2, 44], 81: [2, 44], 82: [2, 44], 83: [2, 44], 84: [2, 44], 85: [2, 44], 87: [2, 44] }, { 54: [1, 110] }, { 54: [2, 83], 65: [2, 83], 72: [2, 83], 80: [2, 83], 81: [2, 83], 82: [2, 83], 83: [2, 83], 84: [2, 83], 85: [2, 83] }, { 54: [2, 85] }, { 5: [2, 13], 14: [2, 13], 15: [2, 13], 19: [2, 13], 29: [2, 13], 34: [2, 13], 39: [2, 13], 44: [2, 13], 47: [2, 13], 48: [2, 13], 51: [2, 13], 55: [2, 13], 60: [2, 13] }, { 38: 56, 39: [1, 58], 43: 57, 44: [1, 59], 45: 112, 46: 111, 47: [2, 76] }, { 33: [2, 70], 40: 113, 65: [2, 70], 72: [2, 70], 75: [2, 70], 80: [2, 70], 81: [2, 70], 82: [2, 70], 83: [2, 70], 84: [2, 70], 85: [2, 70] }, { 47: [2, 18] }, { 5: [2, 14], 14: [2, 14], 15: [2, 14], 19: [2, 14], 29: [2, 14], 34: [2, 14], 39: [2, 14], 44: [2, 14], 47: [2, 14], 48: [2, 14], 51: [2, 14], 55: [2, 14], 60: [2, 14] }, { 33: [1, 114] }, { 33: [2, 87], 65: [2, 87], 72: [2, 87], 80: [2, 87], 81: [2, 87], 82: [2, 87], 83: [2, 87], 84: [2, 87], 85: [2, 87] }, { 33: [2, 89] }, { 20: 75, 63: 116, 64: 76, 65: [1, 44], 67: 115, 68: [2, 96], 69: 117, 70: 77, 71: 78, 72: [1, 79], 78: 26, 79: 27, 80: [1, 28], 81: [1, 29], 82: [1, 30], 83: [1, 31], 84: [1, 32], 85: [1, 34], 86: 33 }, { 33: [1, 118] }, { 32: 119, 33: [2, 62], 74: 120, 75: [1, 121] }, { 33: [2, 59], 65: [2, 59], 72: [2, 59], 75: [2, 59], 80: [2, 59], 81: [2, 59], 82: [2, 59], 83: [2, 59], 84: [2, 59], 85: [2, 59] }, { 33: [2, 61], 75: [2, 61] }, { 33: [2, 68], 37: 122, 74: 123, 75: [1, 121] }, { 33: [2, 65], 65: [2, 65], 72: [2, 65], 75: [2, 65], 80: [2, 65], 81: [2, 65], 82: [2, 65], 83: [2, 65], 84: [2, 65], 85: [2, 65] }, { 33: [2, 67], 75: [2, 67] }, { 23: [1, 124] }, { 23: [2, 51], 65: [2, 51], 72: [2, 51], 80: [2, 51], 81: [2, 51], 82: [2, 51], 83: [2, 51], 84: [2, 51], 85: [2, 51] }, { 23: [2, 53] }, { 33: [1, 125] }, { 33: [2, 91], 65: [2, 91], 72: [2, 91], 80: [2, 91], 81: [2, 91], 82: [2, 91], 83: [2, 91], 84: [2, 91], 85: [2, 91] }, { 33: [2, 93] }, { 5: [2, 22], 14: [2, 22], 15: [2, 22], 19: [2, 22], 29: [2, 22], 34: [2, 22], 39: [2, 22], 44: [2, 22], 47: [2, 22], 48: [2, 22], 51: [2, 22], 55: [2, 22], 60: [2, 22] }, { 23: [2, 99], 33: [2, 99], 54: [2, 99], 68: [2, 99], 72: [2, 99], 75: [2, 99] }, { 73: [1, 109] }, { 20: 75, 63: 126, 64: 76, 65: [1, 44], 72: [1, 35], 78: 26, 79: 27, 80: [1, 28], 81: [1, 29], 82: [1, 30], 83: [1, 31], 84: [1, 32], 85: [1, 34], 86: 33 }, { 5: [2, 23], 14: [2, 23], 15: [2, 23], 19: [2, 23], 29: [2, 23], 34: [2, 23], 39: [2, 23], 44: [2, 23], 47: [2, 23], 48: [2, 23], 51: [2, 23], 55: [2, 23], 60: [2, 23] }, { 47: [2, 19] }, { 47: [2, 77] }, { 20: 75, 33: [2, 72], 41: 127, 63: 128, 64: 76, 65: [1, 44], 69: 129, 70: 77, 71: 78, 72: [1, 79], 75: [2, 72], 78: 26, 79: 27, 80: [1, 28], 81: [1, 29], 82: [1, 30], 83: [1, 31], 84: [1, 32], 85: [1, 34], 86: 33 }, { 5: [2, 24], 14: [2, 24], 15: [2, 24], 19: [2, 24], 29: [2, 24], 34: [2, 24], 39: [2, 24], 44: [2, 24], 47: [2, 24], 48: [2, 24], 51: [2, 24], 55: [2, 24], 60: [2, 24] }, { 68: [1, 130] }, { 65: [2, 95], 68: [2, 95], 72: [2, 95], 80: [2, 95], 81: [2, 95], 82: [2, 95], 83: [2, 95], 84: [2, 95], 85: [2, 95] }, { 68: [2, 97] }, { 5: [2, 21], 14: [2, 21], 15: [2, 21], 19: [2, 21], 29: [2, 21], 34: [2, 21], 39: [2, 21], 44: [2, 21], 47: [2, 21], 48: [2, 21], 51: [2, 21], 55: [2, 21], 60: [2, 21] }, { 33: [1, 131] }, { 33: [2, 63] }, { 72: [1, 133], 76: 132 }, { 33: [1, 134] }, { 33: [2, 69] }, { 15: [2, 12] }, { 14: [2, 26], 15: [2, 26], 19: [2, 26], 29: [2, 26], 34: [2, 26], 47: [2, 26], 48: [2, 26], 51: [2, 26], 55: [2, 26], 60: [2, 26] }, { 23: [2, 31], 33: [2, 31], 54: [2, 31], 68: [2, 31], 72: [2, 31], 75: [2, 31] }, { 33: [2, 74], 42: 135, 74: 136, 75: [1, 121] }, { 33: [2, 71], 65: [2, 71], 72: [2, 71], 75: [2, 71], 80: [2, 71], 81: [2, 71], 82: [2, 71], 83: [2, 71], 84: [2, 71], 85: [2, 71] }, { 33: [2, 73], 75: [2, 73] }, { 23: [2, 29], 33: [2, 29], 54: [2, 29], 65: [2, 29], 68: [2, 29], 72: [2, 29], 75: [2, 29], 80: [2, 29], 81: [2, 29], 82: [2, 29], 83: [2, 29], 84: [2, 29], 85: [2, 29] }, { 14: [2, 15], 15: [2, 15], 19: [2, 15], 29: [2, 15], 34: [2, 15], 39: [2, 15], 44: [2, 15], 47: [2, 15], 48: [2, 15], 51: [2, 15], 55: [2, 15], 60: [2, 15] }, { 72: [1, 138], 77: [1, 137] }, { 72: [2, 100], 77: [2, 100] }, { 14: [2, 16], 15: [2, 16], 19: [2, 16], 29: [2, 16], 34: [2, 16], 44: [2, 16], 47: [2, 16], 48: [2, 16], 51: [2, 16], 55: [2, 16], 60: [2, 16] }, { 33: [1, 139] }, { 33: [2, 75] }, { 33: [2, 32] }, { 72: [2, 101], 77: [2, 101] }, { 14: [2, 17], 15: [2, 17], 19: [2, 17], 29: [2, 17], 34: [2, 17], 39: [2, 17], 44: [2, 17], 47: [2, 17], 48: [2, 17], 51: [2, 17], 55: [2, 17], 60: [2, 17] }],
          defaultActions: { 4: [2, 1], 55: [2, 55], 57: [2, 20], 61: [2, 57], 74: [2, 81], 83: [2, 85], 87: [2, 18], 91: [2, 89], 102: [2, 53], 105: [2, 93], 111: [2, 19], 112: [2, 77], 117: [2, 97], 120: [2, 63], 123: [2, 69], 124: [2, 12], 136: [2, 75], 137: [2, 32] },
          parseError: function parseError(str, hash) {
            throw new Error(str);
          },
          parse: function parse(input) {
            var self = this,
              stack = [0],
              vstack = [null],
              lstack = [],
              table = this.table,
              yytext = "",
              yylineno = 0,
              yyleng = 0,
              recovering = 0,
              TERROR = 2,
              EOF = 1;
            this.lexer.setInput(input);
            this.lexer.yy = this.yy;
            this.yy.lexer = this.lexer;
            this.yy.parser = this;
            if (typeof this.lexer.yylloc == "undefined") this.lexer.yylloc = {};
            var yyloc = this.lexer.yylloc;
            lstack.push(yyloc);
            var ranges = this.lexer.options && this.lexer.options.ranges;
            if (typeof this.yy.parseError === "function") this.parseError = this.yy.parseError;
            function popStack(n) {
              stack.length = stack.length - 2 * n;
              vstack.length = vstack.length - n;
              lstack.length = lstack.length - n;
            }
            function lex() {
              var token;
              token = self.lexer.lex() || 1;
              if (typeof token !== "number") {
                token = self.symbols_[token] || token;
              }
              return token;
            }
            var symbol,
              preErrorSymbol,
              state,
              action,
              a,
              r,
              yyval = {},
              p,
              len,
              newState,
              expected;
            while (true) {
              state = stack[stack.length - 1];
              if (this.defaultActions[state]) {
                action = this.defaultActions[state];
              } else {
                if (symbol === null || typeof symbol == "undefined") {
                  symbol = lex();
                }
                action = table[state] && table[state][symbol];
              }
              if (typeof action === "undefined" || !action.length || !action[0]) {
                var errStr = "";
                if (!recovering) {
                  expected = [];
                  for (p in table[state]) if (this.terminals_[p] && p > 2) {
                    expected.push("'" + this.terminals_[p] + "'");
                  }
                  if (this.lexer.showPosition) {
                    errStr = "Parse error on line " + (yylineno + 1) + ":\n" + this.lexer.showPosition() + "\nExpecting " + expected.join(", ") + ", got '" + (this.terminals_[symbol] || symbol) + "'";
                  } else {
                    errStr = "Parse error on line " + (yylineno + 1) + ": Unexpected " + (symbol == 1 ? "end of input" : "'" + (this.terminals_[symbol] || symbol) + "'");
                  }
                  this.parseError(errStr, { text: this.lexer.match, token: this.terminals_[symbol] || symbol, line: this.lexer.yylineno, loc: yyloc, expected: expected });
                }
              }
              if (action[0] instanceof Array && action.length > 1) {
                throw new Error("Parse Error: multiple actions possible at state: " + state + ", token: " + symbol);
              }
              switch (action[0]) {
                case 1:
                  stack.push(symbol);
                  vstack.push(this.lexer.yytext);
                  lstack.push(this.lexer.yylloc);
                  stack.push(action[1]);
                  symbol = null;
                  if (!preErrorSymbol) {
                    yyleng = this.lexer.yyleng;
                    yytext = this.lexer.yytext;
                    yylineno = this.lexer.yylineno;
                    yyloc = this.lexer.yylloc;
                    if (recovering > 0) recovering--;
                  } else {
                    symbol = preErrorSymbol;
                    preErrorSymbol = null;
                  }
                  break;
                case 2:
                  len = this.productions_[action[1]][1];
                  yyval.$ = vstack[vstack.length - len];
                  yyval._$ = { first_line: lstack[lstack.length - (len || 1)].first_line, last_line: lstack[lstack.length - 1].last_line, first_column: lstack[lstack.length - (len || 1)].first_column, last_column: lstack[lstack.length - 1].last_column };
                  if (ranges) {
                    yyval._$.range = [lstack[lstack.length - (len || 1)].range[0], lstack[lstack.length - 1].range[1]];
                  }
                  r = this.performAction.call(yyval, yytext, yyleng, yylineno, this.yy, action[1], vstack, lstack);
                  if (typeof r !== "undefined") {
                    return r;
                  }
                  if (len) {
                    stack = stack.slice(0, -1 * len * 2);
                    vstack = vstack.slice(0, -1 * len);
                    lstack = lstack.slice(0, -1 * len);
                  }
                  stack.push(this.productions_[action[1]][0]);
                  vstack.push(yyval.$);
                  lstack.push(yyval._$);
                  newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
                  stack.push(newState);
                  break;
                case 3:
                  return true;
              }
            }
            return true;
          }
        };
        /* Jison generated lexer */
        var lexer = (function () {
          var lexer = {
            EOF: 1,
            parseError: function parseError(str, hash) {
              if (this.yy.parser) {
                this.yy.parser.parseError(str, hash);
              } else {
                throw new Error(str);
              }
            },
            setInput: function setInput(input) {
              this._input = input;
              this._more = this._less = this.done = false;
              this.yylineno = this.yyleng = 0;
              this.yytext = this.matched = this.match = '';
              this.conditionStack = ['INITIAL'];
              this.yylloc = { first_line: 1, first_column: 0, last_line: 1, last_column: 0 };
              if (this.options.ranges) this.yylloc.range = [0, 0];
              this.offset = 0;
              return this;
            },
            input: function input() {
              var ch = this._input[0];
              this.yytext += ch;
              this.yyleng++;
              this.offset++;
              this.match += ch;
              this.matched += ch;
              var lines = ch.match(/(?:\r\n?|\n).*/g);
              if (lines) {
                this.yylineno++;
                this.yylloc.last_line++;
              } else {
                this.yylloc.last_column++;
              }
              if (this.options.ranges) this.yylloc.range[1]++;

              this._input = this._input.slice(1);
              return ch;
            },
            unput: function unput(ch) {
              var len = ch.length;
              var lines = ch.split(/(?:\r\n?|\n)/g);

              this._input = ch + this._input;
              this.yytext = this.yytext.substr(0, this.yytext.length - len - 1);
              //this.yyleng -= len;
              this.offset -= len;
              var oldLines = this.match.split(/(?:\r\n?|\n)/g);
              this.match = this.match.substr(0, this.match.length - 1);
              this.matched = this.matched.substr(0, this.matched.length - 1);

              if (lines.length - 1) this.yylineno -= lines.length - 1;
              var r = this.yylloc.range;

              this.yylloc = {
                first_line: this.yylloc.first_line,
                last_line: this.yylineno + 1,
                first_column: this.yylloc.first_column,
                last_column: lines ? (lines.length === oldLines.length ? this.yylloc.first_column : 0) + oldLines[oldLines.length - lines.length].length - lines[0].length : this.yylloc.first_column - len
              };

              if (this.options.ranges) {
                this.yylloc.range = [r[0], r[0] + this.yyleng - len];
              }
              return this;
            },
            more: function more() {
              this._more = true;
              return this;
            },
            less: function less(n) {
              this.unput(this.match.slice(n));
            },
            pastInput: function pastInput() {
              var past = this.matched.substr(0, this.matched.length - this.match.length);
              return (past.length > 20 ? '...' : '') + past.substr(-20).replace(/\n/g, "");
            },
            upcomingInput: function upcomingInput() {
              var next = this.match;
              if (next.length < 20) {
                next += this._input.substr(0, 20 - next.length);
              }
              return (next.substr(0, 20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
            },
            showPosition: function showPosition() {
              var pre = this.pastInput();
              var c = new Array(pre.length + 1).join("-");
              return pre + this.upcomingInput() + "\n" + c + "^";
            },
            next: function next() {
              if (this.done) {
                return this.EOF;
              }
              if (!this._input) this.done = true;

              var token, match, tempMatch, index, col, lines;
              if (!this._more) {
                this.yytext = '';
                this.match = '';
              }
              var rules = this._currentRules();
              for (var i = 0; i < rules.length; i++) {
                tempMatch = this._input.match(this.rules[rules[i]]);
                if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                  match = tempMatch;
                  index = i;
                  if (!this.options.flex) break;
                }
              }
              if (match) {
                lines = match[0].match(/(?:\r\n?|\n).*/g);
                if (lines) this.yylineno += lines.length;
                this.yylloc = {
                  first_line: this.yylloc.last_line,
                  last_line: this.yylineno + 1,
                  first_column: this.yylloc.last_column,
                  last_column: lines ? lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length : this.yylloc.last_column + match[0].length
                };
                this.yytext += match[0];
                this.match += match[0];
                this.matches = match;
                this.yyleng = this.yytext.length;
                if (this.options.ranges) {
                  this.yylloc.range = [this.offset, this.offset += this.yyleng];
                }
                this._more = false;
                this._input = this._input.slice(match[0].length);
                this.matched += match[0];
                token = this.performAction.call(this, this.yy, this, rules[index], this.conditionStack[this.conditionStack.length - 1]);
                if (this.done && this._input) this.done = false;
                if (token) return token; else return;
              }
              if (this._input === "") {
                return this.EOF;
              } else {
                return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), { text: "", token: null, line: this.yylineno });
              }
            },
            lex: function lex() {
              var r = this.next();
              if (typeof r !== 'undefined') {
                return r;
              } else {
                return this.lex();
              }
            },
            begin: function begin(condition) {
              this.conditionStack.push(condition);
            },
            popState: function popState() {
              return this.conditionStack.pop();
            },
            _currentRules: function _currentRules() {
              return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
            },
            topState: function topState() {
              return this.conditionStack[this.conditionStack.length - 2];
            },
            pushState: function begin(condition) {
              this.begin(condition);
            }
          };
          lexer.options = {};
          lexer.performAction = function anonymous(yy, yy_, $avoiding_name_collisions, YY_START
	        /**/) {

            function strip(start, end) {
              return yy_.yytext = yy_.yytext.substr(start, yy_.yyleng - end);
            }

            var YYSTATE = YY_START;
            switch ($avoiding_name_collisions) {
              case 0:
                if (yy_.yytext.slice(-2) === "\\\\") {
                  strip(0, 1);
                  this.begin("mu");
                } else if (yy_.yytext.slice(-1) === "\\") {
                  strip(0, 1);
                  this.begin("emu");
                } else {
                  this.begin("mu");
                }
                if (yy_.yytext) return 15;

                break;
              case 1:
                return 15;
                break;
              case 2:
                this.popState();
                return 15;

                break;
              case 3:
                this.begin('raw'); return 15;
                break;
              case 4:
                this.popState();
                // Should be using `this.topState()` below, but it currently
                // returns the second top instead of the first top. Opened an
                // issue about it at https://github.com/zaach/jison/issues/291
                if (this.conditionStack[this.conditionStack.length - 1] === 'raw') {
                  return 15;
                } else {
                  yy_.yytext = yy_.yytext.substr(5, yy_.yyleng - 9);
                  return 'END_RAW_BLOCK';
                }

                break;
              case 5:
                return 15;
                break;
              case 6:
                this.popState();
                return 14;

                break;
              case 7:
                return 65;
                break;
              case 8:
                return 68;
                break;
              case 9:
                return 19;
                break;
              case 10:
                this.popState();
                this.begin('raw');
                return 23;

                break;
              case 11:
                return 55;
                break;
              case 12:
                return 60;
                break;
              case 13:
                return 29;
                break;
              case 14:
                return 47;
                break;
              case 15:
                this.popState(); return 44;
                break;
              case 16:
                this.popState(); return 44;
                break;
              case 17:
                return 34;
                break;
              case 18:
                return 39;
                break;
              case 19:
                return 51;
                break;
              case 20:
                return 48;
                break;
              case 21:
                this.unput(yy_.yytext);
                this.popState();
                this.begin('com');

                break;
              case 22:
                this.popState();
                return 14;

                break;
              case 23:
                return 48;
                break;
              case 24:
                return 73;
                break;
              case 25:
                return 72;
                break;
              case 26:
                return 72;
                break;
              case 27:
                return 87;
                break;
              case 28:
                // ignore whitespace
                break;
              case 29:
                this.popState(); return 54;
                break;
              case 30:
                this.popState(); return 33;
                break;
              case 31:
                yy_.yytext = strip(1, 2).replace(/\\"/g, '"'); return 80;
                break;
              case 32:
                yy_.yytext = strip(1, 2).replace(/\\'/g, "'"); return 80;
                break;
              case 33:
                return 85;
                break;
              case 34:
                return 82;
                break;
              case 35:
                return 82;
                break;
              case 36:
                return 83;
                break;
              case 37:
                return 84;
                break;
              case 38:
                return 81;
                break;
              case 39:
                return 75;
                break;
              case 40:
                return 77;
                break;
              case 41:
                return 72;
                break;
              case 42:
                yy_.yytext = yy_.yytext.replace(/\\([\\\]])/g, '$1'); return 72;
                break;
              case 43:
                return 'INVALID';
                break;
              case 44:
                return 5;
                break;
            }
          };
          lexer.rules = [/^(?:[^\x00]*?(?=(\{\{)))/, /^(?:[^\x00]+)/, /^(?:[^\x00]{2,}?(?=(\{\{|\\\{\{|\\\\\{\{|$)))/, /^(?:\{\{\{\{(?=[^/]))/, /^(?:\{\{\{\{\/[^\s!"#%-,\.\/;->@\[-\^`\{-~]+(?=[=}\s\/.])\}\}\}\})/, /^(?:[^\x00]*?(?=(\{\{\{\{)))/, /^(?:[\s\S]*?--(~)?\}\})/, /^(?:\()/, /^(?:\))/, /^(?:\{\{\{\{)/, /^(?:\}\}\}\})/, /^(?:\{\{(~)?>)/, /^(?:\{\{(~)?#>)/, /^(?:\{\{(~)?#\*?)/, /^(?:\{\{(~)?\/)/, /^(?:\{\{(~)?\^\s*(~)?\}\})/, /^(?:\{\{(~)?\s*else\s*(~)?\}\})/, /^(?:\{\{(~)?\^)/, /^(?:\{\{(~)?\s*else\b)/, /^(?:\{\{(~)?\{)/, /^(?:\{\{(~)?&)/, /^(?:\{\{(~)?!--)/, /^(?:\{\{(~)?![\s\S]*?\}\})/, /^(?:\{\{(~)?\*?)/, /^(?:=)/, /^(?:\.\.)/, /^(?:\.(?=([=~}\s\/.)|])))/, /^(?:[\/.])/, /^(?:\s+)/, /^(?:\}(~)?\}\})/, /^(?:(~)?\}\})/, /^(?:"(\\["]|[^"])*")/, /^(?:'(\\[']|[^'])*')/, /^(?:@)/, /^(?:true(?=([~}\s)])))/, /^(?:false(?=([~}\s)])))/, /^(?:undefined(?=([~}\s)])))/, /^(?:null(?=([~}\s)])))/, /^(?:-?[0-9]+(?:\.[0-9]+)?(?=([~}\s)])))/, /^(?:as\s+\|)/, /^(?:\|)/, /^(?:([^\s!"#%-,\.\/;->@\[-\^`\{-~]+(?=([=~}\s\/.)|]))))/, /^(?:\[(\\\]|[^\]])*\])/, /^(?:.)/, /^(?:$)/];
          lexer.conditions = { "mu": { "rules": [7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44], "inclusive": false }, "emu": { "rules": [2], "inclusive": false }, "com": { "rules": [6], "inclusive": false }, "raw": { "rules": [3, 4, 5], "inclusive": false }, "INITIAL": { "rules": [0, 1, 44], "inclusive": true } };
          return lexer;
        })();
        parser.lexer = lexer;
        function Parser() {
          this.yy = {};
        } Parser.prototype = parser; parser.Parser = Parser;
        return new Parser();
      })(); exports.__esModule = true;
      exports['default'] = handlebars;

      /***/
    },
/* 24 */
/***/ function (module, exports, __webpack_require__) {

      'use strict';

      var _interopRequireDefault = __webpack_require__(1)['default'];

      exports.__esModule = true;

      var _visitor = __webpack_require__(25);

      var _visitor2 = _interopRequireDefault(_visitor);

      function WhitespaceControl() {
        var options = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];

        this.options = options;
      }
      WhitespaceControl.prototype = new _visitor2['default']();

      WhitespaceControl.prototype.Program = function (program) {
        var doStandalone = !this.options.ignoreStandalone;

        var isRoot = !this.isRootSeen;
        this.isRootSeen = true;

        var body = program.body;
        for (var i = 0, l = body.length; i < l; i++) {
          var current = body[i],
            strip = this.accept(current);

          if (!strip) {
            continue;
          }

          var _isPrevWhitespace = isPrevWhitespace(body, i, isRoot),
            _isNextWhitespace = isNextWhitespace(body, i, isRoot),
            openStandalone = strip.openStandalone && _isPrevWhitespace,
            closeStandalone = strip.closeStandalone && _isNextWhitespace,
            inlineStandalone = strip.inlineStandalone && _isPrevWhitespace && _isNextWhitespace;

          if (strip.close) {
            omitRight(body, i, true);
          }
          if (strip.open) {
            omitLeft(body, i, true);
          }

          if (doStandalone && inlineStandalone) {
            omitRight(body, i);

            if (omitLeft(body, i)) {
              // If we are on a standalone node, save the indent info for partials
              if (current.type === 'PartialStatement') {
                // Pull out the whitespace from the final line
                current.indent = /([ \t]+$)/.exec(body[i - 1].original)[1];
              }
            }
          }
          if (doStandalone && openStandalone) {
            omitRight((current.program || current.inverse).body);

            // Strip out the previous content node if it's whitespace only
            omitLeft(body, i);
          }
          if (doStandalone && closeStandalone) {
            // Always strip the next node
            omitRight(body, i);

            omitLeft((current.inverse || current.program).body);
          }
        }

        return program;
      };

      WhitespaceControl.prototype.BlockStatement = WhitespaceControl.prototype.DecoratorBlock = WhitespaceControl.prototype.PartialBlockStatement = function (block) {
        this.accept(block.program);
        this.accept(block.inverse);

        // Find the inverse program that is involed with whitespace stripping.
        var program = block.program || block.inverse,
          inverse = block.program && block.inverse,
          firstInverse = inverse,
          lastInverse = inverse;

        if (inverse && inverse.chained) {
          firstInverse = inverse.body[0].program;

          // Walk the inverse chain to find the last inverse that is actually in the chain.
          while (lastInverse.chained) {
            lastInverse = lastInverse.body[lastInverse.body.length - 1].program;
          }
        }

        var strip = {
          open: block.openStrip.open,
          close: block.closeStrip.close,

          // Determine the standalone candiacy. Basically flag our content as being possibly standalone
          // so our parent can determine if we actually are standalone
          openStandalone: isNextWhitespace(program.body),
          closeStandalone: isPrevWhitespace((firstInverse || program).body)
        };

        if (block.openStrip.close) {
          omitRight(program.body, null, true);
        }

        if (inverse) {
          var inverseStrip = block.inverseStrip;

          if (inverseStrip.open) {
            omitLeft(program.body, null, true);
          }

          if (inverseStrip.close) {
            omitRight(firstInverse.body, null, true);
          }
          if (block.closeStrip.open) {
            omitLeft(lastInverse.body, null, true);
          }

          // Find standalone else statments
          if (!this.options.ignoreStandalone && isPrevWhitespace(program.body) && isNextWhitespace(firstInverse.body)) {
            omitLeft(program.body);
            omitRight(firstInverse.body);
          }
        } else if (block.closeStrip.open) {
          omitLeft(program.body, null, true);
        }

        return strip;
      };

      WhitespaceControl.prototype.Decorator = WhitespaceControl.prototype.MustacheStatement = function (mustache) {
        return mustache.strip;
      };

      WhitespaceControl.prototype.PartialStatement = WhitespaceControl.prototype.CommentStatement = function (node) {
        /* istanbul ignore next */
        var strip = node.strip || {};
        return {
          inlineStandalone: true,
          open: strip.open,
          close: strip.close
        };
      };

      function isPrevWhitespace(body, i, isRoot) {
        if (i === undefined) {
          i = body.length;
        }

        // Nodes that end with newlines are considered whitespace (but are special
        // cased for strip operations)
        var prev = body[i - 1],
          sibling = body[i - 2];
        if (!prev) {
          return isRoot;
        }

        if (prev.type === 'ContentStatement') {
          return (sibling || !isRoot ? /\r?\n\s*?$/ : /(^|\r?\n)\s*?$/).test(prev.original);
        }
      }
      function isNextWhitespace(body, i, isRoot) {
        if (i === undefined) {
          i = -1;
        }

        var next = body[i + 1],
          sibling = body[i + 2];
        if (!next) {
          return isRoot;
        }

        if (next.type === 'ContentStatement') {
          return (sibling || !isRoot ? /^\s*?\r?\n/ : /^\s*?(\r?\n|$)/).test(next.original);
        }
      }

      // Marks the node to the right of the position as omitted.
      // I.e. {{foo}}' ' will mark the ' ' node as omitted.
      //
      // If i is undefined, then the first child will be marked as such.
      //
      // If mulitple is truthy then all whitespace will be stripped out until non-whitespace
      // content is met.
      function omitRight(body, i, multiple) {
        var current = body[i == null ? 0 : i + 1];
        if (!current || current.type !== 'ContentStatement' || !multiple && current.rightStripped) {
          return;
        }

        var original = current.value;
        current.value = current.value.replace(multiple ? /^\s+/ : /^[ \t]*\r?\n?/, '');
        current.rightStripped = current.value !== original;
      }

      // Marks the node to the left of the position as omitted.
      // I.e. ' '{{foo}} will mark the ' ' node as omitted.
      //
      // If i is undefined then the last child will be marked as such.
      //
      // If mulitple is truthy then all whitespace will be stripped out until non-whitespace
      // content is met.
      function omitLeft(body, i, multiple) {
        var current = body[i == null ? body.length - 1 : i - 1];
        if (!current || current.type !== 'ContentStatement' || !multiple && current.leftStripped) {
          return;
        }

        // We omit the last node if it's whitespace only and not preceeded by a non-content node.
        var original = current.value;
        current.value = current.value.replace(multiple ? /\s+$/ : /[ \t]+$/, '');
        current.leftStripped = current.value !== original;
        return current.leftStripped;
      }

      exports['default'] = WhitespaceControl;
      module.exports = exports['default'];

      /***/
    },
/* 25 */
/***/ function (module, exports, __webpack_require__) {

      'use strict';

      var _interopRequireDefault = __webpack_require__(1)['default'];

      exports.__esModule = true;

      var _exception = __webpack_require__(6);

      var _exception2 = _interopRequireDefault(_exception);

      function Visitor() {
        this.parents = [];
      }

      Visitor.prototype = {
        constructor: Visitor,
        mutating: false,

        // Visits a given value. If mutating, will replace the value if necessary.
        acceptKey: function acceptKey(node, name) {
          var value = this.accept(node[name]);
          if (this.mutating) {
            // Hacky sanity check: This may have a few false positives for type for the helper
            // methods but will generally do the right thing without a lot of overhead.
            if (value && !Visitor.prototype[value.type]) {
              throw new _exception2['default']('Unexpected node type "' + value.type + '" found when accepting ' + name + ' on ' + node.type);
            }
            node[name] = value;
          }
        },

        // Performs an accept operation with added sanity check to ensure
        // required keys are not removed.
        acceptRequired: function acceptRequired(node, name) {
          this.acceptKey(node, name);

          if (!node[name]) {
            throw new _exception2['default'](node.type + ' requires ' + name);
          }
        },

        // Traverses a given array. If mutating, empty respnses will be removed
        // for child elements.
        acceptArray: function acceptArray(array) {
          for (var i = 0, l = array.length; i < l; i++) {
            this.acceptKey(array, i);

            if (!array[i]) {
              array.splice(i, 1);
              i--;
              l--;
            }
          }
        },

        accept: function accept(object) {
          if (!object) {
            return;
          }

          /* istanbul ignore next: Sanity code */
          if (!this[object.type]) {
            throw new _exception2['default']('Unknown type: ' + object.type, object);
          }

          if (this.current) {
            this.parents.unshift(this.current);
          }
          this.current = object;

          var ret = this[object.type](object);

          this.current = this.parents.shift();

          if (!this.mutating || ret) {
            return ret;
          } else if (ret !== false) {
            return object;
          }
        },

        Program: function Program(program) {
          this.acceptArray(program.body);
        },

        MustacheStatement: visitSubExpression,
        Decorator: visitSubExpression,

        BlockStatement: visitBlock,
        DecoratorBlock: visitBlock,

        PartialStatement: visitPartial,
        PartialBlockStatement: function PartialBlockStatement(partial) {
          visitPartial.call(this, partial);

          this.acceptKey(partial, 'program');
        },

        ContentStatement: function ContentStatement() /* content */ { },
        CommentStatement: function CommentStatement() /* comment */ { },

        SubExpression: visitSubExpression,

        PathExpression: function PathExpression() /* path */ { },

        StringLiteral: function StringLiteral() /* string */ { },
        NumberLiteral: function NumberLiteral() /* number */ { },
        BooleanLiteral: function BooleanLiteral() /* bool */ { },
        UndefinedLiteral: function UndefinedLiteral() /* literal */ { },
        NullLiteral: function NullLiteral() /* literal */ { },

        Hash: function Hash(hash) {
          this.acceptArray(hash.pairs);
        },
        HashPair: function HashPair(pair) {
          this.acceptRequired(pair, 'value');
        }
      };

      function visitSubExpression(mustache) {
        this.acceptRequired(mustache, 'path');
        this.acceptArray(mustache.params);
        this.acceptKey(mustache, 'hash');
      }
      function visitBlock(block) {
        visitSubExpression.call(this, block);

        this.acceptKey(block, 'program');
        this.acceptKey(block, 'inverse');
      }
      function visitPartial(partial) {
        this.acceptRequired(partial, 'name');
        this.acceptArray(partial.params);
        this.acceptKey(partial, 'hash');
      }

      exports['default'] = Visitor;
      module.exports = exports['default'];

      /***/
    },
/* 26 */
/***/ function (module, exports, __webpack_require__) {

      'use strict';

      var _interopRequireDefault = __webpack_require__(1)['default'];

      exports.__esModule = true;
      exports.SourceLocation = SourceLocation;
      exports.id = id;
      exports.stripFlags = stripFlags;
      exports.stripComment = stripComment;
      exports.preparePath = preparePath;
      exports.prepareMustache = prepareMustache;
      exports.prepareRawBlock = prepareRawBlock;
      exports.prepareBlock = prepareBlock;
      exports.prepareProgram = prepareProgram;
      exports.preparePartialBlock = preparePartialBlock;

      var _exception = __webpack_require__(6);

      var _exception2 = _interopRequireDefault(_exception);

      function validateClose(open, close) {
        close = close.path ? close.path.original : close;

        if (open.path.original !== close) {
          var errorNode = { loc: open.path.loc };

          throw new _exception2['default'](open.path.original + " doesn't match " + close, errorNode);
        }
      }

      function SourceLocation(source, locInfo) {
        this.source = source;
        this.start = {
          line: locInfo.first_line,
          column: locInfo.first_column
        };
        this.end = {
          line: locInfo.last_line,
          column: locInfo.last_column
        };
      }

      function id(token) {
        if (/^\[.*\]$/.test(token)) {
          return token.substr(1, token.length - 2);
        } else {
          return token;
        }
      }

      function stripFlags(open, close) {
        return {
          open: open.charAt(2) === '~',
          close: close.charAt(close.length - 3) === '~'
        };
      }

      function stripComment(comment) {
        return comment.replace(/^\{\{~?\!-?-?/, '').replace(/-?-?~?\}\}$/, '');
      }

      function preparePath(data, parts, loc) {
        loc = this.locInfo(loc);

        var original = data ? '@' : '',
          dig = [],
          depth = 0,
          depthString = '';

        for (var i = 0, l = parts.length; i < l; i++) {
          var part = parts[i].part,

            // If we have [] syntax then we do not treat path references as operators,
            // i.e. foo.[this] resolves to approximately context.foo['this']
            isLiteral = parts[i].original !== part;
          original += (parts[i].separator || '') + part;

          if (!isLiteral && (part === '..' || part === '.' || part === 'this')) {
            if (dig.length > 0) {
              throw new _exception2['default']('Invalid path: ' + original, { loc: loc });
            } else if (part === '..') {
              depth++;
              depthString += '../';
            }
          } else {
            dig.push(part);
          }
        }

        return {
          type: 'PathExpression',
          data: data,
          depth: depth,
          parts: dig,
          original: original,
          loc: loc
        };
      }

      function prepareMustache(path, params, hash, open, strip, locInfo) {
        // Must use charAt to support IE pre-10
        var escapeFlag = open.charAt(3) || open.charAt(2),
          escaped = escapeFlag !== '{' && escapeFlag !== '&';

        var decorator = /\*/.test(open);
        return {
          type: decorator ? 'Decorator' : 'MustacheStatement',
          path: path,
          params: params,
          hash: hash,
          escaped: escaped,
          strip: strip,
          loc: this.locInfo(locInfo)
        };
      }

      function prepareRawBlock(openRawBlock, contents, close, locInfo) {
        validateClose(openRawBlock, close);

        locInfo = this.locInfo(locInfo);
        var program = {
          type: 'Program',
          body: contents,
          strip: {},
          loc: locInfo
        };

        return {
          type: 'BlockStatement',
          path: openRawBlock.path,
          params: openRawBlock.params,
          hash: openRawBlock.hash,
          program: program,
          openStrip: {},
          inverseStrip: {},
          closeStrip: {},
          loc: locInfo
        };
      }

      function prepareBlock(openBlock, program, inverseAndProgram, close, inverted, locInfo) {
        if (close && close.path) {
          validateClose(openBlock, close);
        }

        var decorator = /\*/.test(openBlock.open);

        program.blockParams = openBlock.blockParams;

        var inverse = undefined,
          inverseStrip = undefined;

        if (inverseAndProgram) {
          if (decorator) {
            throw new _exception2['default']('Unexpected inverse block on decorator', inverseAndProgram);
          }

          if (inverseAndProgram.chain) {
            inverseAndProgram.program.body[0].closeStrip = close.strip;
          }

          inverseStrip = inverseAndProgram.strip;
          inverse = inverseAndProgram.program;
        }

        if (inverted) {
          inverted = inverse;
          inverse = program;
          program = inverted;
        }

        return {
          type: decorator ? 'DecoratorBlock' : 'BlockStatement',
          path: openBlock.path,
          params: openBlock.params,
          hash: openBlock.hash,
          program: program,
          inverse: inverse,
          openStrip: openBlock.strip,
          inverseStrip: inverseStrip,
          closeStrip: close && close.strip,
          loc: this.locInfo(locInfo)
        };
      }

      function prepareProgram(statements, loc) {
        if (!loc && statements.length) {
          var firstLoc = statements[0].loc,
            lastLoc = statements[statements.length - 1].loc;

          /* istanbul ignore else */
          if (firstLoc && lastLoc) {
            loc = {
              source: firstLoc.source,
              start: {
                line: firstLoc.start.line,
                column: firstLoc.start.column
              },
              end: {
                line: lastLoc.end.line,
                column: lastLoc.end.column
              }
            };
          }
        }

        return {
          type: 'Program',
          body: statements,
          strip: {},
          loc: loc
        };
      }

      function preparePartialBlock(open, program, close, locInfo) {
        validateClose(open, close);

        return {
          type: 'PartialBlockStatement',
          name: open.path,
          params: open.params,
          hash: open.hash,
          program: program,
          openStrip: open.strip,
          closeStrip: close && close.strip,
          loc: this.locInfo(locInfo)
        };
      }

      /***/
    },
/* 27 */
/***/ function (module, exports, __webpack_require__) {

      /* eslint-disable new-cap */

      'use strict';

      var _interopRequireDefault = __webpack_require__(1)['default'];

      exports.__esModule = true;
      exports.Compiler = Compiler;
      exports.precompile = precompile;
      exports.compile = compile;

      var _exception = __webpack_require__(6);

      var _exception2 = _interopRequireDefault(_exception);

      var _utils = __webpack_require__(5);

      var _ast = __webpack_require__(21);

      var _ast2 = _interopRequireDefault(_ast);

      var slice = [].slice;

      function Compiler() { }

      // the foundHelper register will disambiguate helper lookup from finding a
      // function in a context. This is necessary for mustache compatibility, which
      // requires that context functions in blocks are evaluated by blockHelperMissing,
      // and then proceed as if the resulting value was provided to blockHelperMissing.

      Compiler.prototype = {
        compiler: Compiler,

        equals: function equals(other) {
          var len = this.opcodes.length;
          if (other.opcodes.length !== len) {
            return false;
          }

          for (var i = 0; i < len; i++) {
            var opcode = this.opcodes[i],
              otherOpcode = other.opcodes[i];
            if (opcode.opcode !== otherOpcode.opcode || !argEquals(opcode.args, otherOpcode.args)) {
              return false;
            }
          }

          // We know that length is the same between the two arrays because they are directly tied
          // to the opcode behavior above.
          len = this.children.length;
          for (var i = 0; i < len; i++) {
            if (!this.children[i].equals(other.children[i])) {
              return false;
            }
          }

          return true;
        },

        guid: 0,

        compile: function compile(program, options) {
          this.sourceNode = [];
          this.opcodes = [];
          this.children = [];
          this.options = options;
          this.stringParams = options.stringParams;
          this.trackIds = options.trackIds;

          options.blockParams = options.blockParams || [];

          // These changes will propagate to the other compiler components
          var knownHelpers = options.knownHelpers;
          options.knownHelpers = {
            'helperMissing': true,
            'blockHelperMissing': true,
            'each': true,
            'if': true,
            'unless': true,
            'with': true,
            'log': true,
            'lookup': true
          };
          if (knownHelpers) {
            for (var _name in knownHelpers) {
              /* istanbul ignore else */
              if (_name in knownHelpers) {
                options.knownHelpers[_name] = knownHelpers[_name];
              }
            }
          }

          return this.accept(program);
        },

        compileProgram: function compileProgram(program) {
          var childCompiler = new this.compiler(),
            // eslint-disable-line new-cap
            result = childCompiler.compile(program, this.options),
            guid = this.guid++;

          this.usePartial = this.usePartial || result.usePartial;

          this.children[guid] = result;
          this.useDepths = this.useDepths || result.useDepths;

          return guid;
        },

        accept: function accept(node) {
          /* istanbul ignore next: Sanity code */
          if (!this[node.type]) {
            throw new _exception2['default']('Unknown type: ' + node.type, node);
          }

          this.sourceNode.unshift(node);
          var ret = this[node.type](node);
          this.sourceNode.shift();
          return ret;
        },

        Program: function Program(program) {
          this.options.blockParams.unshift(program.blockParams);

          var body = program.body,
            bodyLength = body.length;
          for (var i = 0; i < bodyLength; i++) {
            this.accept(body[i]);
          }

          this.options.blockParams.shift();

          this.isSimple = bodyLength === 1;
          this.blockParams = program.blockParams ? program.blockParams.length : 0;

          return this;
        },

        BlockStatement: function BlockStatement(block) {
          transformLiteralToPath(block);

          var program = block.program,
            inverse = block.inverse;

          program = program && this.compileProgram(program);
          inverse = inverse && this.compileProgram(inverse);

          var type = this.classifySexpr(block);

          if (type === 'helper') {
            this.helperSexpr(block, program, inverse);
          } else if (type === 'simple') {
            this.simpleSexpr(block);

            // now that the simple mustache is resolved, we need to
            // evaluate it by executing `blockHelperMissing`
            this.opcode('pushProgram', program);
            this.opcode('pushProgram', inverse);
            this.opcode('emptyHash');
            this.opcode('blockValue', block.path.original);
          } else {
            this.ambiguousSexpr(block, program, inverse);

            // now that the simple mustache is resolved, we need to
            // evaluate it by executing `blockHelperMissing`
            this.opcode('pushProgram', program);
            this.opcode('pushProgram', inverse);
            this.opcode('emptyHash');
            this.opcode('ambiguousBlockValue');
          }

          this.opcode('append');
        },

        DecoratorBlock: function DecoratorBlock(decorator) {
          var program = decorator.program && this.compileProgram(decorator.program);
          var params = this.setupFullMustacheParams(decorator, program, undefined),
            path = decorator.path;

          this.useDecorators = true;
          this.opcode('registerDecorator', params.length, path.original);
        },

        PartialStatement: function PartialStatement(partial) {
          this.usePartial = true;

          var program = partial.program;
          if (program) {
            program = this.compileProgram(partial.program);
          }

          var params = partial.params;
          if (params.length > 1) {
            throw new _exception2['default']('Unsupported number of partial arguments: ' + params.length, partial);
          } else if (!params.length) {
            if (this.options.explicitPartialContext) {
              this.opcode('pushLiteral', 'undefined');
            } else {
              params.push({ type: 'PathExpression', parts: [], depth: 0 });
            }
          }

          var partialName = partial.name.original,
            isDynamic = partial.name.type === 'SubExpression';
          if (isDynamic) {
            this.accept(partial.name);
          }

          this.setupFullMustacheParams(partial, program, undefined, true);

          var indent = partial.indent || '';
          if (this.options.preventIndent && indent) {
            this.opcode('appendContent', indent);
            indent = '';
          }

          this.opcode('invokePartial', isDynamic, partialName, indent);
          this.opcode('append');
        },
        PartialBlockStatement: function PartialBlockStatement(partialBlock) {
          this.PartialStatement(partialBlock);
        },

        MustacheStatement: function MustacheStatement(mustache) {
          this.SubExpression(mustache);

          if (mustache.escaped && !this.options.noEscape) {
            this.opcode('appendEscaped');
          } else {
            this.opcode('append');
          }
        },
        Decorator: function Decorator(decorator) {
          this.DecoratorBlock(decorator);
        },

        ContentStatement: function ContentStatement(content) {
          if (content.value) {
            this.opcode('appendContent', content.value);
          }
        },

        CommentStatement: function CommentStatement() { },

        SubExpression: function SubExpression(sexpr) {
          transformLiteralToPath(sexpr);
          var type = this.classifySexpr(sexpr);

          if (type === 'simple') {
            this.simpleSexpr(sexpr);
          } else if (type === 'helper') {
            this.helperSexpr(sexpr);
          } else {
            this.ambiguousSexpr(sexpr);
          }
        },
        ambiguousSexpr: function ambiguousSexpr(sexpr, program, inverse) {
          var path = sexpr.path,
            name = path.parts[0],
            isBlock = program != null || inverse != null;

          this.opcode('getContext', path.depth);

          this.opcode('pushProgram', program);
          this.opcode('pushProgram', inverse);

          path.strict = true;
          this.accept(path);

          this.opcode('invokeAmbiguous', name, isBlock);
        },

        simpleSexpr: function simpleSexpr(sexpr) {
          var path = sexpr.path;
          path.strict = true;
          this.accept(path);
          this.opcode('resolvePossibleLambda');
        },

        helperSexpr: function helperSexpr(sexpr, program, inverse) {
          var params = this.setupFullMustacheParams(sexpr, program, inverse),
            path = sexpr.path,
            name = path.parts[0];

          if (this.options.knownHelpers[name]) {
            this.opcode('invokeKnownHelper', params.length, name);
          } else if (this.options.knownHelpersOnly) {
            throw new _exception2['default']('You specified knownHelpersOnly, but used the unknown helper ' + name, sexpr);
          } else {
            path.strict = true;
            path.falsy = true;

            this.accept(path);
            this.opcode('invokeHelper', params.length, path.original, _ast2['default'].helpers.simpleId(path));
          }
        },

        PathExpression: function PathExpression(path) {
          this.addDepth(path.depth);
          this.opcode('getContext', path.depth);

          var name = path.parts[0],
            scoped = _ast2['default'].helpers.scopedId(path),
            blockParamId = !path.depth && !scoped && this.blockParamIndex(name);

          if (blockParamId) {
            this.opcode('lookupBlockParam', blockParamId, path.parts);
          } else if (!name) {
            // Context reference, i.e. `{{foo .}}` or `{{foo ..}}`
            this.opcode('pushContext');
          } else if (path.data) {
            this.options.data = true;
            this.opcode('lookupData', path.depth, path.parts, path.strict);
          } else {
            this.opcode('lookupOnContext', path.parts, path.falsy, path.strict, scoped);
          }
        },

        StringLiteral: function StringLiteral(string) {
          this.opcode('pushString', string.value);
        },

        NumberLiteral: function NumberLiteral(number) {
          this.opcode('pushLiteral', number.value);
        },

        BooleanLiteral: function BooleanLiteral(bool) {
          this.opcode('pushLiteral', bool.value);
        },

        UndefinedLiteral: function UndefinedLiteral() {
          this.opcode('pushLiteral', 'undefined');
        },

        NullLiteral: function NullLiteral() {
          this.opcode('pushLiteral', 'null');
        },

        Hash: function Hash(hash) {
          var pairs = hash.pairs,
            i = 0,
            l = pairs.length;

          this.opcode('pushHash');

          for (; i < l; i++) {
            this.pushParam(pairs[i].value);
          }
          while (i--) {
            this.opcode('assignToHash', pairs[i].key);
          }
          this.opcode('popHash');
        },

        // HELPERS
        opcode: function opcode(name) {
          this.opcodes.push({ opcode: name, args: slice.call(arguments, 1), loc: this.sourceNode[0].loc });
        },

        addDepth: function addDepth(depth) {
          if (!depth) {
            return;
          }

          this.useDepths = true;
        },

        classifySexpr: function classifySexpr(sexpr) {
          var isSimple = _ast2['default'].helpers.simpleId(sexpr.path);

          var isBlockParam = isSimple && !!this.blockParamIndex(sexpr.path.parts[0]);

          // a mustache is an eligible helper if:
          // * its id is simple (a single part, not `this` or `..`)
          var isHelper = !isBlockParam && _ast2['default'].helpers.helperExpression(sexpr);

          // if a mustache is an eligible helper but not a definite
          // helper, it is ambiguous, and will be resolved in a later
          // pass or at runtime.
          var isEligible = !isBlockParam && (isHelper || isSimple);

          // if ambiguous, we can possibly resolve the ambiguity now
          // An eligible helper is one that does not have a complex path, i.e. `this.foo`, `../foo` etc.
          if (isEligible && !isHelper) {
            var _name2 = sexpr.path.parts[0],
              options = this.options;

            if (options.knownHelpers[_name2]) {
              isHelper = true;
            } else if (options.knownHelpersOnly) {
              isEligible = false;
            }
          }

          if (isHelper) {
            return 'helper';
          } else if (isEligible) {
            return 'ambiguous';
          } else {
            return 'simple';
          }
        },

        pushParams: function pushParams(params) {
          for (var i = 0, l = params.length; i < l; i++) {
            this.pushParam(params[i]);
          }
        },

        pushParam: function pushParam(val) {
          var value = val.value != null ? val.value : val.original || '';

          if (this.stringParams) {
            if (value.replace) {
              value = value.replace(/^(\.?\.\/)*/g, '').replace(/\//g, '.');
            }

            if (val.depth) {
              this.addDepth(val.depth);
            }
            this.opcode('getContext', val.depth || 0);
            this.opcode('pushStringParam', value, val.type);

            if (val.type === 'SubExpression') {
              // SubExpressions get evaluated and passed in
              // in string params mode.
              this.accept(val);
            }
          } else {
            if (this.trackIds) {
              var blockParamIndex = undefined;
              if (val.parts && !_ast2['default'].helpers.scopedId(val) && !val.depth) {
                blockParamIndex = this.blockParamIndex(val.parts[0]);
              }
              if (blockParamIndex) {
                var blockParamChild = val.parts.slice(1).join('.');
                this.opcode('pushId', 'BlockParam', blockParamIndex, blockParamChild);
              } else {
                value = val.original || value;
                if (value.replace) {
                  value = value.replace(/^this(?:\.|$)/, '').replace(/^\.\//, '').replace(/^\.$/, '');
                }

                this.opcode('pushId', val.type, value);
              }
            }
            this.accept(val);
          }
        },

        setupFullMustacheParams: function setupFullMustacheParams(sexpr, program, inverse, omitEmpty) {
          var params = sexpr.params;
          this.pushParams(params);

          this.opcode('pushProgram', program);
          this.opcode('pushProgram', inverse);

          if (sexpr.hash) {
            this.accept(sexpr.hash);
          } else {
            this.opcode('emptyHash', omitEmpty);
          }

          return params;
        },

        blockParamIndex: function blockParamIndex(name) {
          for (var depth = 0, len = this.options.blockParams.length; depth < len; depth++) {
            var blockParams = this.options.blockParams[depth],
              param = blockParams && _utils.indexOf(blockParams, name);
            if (blockParams && param >= 0) {
              return [depth, param];
            }
          }
        }
      };

      function precompile(input, options, env) {
        if (input == null || typeof input !== 'string' && input.type !== 'Program') {
          throw new _exception2['default']('You must pass a string or Handlebars AST to Handlebars.precompile. You passed ' + input);
        }

        options = options || {};
        if (!('data' in options)) {
          options.data = true;
        }
        if (options.compat) {
          options.useDepths = true;
        }

        var ast = env.parse(input, options),
          environment = new env.Compiler().compile(ast, options);
        return new env.JavaScriptCompiler().compile(environment, options);
      }

      function compile(input, options, env) {
        if (options === undefined) options = {};

        if (input == null || typeof input !== 'string' && input.type !== 'Program') {
          throw new _exception2['default']('You must pass a string or Handlebars AST to Handlebars.compile. You passed ' + input);
        }

        if (!('data' in options)) {
          options.data = true;
        }
        if (options.compat) {
          options.useDepths = true;
        }

        var compiled = undefined;

        function compileInput() {
          var ast = env.parse(input, options),
            environment = new env.Compiler().compile(ast, options),
            templateSpec = new env.JavaScriptCompiler().compile(environment, options, undefined, true);
          return env.template(templateSpec);
        }

        // Template is only compiled on first use and cached after that point.
        function ret(context, execOptions) {
          if (!compiled) {
            compiled = compileInput();
          }
          return compiled.call(this, context, execOptions);
        }
        ret._setup = function (setupOptions) {
          if (!compiled) {
            compiled = compileInput();
          }
          return compiled._setup(setupOptions);
        };
        ret._child = function (i, data, blockParams, depths) {
          if (!compiled) {
            compiled = compileInput();
          }
          return compiled._child(i, data, blockParams, depths);
        };
        return ret;
      }

      function argEquals(a, b) {
        if (a === b) {
          return true;
        }

        if (_utils.isArray(a) && _utils.isArray(b) && a.length === b.length) {
          for (var i = 0; i < a.length; i++) {
            if (!argEquals(a[i], b[i])) {
              return false;
            }
          }
          return true;
        }
      }

      function transformLiteralToPath(sexpr) {
        if (!sexpr.path.parts) {
          var literal = sexpr.path;
          // Casting to string here to make false and 0 literal values play nicely with the rest
          // of the system.
          sexpr.path = {
            type: 'PathExpression',
            data: false,
            depth: 0,
            parts: [literal.original + ''],
            original: literal.original + '',
            loc: literal.loc
          };
        }
      }

      /***/
    },
/* 28 */
/***/ function (module, exports, __webpack_require__) {

      'use strict';

      var _interopRequireDefault = __webpack_require__(1)['default'];

      exports.__esModule = true;

      var _base = __webpack_require__(4);

      var _exception = __webpack_require__(6);

      var _exception2 = _interopRequireDefault(_exception);

      var _utils = __webpack_require__(5);

      var _codeGen = __webpack_require__(29);

      var _codeGen2 = _interopRequireDefault(_codeGen);

      function Literal(value) {
        this.value = value;
      }

      function JavaScriptCompiler() { }

      JavaScriptCompiler.prototype = {
        // PUBLIC API: You can override these methods in a subclass to provide
        // alternative compiled forms for name lookup and buffering semantics
        nameLookup: function nameLookup(parent, name /* , type*/) {
          if (JavaScriptCompiler.isValidJavaScriptVariableName(name)) {
            return [parent, '.', name];
          } else {
            return [parent, '[', JSON.stringify(name), ']'];
          }
        },
        depthedLookup: function depthedLookup(name) {
          return [this.aliasable('container.lookup'), '(depths, "', name, '")'];
        },

        compilerInfo: function compilerInfo() {
          var revision = _base.COMPILER_REVISION,
            versions = _base.REVISION_CHANGES[revision];
          return [revision, versions];
        },

        appendToBuffer: function appendToBuffer(source, location, explicit) {
          // Force a source as this simplifies the merge logic.
          if (!_utils.isArray(source)) {
            source = [source];
          }
          source = this.source.wrap(source, location);

          if (this.environment.isSimple) {
            return ['return ', source, ';'];
          } else if (explicit) {
            // This is a case where the buffer operation occurs as a child of another
            // construct, generally braces. We have to explicitly output these buffer
            // operations to ensure that the emitted code goes in the correct location.
            return ['buffer += ', source, ';'];
          } else {
            source.appendToBuffer = true;
            return source;
          }
        },

        initializeBuffer: function initializeBuffer() {
          return this.quotedString('');
        },
        // END PUBLIC API

        compile: function compile(environment, options, context, asObject) {
          this.environment = environment;
          this.options = options;
          this.stringParams = this.options.stringParams;
          this.trackIds = this.options.trackIds;
          this.precompile = !asObject;

          this.name = this.environment.name;
          this.isChild = !!context;
          this.context = context || {
            decorators: [],
            programs: [],
            environments: []
          };

          this.preamble();

          this.stackSlot = 0;
          this.stackVars = [];
          this.aliases = {};
          this.registers = { list: [] };
          this.hashes = [];
          this.compileStack = [];
          this.inlineStack = [];
          this.blockParams = [];

          this.compileChildren(environment, options);

          this.useDepths = this.useDepths || environment.useDepths || environment.useDecorators || this.options.compat;
          this.useBlockParams = this.useBlockParams || environment.useBlockParams;

          var opcodes = environment.opcodes,
            opcode = undefined,
            firstLoc = undefined,
            i = undefined,
            l = undefined;

          for (i = 0, l = opcodes.length; i < l; i++) {
            opcode = opcodes[i];

            this.source.currentLocation = opcode.loc;
            firstLoc = firstLoc || opcode.loc;
            this[opcode.opcode].apply(this, opcode.args);
          }

          // Flush any trailing content that might be pending.
          this.source.currentLocation = firstLoc;
          this.pushSource('');

          /* istanbul ignore next */
          if (this.stackSlot || this.inlineStack.length || this.compileStack.length) {
            throw new _exception2['default']('Compile completed with content left on stack');
          }

          if (!this.decorators.isEmpty()) {
            this.useDecorators = true;

            this.decorators.prepend('var decorators = container.decorators;\n');
            this.decorators.push('return fn;');

            if (asObject) {
              this.decorators = Function.apply(this, ['fn', 'props', 'container', 'depth0', 'data', 'blockParams', 'depths', this.decorators.merge()]);
            } else {
              this.decorators.prepend('function(fn, props, container, depth0, data, blockParams, depths) {\n');
              this.decorators.push('}\n');
              this.decorators = this.decorators.merge();
            }
          } else {
            this.decorators = undefined;
          }

          var fn = this.createFunctionContext(asObject);
          if (!this.isChild) {
            var ret = {
              compiler: this.compilerInfo(),
              main: fn
            };

            if (this.decorators) {
              ret.main_d = this.decorators; // eslint-disable-line camelcase
              ret.useDecorators = true;
            }

            var _context = this.context;
            var programs = _context.programs;
            var decorators = _context.decorators;

            for (i = 0, l = programs.length; i < l; i++) {
              if (programs[i]) {
                ret[i] = programs[i];
                if (decorators[i]) {
                  ret[i + '_d'] = decorators[i];
                  ret.useDecorators = true;
                }
              }
            }

            if (this.environment.usePartial) {
              ret.usePartial = true;
            }
            if (this.options.data) {
              ret.useData = true;
            }
            if (this.useDepths) {
              ret.useDepths = true;
            }
            if (this.useBlockParams) {
              ret.useBlockParams = true;
            }
            if (this.options.compat) {
              ret.compat = true;
            }

            if (!asObject) {
              ret.compiler = JSON.stringify(ret.compiler);

              this.source.currentLocation = { start: { line: 1, column: 0 } };
              ret = this.objectLiteral(ret);

              if (options.srcName) {
                ret = ret.toStringWithSourceMap({ file: options.destName });
                ret.map = ret.map && ret.map.toString();
              } else {
                ret = ret.toString();
              }
            } else {
              ret.compilerOptions = this.options;
            }

            return ret;
          } else {
            return fn;
          }
        },

        preamble: function preamble() {
          // track the last context pushed into place to allow skipping the
          // getContext opcode when it would be a noop
          this.lastContext = 0;
          this.source = new _codeGen2['default'](this.options.srcName);
          this.decorators = new _codeGen2['default'](this.options.srcName);
        },

        createFunctionContext: function createFunctionContext(asObject) {
          var varDeclarations = '';

          var locals = this.stackVars.concat(this.registers.list);
          if (locals.length > 0) {
            varDeclarations += ', ' + locals.join(', ');
          }

          // Generate minimizer alias mappings
          //
          // When using true SourceNodes, this will update all references to the given alias
          // as the source nodes are reused in situ. For the non-source node compilation mode,
          // aliases will not be used, but this case is already being run on the client and
          // we aren't concern about minimizing the template size.
          var aliasCount = 0;
          for (var alias in this.aliases) {
            // eslint-disable-line guard-for-in
            var node = this.aliases[alias];

            if (this.aliases.hasOwnProperty(alias) && node.children && node.referenceCount > 1) {
              varDeclarations += ', alias' + ++aliasCount + '=' + alias;
              node.children[0] = 'alias' + aliasCount;
            }
          }

          var params = ['container', 'depth0', 'helpers', 'partials', 'data'];

          if (this.useBlockParams || this.useDepths) {
            params.push('blockParams');
          }
          if (this.useDepths) {
            params.push('depths');
          }

          // Perform a second pass over the output to merge content when possible
          var source = this.mergeSource(varDeclarations);

          if (asObject) {
            params.push(source);

            return Function.apply(this, params);
          } else {
            return this.source.wrap(['function(', params.join(','), ') {\n  ', source, '}']);
          }
        },
        mergeSource: function mergeSource(varDeclarations) {
          var isSimple = this.environment.isSimple,
            appendOnly = !this.forceBuffer,
            appendFirst = undefined,
            sourceSeen = undefined,
            bufferStart = undefined,
            bufferEnd = undefined;
          this.source.each(function (line) {
            if (line.appendToBuffer) {
              if (bufferStart) {
                line.prepend('  + ');
              } else {
                bufferStart = line;
              }
              bufferEnd = line;
            } else {
              if (bufferStart) {
                if (!sourceSeen) {
                  appendFirst = true;
                } else {
                  bufferStart.prepend('buffer += ');
                }
                bufferEnd.add(';');
                bufferStart = bufferEnd = undefined;
              }

              sourceSeen = true;
              if (!isSimple) {
                appendOnly = false;
              }
            }
          });

          if (appendOnly) {
            if (bufferStart) {
              bufferStart.prepend('return ');
              bufferEnd.add(';');
            } else if (!sourceSeen) {
              this.source.push('return "";');
            }
          } else {
            varDeclarations += ', buffer = ' + (appendFirst ? '' : this.initializeBuffer());

            if (bufferStart) {
              bufferStart.prepend('return buffer + ');
              bufferEnd.add(';');
            } else {
              this.source.push('return buffer;');
            }
          }

          if (varDeclarations) {
            this.source.prepend('var ' + varDeclarations.substring(2) + (appendFirst ? '' : ';\n'));
          }

          return this.source.merge();
        },

        // [blockValue]
        //
        // On stack, before: hash, inverse, program, value
        // On stack, after: return value of blockHelperMissing
        //
        // The purpose of this opcode is to take a block of the form
        // `{{#this.foo}}...{{/this.foo}}`, resolve the value of `foo`, and
        // replace it on the stack with the result of properly
        // invoking blockHelperMissing.
        blockValue: function blockValue(name) {
          var blockHelperMissing = this.aliasable('helpers.blockHelperMissing'),
            params = [this.contextName(0)];
          this.setupHelperArgs(name, 0, params);

          var blockName = this.popStack();
          params.splice(1, 0, blockName);

          this.push(this.source.functionCall(blockHelperMissing, 'call', params));
        },

        // [ambiguousBlockValue]
        //
        // On stack, before: hash, inverse, program, value
        // Compiler value, before: lastHelper=value of last found helper, if any
        // On stack, after, if no lastHelper: same as [blockValue]
        // On stack, after, if lastHelper: value
        ambiguousBlockValue: function ambiguousBlockValue() {
          // We're being a bit cheeky and reusing the options value from the prior exec
          var blockHelperMissing = this.aliasable('helpers.blockHelperMissing'),
            params = [this.contextName(0)];
          this.setupHelperArgs('', 0, params, true);

          this.flushInline();

          var current = this.topStack();
          params.splice(1, 0, current);

          this.pushSource(['if (!', this.lastHelper, ') { ', current, ' = ', this.source.functionCall(blockHelperMissing, 'call', params), '}']);
        },

        // [appendContent]
        //
        // On stack, before: ...
        // On stack, after: ...
        //
        // Appends the string value of `content` to the current buffer
        appendContent: function appendContent(content) {
          if (this.pendingContent) {
            content = this.pendingContent + content;
          } else {
            this.pendingLocation = this.source.currentLocation;
          }

          this.pendingContent = content;
        },

        // [append]
        //
        // On stack, before: value, ...
        // On stack, after: ...
        //
        // Coerces `value` to a String and appends it to the current buffer.
        //
        // If `value` is truthy, or 0, it is coerced into a string and appended
        // Otherwise, the empty string is appended
        append: function append() {
          if (this.isInline()) {
            this.replaceStack(function (current) {
              return [' != null ? ', current, ' : ""'];
            });

            this.pushSource(this.appendToBuffer(this.popStack()));
          } else {
            var local = this.popStack();
            this.pushSource(['if (', local, ' != null) { ', this.appendToBuffer(local, undefined, true), ' }']);
            if (this.environment.isSimple) {
              this.pushSource(['else { ', this.appendToBuffer("''", undefined, true), ' }']);
            }
          }
        },

        // [appendEscaped]
        //
        // On stack, before: value, ...
        // On stack, after: ...
        //
        // Escape `value` and append it to the buffer
        appendEscaped: function appendEscaped() {
          this.pushSource(this.appendToBuffer([this.aliasable('container.escapeExpression'), '(', this.popStack(), ')']));
        },

        // [getContext]
        //
        // On stack, before: ...
        // On stack, after: ...
        // Compiler value, after: lastContext=depth
        //
        // Set the value of the `lastContext` compiler value to the depth
        getContext: function getContext(depth) {
          this.lastContext = depth;
        },

        // [pushContext]
        //
        // On stack, before: ...
        // On stack, after: currentContext, ...
        //
        // Pushes the value of the current context onto the stack.
        pushContext: function pushContext() {
          this.pushStackLiteral(this.contextName(this.lastContext));
        },

        // [lookupOnContext]
        //
        // On stack, before: ...
        // On stack, after: currentContext[name], ...
        //
        // Looks up the value of `name` on the current context and pushes
        // it onto the stack.
        lookupOnContext: function lookupOnContext(parts, falsy, strict, scoped) {
          var i = 0;

          if (!scoped && this.options.compat && !this.lastContext) {
            // The depthed query is expected to handle the undefined logic for the root level that
            // is implemented below, so we evaluate that directly in compat mode
            this.push(this.depthedLookup(parts[i++]));
          } else {
            this.pushContext();
          }

          this.resolvePath('context', parts, i, falsy, strict);
        },

        // [lookupBlockParam]
        //
        // On stack, before: ...
        // On stack, after: blockParam[name], ...
        //
        // Looks up the value of `parts` on the given block param and pushes
        // it onto the stack.
        lookupBlockParam: function lookupBlockParam(blockParamId, parts) {
          this.useBlockParams = true;

          this.push(['blockParams[', blockParamId[0], '][', blockParamId[1], ']']);
          this.resolvePath('context', parts, 1);
        },

        // [lookupData]
        //
        // On stack, before: ...
        // On stack, after: data, ...
        //
        // Push the data lookup operator
        lookupData: function lookupData(depth, parts, strict) {
          if (!depth) {
            this.pushStackLiteral('data');
          } else {
            this.pushStackLiteral('container.data(data, ' + depth + ')');
          }

          this.resolvePath('data', parts, 0, true, strict);
        },

        resolvePath: function resolvePath(type, parts, i, falsy, strict) {
          // istanbul ignore next

          var _this = this;

          if (this.options.strict || this.options.assumeObjects) {
            this.push(strictLookup(this.options.strict && strict, this, parts, type));
            return;
          }

          var len = parts.length;
          for (; i < len; i++) {
            /* eslint-disable no-loop-func */
            this.replaceStack(function (current) {
              var lookup = _this.nameLookup(current, parts[i], type);
              // We want to ensure that zero and false are handled properly if the context (falsy flag)
              // needs to have the special handling for these values.
              if (!falsy) {
                return [' != null ? ', lookup, ' : ', current];
              } else {
                // Otherwise we can use generic falsy handling
                return [' && ', lookup];
              }
            });
            /* eslint-enable no-loop-func */
          }
        },

        // [resolvePossibleLambda]
        //
        // On stack, before: value, ...
        // On stack, after: resolved value, ...
        //
        // If the `value` is a lambda, replace it on the stack by
        // the return value of the lambda
        resolvePossibleLambda: function resolvePossibleLambda() {
          this.push([this.aliasable('container.lambda'), '(', this.popStack(), ', ', this.contextName(0), ')']);
        },

        // [pushStringParam]
        //
        // On stack, before: ...
        // On stack, after: string, currentContext, ...
        //
        // This opcode is designed for use in string mode, which
        // provides the string value of a parameter along with its
        // depth rather than resolving it immediately.
        pushStringParam: function pushStringParam(string, type) {
          this.pushContext();
          this.pushString(type);

          // If it's a subexpression, the string result
          // will be pushed after this opcode.
          if (type !== 'SubExpression') {
            if (typeof string === 'string') {
              this.pushString(string);
            } else {
              this.pushStackLiteral(string);
            }
          }
        },

        emptyHash: function emptyHash(omitEmpty) {
          if (this.trackIds) {
            this.push('{}'); // hashIds
          }
          if (this.stringParams) {
            this.push('{}'); // hashContexts
            this.push('{}'); // hashTypes
          }
          this.pushStackLiteral(omitEmpty ? 'undefined' : '{}');
        },
        pushHash: function pushHash() {
          if (this.hash) {
            this.hashes.push(this.hash);
          }
          this.hash = { values: [], types: [], contexts: [], ids: [] };
        },
        popHash: function popHash() {
          var hash = this.hash;
          this.hash = this.hashes.pop();

          if (this.trackIds) {
            this.push(this.objectLiteral(hash.ids));
          }
          if (this.stringParams) {
            this.push(this.objectLiteral(hash.contexts));
            this.push(this.objectLiteral(hash.types));
          }

          this.push(this.objectLiteral(hash.values));
        },

        // [pushString]
        //
        // On stack, before: ...
        // On stack, after: quotedString(string), ...
        //
        // Push a quoted version of `string` onto the stack
        pushString: function pushString(string) {
          this.pushStackLiteral(this.quotedString(string));
        },

        // [pushLiteral]
        //
        // On stack, before: ...
        // On stack, after: value, ...
        //
        // Pushes a value onto the stack. This operation prevents
        // the compiler from creating a temporary variable to hold
        // it.
        pushLiteral: function pushLiteral(value) {
          this.pushStackLiteral(value);
        },

        // [pushProgram]
        //
        // On stack, before: ...
        // On stack, after: program(guid), ...
        //
        // Push a program expression onto the stack. This takes
        // a compile-time guid and converts it into a runtime-accessible
        // expression.
        pushProgram: function pushProgram(guid) {
          if (guid != null) {
            this.pushStackLiteral(this.programExpression(guid));
          } else {
            this.pushStackLiteral(null);
          }
        },

        // [registerDecorator]
        //
        // On stack, before: hash, program, params..., ...
        // On stack, after: ...
        //
        // Pops off the decorator's parameters, invokes the decorator,
        // and inserts the decorator into the decorators list.
        registerDecorator: function registerDecorator(paramSize, name) {
          var foundDecorator = this.nameLookup('decorators', name, 'decorator'),
            options = this.setupHelperArgs(name, paramSize);

          this.decorators.push(['fn = ', this.decorators.functionCall(foundDecorator, '', ['fn', 'props', 'container', options]), ' || fn;']);
        },

        // [invokeHelper]
        //
        // On stack, before: hash, inverse, program, params..., ...
        // On stack, after: result of helper invocation
        //
        // Pops off the helper's parameters, invokes the helper,
        // and pushes the helper's return value onto the stack.
        //
        // If the helper is not found, `helperMissing` is called.
        invokeHelper: function invokeHelper(paramSize, name, isSimple) {
          var nonHelper = this.popStack(),
            helper = this.setupHelper(paramSize, name),
            simple = isSimple ? [helper.name, ' || '] : '';

          var lookup = ['('].concat(simple, nonHelper);
          if (!this.options.strict) {
            lookup.push(' || ', this.aliasable('helpers.helperMissing'));
          }
          lookup.push(')');

          this.push(this.source.functionCall(lookup, 'call', helper.callParams));
        },

        // [invokeKnownHelper]
        //
        // On stack, before: hash, inverse, program, params..., ...
        // On stack, after: result of helper invocation
        //
        // This operation is used when the helper is known to exist,
        // so a `helperMissing` fallback is not required.
        invokeKnownHelper: function invokeKnownHelper(paramSize, name) {
          var helper = this.setupHelper(paramSize, name);
          this.push(this.source.functionCall(helper.name, 'call', helper.callParams));
        },

        // [invokeAmbiguous]
        //
        // On stack, before: hash, inverse, program, params..., ...
        // On stack, after: result of disambiguation
        //
        // This operation is used when an expression like `{{foo}}`
        // is provided, but we don't know at compile-time whether it
        // is a helper or a path.
        //
        // This operation emits more code than the other options,
        // and can be avoided by passing the `knownHelpers` and
        // `knownHelpersOnly` flags at compile-time.
        invokeAmbiguous: function invokeAmbiguous(name, helperCall) {
          this.useRegister('helper');

          var nonHelper = this.popStack();

          this.emptyHash();
          var helper = this.setupHelper(0, name, helperCall);

          var helperName = this.lastHelper = this.nameLookup('helpers', name, 'helper');

          var lookup = ['(', '(helper = ', helperName, ' || ', nonHelper, ')'];
          if (!this.options.strict) {
            lookup[0] = '(helper = ';
            lookup.push(' != null ? helper : ', this.aliasable('helpers.helperMissing'));
          }

          this.push(['(', lookup, helper.paramsInit ? ['),(', helper.paramsInit] : [], '),', '(typeof helper === ', this.aliasable('"function"'), ' ? ', this.source.functionCall('helper', 'call', helper.callParams), ' : helper))']);
        },

        // [invokePartial]
        //
        // On stack, before: context, ...
        // On stack after: result of partial invocation
        //
        // This operation pops off a context, invokes a partial with that context,
        // and pushes the result of the invocation back.
        invokePartial: function invokePartial(isDynamic, name, indent) {
          var params = [],
            options = this.setupParams(name, 1, params);

          if (isDynamic) {
            name = this.popStack();
            delete options.name;
          }

          if (indent) {
            options.indent = JSON.stringify(indent);
          }
          options.helpers = 'helpers';
          options.partials = 'partials';
          options.decorators = 'container.decorators';

          if (!isDynamic) {
            params.unshift(this.nameLookup('partials', name, 'partial'));
          } else {
            params.unshift(name);
          }

          if (this.options.compat) {
            options.depths = 'depths';
          }
          options = this.objectLiteral(options);
          params.push(options);

          this.push(this.source.functionCall('container.invokePartial', '', params));
        },

        // [assignToHash]
        //
        // On stack, before: value, ..., hash, ...
        // On stack, after: ..., hash, ...
        //
        // Pops a value off the stack and assigns it to the current hash
        assignToHash: function assignToHash(key) {
          var value = this.popStack(),
            context = undefined,
            type = undefined,
            id = undefined;

          if (this.trackIds) {
            id = this.popStack();
          }
          if (this.stringParams) {
            type = this.popStack();
            context = this.popStack();
          }

          var hash = this.hash;
          if (context) {
            hash.contexts[key] = context;
          }
          if (type) {
            hash.types[key] = type;
          }
          if (id) {
            hash.ids[key] = id;
          }
          hash.values[key] = value;
        },

        pushId: function pushId(type, name, child) {
          if (type === 'BlockParam') {
            this.pushStackLiteral('blockParams[' + name[0] + '].path[' + name[1] + ']' + (child ? ' + ' + JSON.stringify('.' + child) : ''));
          } else if (type === 'PathExpression') {
            this.pushString(name);
          } else if (type === 'SubExpression') {
            this.pushStackLiteral('true');
          } else {
            this.pushStackLiteral('null');
          }
        },

        // HELPERS

        compiler: JavaScriptCompiler,

        compileChildren: function compileChildren(environment, options) {
          var children = environment.children,
            child = undefined,
            compiler = undefined;

          for (var i = 0, l = children.length; i < l; i++) {
            child = children[i];
            compiler = new this.compiler(); // eslint-disable-line new-cap

            var index = this.matchExistingProgram(child);

            if (index == null) {
              this.context.programs.push(''); // Placeholder to prevent name conflicts for nested children
              index = this.context.programs.length;
              child.index = index;
              child.name = 'program' + index;
              this.context.programs[index] = compiler.compile(child, options, this.context, !this.precompile);
              this.context.decorators[index] = compiler.decorators;
              this.context.environments[index] = child;

              this.useDepths = this.useDepths || compiler.useDepths;
              this.useBlockParams = this.useBlockParams || compiler.useBlockParams;
            } else {
              child.index = index;
              child.name = 'program' + index;

              this.useDepths = this.useDepths || child.useDepths;
              this.useBlockParams = this.useBlockParams || child.useBlockParams;
            }
          }
        },
        matchExistingProgram: function matchExistingProgram(child) {
          for (var i = 0, len = this.context.environments.length; i < len; i++) {
            var environment = this.context.environments[i];
            if (environment && environment.equals(child)) {
              return i;
            }
          }
        },

        programExpression: function programExpression(guid) {
          var child = this.environment.children[guid],
            programParams = [child.index, 'data', child.blockParams];

          if (this.useBlockParams || this.useDepths) {
            programParams.push('blockParams');
          }
          if (this.useDepths) {
            programParams.push('depths');
          }

          return 'container.program(' + programParams.join(', ') + ')';
        },

        useRegister: function useRegister(name) {
          if (!this.registers[name]) {
            this.registers[name] = true;
            this.registers.list.push(name);
          }
        },

        push: function push(expr) {
          if (!(expr instanceof Literal)) {
            expr = this.source.wrap(expr);
          }

          this.inlineStack.push(expr);
          return expr;
        },

        pushStackLiteral: function pushStackLiteral(item) {
          this.push(new Literal(item));
        },

        pushSource: function pushSource(source) {
          if (this.pendingContent) {
            this.source.push(this.appendToBuffer(this.source.quotedString(this.pendingContent), this.pendingLocation));
            this.pendingContent = undefined;
          }

          if (source) {
            this.source.push(source);
          }
        },

        replaceStack: function replaceStack(callback) {
          var prefix = ['('],
            stack = undefined,
            createdStack = undefined,
            usedLiteral = undefined;

          /* istanbul ignore next */
          if (!this.isInline()) {
            throw new _exception2['default']('replaceStack on non-inline');
          }

          // We want to merge the inline statement into the replacement statement via ','
          var top = this.popStack(true);

          if (top instanceof Literal) {
            // Literals do not need to be inlined
            stack = [top.value];
            prefix = ['(', stack];
            usedLiteral = true;
          } else {
            // Get or create the current stack name for use by the inline
            createdStack = true;
            var _name = this.incrStack();

            prefix = ['((', this.push(_name), ' = ', top, ')'];
            stack = this.topStack();
          }

          var item = callback.call(this, stack);

          if (!usedLiteral) {
            this.popStack();
          }
          if (createdStack) {
            this.stackSlot--;
          }
          this.push(prefix.concat(item, ')'));
        },

        incrStack: function incrStack() {
          this.stackSlot++;
          if (this.stackSlot > this.stackVars.length) {
            this.stackVars.push('stack' + this.stackSlot);
          }
          return this.topStackName();
        },
        topStackName: function topStackName() {
          return 'stack' + this.stackSlot;
        },
        flushInline: function flushInline() {
          var inlineStack = this.inlineStack;
          this.inlineStack = [];
          for (var i = 0, len = inlineStack.length; i < len; i++) {
            var entry = inlineStack[i];
            /* istanbul ignore if */
            if (entry instanceof Literal) {
              this.compileStack.push(entry);
            } else {
              var stack = this.incrStack();
              this.pushSource([stack, ' = ', entry, ';']);
              this.compileStack.push(stack);
            }
          }
        },
        isInline: function isInline() {
          return this.inlineStack.length;
        },

        popStack: function popStack(wrapped) {
          var inline = this.isInline(),
            item = (inline ? this.inlineStack : this.compileStack).pop();

          if (!wrapped && item instanceof Literal) {
            return item.value;
          } else {
            if (!inline) {
              /* istanbul ignore next */
              if (!this.stackSlot) {
                throw new _exception2['default']('Invalid stack pop');
              }
              this.stackSlot--;
            }
            return item;
          }
        },

        topStack: function topStack() {
          var stack = this.isInline() ? this.inlineStack : this.compileStack,
            item = stack[stack.length - 1];

          /* istanbul ignore if */
          if (item instanceof Literal) {
            return item.value;
          } else {
            return item;
          }
        },

        contextName: function contextName(context) {
          if (this.useDepths && context) {
            return 'depths[' + context + ']';
          } else {
            return 'depth' + context;
          }
        },

        quotedString: function quotedString(str) {
          return this.source.quotedString(str);
        },

        objectLiteral: function objectLiteral(obj) {
          return this.source.objectLiteral(obj);
        },

        aliasable: function aliasable(name) {
          var ret = this.aliases[name];
          if (ret) {
            ret.referenceCount++;
            return ret;
          }

          ret = this.aliases[name] = this.source.wrap(name);
          ret.aliasable = true;
          ret.referenceCount = 1;

          return ret;
        },

        setupHelper: function setupHelper(paramSize, name, blockHelper) {
          var params = [],
            paramsInit = this.setupHelperArgs(name, paramSize, params, blockHelper);
          var foundHelper = this.nameLookup('helpers', name, 'helper'),
            callContext = this.aliasable(this.contextName(0) + ' != null ? ' + this.contextName(0) + ' : {}');

          return {
            params: params,
            paramsInit: paramsInit,
            name: foundHelper,
            callParams: [callContext].concat(params)
          };
        },

        setupParams: function setupParams(helper, paramSize, params) {
          var options = {},
            contexts = [],
            types = [],
            ids = [],
            objectArgs = !params,
            param = undefined;

          if (objectArgs) {
            params = [];
          }

          options.name = this.quotedString(helper);
          options.hash = this.popStack();

          if (this.trackIds) {
            options.hashIds = this.popStack();
          }
          if (this.stringParams) {
            options.hashTypes = this.popStack();
            options.hashContexts = this.popStack();
          }

          var inverse = this.popStack(),
            program = this.popStack();

          // Avoid setting fn and inverse if neither are set. This allows
          // helpers to do a check for `if (options.fn)`
          if (program || inverse) {
            options.fn = program || 'container.noop';
            options.inverse = inverse || 'container.noop';
          }

          // The parameters go on to the stack in order (making sure that they are evaluated in order)
          // so we need to pop them off the stack in reverse order
          var i = paramSize;
          while (i--) {
            param = this.popStack();
            params[i] = param;

            if (this.trackIds) {
              ids[i] = this.popStack();
            }
            if (this.stringParams) {
              types[i] = this.popStack();
              contexts[i] = this.popStack();
            }
          }

          if (objectArgs) {
            options.args = this.source.generateArray(params);
          }

          if (this.trackIds) {
            options.ids = this.source.generateArray(ids);
          }
          if (this.stringParams) {
            options.types = this.source.generateArray(types);
            options.contexts = this.source.generateArray(contexts);
          }

          if (this.options.data) {
            options.data = 'data';
          }
          if (this.useBlockParams) {
            options.blockParams = 'blockParams';
          }
          return options;
        },

        setupHelperArgs: function setupHelperArgs(helper, paramSize, params, useRegister) {
          var options = this.setupParams(helper, paramSize, params);
          options = this.objectLiteral(options);
          if (useRegister) {
            this.useRegister('options');
            params.push('options');
            return ['options=', options];
          } else if (params) {
            params.push(options);
            return '';
          } else {
            return options;
          }
        }
      };

      (function () {
        var reservedWords = ('break else new var' + ' case finally return void' + ' catch for switch while' + ' continue function this with' + ' default if throw' + ' delete in try' + ' do instanceof typeof' + ' abstract enum int short' + ' boolean export interface static' + ' byte extends long super' + ' char final native synchronized' + ' class float package throws' + ' const goto private transient' + ' debugger implements protected volatile' + ' double import public let yield await' + ' null true false').split(' ');

        var compilerWords = JavaScriptCompiler.RESERVED_WORDS = {};

        for (var i = 0, l = reservedWords.length; i < l; i++) {
          compilerWords[reservedWords[i]] = true;
        }
      })();

      JavaScriptCompiler.isValidJavaScriptVariableName = function (name) {
        return !JavaScriptCompiler.RESERVED_WORDS[name] && /^[a-zA-Z_$][0-9a-zA-Z_$]*$/.test(name);
      };

      function strictLookup(requireTerminal, compiler, parts, type) {
        var stack = compiler.popStack(),
          i = 0,
          len = parts.length;
        if (requireTerminal) {
          len--;
        }

        for (; i < len; i++) {
          stack = compiler.nameLookup(stack, parts[i], type);
        }

        if (requireTerminal) {
          return [compiler.aliasable('container.strict'), '(', stack, ', ', compiler.quotedString(parts[i]), ')'];
        } else {
          return stack;
        }
      }

      exports['default'] = JavaScriptCompiler;
      module.exports = exports['default'];

      /***/
    },
/* 29 */
/***/ function (module, exports, __webpack_require__) {

      /* global define */
      'use strict';

      exports.__esModule = true;

      var _utils = __webpack_require__(5);

      var SourceNode = undefined;

      try {
        /* istanbul ignore next */
        if (false) {
          // We don't support this in AMD environments. For these environments, we asusme that
          // they are running on the browser and thus have no need for the source-map library.
          var SourceMap = require('source-map');
          SourceNode = SourceMap.SourceNode;
        }
      } catch (err) { }
      /* NOP */

      /* istanbul ignore if: tested but not covered in istanbul due to dist build  */
      if (!SourceNode) {
        SourceNode = function (line, column, srcFile, chunks) {
          this.src = '';
          if (chunks) {
            this.add(chunks);
          }
        };
        /* istanbul ignore next */
        SourceNode.prototype = {
          add: function add(chunks) {
            if (_utils.isArray(chunks)) {
              chunks = chunks.join('');
            }
            this.src += chunks;
          },
          prepend: function prepend(chunks) {
            if (_utils.isArray(chunks)) {
              chunks = chunks.join('');
            }
            this.src = chunks + this.src;
          },
          toStringWithSourceMap: function toStringWithSourceMap() {
            return { code: this.toString() };
          },
          toString: function toString() {
            return this.src;
          }
        };
      }

      function castChunk(chunk, codeGen, loc) {
        if (_utils.isArray(chunk)) {
          var ret = [];

          for (var i = 0, len = chunk.length; i < len; i++) {
            ret.push(codeGen.wrap(chunk[i], loc));
          }
          return ret;
        } else if (typeof chunk === 'boolean' || typeof chunk === 'number') {
          // Handle primitives that the SourceNode will throw up on
          return chunk + '';
        }
        return chunk;
      }

      function CodeGen(srcFile) {
        this.srcFile = srcFile;
        this.source = [];
      }

      CodeGen.prototype = {
        isEmpty: function isEmpty() {
          return !this.source.length;
        },
        prepend: function prepend(source, loc) {
          this.source.unshift(this.wrap(source, loc));
        },
        push: function push(source, loc) {
          this.source.push(this.wrap(source, loc));
        },

        merge: function merge() {
          var source = this.empty();
          this.each(function (line) {
            source.add(['  ', line, '\n']);
          });
          return source;
        },

        each: function each(iter) {
          for (var i = 0, len = this.source.length; i < len; i++) {
            iter(this.source[i]);
          }
        },

        empty: function empty() {
          var loc = this.currentLocation || { start: {} };
          return new SourceNode(loc.start.line, loc.start.column, this.srcFile);
        },
        wrap: function wrap(chunk) {
          var loc = arguments.length <= 1 || arguments[1] === undefined ? this.currentLocation || { start: {} } : arguments[1];

          if (chunk instanceof SourceNode) {
            return chunk;
          }

          chunk = castChunk(chunk, this, loc);

          return new SourceNode(loc.start.line, loc.start.column, this.srcFile, chunk);
        },

        functionCall: function functionCall(fn, type, params) {
          params = this.generateList(params);
          return this.wrap([fn, type ? '.' + type + '(' : '(', params, ')']);
        },

        quotedString: function quotedString(str) {
          return '"' + (str + '').replace(/\\/g, '\\\\').replace(/"/g, '\\"').replace(/\n/g, '\\n').replace(/\r/g, '\\r').replace(/\u2028/g, '\\u2028') // Per Ecma-262 7.3 + 7.8.4
            .replace(/\u2029/g, '\\u2029') + '"';
        },

        objectLiteral: function objectLiteral(obj) {
          var pairs = [];

          for (var key in obj) {
            if (obj.hasOwnProperty(key)) {
              var value = castChunk(obj[key], this);
              if (value !== 'undefined') {
                pairs.push([this.quotedString(key), ':', value]);
              }
            }
          }

          var ret = this.generateList(pairs);
          ret.prepend('{');
          ret.add('}');
          return ret;
        },

        generateList: function generateList(entries) {
          var ret = this.empty();

          for (var i = 0, len = entries.length; i < len; i++) {
            if (i) {
              ret.add(',');
            }

            ret.add(castChunk(entries[i], this));
          }

          return ret;
        },

        generateArray: function generateArray(entries) {
          var ret = this.generateList(entries);
          ret.prepend('[');
          ret.add(']');

          return ret;
        }
      };

      exports['default'] = CodeGen;
      module.exports = exports['default'];

      /***/
    }
/******/])
});
;

Handlebars.registerHelper("math", function (lvalue, operator, rvalue, options) {
  lvalue = parseFloat(lvalue);
  rvalue = parseFloat(rvalue);

  return {
    "+": lvalue + rvalue,
    "-": lvalue - rvalue,
    "*": lvalue * rvalue,
    "/": lvalue / rvalue,
    "%": lvalue % rvalue
  }[operator];
});

Handlebars.registerHelper('if_eq', function (a, b, opts) {
  if (a == b) {
    return opts.fn(this);
  } else {
    return opts.inverse(this);
  }
});

Handlebars.registerHelper('or_eq', function (a, b, c, d, e, opts) {
  if (a === b || a === c || a === d || a === e) {
    return opts.fn(this);
  } else {
    return opts.inverse(this);
  }
});

Handlebars.registerHelper('not_eq', function (a, b, opts) {
  if (a != b) {
    return opts.fn(this);
  } else {
    return opts.inverse(this);
  }
});

var Counter = 1;
Handlebars.registerHelper('count', function () {
  return Counter++;
});

Handlebars.registerHelper('inc', function (value) {
  return parseInt(value) + 1;
});

Handlebars.registerHelper('compare', function (lvalue, rvalue, options) {
  if (arguments.length < 3)
    throw new Error("Handlerbars Helper 'compare' needs 2 parameters");
  var operator = options.hash.operator || "==";
  var operators = {
    '==': function (l, r) { return l == r; },
    '===': function (l, r) { return l === r; },
    '!=': function (l, r) { return l != r; },
    '!==': function (l, r) { return l !== r; },
    '<': function (l, r) { return l < r; },
    '>': function (l, r) { return l > r; },
    '<=': function (l, r) { return l <= r; },
    '>=': function (l, r) { return l >= r; },
    'typeof': function (l, r) { return typeof l == r; }
  }
  if (options.hash.type !== undefined) {
    var a = '';
  }
  if (!operators[operator])
    throw new Error("Handlerbars Helper 'compare' doesn't know the operator " + operator);
  var result = operators[operator](lvalue, rvalue);
  if (result) {
    return options.fn(this);
  } else {
    return options.inverse(this);
  }

}); // {{#compare from_stop_quantity 0 operator=">"}} ...{{else}} _ {{/compare}}

Handlebars.registerHelper('ifHalf', function (rating, index, options) {
  var value = +rating,
    isNumber = !isNaN(parseFloat(value)) && isFinite(value),
    isHalf = isNumber && value.toString().indexOf('.') !== -1 && Math.round(value) === +index;

  if (isHalf) {
    return options.fn(this);
  } else {
    return options.inverse(this);
  }
});

Handlebars.registerHelper('ifCond', function (v1, operator, v2, options) {
  switch (operator) {
    case '==':
      return (v1 == v2) ? options.fn(this) : options.inverse(this);
    case '===':
      return (v1 === v2) ? options.fn(this) : options.inverse(this);
    case '!=':
      return (v1 != v2) ? options.fn(this) : options.inverse(this);
    case '!==':
      return (v1 !== v2) ? options.fn(this) : options.inverse(this);
    case '<':
      return (v1 < v2) ? options.fn(this) : options.inverse(this);
    case '<=':
      return (v1 <= v2) ? options.fn(this) : options.inverse(this);
    case '>':
      return (v1 > v2) ? options.fn(this) : options.inverse(this);
    case '>=':
      return (v1 >= v2) ? options.fn(this) : options.inverse(this);
    case '&&':
      return (v1 && v2) ? options.fn(this) : options.inverse(this);
    case '||':
      return (v1 || v2) ? options.fn(this) : options.inverse(this);
    default:
      return options.inverse(this);
  }
});

Handlebars.registerHelper("not", function (obj) {
  return !obj;
});

Handlebars.registerHelper('trans', function (a) {
  return Translator.translate(a);
});

Handlebars.registerHelper('for', function (from, to, incr, block) {
  var accum = '';

  for (var i = from; i <= to; i += incr) {
    accum += block.fn(i);
  }

  return accum;
});

Handlebars.registerHelper('assign', function (varName, varValue, options) {
  if (!options.data.root) {
    options.data.root = {};
  }
  options.data.root[varName] = varValue;
});

Handlebars.registerHelper('escape', function (variable) {
  return variable.replace(/(['])/g, '\\$1');
});

Handlebars.registerHelper('showInfants', function (isShow, infantType, userType) {
  return isShow && userType == infantType || userType !== infantType
});

Handlebars.registerHelper('dateFormat', function (context, block) {
  return moment(context).format(block.hash.format);
});

Handlebars.registerHelper('json', function (context) {
  return JSON.stringify(context);
});
jQuery.fn.serializeObject = function () {
  var o = {};
  var a = this.serializeArray();
  jQuery.each(a, function () {
    if (o[this.name] !== undefined) {
      if (!o[this.name].push) {
        o[this.name] = [o[this.name]];
      }
      o[this.name].push(this.value || '');
    } else {
      o[this.name] = this.value || '';
    }
  });
  return o;
};
/**
 * @version: 1.0 Alpha-1
 * @author: Coolite Inc. http://www.coolite.com/
 * @date: 2008-05-13
 * @copyright: Copyright (c) 2006-2008, Coolite Inc. (http://www.coolite.com/). All rights reserved.
 * @license: Licensed under The MIT License. See license.txt and http://www.datejs.com/license/. 
 * @website: http://www.datejs.com/
 */
Date.CultureInfo = { name: "en-US", englishName: "English (United States)", nativeName: "English (United States)", dayNames: ["Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"], abbreviatedDayNames: ["Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"], shortestDayNames: ["Su", "Mo", "Tu", "We", "Th", "Fr", "Sa"], firstLetterDayNames: ["S", "M", "T", "W", "T", "F", "S"], monthNames: ["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"], abbreviatedMonthNames: ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"], amDesignator: "AM", pmDesignator: "PM", firstDayOfWeek: 0, twoDigitYearMax: 2029, dateElementOrder: "mdy", formatPatterns: { shortDate: "M/d/yyyy", longDate: "dddd, MMMM dd, yyyy", shortTime: "h:mm tt", longTime: "h:mm:ss tt", fullDateTime: "dddd, MMMM dd, yyyy h:mm:ss tt", sortableDateTime: "yyyy-MM-ddTHH:mm:ss", universalSortableDateTime: "yyyy-MM-dd HH:mm:ssZ", rfc1123: "ddd, dd MMM yyyy HH:mm:ss GMT", monthDay: "MMMM dd", yearMonth: "MMMM, yyyy" }, regexPatterns: { jan: /^jan(uary)?/i, feb: /^feb(ruary)?/i, mar: /^mar(ch)?/i, apr: /^apr(il)?/i, may: /^may/i, jun: /^jun(e)?/i, jul: /^jul(y)?/i, aug: /^aug(ust)?/i, sep: /^sep(t(ember)?)?/i, oct: /^oct(ober)?/i, nov: /^nov(ember)?/i, dec: /^dec(ember)?/i, sun: /^su(n(day)?)?/i, mon: /^mo(n(day)?)?/i, tue: /^tu(e(s(day)?)?)?/i, wed: /^we(d(nesday)?)?/i, thu: /^th(u(r(s(day)?)?)?)?/i, fri: /^fr(i(day)?)?/i, sat: /^sa(t(urday)?)?/i, future: /^next/i, past: /^last|past|prev(ious)?/i, add: /^(\+|aft(er)?|from|hence)/i, subtract: /^(\-|bef(ore)?|ago)/i, yesterday: /^yes(terday)?/i, today: /^t(od(ay)?)?/i, tomorrow: /^tom(orrow)?/i, now: /^n(ow)?/i, millisecond: /^ms|milli(second)?s?/i, second: /^sec(ond)?s?/i, minute: /^mn|min(ute)?s?/i, hour: /^h(our)?s?/i, week: /^w(eek)?s?/i, month: /^m(onth)?s?/i, day: /^d(ay)?s?/i, year: /^y(ear)?s?/i, shortMeridian: /^(a|p)/i, longMeridian: /^(a\.?m?\.?|p\.?m?\.?)/i, timezone: /^((e(s|d)t|c(s|d)t|m(s|d)t|p(s|d)t)|((gmt)?\s*(\+|\-)\s*\d\d\d\d?)|gmt|utc)/i, ordinalSuffix: /^\s*(st|nd|rd|th)/i, timeContext: /^\s*(\:|a(?!u|p)|p)/i }, timezones: [{ name: "UTC", offset: "-000" }, { name: "GMT", offset: "-000" }, { name: "EST", offset: "-0500" }, { name: "EDT", offset: "-0400" }, { name: "CST", offset: "-0600" }, { name: "CDT", offset: "-0500" }, { name: "MST", offset: "-0700" }, { name: "MDT", offset: "-0600" }, { name: "PST", offset: "-0800" }, { name: "PDT", offset: "-0700" }] };
(function () {
  var $D = Date, $P = $D.prototype, $C = $D.CultureInfo, p = function (s, l) {
    if (!l) { l = 2; }
    return ("000" + s).slice(l * -1);
  }; $P.clearTime = function () { this.setHours(0); this.setMinutes(0); this.setSeconds(0); this.setMilliseconds(0); return this; }; $P.setTimeToNow = function () { var n = new Date(); this.setHours(n.getHours()); this.setMinutes(n.getMinutes()); this.setSeconds(n.getSeconds()); this.setMilliseconds(n.getMilliseconds()); return this; }; $D.today = function () { return new Date().clearTime(); }; $D.compare = function (date1, date2) { if (isNaN(date1) || isNaN(date2)) { throw new Error(date1 + " - " + date2); } else if (date1 instanceof Date && date2 instanceof Date) { return (date1 < date2) ? -1 : (date1 > date2) ? 1 : 0; } else { throw new TypeError(date1 + " - " + date2); } }; $D.equals = function (date1, date2) { return (date1.compareTo(date2) === 0); }; $D.getDayNumberFromName = function (name) {
    var n = $C.dayNames, m = $C.abbreviatedDayNames, o = $C.shortestDayNames, s = name.toLowerCase(); for (var i = 0; i < n.length; i++) { if (n[i].toLowerCase() == s || m[i].toLowerCase() == s || o[i].toLowerCase() == s) { return i; } }
    return -1;
  }; $D.getMonthNumberFromName = function (name) {
    var n = $C.monthNames, m = $C.abbreviatedMonthNames, s = name.toLowerCase(); for (var i = 0; i < n.length; i++) { if (n[i].toLowerCase() == s || m[i].toLowerCase() == s) { return i; } }
    return -1;
  }; $D.isLeapYear = function (year) { return ((year % 4 === 0 && year % 100 !== 0) || year % 400 === 0); }; $D.getDaysInMonth = function (year, month) { return [31, ($D.isLeapYear(year) ? 29 : 28), 31, 30, 31, 30, 31, 31, 30, 31, 30, 31][month]; }; $D.getTimezoneAbbreviation = function (offset) {
    var z = $C.timezones, p; for (var i = 0; i < z.length; i++) { if (z[i].offset === offset) { return z[i].name; } }
    return null;
  }; $D.getTimezoneOffset = function (name) {
    var z = $C.timezones, p; for (var i = 0; i < z.length; i++) { if (z[i].name === name.toUpperCase()) { return z[i].offset; } }
    return null;
  }; $P.clone = function () { return new Date(this.getTime()); }; $P.compareTo = function (date) { return Date.compare(this, date); }; $P.equals = function (date) { return Date.equals(this, date || new Date()); }; $P.between = function (start, end) { return this.getTime() >= start.getTime() && this.getTime() <= end.getTime(); }; $P.isAfter = function (date) { return this.compareTo(date || new Date()) === 1; }; $P.isBefore = function (date) { return (this.compareTo(date || new Date()) === -1); }; $P.isToday = function () { return this.isSameDay(new Date()); }; $P.isSameDay = function (date) { return this.clone().clearTime().equals(date.clone().clearTime()); }; $P.addMilliseconds = function (value) { this.setMilliseconds(this.getMilliseconds() + value); return this; }; $P.addSeconds = function (value) { return this.addMilliseconds(value * 1000); }; $P.addMinutes = function (value) { return this.addMilliseconds(value * 60000); }; $P.addHours = function (value) { return this.addMilliseconds(value * 3600000); }; $P.addDays = function (value) { this.setDate(this.getDate() + value); return this; }; $P.addWeeks = function (value) { return this.addDays(value * 7); }; $P.addMonths = function (value) { var n = this.getDate(); this.setDate(1); this.setMonth(this.getMonth() + value); this.setDate(Math.min(n, $D.getDaysInMonth(this.getFullYear(), this.getMonth()))); return this; }; $P.addYears = function (value) { return this.addMonths(value * 12); }; $P.add = function (config) {
    if (typeof config == "number") { this._orient = config; return this; }
    var x = config; if (x.milliseconds) { this.addMilliseconds(x.milliseconds); }
    if (x.seconds) { this.addSeconds(x.seconds); }
    if (x.minutes) { this.addMinutes(x.minutes); }
    if (x.hours) { this.addHours(x.hours); }
    if (x.weeks) { this.addWeeks(x.weeks); }
    if (x.months) { this.addMonths(x.months); }
    if (x.years) { this.addYears(x.years); }
    if (x.days) { this.addDays(x.days); }
    return this;
  }; var $y, $m, $d; $P.getWeek = function () {
    var a, b, c, d, e, f, g, n, s, w; $y = (!$y) ? this.getFullYear() : $y; $m = (!$m) ? this.getMonth() + 1 : $m; $d = (!$d) ? this.getDate() : $d; if ($m <= 2) { a = $y - 1; b = (a / 4 | 0) - (a / 100 | 0) + (a / 400 | 0); c = ((a - 1) / 4 | 0) - ((a - 1) / 100 | 0) + ((a - 1) / 400 | 0); s = b - c; e = 0; f = $d - 1 + (31 * ($m - 1)); } else { a = $y; b = (a / 4 | 0) - (a / 100 | 0) + (a / 400 | 0); c = ((a - 1) / 4 | 0) - ((a - 1) / 100 | 0) + ((a - 1) / 400 | 0); s = b - c; e = s + 1; f = $d + ((153 * ($m - 3) + 2) / 5) + 58 + s; }
    g = (a + b) % 7; d = (f + g - e) % 7; n = (f + 3 - d) | 0; if (n < 0) { w = 53 - ((g - s) / 5 | 0); } else if (n > 364 + s) { w = 1; } else { w = (n / 7 | 0) + 1; }
    $y = $m = $d = null; return w;
  }; $P.getISOWeek = function () { $y = this.getUTCFullYear(); $m = this.getUTCMonth() + 1; $d = this.getUTCDate(); return p(this.getWeek()); }; $P.setWeek = function (n) { return this.moveToDayOfWeek(1).addWeeks(n - this.getWeek()); }; $D._validate = function (n, min, max, name) {
    if (typeof n == "undefined") { return false; } else if (typeof n != "number") { throw new TypeError(n + " is not a Number."); } else if (n < min || n > max) { throw new RangeError(n + " is not a valid value for " + name + "."); }
    return true;
  }; $D.validateMillisecond = function (value) { return $D._validate(value, 0, 999, "millisecond"); }; $D.validateSecond = function (value) { return $D._validate(value, 0, 59, "second"); }; $D.validateMinute = function (value) { return $D._validate(value, 0, 59, "minute"); }; $D.validateHour = function (value) { return $D._validate(value, 0, 23, "hour"); }; $D.validateDay = function (value, year, month) { return $D._validate(value, 1, $D.getDaysInMonth(year, month), "day"); }; $D.validateMonth = function (value) { return $D._validate(value, 0, 11, "month"); }; $D.validateYear = function (value) { return $D._validate(value, 0, 9999, "year"); }; $P.set = function (config) {
    if ($D.validateMillisecond(config.millisecond)) { this.addMilliseconds(config.millisecond - this.getMilliseconds()); }
    if ($D.validateSecond(config.second)) { this.addSeconds(config.second - this.getSeconds()); }
    if ($D.validateMinute(config.minute)) { this.addMinutes(config.minute - this.getMinutes()); }
    if ($D.validateHour(config.hour)) { this.addHours(config.hour - this.getHours()); }
    if ($D.validateMonth(config.month)) { this.addMonths(config.month - this.getMonth()); }
    if ($D.validateYear(config.year)) { this.addYears(config.year - this.getFullYear()); }
    if ($D.validateDay(config.day, this.getFullYear(), this.getMonth())) { this.addDays(config.day - this.getDate()); }
    if (config.timezone) { this.setTimezone(config.timezone); }
    if (config.timezoneOffset) { this.setTimezoneOffset(config.timezoneOffset); }
    if (config.week && $D._validate(config.week, 0, 53, "week")) { this.setWeek(config.week); }
    return this;
  }; $P.moveToFirstDayOfMonth = function () { return this.set({ day: 1 }); }; $P.moveToLastDayOfMonth = function () { return this.set({ day: $D.getDaysInMonth(this.getFullYear(), this.getMonth()) }); }; $P.moveToNthOccurrence = function (dayOfWeek, occurrence) {
    var shift = 0; if (occurrence > 0) { shift = occurrence - 1; }
    else if (occurrence === -1) {
      this.moveToLastDayOfMonth(); if (this.getDay() !== dayOfWeek) { this.moveToDayOfWeek(dayOfWeek, -1); }
      return this;
    }
    return this.moveToFirstDayOfMonth().addDays(-1).moveToDayOfWeek(dayOfWeek, +1).addWeeks(shift);
  }; $P.moveToDayOfWeek = function (dayOfWeek, orient) { var diff = (dayOfWeek - this.getDay() + 7 * (orient || +1)) % 7; return this.addDays((diff === 0) ? diff += 7 * (orient || +1) : diff); }; $P.moveToMonth = function (month, orient) { var diff = (month - this.getMonth() + 12 * (orient || +1)) % 12; return this.addMonths((diff === 0) ? diff += 12 * (orient || +1) : diff); }; $P.getOrdinalNumber = function () { return Math.ceil((this.clone().clearTime() - new Date(this.getFullYear(), 0, 1)) / 86400000) + 1; }; $P.getTimezone = function () { return $D.getTimezoneAbbreviation(this.getUTCOffset()); }; $P.setTimezoneOffset = function (offset) { var here = this.getTimezoneOffset(), there = Number(offset) * -6 / 10; return this.addMinutes(there - here); }; $P.setTimezone = function (offset) { return this.setTimezoneOffset($D.getTimezoneOffset(offset)); }; $P.hasDaylightSavingTime = function () { return (Date.today().set({ month: 0, day: 1 }).getTimezoneOffset() !== Date.today().set({ month: 6, day: 1 }).getTimezoneOffset()); }; $P.isDaylightSavingTime = function () { return (this.hasDaylightSavingTime() && new Date().getTimezoneOffset() === Date.today().set({ month: 6, day: 1 }).getTimezoneOffset()); }; $P.getUTCOffset = function () { var n = this.getTimezoneOffset() * -10 / 6, r; if (n < 0) { r = (n - 10000).toString(); return r.charAt(0) + r.substr(2); } else { r = (n + 10000).toString(); return "+" + r.substr(1); } }; $P.getElapsed = function (date) { return (date || new Date()) - this; }; if (!$P.toISOString) {
    $P.toISOString = function () {
      function f(n) { return n < 10 ? '0' + n : n; }
      return '"' + this.getUTCFullYear() + '-' +
        f(this.getUTCMonth() + 1) + '-' +
        f(this.getUTCDate()) + 'T' +
        f(this.getUTCHours()) + ':' +
        f(this.getUTCMinutes()) + ':' +
        f(this.getUTCSeconds()) + 'Z"';
    };
  }
  $P._toString = $P.toString; $P.toString = function (format) {
    var x = this; if (format && format.length == 1) { var c = $C.formatPatterns; x.t = x.toString; switch (format) { case "d": return x.t(c.shortDate); case "D": return x.t(c.longDate); case "F": return x.t(c.fullDateTime); case "m": return x.t(c.monthDay); case "r": return x.t(c.rfc1123); case "s": return x.t(c.sortableDateTime); case "t": return x.t(c.shortTime); case "T": return x.t(c.longTime); case "u": return x.t(c.universalSortableDateTime); case "y": return x.t(c.yearMonth); } }
    var ord = function (n) { switch (n * 1) { case 1: case 21: case 31: return "st"; case 2: case 22: return "nd"; case 3: case 23: return "rd"; default: return "th"; } }; return format ? format.replace(/(\\)?(dd?d?d?|MM?M?M?|yy?y?y?|hh?|HH?|mm?|ss?|tt?|S)/g, function (m) {
      if (m.charAt(0) === "\\") { return m.replace("\\", ""); }
      x.h = x.getHours; switch (m) { case "hh": return p(x.h() < 13 ? (x.h() === 0 ? 12 : x.h()) : (x.h() - 12)); case "h": return x.h() < 13 ? (x.h() === 0 ? 12 : x.h()) : (x.h() - 12); case "HH": return p(x.h()); case "H": return x.h(); case "mm": return p(x.getMinutes()); case "m": return x.getMinutes(); case "ss": return p(x.getSeconds()); case "s": return x.getSeconds(); case "yyyy": return p(x.getFullYear(), 4); case "yy": return p(x.getFullYear()); case "dddd": return $C.dayNames[x.getDay()]; case "ddd": return $C.abbreviatedDayNames[x.getDay()]; case "dd": return p(x.getDate()); case "d": return x.getDate(); case "MMMM": return $C.monthNames[x.getMonth()]; case "MMM": return $C.abbreviatedMonthNames[x.getMonth()]; case "MM": return p((x.getMonth() + 1)); case "M": return x.getMonth() + 1; case "t": return x.h() < 12 ? $C.amDesignator.substring(0, 1) : $C.pmDesignator.substring(0, 1); case "tt": return x.h() < 12 ? $C.amDesignator : $C.pmDesignator; case "S": return ord(x.getDate()); default: return m; }
    }) : this._toString();
  };
}());
(function () {
  var $D = Date, $P = $D.prototype, $C = $D.CultureInfo, $N = Number.prototype; $P._orient = +1; $P._nth = null; $P._is = false; $P._same = false; $P._isSecond = false; $N._dateElement = "day"; $P.next = function () { this._orient = +1; return this; }; $D.next = function () { return $D.today().next(); }; $P.last = $P.prev = $P.previous = function () { this._orient = -1; return this; }; $D.last = $D.prev = $D.previous = function () { return $D.today().last(); }; $P.is = function () { this._is = true; return this; }; $P.same = function () { this._same = true; this._isSecond = false; return this; }; $P.today = function () { return this.same().day(); }; $P.weekday = function () {
    if (this._is) { this._is = false; return (!this.is().sat() && !this.is().sun()); }
    return false;
  }; $P.at = function (time) { return (typeof time === "string") ? $D.parse(this.toString("d") + " " + time) : this.set(time); }; $N.fromNow = $N.after = function (date) { var c = {}; c[this._dateElement] = this; return ((!date) ? new Date() : date.clone()).add(c); }; $N.ago = $N.before = function (date) { var c = {}; c[this._dateElement] = this * -1; return ((!date) ? new Date() : date.clone()).add(c); }; var dx = ("sunday monday tuesday wednesday thursday friday saturday").split(/\s/), mx = ("january february march april may june july august september october november december").split(/\s/), px = ("Millisecond Second Minute Hour Day Week Month Year").split(/\s/), pxf = ("Milliseconds Seconds Minutes Hours Date Week Month FullYear").split(/\s/), nth = ("final first second third fourth fifth").split(/\s/), de; $P.toObject = function () {
    var o = {}; for (var i = 0; i < px.length; i++) { o[px[i].toLowerCase()] = this["get" + pxf[i]](); }
    return o;
  }; $D.fromObject = function (config) { config.week = null; return Date.today().set(config); }; var df = function (n) {
    return function () {
      if (this._is) { this._is = false; return this.getDay() == n; }
      if (this._nth !== null) {
        if (this._isSecond) { this.addSeconds(this._orient * -1); }
        this._isSecond = false; var ntemp = this._nth; this._nth = null; var temp = this.clone().moveToLastDayOfMonth(); this.moveToNthOccurrence(n, ntemp); if (this > temp) { throw new RangeError($D.getDayName(n) + " does not occur " + ntemp + " times in the month of " + $D.getMonthName(temp.getMonth()) + " " + temp.getFullYear() + "."); }
        return this;
      }
      return this.moveToDayOfWeek(n, this._orient);
    };
  }; var sdf = function (n) {
    return function () {
      var t = $D.today(), shift = n - t.getDay(); if (n === 0 && $C.firstDayOfWeek === 1 && t.getDay() !== 0) { shift = shift + 7; }
      return t.addDays(shift);
    };
  }; for (var i = 0; i < dx.length; i++) { $D[dx[i].toUpperCase()] = $D[dx[i].toUpperCase().substring(0, 3)] = i; $D[dx[i]] = $D[dx[i].substring(0, 3)] = sdf(i); $P[dx[i]] = $P[dx[i].substring(0, 3)] = df(i); }
  var mf = function (n) {
    return function () {
      if (this._is) { this._is = false; return this.getMonth() === n; }
      return this.moveToMonth(n, this._orient);
    };
  }; var smf = function (n) { return function () { return $D.today().set({ month: n, day: 1 }); }; }; for (var j = 0; j < mx.length; j++) { $D[mx[j].toUpperCase()] = $D[mx[j].toUpperCase().substring(0, 3)] = j; $D[mx[j]] = $D[mx[j].substring(0, 3)] = smf(j); $P[mx[j]] = $P[mx[j].substring(0, 3)] = mf(j); }
  var ef = function (j) {
    return function () {
      if (this._isSecond) { this._isSecond = false; return this; }
      if (this._same) {
        this._same = this._is = false; var o1 = this.toObject(), o2 = (arguments[0] || new Date()).toObject(), v = "", k = j.toLowerCase(); for (var m = (px.length - 1); m > -1; m--) {
          v = px[m].toLowerCase(); if (o1[v] != o2[v]) { return false; }
          if (k == v) { break; }
        }
        return true;
      }
      if (j.substring(j.length - 1) != "s") { j += "s"; }
      return this["add" + j](this._orient);
    };
  }; var nf = function (n) { return function () { this._dateElement = n; return this; }; }; for (var k = 0; k < px.length; k++) { de = px[k].toLowerCase(); $P[de] = $P[de + "s"] = ef(px[k]); $N[de] = $N[de + "s"] = nf(de); }
  $P._ss = ef("Second"); var nthfn = function (n) {
    return function (dayOfWeek) {
      if (this._same) { return this._ss(arguments[0]); }
      if (dayOfWeek || dayOfWeek === 0) { return this.moveToNthOccurrence(dayOfWeek, n); }
      this._nth = n; if (n === 2 && (dayOfWeek === undefined || dayOfWeek === null)) { this._isSecond = true; return this.addSeconds(this._orient); }
      return this;
    };
  }; for (var l = 0; l < nth.length; l++) { $P[nth[l]] = (l === 0) ? nthfn(-1) : nthfn(l); }
}());
(function () {
  Date.Parsing = { Exception: function (s) { this.message = "Parse error at '" + s.substring(0, 10) + " ...'"; } }; var $P = Date.Parsing; var _ = $P.Operators = {
    rtoken: function (r) { return function (s) { var mx = s.match(r); if (mx) { return ([mx[0], s.substring(mx[0].length)]); } else { throw new $P.Exception(s); } }; }, token: function (s) { return function (s) { return _.rtoken(new RegExp("^\s*" + s + "\s*"))(s); }; }, stoken: function (s) { return _.rtoken(new RegExp("^" + s)); }, until: function (p) {
      return function (s) {
        var qx = [], rx = null; while (s.length) {
          try { rx = p.call(this, s); } catch (e) { qx.push(rx[0]); s = rx[1]; continue; }
          break;
        }
        return [qx, s];
      };
    }, many: function (p) {
      return function (s) {
        var rx = [], r = null; while (s.length) {
          try { r = p.call(this, s); } catch (e) { return [rx, s]; }
          rx.push(r[0]); s = r[1];
        }
        return [rx, s];
      };
    }, optional: function (p) {
      return function (s) {
        var r = null; try { r = p.call(this, s); } catch (e) { return [null, s]; }
        return [r[0], r[1]];
      };
    }, not: function (p) {
      return function (s) {
        try { p.call(this, s); } catch (e) { return [null, s]; }
        throw new $P.Exception(s);
      };
    }, ignore: function (p) { return p ? function (s) { var r = null; r = p.call(this, s); return [null, r[1]]; } : null; }, product: function () {
      var px = arguments[0], qx = Array.prototype.slice.call(arguments, 1), rx = []; for (var i = 0; i < px.length; i++) { rx.push(_.each(px[i], qx)); }
      return rx;
    }, cache: function (rule) {
      var cache = {}, r = null; return function (s) {
        try { r = cache[s] = (cache[s] || rule.call(this, s)); } catch (e) { r = cache[s] = e; }
        if (r instanceof $P.Exception) { throw r; } else { return r; }
      };
    }, any: function () {
      var px = arguments; return function (s) {
        var r = null; for (var i = 0; i < px.length; i++) {
          if (px[i] == null) { continue; }
          try { r = (px[i].call(this, s)); } catch (e) { r = null; }
          if (r) { return r; }
        }
        throw new $P.Exception(s);
      };
    }, each: function () {
      var px = arguments; return function (s) {
        var rx = [], r = null; for (var i = 0; i < px.length; i++) {
          if (px[i] == null) { continue; }
          try { r = (px[i].call(this, s)); } catch (e) { throw new $P.Exception(s); }
          rx.push(r[0]); s = r[1];
        }
        return [rx, s];
      };
    }, all: function () { var px = arguments, _ = _; return _.each(_.optional(px)); }, sequence: function (px, d, c) {
      d = d || _.rtoken(/^\s*/); c = c || null; if (px.length == 1) { return px[0]; }
      return function (s) {
        var r = null, q = null; var rx = []; for (var i = 0; i < px.length; i++) {
          try { r = px[i].call(this, s); } catch (e) { break; }
          rx.push(r[0]); try { q = d.call(this, r[1]); } catch (ex) { q = null; break; }
          s = q[1];
        }
        if (!r) { throw new $P.Exception(s); }
        if (q) { throw new $P.Exception(q[1]); }
        if (c) { try { r = c.call(this, r[1]); } catch (ey) { throw new $P.Exception(r[1]); } }
        return [rx, (r ? r[1] : s)];
      };
    }, between: function (d1, p, d2) { d2 = d2 || d1; var _fn = _.each(_.ignore(d1), p, _.ignore(d2)); return function (s) { var rx = _fn.call(this, s); return [[rx[0][0], r[0][2]], rx[1]]; }; }, list: function (p, d, c) { d = d || _.rtoken(/^\s*/); c = c || null; return (p instanceof Array ? _.each(_.product(p.slice(0, -1), _.ignore(d)), p.slice(-1), _.ignore(c)) : _.each(_.many(_.each(p, _.ignore(d))), px, _.ignore(c))); }, set: function (px, d, c) {
      d = d || _.rtoken(/^\s*/); c = c || null; return function (s) {
        var r = null, p = null, q = null, rx = null, best = [[], s], last = false; for (var i = 0; i < px.length; i++) {
          q = null; p = null; r = null; last = (px.length == 1); try { r = px[i].call(this, s); } catch (e) { continue; }
          rx = [[r[0]], r[1]]; if (r[1].length > 0 && !last) { try { q = d.call(this, r[1]); } catch (ex) { last = true; } } else { last = true; }
          if (!last && q[1].length === 0) { last = true; }
          if (!last) {
            var qx = []; for (var j = 0; j < px.length; j++) { if (i != j) { qx.push(px[j]); } }
            p = _.set(qx, d).call(this, q[1]); if (p[0].length > 0) { rx[0] = rx[0].concat(p[0]); rx[1] = p[1]; }
          }
          if (rx[1].length < best[1].length) { best = rx; }
          if (best[1].length === 0) { break; }
        }
        if (best[0].length === 0) { return best; }
        if (c) {
          try { q = c.call(this, best[1]); } catch (ey) { throw new $P.Exception(best[1]); }
          best[1] = q[1];
        }
        return best;
      };
    }, forward: function (gr, fname) { return function (s) { return gr[fname].call(this, s); }; }, replace: function (rule, repl) { return function (s) { var r = rule.call(this, s); return [repl, r[1]]; }; }, process: function (rule, fn) { return function (s) { var r = rule.call(this, s); return [fn.call(this, r[0]), r[1]]; }; }, min: function (min, rule) {
      return function (s) {
        var rx = rule.call(this, s); if (rx[0].length < min) { throw new $P.Exception(s); }
        return rx;
      };
    }
  }; var _generator = function (op) {
    return function () {
      var args = null, rx = []; if (arguments.length > 1) { args = Array.prototype.slice.call(arguments); } else if (arguments[0] instanceof Array) { args = arguments[0]; }
      if (args) { for (var i = 0, px = args.shift(); i < px.length; i++) { args.unshift(px[i]); rx.push(op.apply(null, args)); args.shift(); return rx; } } else { return op.apply(null, arguments); }
    };
  }; var gx = "optional not ignore cache".split(/\s/); for (var i = 0; i < gx.length; i++) { _[gx[i]] = _generator(_[gx[i]]); }
  var _vector = function (op) { return function () { if (arguments[0] instanceof Array) { return op.apply(null, arguments[0]); } else { return op.apply(null, arguments); } }; }; var vx = "each any all".split(/\s/); for (var j = 0; j < vx.length; j++) { _[vx[j]] = _vector(_[vx[j]]); }
}()); (function () {
  var $D = Date, $P = $D.prototype, $C = $D.CultureInfo; var flattenAndCompact = function (ax) {
    var rx = []; for (var i = 0; i < ax.length; i++) { if (ax[i] instanceof Array) { rx = rx.concat(flattenAndCompact(ax[i])); } else { if (ax[i]) { rx.push(ax[i]); } } }
    return rx;
  }; $D.Grammar = {}; $D.Translator = {
    hour: function (s) { return function () { this.hour = Number(s); }; }, minute: function (s) { return function () { this.minute = Number(s); }; }, second: function (s) { return function () { this.second = Number(s); }; }, meridian: function (s) { return function () { this.meridian = s.slice(0, 1).toLowerCase(); }; }, timezone: function (s) { return function () { var n = s.replace(/[^\d\+\-]/g, ""); if (n.length) { this.timezoneOffset = Number(n); } else { this.timezone = s.toLowerCase(); } }; }, day: function (x) { var s = x[0]; return function () { this.day = Number(s.match(/\d+/)[0]); }; }, month: function (s) { return function () { this.month = (s.length == 3) ? "jan feb mar apr may jun jul aug sep oct nov dec".indexOf(s) / 4 : Number(s) - 1; }; }, year: function (s) { return function () { var n = Number(s); this.year = ((s.length > 2) ? n : (n + (((n + 2000) < $C.twoDigitYearMax) ? 2000 : 1900))); }; }, rday: function (s) { return function () { switch (s) { case "yesterday": this.days = -1; break; case "tomorrow": this.days = 1; break; case "today": this.days = 0; break; case "now": this.days = 0; this.now = true; break; } }; }, finishExact: function (x) {
      x = (x instanceof Array) ? x : [x]; for (var i = 0; i < x.length; i++) { if (x[i]) { x[i].call(this); } }
      var now = new Date(); if ((this.hour || this.minute) && (!this.month && !this.year && !this.day)) { this.day = now.getDate(); }
      if (!this.year) { this.year = now.getFullYear(); }
      if (!this.month && this.month !== 0) { this.month = now.getMonth(); }
      if (!this.day) { this.day = 1; }
      if (!this.hour) { this.hour = 0; }
      if (!this.minute) { this.minute = 0; }
      if (!this.second) { this.second = 0; }
      if (this.meridian && this.hour) { if (this.meridian == "p" && this.hour < 12) { this.hour = this.hour + 12; } else if (this.meridian == "a" && this.hour == 12) { this.hour = 0; } }
      if (this.day > $D.getDaysInMonth(this.year, this.month)) { throw new RangeError(this.day + " is not a valid value for days."); }
      var r = new Date(this.year, this.month, this.day, this.hour, this.minute, this.second); if (this.timezone) { r.set({ timezone: this.timezone }); } else if (this.timezoneOffset) { r.set({ timezoneOffset: this.timezoneOffset }); }
      return r;
    }, finish: function (x) {
      x = (x instanceof Array) ? flattenAndCompact(x) : [x]; if (x.length === 0) { return null; }
      for (var i = 0; i < x.length; i++) { if (typeof x[i] == "function") { x[i].call(this); } }
      var today = $D.today(); if (this.now && !this.unit && !this.operator) { return new Date(); } else if (this.now) { today = new Date(); }
      var expression = !!(this.days && this.days !== null || this.orient || this.operator); var gap, mod, orient; orient = ((this.orient == "past" || this.operator == "subtract") ? -1 : 1); if (!this.now && "hour minute second".indexOf(this.unit) != -1) { today.setTimeToNow(); }
      if (this.month || this.month === 0) { if ("year day hour minute second".indexOf(this.unit) != -1) { this.value = this.month + 1; this.month = null; expression = true; } }
      if (!expression && this.weekday && !this.day && !this.days) {
        var temp = Date[this.weekday](); this.day = temp.getDate(); if (!this.month) { this.month = temp.getMonth(); }
        this.year = temp.getFullYear();
      }
      if (expression && this.weekday && this.unit != "month") { this.unit = "day"; gap = ($D.getDayNumberFromName(this.weekday) - today.getDay()); mod = 7; this.days = gap ? ((gap + (orient * mod)) % mod) : (orient * mod); }
      if (this.month && this.unit == "day" && this.operator) { this.value = (this.month + 1); this.month = null; }
      if (this.value != null && this.month != null && this.year != null) { this.day = this.value * 1; }
      if (this.month && !this.day && this.value) { today.set({ day: this.value * 1 }); if (!expression) { this.day = this.value * 1; } }
      if (!this.month && this.value && this.unit == "month" && !this.now) { this.month = this.value; expression = true; }
      if (expression && (this.month || this.month === 0) && this.unit != "year") { this.unit = "month"; gap = (this.month - today.getMonth()); mod = 12; this.months = gap ? ((gap + (orient * mod)) % mod) : (orient * mod); this.month = null; }
      if (!this.unit) { this.unit = "day"; }
      if (!this.value && this.operator && this.operator !== null && this[this.unit + "s"] && this[this.unit + "s"] !== null) { this[this.unit + "s"] = this[this.unit + "s"] + ((this.operator == "add") ? 1 : -1) + (this.value || 0) * orient; } else if (this[this.unit + "s"] == null || this.operator != null) {
        if (!this.value) { this.value = 1; }
        this[this.unit + "s"] = this.value * orient;
      }
      if (this.meridian && this.hour) { if (this.meridian == "p" && this.hour < 12) { this.hour = this.hour + 12; } else if (this.meridian == "a" && this.hour == 12) { this.hour = 0; } }
      if (this.weekday && !this.day && !this.days) { var temp = Date[this.weekday](); this.day = temp.getDate(); if (temp.getMonth() !== today.getMonth()) { this.month = temp.getMonth(); } }
      if ((this.month || this.month === 0) && !this.day) { this.day = 1; }
      if (!this.orient && !this.operator && this.unit == "week" && this.value && !this.day && !this.month) { return Date.today().setWeek(this.value); }
      if (expression && this.timezone && this.day && this.days) { this.day = this.days; }
      return (expression) ? today.add(this) : today.set(this);
    }
  }; var _ = $D.Parsing.Operators, g = $D.Grammar, t = $D.Translator, _fn; g.datePartDelimiter = _.rtoken(/^([\s\-\.\,\/\x27]+)/); g.timePartDelimiter = _.stoken(":"); g.whiteSpace = _.rtoken(/^\s*/); g.generalDelimiter = _.rtoken(/^(([\s\,]|at|@|on)+)/); var _C = {}; g.ctoken = function (keys) {
    var fn = _C[keys]; if (!fn) {
      var c = $C.regexPatterns; var kx = keys.split(/\s+/), px = []; for (var i = 0; i < kx.length; i++) { px.push(_.replace(_.rtoken(c[kx[i]]), kx[i])); }
      fn = _C[keys] = _.any.apply(null, px);
    }
    return fn;
  }; g.ctoken2 = function (key) { return _.rtoken($C.regexPatterns[key]); }; g.h = _.cache(_.process(_.rtoken(/^(0[0-9]|1[0-2]|[1-9])/), t.hour)); g.hh = _.cache(_.process(_.rtoken(/^(0[0-9]|1[0-2])/), t.hour)); g.H = _.cache(_.process(_.rtoken(/^([0-1][0-9]|2[0-3]|[0-9])/), t.hour)); g.HH = _.cache(_.process(_.rtoken(/^([0-1][0-9]|2[0-3])/), t.hour)); g.m = _.cache(_.process(_.rtoken(/^([0-5][0-9]|[0-9])/), t.minute)); g.mm = _.cache(_.process(_.rtoken(/^[0-5][0-9]/), t.minute)); g.s = _.cache(_.process(_.rtoken(/^([0-5][0-9]|[0-9])/), t.second)); g.ss = _.cache(_.process(_.rtoken(/^[0-5][0-9]/), t.second)); g.hms = _.cache(_.sequence([g.H, g.m, g.s], g.timePartDelimiter)); g.t = _.cache(_.process(g.ctoken2("shortMeridian"), t.meridian)); g.tt = _.cache(_.process(g.ctoken2("longMeridian"), t.meridian)); g.z = _.cache(_.process(_.rtoken(/^((\+|\-)\s*\d\d\d\d)|((\+|\-)\d\d\:?\d\d)/), t.timezone)); g.zz = _.cache(_.process(_.rtoken(/^((\+|\-)\s*\d\d\d\d)|((\+|\-)\d\d\:?\d\d)/), t.timezone)); g.zzz = _.cache(_.process(g.ctoken2("timezone"), t.timezone)); g.timeSuffix = _.each(_.ignore(g.whiteSpace), _.set([g.tt, g.zzz])); g.time = _.each(_.optional(_.ignore(_.stoken("T"))), g.hms, g.timeSuffix); g.d = _.cache(_.process(_.each(_.rtoken(/^([0-2]\d|3[0-1]|\d)/), _.optional(g.ctoken2("ordinalSuffix"))), t.day)); g.dd = _.cache(_.process(_.each(_.rtoken(/^([0-2]\d|3[0-1])/), _.optional(g.ctoken2("ordinalSuffix"))), t.day)); g.ddd = g.dddd = _.cache(_.process(g.ctoken("sun mon tue wed thu fri sat"), function (s) { return function () { this.weekday = s; }; })); g.M = _.cache(_.process(_.rtoken(/^(1[0-2]|0\d|\d)/), t.month)); g.MM = _.cache(_.process(_.rtoken(/^(1[0-2]|0\d)/), t.month)); g.MMM = g.MMMM = _.cache(_.process(g.ctoken("jan feb mar apr may jun jul aug sep oct nov dec"), t.month)); g.y = _.cache(_.process(_.rtoken(/^(\d\d?)/), t.year)); g.yy = _.cache(_.process(_.rtoken(/^(\d\d)/), t.year)); g.yyy = _.cache(_.process(_.rtoken(/^(\d\d?\d?\d?)/), t.year)); g.yyyy = _.cache(_.process(_.rtoken(/^(\d\d\d\d)/), t.year)); _fn = function () { return _.each(_.any.apply(null, arguments), _.not(g.ctoken2("timeContext"))); }; g.day = _fn(g.d, g.dd); g.month = _fn(g.M, g.MMM); g.year = _fn(g.yyyy, g.yy); g.orientation = _.process(g.ctoken("past future"), function (s) { return function () { this.orient = s; }; }); g.operator = _.process(g.ctoken("add subtract"), function (s) { return function () { this.operator = s; }; }); g.rday = _.process(g.ctoken("yesterday tomorrow today now"), t.rday); g.unit = _.process(g.ctoken("second minute hour day week month year"), function (s) { return function () { this.unit = s; }; }); g.value = _.process(_.rtoken(/^\d\d?(st|nd|rd|th)?/), function (s) { return function () { this.value = s.replace(/\D/g, ""); }; }); g.expression = _.set([g.rday, g.operator, g.value, g.unit, g.orientation, g.ddd, g.MMM]); _fn = function () { return _.set(arguments, g.datePartDelimiter); }; g.mdy = _fn(g.ddd, g.month, g.day, g.year); g.ymd = _fn(g.ddd, g.year, g.month, g.day); g.dmy = _fn(g.ddd, g.day, g.month, g.year); g.date = function (s) { return ((g[$C.dateElementOrder] || g.mdy).call(this, s)); }; g.format = _.process(_.many(_.any(_.process(_.rtoken(/^(dd?d?d?|MM?M?M?|yy?y?y?|hh?|HH?|mm?|ss?|tt?|zz?z?)/), function (fmt) { if (g[fmt]) { return g[fmt]; } else { throw $D.Parsing.Exception(fmt); } }), _.process(_.rtoken(/^[^dMyhHmstz]+/), function (s) { return _.ignore(_.stoken(s)); }))), function (rules) { return _.process(_.each.apply(null, rules), t.finishExact); }); var _F = {}; var _get = function (f) { return _F[f] = (_F[f] || g.format(f)[0]); }; g.formats = function (fx) {
    if (fx instanceof Array) {
      var rx = []; for (var i = 0; i < fx.length; i++) { rx.push(_get(fx[i])); }
      return _.any.apply(null, rx);
    } else { return _get(fx); }
  }; g._formats = g.formats(["\"yyyy-MM-ddTHH:mm:ssZ\"", "yyyy-MM-ddTHH:mm:ssZ", "yyyy-MM-ddTHH:mm:ssz", "yyyy-MM-ddTHH:mm:ss", "yyyy-MM-ddTHH:mmZ", "yyyy-MM-ddTHH:mmz", "yyyy-MM-ddTHH:mm", "ddd, MMM dd, yyyy H:mm:ss tt", "ddd MMM d yyyy HH:mm:ss zzz", "MMddyyyy", "ddMMyyyy", "Mddyyyy", "ddMyyyy", "Mdyyyy", "dMyyyy", "yyyy", "Mdyy", "dMyy", "d"]); g._start = _.process(_.set([g.date, g.time, g.expression], g.generalDelimiter, g.whiteSpace), t.finish); g.start = function (s) {
    try { var r = g._formats.call({}, s); if (r[1].length === 0) { return r; } } catch (e) { }
    return g._start.call({}, s);
  }; $D._parse = $D.parse; $D.parse = function (s) {
    var r = null; if (!s) { return null; }
    if (s instanceof Date) { return s; }
    try { r = $D.Grammar.start.call({}, s.replace(/^\s*(\S*(\s+\S+)*)\s*$/, "$1")); } catch (e) { return null; }
    return ((r[1].length === 0) ? r[0] : null);
  }; $D.getParseFunction = function (fx) {
    var fn = $D.Grammar.formats(fx); return function (s) {
      var r = null; try { r = fn.call({}, s); } catch (e) { return null; }
      return ((r[1].length === 0) ? r[0] : null);
    };
  }; $D.parseExact = function (s, fx) { return $D.getParseFunction(fx)(s); };
}());

/*!
* Datepicker v1.0.9
* https://fengyuanchen.github.io/datepicker
*
* Copyright 2014-present Chen Fengyuan
* Released under the MIT license
*
* Date: 2019-09-21T06:57:34.100Z
*/

(function (global, factory) {
  typeof exports === 'object' && typeof module !== 'undefined' ? factory(require('jquery')) :
    typeof define === 'function' && define.amd ? define(['jquery'], factory) :
      (global = global || self, factory(global.jQuery));
}(this, function ($) {
  'use strict';

  $ = $ && $.hasOwnProperty('default') ? $['default'] : $;

  function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError("Cannot call a class as a function");
    }
  }

  function _defineProperties(target, props) {
    for (var i = 0; i < props.length; i++) {
      var descriptor = props[i];
      descriptor.enumerable = descriptor.enumerable || false;
      descriptor.configurable = true;
      if ("value" in descriptor) descriptor.writable = true;
      Object.defineProperty(target, descriptor.key, descriptor);
    }
  }

  function _createClass(Constructor, protoProps, staticProps) {
    if (protoProps) _defineProperties(Constructor.prototype, protoProps);
    if (staticProps) _defineProperties(Constructor, staticProps);
    return Constructor;
  }

  var DEFAULTS = {
    // Show the datepicker automatically when initialized
    autoShow: false,
    // Hide the datepicker automatically when picked
    autoHide: false,
    // Pick the initial date automatically when initialized
    autoPick: false,
    // Enable inline mode
    inline: false,
    // A element (or selector) for putting the datepicker
    container: null,
    // A element (or selector) for triggering the datepicker
    trigger: null,
    // The ISO language code (built-in: en-US)
    language: '',
    // The date string format
    format: 'mm/dd/yyyy',
    // The initial date
    date: null,
    // The start view date
    startDate: null,
    // The end view date
    endDate: null,
    // The start view when initialized
    startView: 0,
    // 0 for days, 1 for months, 2 for years
    // The start day of the week
    // 0 for Sunday, 1 for Monday, 2 for Tuesday, 3 for Wednesday,
    // 4 for Thursday, 5 for Friday, 6 for Saturday
    weekStart: 0,
    // Show year before month on the datepicker header
    yearFirst: false,
    // A string suffix to the year number.
    yearSuffix: '',
    // Days' name of the week.
    days: ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'],
    // Shorter days' name
    daysShort: ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'],
    // Shortest days' name
    daysMin: ['Su', 'Mo', 'Tu', 'We', 'Th', 'Fr', 'Sa'],
    // Months' name
    months: ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'],
    // Shorter months' name
    monthsShort: ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'],
    // A element tag for each item of years, months and days
    itemTag: 'li',
    // A class (CSS) for muted date item
    mutedClass: 'muted',
    // A class (CSS) for picked date item
    pickedClass: 'picked',
    // A class (CSS) for disabled date item
    disabledClass: 'disabled',
    // A class (CSS) for highlight date item
    highlightedClass: 'highlighted',
    // The template of the datepicker
    template: '<div class="datepicker-container">' + '<div class="datepicker-panel" data-view="years picker">' + '<ul>' + '<li data-view="years prev">&lsaquo;</li>' + '<li data-view="years current"></li>' + '<li data-view="years next">&rsaquo;</li>' + '</ul>' + '<ul data-view="years"></ul>' + '</div>' + '<div class="datepicker-panel" data-view="months picker">' + '<ul>' + '<li data-view="year prev">&lsaquo;</li>' + '<li data-view="year current"></li>' + '<li data-view="year next">&rsaquo;</li>' + '</ul>' + '<ul data-view="months"></ul>' + '</div>' + '<div class="datepicker-panel" data-view="days picker">' + '<ul>' + '<li data-view="month prev">&lsaquo;</li>' + '<li data-view="month current"></li>' + '<li data-view="month next">&rsaquo;</li>' + '</ul>' + '<ul data-view="week"></ul>' + '<ul data-view="days"></ul>' + '</div>' + '</div>',
    // The offset top or bottom of the datepicker from the element
    offset: 10,
    // The `z-index` of the datepicker
    zIndex: 1000,
    // Filter each date item (return `false` to disable a date item)
    filter: null,
    // Event shortcuts
    show: null,
    hide: null,
    pick: null,
    startYear: -4,
    endYear: 5,
    showYear: 10,
    diffYear: 0
  };

  var IS_BROWSER = typeof window !== 'undefined';
  var WINDOW = IS_BROWSER ? window : {};
  var IS_TOUCH_DEVICE = IS_BROWSER ? 'ontouchstart' in WINDOW.document.documentElement : false;
  var NAMESPACE = 'datepicker';
  var EVENT_CLICK = "click.".concat(NAMESPACE);
  var EVENT_FOCUS = "focus.".concat(NAMESPACE);
  var EVENT_HIDE = "hide.".concat(NAMESPACE);
  var EVENT_KEYUP = "keyup.".concat(NAMESPACE);
  var EVENT_PICK = "pick.".concat(NAMESPACE);
  var EVENT_RESIZE = "resize.".concat(NAMESPACE);
  var EVENT_SCROLL = "scroll.".concat(NAMESPACE);
  var EVENT_SHOW = "show.".concat(NAMESPACE);
  var EVENT_TOUCH_START = "touchstart.".concat(NAMESPACE);
  var CLASS_HIDE = "".concat(NAMESPACE, "-hide");
  var LANGUAGES = {};
  var VIEWS = {
    DAYS: 0,
    MONTHS: 1,
    YEARS: 2
  };

  var toString = Object.prototype.toString;
  function typeOf(obj) {
    return toString.call(obj).slice(8, -1).toLowerCase();
  }
  function isString(value) {
    return typeof value === 'string';
  }
  var isNaN = Number.isNaN || WINDOW.isNaN;
  function isNumber(value) {
    return typeof value === 'number' && !isNaN(value);
  }
  function isUndefined(value) {
    return typeof value === 'undefined';
  }
  function isDate(value) {
    return typeOf(value) === 'date' && !isNaN(value.getTime());
  }
  function proxy(fn, context) {
    for (var _len = arguments.length, args = new Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {
      args[_key - 2] = arguments[_key];
    }

    return function () {
      for (var _len2 = arguments.length, args2 = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
        args2[_key2] = arguments[_key2];
      }

      return fn.apply(context, args.concat(args2));
    };
  }
  function selectorOf(view) {
    return "[data-view=\"".concat(view, "\"]");
  }
  function isLeapYear(year) {
    return year % 4 === 0 && year % 100 !== 0 || year % 400 === 0;
  }
  function getDaysInMonth(year, month) {
    return [31, isLeapYear(year) ? 29 : 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31][month];
  }
  function getMinDay(year, month, day) {
    return Math.min(day, getDaysInMonth(year, month));
  }
  var formatParts = /(y|m|d)+/g;
  function parseFormat(format) {
    var source = String(format).toLowerCase();
    var parts = source.match(formatParts);

    if (!parts || parts.length === 0) {
      throw new Error('Invalid date format.');
    }

    format = {
      source: source,
      parts: parts
    };
    $.each(parts, function (i, part) {
      switch (part) {
        case 'dd':
        case 'd':
          format.hasDay = true;
          break;

        case 'mm':
        case 'm':
          format.hasMonth = true;
          break;

        case 'yyyy':
        case 'yy':
          format.hasYear = true;
          break;

        default:
      }
    });
    return format;
  }
  function getScrollParent(element) {
    var includeHidden = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
    var $element = $(element);
    var position = $element.css('position');
    var excludeStaticParent = position === 'absolute';
    var overflowRegex = includeHidden ? /auto|scroll|hidden/ : /auto|scroll/;
    var scrollParent = $element.parents().filter(function (index, parent) {
      var $parent = $(parent);

      if (excludeStaticParent && $parent.css('position') === 'static') {
        return false;
      }

      return overflowRegex.test($parent.css('overflow') + $parent.css('overflow-y') + $parent.css('overflow-x'));
    }).eq(0);
    return position === 'fixed' || !scrollParent.length ? $(element.ownerDocument || document) : scrollParent;
  }
  /**
   * Add leading zeroes to the given value
   * @param {number} value - The value to add.
   * @param {number} [length=1] - The expected value length.
   * @returns {string} Returns converted value.
   */

  function addLeadingZero(value) {
    var length = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;
    var str = String(Math.abs(value));
    var i = str.length;
    var result = '';

    if (value < 0) {
      result += '-';
    }

    while (i < length) {
      i += 1;
      result += '0';
    }

    return result + str;
  }

  var REGEXP_DIGITS = /\d+/g;
  var methods = {
    // Show the datepicker
    show: function show() {
      if (!this.built) {
        this.build();
      }

      if (this.shown) {
        return;
      }

      if (this.trigger(EVENT_SHOW).isDefaultPrevented()) {
        return;
      }

      this.shown = true;
      this.$picker.removeClass(CLASS_HIDE).on(EVENT_CLICK, $.proxy(this.click, this));
      this.showView(this.options.startView);

      if (!this.inline) {
        this.$scrollParent.on(EVENT_SCROLL, $.proxy(this.place, this));
        $(window).on(EVENT_RESIZE, this.onResize = proxy(this.place, this));
        $(document).on(EVENT_CLICK, this.onGlobalClick = proxy(this.globalClick, this));
        $(document).on(EVENT_KEYUP, this.onGlobalKeyup = proxy(this.globalKeyup, this));

        if (IS_TOUCH_DEVICE) {
          $(document).on(EVENT_TOUCH_START, this.onTouchStart = proxy(this.touchstart, this));
        }

        this.place();
      }
    },
    // Hide the datepicker
    hide: function hide() {
      if (!this.shown) {
        return;
      }

      if (this.trigger(EVENT_HIDE).isDefaultPrevented()) {
        return;
      }

      this.shown = false;
      this.$picker.addClass(CLASS_HIDE).off(EVENT_CLICK, this.click);

      if (!this.inline) {
        this.$scrollParent.off(EVENT_SCROLL, this.place);
        $(window).off(EVENT_RESIZE, this.onResize);
        $(document).off(EVENT_CLICK, this.onGlobalClick);
        $(document).off(EVENT_KEYUP, this.onGlobalKeyup);

        if (IS_TOUCH_DEVICE) {
          $(document).off(EVENT_TOUCH_START, this.onTouchStart);
        }
      }
    },
    toggle: function toggle() {
      if (this.shown) {
        this.hide();
      } else {
        this.show();
      }
    },
    // Update the datepicker with the current input value
    update: function update() {
      var value = this.getValue();

      if (value === this.oldValue) {
        return;
      }

      this.setDate(value, true);
      this.oldValue = value;
    },

    /**
     * Pick the current date to the element
     *
     * @param {String} _view (private)
     */
    pick: function pick(_view) {
      var $this = this.$element;
      var date = this.date;

      if (this.trigger(EVENT_PICK, {
        view: _view || '',
        date: date
      }).isDefaultPrevented()) {
        return;
      }

      date = this.formatDate(this.date);
      this.setValue(date);

      if (this.isInput) {
        $this.trigger('input');
        $this.trigger('change');
      }
    },
    // Reset the datepicker
    reset: function reset() {
      this.setDate(this.initialDate, true);
      this.setValue(this.initialValue);

      if (this.shown) {
        this.showView(this.options.startView);
      }
    },

    /**
     * Get the month name with given argument or the current date
     *
     * @param {Number} month (optional)
     * @param {Boolean} shortForm (optional)
     * @return {String} (month name)
     */
    getMonthName: function getMonthName(month, shortForm) {
      var options = this.options;
      var monthsShort = options.monthsShort;
      var months = options.months;

      if ($.isNumeric(month)) {
        month = Number(month);
      } else if (isUndefined(shortForm)) {
        shortForm = month;
      }

      if (shortForm === true) {
        months = monthsShort;
      }

      return months[isNumber(month) ? month : this.date.getMonth()];
    },

    /**
     * Get the day name with given argument or the current date
     *
     * @param {Number} day (optional)
     * @param {Boolean} shortForm (optional)
     * @param {Boolean} min (optional)
     * @return {String} (day name)
     */
    getDayName: function getDayName(day, shortForm, min) {
      var options = this.options;
      var days = options.days;

      if ($.isNumeric(day)) {
        day = Number(day);
      } else {
        if (isUndefined(min)) {
          min = shortForm;
        }

        if (isUndefined(shortForm)) {
          shortForm = day;
        }
      }

      if (min) {
        days = options.daysMin;
      } else if (shortForm) {
        days = options.daysShort;
      }

      return days[isNumber(day) ? day : this.date.getDay()];
    },

    /**
     * Get the current date
     *
     * @param {Boolean} formatted (optional)
     * @return {Date|String} (date)
     */
    getDate: function getDate(formatted) {
      var date = this.date;
      return formatted ? this.formatDate(date) : new Date(date);
    },

    /**
     * Set the current date with a new date
     *
     * @param {Date} date
     * @param {Boolean} _updated (private)
     */
    setDate: function setDate(date, _updated) {
      var filter = this.options.filter;

      if (isDate(date) || isString(date)) {
        date = this.parseDate(date);

        if ($.isFunction(filter) && filter.call(this.$element, date, 'day') === false) {
          return;
        }

        this.date = date;
        this.viewDate = new Date(date);

        if (!_updated) {
          this.pick();
        }

        if (this.built) {
          this.render();
        }
      }
    },

    /**
     * Set the start view date with a new date
     *
     * @param {Date|string|null} date
     */
    setStartDate: function setStartDate(date) {
      if (isDate(date) || isString(date)) {
        this.startDate = this.parseDate(date);
      } else {
        this.startDate = null;
      }

      if (this.built) {
        this.render();
      }
    },

    setYearData: function setYearData(data) {
      this.options.startYear = data.startYear;
      this.options.endYear = data.endYear;
      this.options.showYear = data.showYear;
      this.options.diffYear = data.diffYear;
    },

    /**
     * Set the end view date with a new date
     *
     * @param {Date|string|null} date
     */
    setEndDate: function setEndDate(date) {
      if (isDate(date) || isString(date)) {
        this.endDate = this.parseDate(date);
      } else {
        this.endDate = null;
      }

      if (this.built) {
        this.render();
      }
    },

    /**
     * Parse a date string with the set date format
     *
     * @param {String} date
     * @return {Date} (parsed date)
     */
    parseDate: function parseDate(date) {
      var format = this.format;
      var parts = [];

      if (!isDate(date)) {
        if (isString(date)) {
          parts = date.match(REGEXP_DIGITS) || [];
        }

        date = date ? new Date(date) : new Date();

        if (!isDate(date)) {
          date = new Date();
        }

        if (parts.length === format.parts.length) {
          // Set year and month first
          $.each(parts, function (i, part) {
            var value = parseInt(part, 10);

            switch (format.parts[i]) {
              case 'yy':
                date.setFullYear(2000 + value);
                break;

              case 'yyyy':
                // Converts 2-digit year to 2000+
                date.setFullYear(part.length === 2 ? 2000 + value : value);
                break;

              case 'mm':
              case 'm':
                date.setMonth(value - 1);
                break;

              default:
            }
          }); // Set day in the last to avoid converting `31/10/2019` to `01/10/2019`

          $.each(parts, function (i, part) {
            var value = parseInt(part, 10);

            switch (format.parts[i]) {
              case 'dd':
              case 'd':
                date.setDate(value);
                break;

              default:
            }
          });
        }
      } // Ignore hours, minutes, seconds and milliseconds to avoid side effect (#192)


      return new Date(date.getFullYear(), date.getMonth(), date.getDate());
    },

    /**
     * Format a date object to a string with the set date format
     *
     * @param {Date} date
     * @return {String} (formatted date)
     */
    formatDate: function formatDate(date) {
      var format = this.format;
      var formatted = '';

      if (isDate(date)) {
        var year = date.getFullYear();
        var month = date.getMonth();
        var day = date.getDate();
        var values = {
          d: day,
          dd: addLeadingZero(day, 2),
          m: month + 1,
          mm: addLeadingZero(month + 1, 2),
          yy: String(year).substring(2),
          yyyy: addLeadingZero(year, 4)
        };
        formatted = format.source;
        $.each(format.parts, function (i, part) {
          formatted = formatted.replace(part, values[part]);
        });
      }

      return formatted;
    },
    // Destroy the datepicker and remove the instance from the target element
    destroy: function destroy() {
      this.unbind();
      this.unbuild();
      this.$element.removeData(NAMESPACE);
    }
  };

  var handlers = {
    click: function click(e) {
      var $target = $(e.target);
      var options = this.options,
        date = this.date,
        viewDate = this.viewDate,
        format = this.format;
      e.stopPropagation();
      e.preventDefault();

      if ($target.hasClass('disabled')) {
        return;
      }

      var view = $target.data('view');
      var viewYear = viewDate.getFullYear();
      var viewMonth = viewDate.getMonth();
      var viewDay = viewDate.getDate();
      var showYear = options.showYear;

      switch (view) {
        case 'years prev':
        case 'years next':
          {
            viewYear = view === 'years prev' ? viewYear - showYear : viewYear + showYear;
            viewDate.setFullYear(viewYear);
            viewDate.setDate(getMinDay(viewYear, viewMonth, viewDay));
            this.renderYears();
            break;
          }

        case 'year prev':
        case 'year next':
          viewYear = view === 'year prev' ? viewYear - 1 : viewYear + 1;
          viewDate.setFullYear(viewYear);
          viewDate.setDate(getMinDay(viewYear, viewMonth, viewDay));
          this.renderMonths();
          break;

        case 'year current':
          if (format.hasYear) {
            this.showView(VIEWS.YEARS);
          }

          break;

        case 'year picked':
          if (format.hasMonth) {
            this.showView(VIEWS.MONTHS);
          } else {
            $target.siblings(".".concat(options.pickedClass)).removeClass(options.pickedClass).data('view', 'year');
            this.hideView();
          }

          this.pick('year');
          break;

        case 'year':
          viewYear = parseInt($target.text(), 10); // Set date first to avoid month changing (#195)

          date.setDate(getMinDay(viewYear, viewMonth, viewDay));
          date.setFullYear(viewYear);
          viewDate.setDate(getMinDay(viewYear, viewMonth, viewDay));
          viewDate.setFullYear(viewYear);

          if (format.hasMonth) {
            this.showView(VIEWS.MONTHS);
          } else {
            $target.addClass(options.pickedClass).data('view', 'year picked').siblings(".".concat(options.pickedClass)).removeClass(options.pickedClass).data('view', 'year');
            this.hideView();
          }

          this.pick('year');
          break;

        case 'month prev':
        case 'month next':
          viewMonth = view === 'month prev' ? viewMonth - 1 : viewMonth + 1;

          if (viewMonth < 0) {
            viewYear -= 1;
            viewMonth += 12;
          } else if (viewMonth > 11) {
            viewYear += 1;
            viewMonth -= 12;
          }

          viewDate.setFullYear(viewYear);
          viewDate.setDate(getMinDay(viewYear, viewMonth, viewDay));
          viewDate.setMonth(viewMonth);
          this.renderDays();
          break;

        case 'month current':
          if (format.hasMonth) {
            this.showView(VIEWS.MONTHS);
          }

          break;

        case 'month picked':
          if (format.hasDay) {
            this.showView(VIEWS.DAYS);
          } else {
            $target.siblings(".".concat(options.pickedClass)).removeClass(options.pickedClass).data('view', 'month');
            this.hideView();
          }

          this.pick('month');
          break;

        case 'month':
          viewMonth = $.inArray($target.text(), options.monthsShort);
          date.setFullYear(viewYear); // Set date before month to avoid month changing (#195)

          date.setDate(getMinDay(viewYear, viewMonth, viewDay));
          date.setMonth(viewMonth);
          viewDate.setFullYear(viewYear);
          viewDate.setDate(getMinDay(viewYear, viewMonth, viewDay));
          viewDate.setMonth(viewMonth);

          if (format.hasDay) {
            this.showView(VIEWS.DAYS);
          } else {
            $target.addClass(options.pickedClass).data('view', 'month picked').siblings(".".concat(options.pickedClass)).removeClass(options.pickedClass).data('view', 'month');
            this.hideView();
          }

          this.pick('month');
          break;

        case 'day prev':
        case 'day next':
        case 'day':
          if (view === 'day prev') {
            viewMonth -= 1;
          } else if (view === 'day next') {
            viewMonth += 1;
          }

          viewDay = parseInt($target.text(), 10); // Set date to 1 to avoid month changing (#195)

          date.setDate(1);
          date.setFullYear(viewYear);
          date.setMonth(viewMonth);
          date.setDate(viewDay);
          viewDate.setDate(1);
          viewDate.setFullYear(viewYear);
          viewDate.setMonth(viewMonth);
          viewDate.setDate(viewDay);
          this.renderDays();

          if (view === 'day') {
            this.hideView();
          }

          this.pick('day');
          break;

        case 'day picked':
          this.hideView();
          this.pick('day');
          break;

        default:
      }
    },
    globalClick: function globalClick(_ref) {
      var target = _ref.target;
      var element = this.element,
        $trigger = this.$trigger;
      var trigger = $trigger[0];
      var hidden = true;

      while (target !== document) {
        if (target === trigger || target === element) {
          hidden = false;
          break;
        }

        target = target.parentNode;
      }

      if (hidden) {
        this.hide();
      }
    },
    keyup: function keyup() {
      this.update();
    },
    globalKeyup: function globalKeyup(_ref2) {
      var target = _ref2.target,
        key = _ref2.key,
        keyCode = _ref2.keyCode;

      if (this.isInput && target !== this.element && this.shown && (key === 'Tab' || keyCode === 9)) {
        this.hide();
      }
    },
    touchstart: function touchstart(_ref3) {
      var target = _ref3.target;

      // Emulate click in touch devices to support hiding the picker automatically (#197).
      if (this.isInput && target !== this.element && !$.contains(this.$picker[0], target)) {
        this.hide();
        this.element.blur();
      }
    }
  };

  var render = {
    render: function render() {
      this.renderYears();
      this.renderMonths();
      this.renderDays();
    },
    renderWeek: function renderWeek() {
      var _this = this;

      var items = [];
      var _this$options = this.options,
        weekStart = _this$options.weekStart,
        daysMin = _this$options.daysMin;
      weekStart = parseInt(weekStart, 10) % 7;
      daysMin = daysMin.slice(weekStart).concat(daysMin.slice(0, weekStart));
      $.each(daysMin, function (i, day) {
        items.push(_this.createItem({
          text: day
        }));
      });
      this.$week.html(items.join(''));
    },
    renderYears: function renderYears() {
      var options = this.options,
        startDate = this.startDate,
        endDate = this.endDate;
      var disabledClass = options.disabledClass,
        filter = options.filter,
        yearSuffix = options.yearSuffix;
      var viewYear = options.diffYear && this.viewDate.getFullYear() >= endDate.getFullYear()
        ? this.viewDate.getFullYear() - options.diffYear
        : this.viewDate.getFullYear();
      var now = new Date();
      var thisYear = now.getFullYear();
      var year = this.date.getFullYear();
      var start = options.startYear;
      var end = options.endYear;
      var items = [];
      var prevDisabled = false;
      var nextDisabled = false;
      var i;

      for (i = start; i <= end; i += 1) {
        var date = new Date(viewYear + i, 1, 1);
        var disabled = false;

        if (startDate) {
          disabled = date.getFullYear() < startDate.getFullYear();

          if (i === start) {
            prevDisabled = disabled;
          }
        }

        if (!disabled && endDate) {
          disabled = date.getFullYear() > endDate.getFullYear();

          if (i === end) {
            nextDisabled = disabled;
          }
        }

        if (!disabled && filter) {
          disabled = filter.call(this.$element, date, 'year') === false;
        }

        var picked = viewYear + i === year;
        var view = picked ? 'year picked' : 'year';
        items.push(this.createItem({
          picked: picked,
          disabled: disabled,
          text: viewYear + i,
          view: disabled ? 'year disabled' : view,
          highlighted: date.getFullYear() === thisYear
        }));
      }

      this.$yearsPrev.toggleClass(disabledClass, prevDisabled);
      this.$yearsNext.toggleClass(disabledClass, nextDisabled);
      this.$yearsCurrent.toggleClass(disabledClass, true).html("".concat(viewYear + start + yearSuffix, " - ").concat(viewYear + end).concat(yearSuffix));
      this.$years.html(items.join(''));
    },
    renderMonths: function renderMonths() {
      var options = this.options,
        startDate = this.startDate,
        endDate = this.endDate,
        viewDate = this.viewDate;
      var disabledClass = options.disabledClass || '';
      var months = options.monthsShort;
      var filter = $.isFunction(options.filter) && options.filter;
      var viewYear = viewDate.getFullYear();
      var now = new Date();
      var thisYear = now.getFullYear();
      var thisMonth = now.getMonth();
      var year = this.date.getFullYear();
      var month = this.date.getMonth();
      var items = [];
      var prevDisabled = false;
      var nextDisabled = false;
      var i;

      for (i = 0; i <= 11; i += 1) {
        var date = new Date(viewYear, i, 1);
        var disabled = false;

        if (startDate) {
          prevDisabled = date.getFullYear() === startDate.getFullYear();
          disabled = prevDisabled && date.getMonth() < startDate.getMonth();
        }

        if (!disabled && endDate) {
          nextDisabled = date.getFullYear() === endDate.getFullYear();
          disabled = nextDisabled && date.getMonth() > endDate.getMonth();
        }

        if (!disabled && filter) {
          disabled = filter.call(this.$element, date, 'month') === false;
        }

        var picked = viewYear === year && i === month;
        var view = picked ? 'month picked' : 'month';
        items.push(this.createItem({
          disabled: disabled,
          picked: picked,
          highlighted: viewYear === thisYear && date.getMonth() === thisMonth,
          index: i,
          text: months[i],
          view: disabled ? 'month disabled' : view
        }));
      }

      this.$yearPrev.toggleClass(disabledClass, prevDisabled);
      this.$yearNext.toggleClass(disabledClass, nextDisabled);
      this.$yearCurrent.toggleClass(disabledClass, prevDisabled && nextDisabled).html(viewYear + options.yearSuffix || '');
      this.$months.html(items.join(''));
    },
    renderDays: function renderDays() {
      var $element = this.$element,
        options = this.options,
        startDate = this.startDate,
        endDate = this.endDate,
        viewDate = this.viewDate,
        currentDate = this.date;
      var disabledClass = options.disabledClass,
        filter = options.filter,
        months = options.months,
        weekStart = options.weekStart,
        yearSuffix = options.yearSuffix;
      var viewYear = viewDate.getFullYear();
      var viewMonth = viewDate.getMonth();
      var now = new Date();
      var thisYear = now.getFullYear();
      var thisMonth = now.getMonth();
      var thisDay = now.getDate();
      var year = currentDate.getFullYear();
      var month = currentDate.getMonth();
      var day = currentDate.getDate();
      var length;
      var i;
      var n; // Days of prev month
      // -----------------------------------------------------------------------

      var prevItems = [];
      var prevViewYear = viewYear;
      var prevViewMonth = viewMonth;
      var prevDisabled = false;

      if (viewMonth === 0) {
        prevViewYear -= 1;
        prevViewMonth = 11;
      } else {
        prevViewMonth -= 1;
      } // The length of the days of prev month


      length = getDaysInMonth(prevViewYear, prevViewMonth); // The first day of current month

      var firstDay = new Date(viewYear, viewMonth, 1); // The visible length of the days of prev month
      // [0,1,2,3,4,5,6] - [0,1,2,3,4,5,6] => [-6,-5,-4,-3,-2,-1,0,1,2,3,4,5,6]

      n = firstDay.getDay() - parseInt(weekStart, 10) % 7; // [-6,-5,-4,-3,-2,-1,0,1,2,3,4,5,6] => [1,2,3,4,5,6,7]

      if (n <= 0) {
        n += 7;
      }

      if (startDate) {
        prevDisabled = firstDay.getTime() <= startDate.getTime();
      }

      for (i = length - (n - 1); i <= length; i += 1) {
        var prevViewDate = new Date(prevViewYear, prevViewMonth, i);
        var disabled = false;

        if (startDate) {
          disabled = prevViewDate.getTime() < startDate.getTime();
        }

        if (!disabled && filter) {
          disabled = filter.call($element, prevViewDate, 'day') === false;
        }

        prevItems.push(this.createItem({
          disabled: disabled,
          highlighted: prevViewYear === thisYear && prevViewMonth === thisMonth && prevViewDate.getDate() === thisDay,
          muted: true,
          picked: prevViewYear === year && prevViewMonth === month && i === day,
          text: i,
          view: 'day prev'
        }));
      } // Days of next month
      // -----------------------------------------------------------------------


      var nextItems = [];
      var nextViewYear = viewYear;
      var nextViewMonth = viewMonth;
      var nextDisabled = false;

      if (viewMonth === 11) {
        nextViewYear += 1;
        nextViewMonth = 0;
      } else {
        nextViewMonth += 1;
      } // The length of the days of current month


      length = getDaysInMonth(viewYear, viewMonth); // The visible length of next month (42 means 6 rows and 7 columns)

      n = 42 - (prevItems.length + length); // The last day of current month

      var lastDate = new Date(viewYear, viewMonth, length);

      if (endDate) {
        nextDisabled = lastDate.getTime() >= endDate.getTime();
      }

      for (i = 1; i <= n; i += 1) {
        var date = new Date(nextViewYear, nextViewMonth, i);
        var picked = nextViewYear === year && nextViewMonth === month && i === day;
        var _disabled = false;

        if (endDate) {
          _disabled = date.getTime() > endDate.getTime();
        }

        if (!_disabled && filter) {
          _disabled = filter.call($element, date, 'day') === false;
        }

        nextItems.push(this.createItem({
          disabled: _disabled,
          picked: picked,
          highlighted: nextViewYear === thisYear && nextViewMonth === thisMonth && date.getDate() === thisDay,
          muted: true,
          text: i,
          view: 'day next'
        }));
      } // Days of current month
      // -----------------------------------------------------------------------


      var items = [];

      for (i = 1; i <= length; i += 1) {
        var _date = new Date(viewYear, viewMonth, i);

        var _disabled2 = false;

        if (startDate) {
          _disabled2 = _date.getTime() < startDate.getTime();
        }

        if (!_disabled2 && endDate) {
          _disabled2 = _date.getTime() > endDate.getTime();
        }

        if (!_disabled2 && filter) {
          _disabled2 = filter.call($element, _date, 'day') === false;
        }

        var _picked = viewYear === year && viewMonth === month && i === day;

        var view = _picked ? 'day picked' : 'day';
        items.push(this.createItem({
          disabled: _disabled2,
          picked: _picked,
          highlighted: viewYear === thisYear && viewMonth === thisMonth && _date.getDate() === thisDay,
          text: i,
          view: _disabled2 ? 'day disabled' : view
        }));
      } // Render days picker
      // -----------------------------------------------------------------------


      this.$monthPrev.toggleClass(disabledClass, prevDisabled);
      this.$monthNext.toggleClass(disabledClass, nextDisabled);
      this.$monthCurrent.toggleClass(disabledClass, prevDisabled && nextDisabled).html(options.yearFirst ? "".concat(viewYear + yearSuffix, " ").concat(months[viewMonth]) : "".concat(months[viewMonth], " ").concat(viewYear).concat(yearSuffix));
      this.$days.html(prevItems.join('') + items.join('') + nextItems.join(''));
    }
  };

  var CLASS_TOP_LEFT = "".concat(NAMESPACE, "-top-left");
  var CLASS_TOP_RIGHT = "".concat(NAMESPACE, "-top-right");
  var CLASS_BOTTOM_LEFT = "".concat(NAMESPACE, "-bottom-left");
  var CLASS_BOTTOM_RIGHT = "".concat(NAMESPACE, "-bottom-right");
  var CLASS_PLACEMENTS = [CLASS_TOP_LEFT, CLASS_TOP_RIGHT, CLASS_BOTTOM_LEFT, CLASS_BOTTOM_RIGHT].join(' ');

  var Datepicker =
    /*#__PURE__*/
    function () {
      function Datepicker(element) {
        var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

        _classCallCheck(this, Datepicker);

        this.$element = $(element);
        this.element = element;
        this.options = $.extend({}, DEFAULTS, LANGUAGES[options.language], $.isPlainObject(options) && options);
        this.$scrollParent = getScrollParent(element, true);
        this.built = false;
        this.shown = false;
        this.isInput = false;
        this.inline = false;
        this.initialValue = '';
        this.initialDate = null;
        this.startDate = null;
        this.endDate = null;
        this.init();
      }

      _createClass(Datepicker, [{
        key: "init",
        value: function init() {
          var $this = this.$element,
            options = this.options;
          var startDate = options.startDate,
            endDate = options.endDate,
            date = options.date;
          this.$trigger = $(options.trigger);
          this.isInput = $this.is('input') || $this.is('textarea');
          this.inline = options.inline && (options.container || !this.isInput);
          this.format = parseFormat(options.format);
          var initialValue = this.getValue();
          this.initialValue = initialValue;
          this.oldValue = initialValue;
          date = this.parseDate(date || initialValue);

          if (startDate) {
            startDate = this.parseDate(startDate);

            if (date.getTime() < startDate.getTime()) {
              date = new Date(startDate);
            }

            this.startDate = startDate;
          }

          if (endDate) {
            endDate = this.parseDate(endDate);

            if (startDate && endDate.getTime() < startDate.getTime()) {
              endDate = new Date(startDate);
            }

            if (date.getTime() > endDate.getTime()) {
              date = new Date(endDate);
            }

            this.endDate = endDate;
          }

          this.date = date;
          this.viewDate = new Date(date);
          this.initialDate = new Date(this.date);
          this.bind();

          if (options.autoShow || this.inline) {
            this.show();
          }

          if (options.autoPick) {
            this.pick();
          }
        }
      }, {
        key: "build",
        value: function build() {
          if (this.built) {
            return;
          }

          this.built = true;
          var $this = this.$element,
            options = this.options;
          var $picker = $(options.template);
          this.$picker = $picker;
          this.$week = $picker.find(selectorOf('week')); // Years view

          this.$yearsPicker = $picker.find(selectorOf('years picker'));
          this.$yearsPrev = $picker.find(selectorOf('years prev'));
          this.$yearsNext = $picker.find(selectorOf('years next'));
          this.$yearsCurrent = $picker.find(selectorOf('years current'));
          this.$years = $picker.find(selectorOf('years')); // Months view

          this.$monthsPicker = $picker.find(selectorOf('months picker'));
          this.$yearPrev = $picker.find(selectorOf('year prev'));
          this.$yearNext = $picker.find(selectorOf('year next'));
          this.$yearCurrent = $picker.find(selectorOf('year current'));
          this.$months = $picker.find(selectorOf('months')); // Days view

          this.$daysPicker = $picker.find(selectorOf('days picker'));
          this.$monthPrev = $picker.find(selectorOf('month prev'));
          this.$monthNext = $picker.find(selectorOf('month next'));
          this.$monthCurrent = $picker.find(selectorOf('month current'));
          this.$days = $picker.find(selectorOf('days'));

          if (this.inline) {
            $(options.container || $this).append($picker.addClass("".concat(NAMESPACE, "-inline")));
          } else {
            $(document.body).append($picker.addClass("".concat(NAMESPACE, "-dropdown")));
            $picker.addClass(CLASS_HIDE).css({
              zIndex: parseInt(options.zIndex, 10)
            });
          }

          this.renderWeek();
        }
      }, {
        key: "unbuild",
        value: function unbuild() {
          if (!this.built) {
            return;
          }

          this.built = false;
          this.$picker.remove();
        }
      }, {
        key: "bind",
        value: function bind() {
          var options = this.options,
            $this = this.$element;

          if ($.isFunction(options.show)) {
            $this.on(EVENT_SHOW, options.show);
          }

          if ($.isFunction(options.hide)) {
            $this.on(EVENT_HIDE, options.hide);
          }

          if ($.isFunction(options.pick)) {
            $this.on(EVENT_PICK, options.pick);
          }

          if (this.isInput) {
            $this.on(EVENT_KEYUP, $.proxy(this.keyup, this));
          }

          if (!this.inline) {
            if (options.trigger) {
              this.$trigger.on(EVENT_CLICK, $.proxy(this.toggle, this));
            } else if (this.isInput) {
              $this.on(EVENT_FOCUS, $.proxy(this.show, this));
            } else {
              $this.on(EVENT_CLICK, $.proxy(this.show, this));
            }
          }
        }
      }, {
        key: "unbind",
        value: function unbind() {
          var $this = this.$element,
            options = this.options;

          if ($.isFunction(options.show)) {
            $this.off(EVENT_SHOW, options.show);
          }

          if ($.isFunction(options.hide)) {
            $this.off(EVENT_HIDE, options.hide);
          }

          if ($.isFunction(options.pick)) {
            $this.off(EVENT_PICK, options.pick);
          }

          if (this.isInput) {
            $this.off(EVENT_KEYUP, this.keyup);
          }

          if (!this.inline) {
            if (options.trigger) {
              this.$trigger.off(EVENT_CLICK, this.toggle);
            } else if (this.isInput) {
              $this.off(EVENT_FOCUS, this.show);
            } else {
              $this.off(EVENT_CLICK, this.show);
            }
          }
        }
      }, {
        key: "showView",
        value: function showView(view) {
          var $yearsPicker = this.$yearsPicker,
            $monthsPicker = this.$monthsPicker,
            $daysPicker = this.$daysPicker,
            format = this.format;

          if (format.hasYear || format.hasMonth || format.hasDay) {
            switch (Number(view)) {
              case VIEWS.YEARS:
                $monthsPicker.addClass(CLASS_HIDE);
                $daysPicker.addClass(CLASS_HIDE);

                if (format.hasYear) {
                  this.renderYears();
                  $yearsPicker.removeClass(CLASS_HIDE);
                  this.place();
                } else {
                  this.showView(VIEWS.DAYS);
                }

                break;

              case VIEWS.MONTHS:
                $yearsPicker.addClass(CLASS_HIDE);
                $daysPicker.addClass(CLASS_HIDE);

                if (format.hasMonth) {
                  this.renderMonths();
                  $monthsPicker.removeClass(CLASS_HIDE);
                  this.place();
                } else {
                  this.showView(VIEWS.YEARS);
                }

                break;
              // case VIEWS.DAYS:

              default:
                $yearsPicker.addClass(CLASS_HIDE);
                $monthsPicker.addClass(CLASS_HIDE);

                if (format.hasDay) {
                  this.renderDays();
                  $daysPicker.removeClass(CLASS_HIDE);
                  this.place();
                } else {
                  this.showView(VIEWS.MONTHS);
                }

            }
          }
        }
      }, {
        key: "hideView",
        value: function hideView() {
          if (!this.inline && this.options.autoHide) {
            this.hide();
          }
        }
      }, {
        key: "place",
        value: function place() {
          if (this.inline) {
            return;
          }

          var $this = this.$element,
            options = this.options,
            $picker = this.$picker;
          var containerWidth = $(document).outerWidth();
          var containerHeight = $(document).outerHeight();
          var elementWidth = $this.outerWidth();
          var elementHeight = $this.outerHeight();
          var width = $picker.width();
          var height = $picker.height();

          var _$this$offset = $this.offset(),
            left = _$this$offset.left,
            top = _$this$offset.top;

          var offset = parseFloat(options.offset);
          var placement = CLASS_TOP_LEFT;

          if (isNaN(offset)) {
            offset = 10;
          }

          if (top > height && top + elementHeight + height > containerHeight - 20) {
            top -= height + offset;
            placement = CLASS_BOTTOM_LEFT;
          } else {
            top += elementHeight + offset;
          }

          if (left + width > containerWidth) {
            left += elementWidth - width;
            placement = placement.replace('left', 'right');
          }

          $picker.removeClass(CLASS_PLACEMENTS).addClass(placement).css({
            top: top,
            left: left
          });
        } // A shortcut for triggering custom events

      }, {
        key: "trigger",
        value: function trigger(type, data) {
          var e = $.Event(type, data);
          this.$element.trigger(e);
          return e;
        }
      }, {
        key: "createItem",
        value: function createItem(data) {
          var options = this.options;
          var itemTag = options.itemTag;
          var item = {
            text: '',
            view: '',
            muted: false,
            picked: false,
            disabled: false,
            highlighted: false
          };
          var classes = [];
          $.extend(item, data);

          if (item.muted) {
            classes.push(options.mutedClass);
          }

          if (item.highlighted) {
            classes.push(options.highlightedClass);
          }

          if (item.picked) {
            classes.push(options.pickedClass);
          }

          if (item.disabled) {
            classes.push(options.disabledClass);
          }

          return "<".concat(itemTag, " class=\"").concat(classes.join(' '), "\" data-view=\"").concat(item.view, "\">").concat(item.text, "</").concat(itemTag, ">");
        }
      }, {
        key: "getValue",
        value: function getValue() {
          var $this = this.$element;
          return this.isInput ? $this.val() : $this.text();
        }
      }, {
        key: "setValue",
        value: function setValue() {
          var value = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';
          var $this = this.$element;

          if (this.isInput) {
            $this.val(value);
          } else if (!this.inline || this.options.container) {
            $this.text(value);
          }
        }
      }], [{
        key: "setDefaults",
        value: function setDefaults() {
          var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
          $.extend(DEFAULTS, LANGUAGES[options.language], $.isPlainObject(options) && options);
        }
      }]);

      return Datepicker;
    }();

  if ($.extend) {
    $.extend(Datepicker.prototype, render, handlers, methods);
  }

  if ($.fn) {
    var AnotherDatepicker = $.fn.datepicker;

    $.fn.datepickerDate = function jQueryDatepicker(option) {
      for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
        args[_key - 1] = arguments[_key];
      }

      var result;
      this.each(function (i, element) {
        var $element = $(element);
        var isDestroy = option === 'destroy';
        var datepicker = $element.data(NAMESPACE);

        if (!datepicker) {
          if (isDestroy) {
            return;
          }

          var options = $.extend({}, $element.data(), $.isPlainObject(option) && option);
          datepicker = new Datepicker(element, options);
          $element.data(NAMESPACE, datepicker);
        }

        if (isString(option)) {
          var fn = datepicker[option];

          if ($.isFunction(fn)) {
            result = fn.apply(datepicker, args);

            if (isDestroy) {
              $element.removeData(NAMESPACE);
            }
          }
        }
      });
      return !isUndefined(result) ? result : this;
    };

    $.fn.datepickerDate.Constructor = Datepicker;
    $.fn.datepickerDate.languages = LANGUAGES;
    $.fn.datepickerDate.setDefaults = Datepicker.setDefaults;

    $.fn.datepickerDate.noConflict = function noConflict() {
      $.fn.datepicker = AnotherDatepicker;
      return this;
    };
  }

}));
// jQuery Mask Plugin v1.14.15
// github.com/igorescobar/jQuery-Mask-Plugin
var $jscomp = { scope: {}, findInternal: function (a, l, d) { a instanceof String && (a = String(a)); for (var p = a.length, h = 0; h < p; h++) { var b = a[h]; if (l.call(d, b, h, a)) return { i: h, v: b } } return { i: -1, v: void 0 } } }; $jscomp.defineProperty = "function" == typeof Object.defineProperties ? Object.defineProperty : function (a, l, d) { if (d.get || d.set) throw new TypeError("ES3 does not support getters and setters."); a != Array.prototype && a != Object.prototype && (a[l] = d.value) };
$jscomp.getGlobal = function (a) { return "undefined" != typeof window && window === a ? a : "undefined" != typeof global && null != global ? global : a }; $jscomp.global = $jscomp.getGlobal(this); $jscomp.polyfill = function (a, l, d, p) { if (l) { d = $jscomp.global; a = a.split("."); for (p = 0; p < a.length - 1; p++) { var h = a[p]; h in d || (d[h] = {}); d = d[h] } a = a[a.length - 1]; p = d[a]; l = l(p); l != p && null != l && $jscomp.defineProperty(d, a, { configurable: !0, writable: !0, value: l }) } };
$jscomp.polyfill("Array.prototype.find", function (a) { return a ? a : function (a, d) { return $jscomp.findInternal(this, a, d).v } }, "es6-impl", "es3");
(function (a, l, d) { "function" === typeof define && define.amd ? define(["jquery"], a) : "object" === typeof exports ? module.exports = a(require("jquery")) : a(l || d) })(function (a) {
  var l = function (b, e, f) {
    var c = {
      invalid: [], getCaret: function () { try { var a, r = 0, g = b.get(0), e = document.selection, f = g.selectionStart; if (e && -1 === navigator.appVersion.indexOf("MSIE 10")) a = e.createRange(), a.moveStart("character", -c.val().length), r = a.text.length; else if (f || "0" === f) r = f; return r } catch (C) { } }, setCaret: function (a) {
        try {
          if (b.is(":focus")) {
            var c,
              g = b.get(0); g.setSelectionRange ? g.setSelectionRange(a, a) : (c = g.createTextRange(), c.collapse(!0), c.moveEnd("character", a), c.moveStart("character", a), c.select())
          }
        } catch (B) { }
      }, events: function () {
        b.on("keydown.mask", function (a) { b.data("mask-keycode", a.keyCode || a.which); b.data("mask-previus-value", b.val()); b.data("mask-previus-caret-pos", c.getCaret()); c.maskDigitPosMapOld = c.maskDigitPosMap }).on(a.jMaskGlobals.useInput ? "input.mask" : "keyup.mask", c.behaviour).on("paste.mask drop.mask", function () {
          setTimeout(function () { b.keydown().keyup() },
            100)
        }).on("change.mask", function () { b.data("changed", !0) }).on("blur.mask", function () { d === c.val() || b.data("changed") || b.trigger("change"); b.data("changed", !1) }).on("blur.mask", function () { d = c.val() }).on("focus.mask", function (b) { !0 === f.selectOnFocus && a(b.target).select() }).on("focusout.mask", function () { f.clearIfNotMatch && !h.test(c.val()) && c.val("") })
      }, getRegexMask: function () {
        for (var a = [], b, c, f, n, d = 0; d < e.length; d++)(b = m.translation[e.charAt(d)]) ? (c = b.pattern.toString().replace(/.{1}$|^.{1}/g, ""), f = b.optional,
          (b = b.recursive) ? (a.push(e.charAt(d)), n = { digit: e.charAt(d), pattern: c }) : a.push(f || b ? c + "?" : c)) : a.push(e.charAt(d).replace(/[-\/\\^$*+?.()|[\]{}]/g, "\\$&")); a = a.join(""); n && (a = a.replace(new RegExp("(" + n.digit + "(.*" + n.digit + ")?)"), "($1)?").replace(new RegExp(n.digit, "g"), n.pattern)); return new RegExp(a)
      }, destroyEvents: function () { b.off("input keydown keyup paste drop blur focusout ".split(" ").join(".mask ")) }, val: function (a) {
        var c = b.is("input") ? "val" : "text"; if (0 < arguments.length) {
          if (b[c]() !== a) b[c](a);
          c = b
        } else c = b[c](); return c
      }, calculateCaretPosition: function () {
        var a = b.data("mask-previus-value") || "", e = c.getMasked(), g = c.getCaret(); if (a !== e) {
          var f = b.data("mask-previus-caret-pos") || 0, e = e.length, d = a.length, m = a = 0, h = 0, l = 0, k; for (k = g; k < e && c.maskDigitPosMap[k]; k++)m++; for (k = g - 1; 0 <= k && c.maskDigitPosMap[k]; k--)a++; for (k = g - 1; 0 <= k; k--)c.maskDigitPosMap[k] && h++; for (k = f - 1; 0 <= k; k--)c.maskDigitPosMapOld[k] && l++; g > d ? g = 10 * e : f >= g && f !== d ? c.maskDigitPosMapOld[g] || (f = g, g = g - (l - h) - a, c.maskDigitPosMap[g] && (g = f)) : g > f &&
            (g = g + (h - l) + m)
        } return g
      }, behaviour: function (f) { f = f || window.event; c.invalid = []; var e = b.data("mask-keycode"); if (-1 === a.inArray(e, m.byPassKeys)) { var e = c.getMasked(), g = c.getCaret(); setTimeout(function () { c.setCaret(c.calculateCaretPosition()) }, a.jMaskGlobals.keyStrokeCompensation); c.val(e); c.setCaret(g); return c.callbacks(f) } }, getMasked: function (a, b) {
        var g = [], d = void 0 === b ? c.val() : b + "", n = 0, h = e.length, q = 0, l = d.length, k = 1, r = "push", p = -1, t = 0, y = [], v, z; f.reverse ? (r = "unshift", k = -1, v = 0, n = h - 1, q = l - 1, z = function () {
          return -1 <
            n && -1 < q
        }) : (v = h - 1, z = function () { return n < h && q < l }); for (var A; z();) { var x = e.charAt(n), w = d.charAt(q), u = m.translation[x]; if (u) w.match(u.pattern) ? (g[r](w), u.recursive && (-1 === p ? p = n : n === v && n !== p && (n = p - k), v === p && (n -= k)), n += k) : w === A ? (t--, A = void 0) : u.optional ? (n += k, q -= k) : u.fallback ? (g[r](u.fallback), n += k, q -= k) : c.invalid.push({ p: q, v: w, e: u.pattern }), q += k; else { if (!a) g[r](x); w === x ? (y.push(q), q += k) : (A = x, y.push(q + t), t++); n += k } } d = e.charAt(v); h !== l + 1 || m.translation[d] || g.push(d); g = g.join(""); c.mapMaskdigitPositions(g,
          y, l); return g
      }, mapMaskdigitPositions: function (a, b, e) { a = f.reverse ? a.length - e : 0; c.maskDigitPosMap = {}; for (e = 0; e < b.length; e++)c.maskDigitPosMap[b[e] + a] = 1 }, callbacks: function (a) { var h = c.val(), g = h !== d, m = [h, a, b, f], q = function (a, b, c) { "function" === typeof f[a] && b && f[a].apply(this, c) }; q("onChange", !0 === g, m); q("onKeyPress", !0 === g, m); q("onComplete", h.length === e.length, m); q("onInvalid", 0 < c.invalid.length, [h, a, b, c.invalid, f]) }
    }; b = a(b); var m = this, d = c.val(), h; e = "function" === typeof e ? e(c.val(), void 0, b, f) : e; m.mask =
      e; m.options = f; m.remove = function () { var a = c.getCaret(); m.options.placeholder && b.removeAttr("placeholder"); b.data("mask-maxlength") && b.removeAttr("maxlength"); c.destroyEvents(); c.val(m.getCleanVal()); c.setCaret(a); return b }; m.getCleanVal = function () { return c.getMasked(!0) }; m.getMaskedVal = function (a) { return c.getMasked(!1, a) }; m.init = function (d) {
        d = d || !1; f = f || {}; m.clearIfNotMatch = a.jMaskGlobals.clearIfNotMatch; m.byPassKeys = a.jMaskGlobals.byPassKeys; m.translation = a.extend({}, a.jMaskGlobals.translation, f.translation);
        m = a.extend(!0, {}, m, f); h = c.getRegexMask(); if (d) c.events(), c.val(c.getMasked()); else { f.placeholder && b.attr("placeholder", f.placeholder); b.data("mask") && b.attr("autocomplete", "off"); d = 0; for (var l = !0; d < e.length; d++) { var g = m.translation[e.charAt(d)]; if (g && g.recursive) { l = !1; break } } l && b.attr("maxlength", e.length).data("mask-maxlength", !0); c.destroyEvents(); c.events(); d = c.getCaret(); c.val(c.getMasked()); c.setCaret(d) }
      }; m.init(!b.is("input"))
  }; a.maskWatchers = {}; var d = function () {
    var b = a(this), e = {}, f = b.attr("data-mask");
    b.attr("data-mask-reverse") && (e.reverse = !0); b.attr("data-mask-clearifnotmatch") && (e.clearIfNotMatch = !0); "true" === b.attr("data-mask-selectonfocus") && (e.selectOnFocus = !0); if (p(b, f, e)) return b.data("mask", new l(this, f, e))
  }, p = function (b, e, f) { f = f || {}; var c = a(b).data("mask"), d = JSON.stringify; b = a(b).val() || a(b).text(); try { return "function" === typeof e && (e = e(b)), "object" !== typeof c || d(c.options) !== d(f) || c.mask !== e } catch (t) { } }, h = function (a) {
    var b = document.createElement("div"), d; a = "on" + a; d = a in b; d || (b.setAttribute(a,
      "return;"), d = "function" === typeof b[a]); return d
  }; a.fn.mask = function (b, d) { d = d || {}; var e = this.selector, c = a.jMaskGlobals, h = c.watchInterval, c = d.watchInputs || c.watchInputs, t = function () { if (p(this, b, d)) return a(this).data("mask", new l(this, b, d)) }; a(this).each(t); e && "" !== e && c && (clearInterval(a.maskWatchers[e]), a.maskWatchers[e] = setInterval(function () { a(document).find(e).each(t) }, h)); return this }; a.fn.masked = function (a) { return this.data("mask").getMaskedVal(a) }; a.fn.unmask = function () {
    clearInterval(a.maskWatchers[this.selector]);
    delete a.maskWatchers[this.selector]; return this.each(function () { var b = a(this).data("mask"); b && b.remove().removeData("mask") })
  }; a.fn.cleanVal = function () { return this.data("mask").getCleanVal() }; a.applyDataMask = function (b) { b = b || a.jMaskGlobals.maskElements; (b instanceof a ? b : a(b)).filter(a.jMaskGlobals.dataMaskAttr).each(d) }; h = {
    maskElements: "input,td,span,div", dataMaskAttr: "*[data-mask]", dataMask: !0, watchInterval: 300, watchInputs: !0, keyStrokeCompensation: 10, useInput: !/Chrome\/[2-4][0-9]|SamsungBrowser/.test(window.navigator.userAgent) &&
      h("input"), watchDataMask: !1, byPassKeys: [9, 16, 17, 18, 36, 37, 38, 39, 40, 91], translation: { 0: { pattern: /\d/ }, 9: { pattern: /\d/, optional: !0 }, "#": { pattern: /\d/, recursive: !0 }, A: { pattern: /[a-zA-Z0-9]/ }, S: { pattern: /[a-zA-Z]/ } }
  }; a.jMaskGlobals = a.jMaskGlobals || {}; h = a.jMaskGlobals = a.extend(!0, {}, h, a.jMaskGlobals); h.dataMask && a.applyDataMask(); setInterval(function () { a.jMaskGlobals.watchDataMask && a.applyDataMask() }, h.watchInterval)
}, window.jQuery, window.Zepto);
; (function ($) {
  $(document).ready(function () {
    ordersDatePicker();
    dibsLoader();
    myAccountEnablePrint();

    if ($(window).width() < 767) {
      $('#origin, #destination')
        .attr('readonly', 'readonly')
        .dblclick(function () {
          $(this).prop('readonly', false);
        });
    }

    setBlogPostBreadcrumbTitleMaxSize();
  });

  $(window).load(function () {
    slideShowEqualHeight();
  });

  $(window).resize(function () {
    slideShowEqualHeight();
    setBlogPostBreadcrumbTitleMaxSize();
  });

  function dibsLoader() {
    if ($('.dibsfw-dibsfw-redirect').length > 0) {
      WT.Utiles.stepLoader(true);
    }
  }

  function myAccountEnablePrint() {
    var body = $('.sales-order-view').length;

    if (body > 0 && $('#orders-list-for-print').length > 0) {
      $('.print-receipt').removeClass('disabled');
    }
  }

  function slideShowEqualHeight() {
    var slideShow = $('.the-slideshow-wrapper-outer.grid12-6 .item img:visible'),
      quick = $('#quicksearch');

    if (slideShow.length > 0) {
      setTimeout(function () {
        if (matchMedia('only screen and (min-width: ' + bp.medium + 'px)').matches) {
          quick.height(slideShow.height());
        } else {
          quick.removeAttr('style');
        }
      }, 600);
    }
  }

  function ordersDatePicker() {
    $j('.sales-order-history #departure_date').datepicker({
      firstDay: 1,
      gotoCurrent: true,
      numberOfMonths: 1,
      dateFormat: WT.Utiles.getDateFormatForDatePicker(),
    });
  }

  function setBlogPostBreadcrumbTitleMaxSize() {
    if ($('body.blog-post-view').length) {
      var $blogPage = $('.breadcrumbs .blog_page');
      var $lastCrumb = $blogPage.find('.last-crumb');
      var blogPageWidth = $blogPage.outerWidth();
      var lastCrumbWidth = $lastCrumb.outerWidth() - 1;

      if (lastCrumbWidth > blogPageWidth) {
        $blogPage.addClass('is-cropped');
      } else {
        $blogPage.removeClass('is-cropped');
      }
    }
  }
})(jQuery);

jQuery.fn.maxHeightBox = function (item) {
  $(this).each(function () {
    var $this = jQuery(this),
      $item = jQuery(item, $this);

    $item.removeAttr('style');

    var highest = null,
      hi = 0;

    $item.each(function () {
      var h = jQuery(this).height();

      if (h > hi) {
        hi = h;
        highest = jQuery(this);

      }
    });

    $item.css('height', hi);
  }
  );
};

// wrap in UMD - see https://github.com/umdjs/umd/blob/master/jqueryPlugin.js
(function (factory) {
  if (typeof define === "function" && define.amd) {
    define(["jquery"], function ($) {
      factory($, window, document);
    });
  } else {
    factory(jQuery, window, document);
  }
})(function ($, window, document, undefined) {
  "use strict";
  var pluginName = "countrySelect", id = 1, // give each instance its own ID for namespaced event handling
    defaults = {
      // Default country
      defaultCountry: "",
      // Position the selected flag inside or outside of the input
      defaultStyling: "inside",
      // don't display these countries
      excludeCountries: [],
      // Display only these countries
      countries: [],
      // The countries at the top of the list. Defaults to United States and United Kingdom
      preferredCountries: ["us", "gb"]
    }, keys = {
      UP: 38,
      DOWN: 40,
      ENTER: 13,
      ESC: 27,
      PLUS: 43,
      DELETE: 8,
      A: 65,
      Z: 90
    }, windowLoaded = false;
  // keep track of if the window.load event has fired as impossible to check after the fact
  $(window).on('load', function () {
    windowLoaded = true;
  });
  function Plugin(element, options) {
    this.element = element;
    this.options = $.extend({}, defaults, options);
    this._defaults = defaults;
    // event namespace
    this.ns = "." + pluginName + id++;
    this._name = pluginName;
    this.searchStr = ''
    this.init();
  }
  Plugin.prototype = {
    init: function () {
      // Process all the data: onlyCountries, excludeCountries, preferredCountries, defaultCountry etc
      this.countries = this.options.countries.map(function (c) {
        return {
          name: c.label,
          iso2: c.value.toLowerCase()
        }
      });

      this._setPreferredCountries();
      // Generate the markup
      this._generateMarkup();
      // Set the initial state of the input value and the selected flag
      this._setInitialState();
      // Start all of the event listeners: input keyup, selectedFlag click
      this._initListeners();
      // Return this when the auto country is resolved.
      this.autoCountryDeferred = new $.Deferred();
      // Get auto country.
      this._initAutoCountry();

      return this.autoCountryDeferred;
    },
    /********************
     *  PRIVATE METHODS
     ********************/
    // prepare all of the country data, including onlyCountries, excludeCountries, preferredCountries and
    // Process preferred countries - iterate through the preferences,
    // fetching the country data for each one
    _setPreferredCountries: function () {
      var that = this;
      this.preferredCountries = [];
      $.each(this.options.preferredCountries, function (i, countryCode) {
        var countryData = that._getCountryData(countryCode, false);
        if (countryData) {
          that.preferredCountries.push(countryData);
        }
      });
    },
    // generate all of the markup for the plugin: the selected flag overlay, and the dropdown
    _generateMarkup: function () {
      // Country input
      this.countryInput = $(this.element);
      // containers (mostly for positioning)
      var mainClass = "country-select";
      if (this.options.defaultStyling) {
        mainClass += " " + this.options.defaultStyling;
      }
      this.countryInput.wrap($("<div>", {
        "class": mainClass
      }));
      var flagsContainer = $("<div>", {
        "class": "flag-dropdown"
      }).insertAfter(this.countryInput);
      // currently selected flag (displayed to left of input)
      var selectedFlag = $("<div>", {
        "class": "selected-flag"
      }).appendTo(flagsContainer);
      this.selectedFlagInner = $("<div>", {
        "class": "iti-flag"
      }).appendTo(selectedFlag);
      // CSS triangle
      $("<div>", {
        "class": "arrow"
      }).appendTo(selectedFlag);
      // country list contains: preferred countries, then divider, then all countries
      this.countryList = $("<ul>", {
        "class": "country-list v-hide"
      }).appendTo(flagsContainer);
      if (this.preferredCountries.length) {
        this._appendListItems(this.preferredCountries, "preferred");
        $("<li>", {
          "class": "divider"
        }).appendTo(this.countryList);
      }
      this._appendListItems(this.countries, "");
      // Add the hidden input for the country code
      this.countryCodeInput = $("#" + this.countryInput.attr("id") + "_code");
      if (!this.countryCodeInput) {
        this.countryCodeInput = $('<input type="hidden" id="' + this.countryInput.attr("id") + '_code" name="' + this.countryInput.attr("name") + '_code" value="" />');
        this.countryCodeInput.insertAfter(this.countryInput);
      }
      // now we can grab the dropdown height, and hide it properly
      this.dropdownHeight = this.countryList.outerHeight();
      this.countryList.removeClass("v-hide").addClass("hide");
      // this is useful in lots of places
      this.countryListItems = this.countryList.children(".country");
    },
    // add a country <li> to the countryList <ul> container
    _appendListItems: function (countries, className) {
      // Generate DOM elements as a large temp string, so that there is only
      // one DOM insert event
      var tmp = "";
      // for each country
      $.each(countries, function (i, c) {
        // open the list item
        tmp += '<li class="country ' + className + '" data-country-code="' + c.iso2 + '">';
        // add the flag
        tmp += '<div class="iti-flag ' + c.iso2 + '"></div>';
        // and the country name
        tmp += '<span class="country-name">' + c.name + '</span>';
        // close the list item
        tmp += '</li>';
      });
      this.countryList.append(tmp);
    },
    // set the initial state of the input value and the selected flag
    _setInitialState: function () {
      var flagIsSet = false;
      // If the input is pre-populated, then just update the selected flag
      if (this.countryInput.val()) {
        flagIsSet = this._updateFlagFromInputVal();
      }
      // If the country code input is pre-populated, update the name and the selected flag
      var selectedCode = this.countryCodeInput.val();
      if (selectedCode) {
        this.selectCountry(selectedCode);
      }
      if (!flagIsSet) {
        // flag is not set, so set to the default country
        var defaultCountry;
        // check the defaultCountry option, else fall back to the first in the list
        if (this.options.defaultCountry) {
          defaultCountry = this._getCountryData(this.options.defaultCountry, false);
          // Did we not find the requested default country?
          if (!defaultCountry) {
            defaultCountry = this.preferredCountries.length ? this.preferredCountries[0] : this.countries[0];
          }

          this.defaultCountry = defaultCountry.iso2;
        }
      }
    },
    // initialise the main event listeners: input keyup, and click selected flag
    _initListeners: function () {
      var that = this;
      // Update flag on keyup.
      // Use keyup instead of keypress because we want to update on backspace
      // and instead of keydown because the value hasn't updated when that
      // event is fired.
      // NOTE: better to have this one listener all the time instead of
      // starting it on focus and stopping it on blur, because then you've
      // got two listeners (focus and blur)
      this.countryInput.on("keyup" + this.ns, function () {
        that._updateFlagFromInputVal();
      });
      // toggle country dropdown on click
      var dropdown = this.selectedFlagInner.parent().parent();
      dropdown.on("click" + this.ns, function (e) {
        if (that.countryInput.prop('readonly')) {
          return false;
        }

        // only intercept this event if we're opening the dropdown
        // else let it bubble up to the top ("click-off-to-close" listener)
        // we cannot just stopPropagation as it may be needed to close another instance
        if (that.countryList.hasClass("hide") && !that.countryInput.prop("disabled")) {
          that._showDropdown();
        }
      });
      // Despite above note, added blur to ensure partially spelled country
      // with correctly chosen flag is spelled out on blur. Also, correctly
      // selects flag when field is autofilled
      this.countryInput.on("blur" + this.ns, function () {
        if (that.countryInput.val() != that.getSelectedCountryData().name) {
          that.setCountry(that.countryInput.val());
        }
        that.countryInput.val(that.getSelectedCountryData().name);
      });
    },
    _initAutoCountry: function () {
      if (this.options.initialCountry === "auto") {
        this._loadAutoCountry();
      } else {
        if (this.defaultCountry) this.selectCountry(this.defaultCountry);
        this.autoCountryDeferred.resolve();
      }
    },
    // perform the geo ip lookup
    _loadAutoCountry: function () {
      var that = this;

      // 3 options:
      // 1) already loaded (we're done)
      // 2) not already started loading (start)
      // 3) already started loading (do nothing - just wait for loading callback to fire)
      if ($.fn[pluginName].autoCountry) {
        this.handleAutoCountry();
      } else if (!$.fn[pluginName].startedLoadingAutoCountry) {
        // don't do this twice!
        $.fn[pluginName].startedLoadingAutoCountry = true;

        if (typeof this.options.geoIpLookup === 'function') {
          this.options.geoIpLookup(function (countryCode) {
            $.fn[pluginName].autoCountry = countryCode.toLowerCase();
            // tell all instances the auto country is ready
            // TODO: this should just be the current instances
            // UPDATE: use setTimeout in case their geoIpLookup function calls this callback straight away (e.g. if they have already done the geo ip lookup somewhere else). Using setTimeout means that the current thread of execution will finish before executing this, which allows the plugin to finish initialising.
            setTimeout(function () {
              $(".country-select input").countrySelect("handleAutoCountry");
            });
          });
        }
      }
    },
    // Focus input and put the cursor at the end
    _focus: function () {
      this.countryInput.focus();
      var input = this.countryInput[0];
      // works for Chrome, FF, Safari, IE9+
      if (input.setSelectionRange) {
        var len = this.countryInput.val().length;
        input.setSelectionRange(len, len);
      }
    },
    // Show the dropdown
    _showDropdown: function () {
      this._setDropdownPosition();
      // update highlighting and scroll to active list item
      var activeListItem = this.countryList.children(".active");
      this._highlightListItem(activeListItem);
      // show it
      this.countryList.removeClass("hide");
      this._scrollTo(activeListItem);
      // bind all the dropdown-related listeners: mouseover, click, click-off, keydown
      this._bindDropdownListeners();
      // update the arrow
      this.selectedFlagInner.parent().children(".arrow").addClass("up");
    },
    // decide where to position dropdown (depends on position within viewport, and scroll)
    _setDropdownPosition: function () {
      var inputTop = this.countryInput.offset().top, windowTop = $(window).scrollTop(),
        dropdownFitsBelow = inputTop + this.countryInput.outerHeight() + this.dropdownHeight < windowTop + $(window).height(), dropdownFitsAbove = inputTop - this.dropdownHeight > windowTop;
      // dropdownHeight - 1 for border
      var cssTop = !dropdownFitsBelow && dropdownFitsAbove ? "-" + (this.dropdownHeight - 1) + "px" : "";
      this.countryList.css("top", cssTop);
    },
    // we only bind dropdown listeners when the dropdown is open
    _bindDropdownListeners: function () {
      var that = this;
      // when mouse over a list item, just highlight that one
      // we add the class "highlight", so if they hit "enter" we know which one to select
      this.countryList.on("mouseover" + this.ns, ".country", function (e) {
        that._highlightListItem($(this));
      });
      // listen for country selection
      this.countryList.on("click" + this.ns, ".country", function (e) {
        that._selectListItem($(this));
      });
      // click off to close
      // (except when this initial opening click is bubbling up)
      // we cannot just stopPropagation as it may be needed to close another instance
      var isOpening = true;
      $("html").on("click" + this.ns, function (e) {
        if (!isOpening) {
          that._closeDropdown();
        }
        isOpening = false;
      });
      // Listen for up/down scrolling, enter to select, or letters to jump to country name.
      // Use keydown as keypress doesn't fire for non-char keys and we want to catch if they
      // just hit down and hold it to scroll down (no keyup event).
      // Listen on the document because that's where key events are triggered if no input has focus
      $(document).on("keydown" + this.ns, function (e) {
        // prevent down key from scrolling the whole page,
        // and enter key from submitting a form etc
        e.preventDefault();
        if (e.which == keys.UP || e.which == keys.DOWN) {
          // up and down to navigate
          that._handleUpDownKey(e.which);
        } else if (e.which == keys.ENTER) {
          // enter to select
          that._handleEnterKey();
        } else if (e.which == keys.ESC) {
          // esc to close
          that._closeDropdown();
        } else if (e.which >= keys.A && e.which <= keys.Z) {
          // upper case letters (note: keyup/keydown only return upper case letters)
          // cycle through countries beginning with that letter
          that._handleLetterKey(e.which)
        } else if (e.which == keys.DELETE) {
          that.searchStr = that.searchStr.substr(0, that.searchStr.length - 1)
        }
      });
    },
    // Highlight the next/prev item in the list (and ensure it is visible)
    _handleUpDownKey: function (key) {
      var current = this.countryList.children(".highlight").first();
      var next = key == keys.UP ? current.prev() : current.next();
      if (next.length) {
        // skip the divider
        if (next.hasClass("divider")) {
          next = key == keys.UP ? next.prev() : next.next();
        }
        this._highlightListItem(next);
        this._scrollTo(next);
      }
    },
    // select the currently highlighted item
    _handleEnterKey: function () {
      var currentCountry = this.countryList.children(".highlight").first();
      if (currentCountry.length) {
        this._selectListItem(currentCountry);
      }
    },
    // Iterate through the countries starting with the given letter
    _handleLetterKey: function (key) {
      var self = this;
      var letter = String.fromCharCode(key);
      // filter out the countries beginning with that letter
      self.searchStr += letter;
      var countryName = '';

      var countries = self.countryListItems.filter(function () {
        countryName = $(this).text().substr(0, self.searchStr.length);

        return countryName.toUpperCase() == self.searchStr && !$(this).hasClass("preferred");
      });
      if (countries.length) {
        // if one is already highlighted, then we want the next one
        var highlightedCountry = countries.filter(".highlight").first(), listItem;
        // if the next country in the list also starts with that letter
        if (highlightedCountry && highlightedCountry.next() && (highlightedCountry.next().text().substr(0, self.searchStr.length).toUpperCase == self.searchStr)) {
          listItem = highlightedCountry.next();

        } else {
          listItem = countries.first();
        }

        // update highlighting and scroll
        self._highlightListItem(listItem);
        self._scrollTo(listItem);
      }
    },
    // Update the selected flag using the input's current value
    _updateFlagFromInputVal: function () {
      var that = this;
      // try and extract valid country from input
      var value = this.countryInput.val().replace(/(?=[() ])/g, '\\');
      if (value) {
        var countryCodes = [];
        var matcher = new RegExp("^" + value, "i");
        for (var i = 0; i < this.countries.length; i++) {
          if (this.countries[i].name.match(matcher)) {
            countryCodes.push(this.countries[i].iso2);
          }
        }
        // Check if one of the matching countries is already selected
        var alreadySelected = false;
        $.each(countryCodes, function (i, c) {
          if (that.selectedFlagInner.hasClass(c)) {
            alreadySelected = true;
          }
        });
        if (!alreadySelected) {
          this._selectFlag(countryCodes[0]);
          this.countryCodeInput.val(countryCodes[0]).trigger("change");
        }
        // Matching country found
        return true;
      }
      // No match found
      return false;
    },
    // remove highlighting from other list items and highlight the given item
    _highlightListItem: function (listItem) {
      this.countryListItems.removeClass("highlight");
      listItem.addClass("highlight");
    },
    // find the country data for the given country code
    // the ignoreOnlyCountriesOption is only used during init() while parsing the onlyCountries array
    _getCountryData: function (countryCode, ignoreOnlyCountriesOption) {
      var countryList = ignoreOnlyCountriesOption ? allCountries : this.countries;
      for (var i = 0; i < countryList.length; i++) {
        if (countryList[i].iso2 == countryCode) {
          return countryList[i];
        }
      }
      return null;
    },
    // update the selected flag and the active list item
    _selectFlag: function (countryCode) {
      if (!countryCode) {
        return false;
      }
      this.selectedFlagInner.attr("class", "iti-flag " + countryCode);
      // update the title attribute
      var countryData = this._getCountryData(countryCode);
      this.selectedFlagInner.parent().attr("title", countryData.name);
      // update the active list item
      var listItem = this.countryListItems.children(".iti-flag." + countryCode).first().parent();
      this.countryListItems.removeClass("active");
      listItem.addClass("active");
    },
    // called when the user selects a list item from the dropdown
    _selectListItem: function (listItem) {
      // update selected flag and active list item
      var countryCode = listItem.attr("data-country-code"),
        that = this;
      this._selectFlag(countryCode);
      // update input value
      this._updateName(countryCode);
      this.countryInput.trigger("change");
      this.countryCodeInput.trigger("change");

      setTimeout(function () {
        that._closeDropdown();
      }, 100);
    },
    // close the dropdown and unbind any listeners
    _closeDropdown: function () {
      this.countryList.addClass("hide");
      // update the arrow
      this.selectedFlagInner.parent().children(".arrow").removeClass("up");
      // unbind event listeners
      $(document).off("keydown" + this.ns);
      $("html").off("click" + this.ns);
      // unbind both hover and click listeners
      this.countryList.off(this.ns);
      this.searchStr = '';
    },
    // check if an element is visible within its container, else scroll until it is
    _scrollTo: function (element) {
      if (!element || !element.offset()) {
        return;
      }
      var container = this.countryList,
        containerHeight = container.height(),
        containerTop = container.offset().top,
        containerBottom = containerTop + containerHeight,
        elementHeight = element.outerHeight(),
        elementTop = element.offset().top,
        elementBottom = elementTop + elementHeight,
        newScrollTop = elementTop - containerTop + container.scrollTop();

      if (elementTop < containerTop) {
        // scroll up
        container.scrollTop(newScrollTop);
      } else if (elementBottom > containerBottom) {
        // scroll down
        var heightDifference = containerHeight - elementHeight;
        container.scrollTop(newScrollTop - heightDifference);
      }
    },
    // Replace any existing country name with the new one
    _updateName: function (countryCode) {
      this.countryCodeInput.val(countryCode).trigger("change");
      this.countryInput.val(this._getCountryData(countryCode).name);
    },
    /********************
     *  PUBLIC METHODS
     ********************/
    // this is called when the geoip call returns
    handleAutoCountry: function () {
      if (this.options.initialCountry === "auto") {
        // we must set this even if there is an initial val in the input: in case the initial val is invalid and they delete it - they should see their auto country
        this.defaultCountry = $.fn[pluginName].autoCountry;
        // if there's no initial value in the input, then update the flag
        if (!this.countryInput.val()) {
          this.selectCountry(this.defaultCountry);
        }
        this.autoCountryDeferred.resolve();
      }
    },
    // get the country data for the currently selected flag
    getSelectedCountryData: function () {
      // rely on the fact that we only set 2 classes on the selected flag element:
      // the first is "flag" and the second is the 2-char country code
      var countryCode = this.selectedFlagInner.attr("class").split(" ")[1];
      return this._getCountryData(countryCode);
    },
    // update the selected flag
    selectCountry: function (countryCode) {
      countryCode = countryCode.toLowerCase();
      // check if already selected
      if (!this.selectedFlagInner.hasClass(countryCode)) {
        this._selectFlag(countryCode);
        this._updateName(countryCode);
      }
    },
    // set the input value and update the flag
    setCountry: function (country) {
      this.countryInput.val(country);
      this._updateFlagFromInputVal();
    },
    // remove plugin
    destroy: function () {
      // stop listeners
      this.countryInput.off(this.ns);
      this.selectedFlagInner.parent().off(this.ns);
      // remove markup
      var container = this.countryInput.parent();
      container.before(this.countryInput).remove();
    }
  };
  // adapted to allow public functions
  // using https://github.com/jquery-boilerplate/jquery-boilerplate/wiki/Extending-jQuery-Boilerplate
  $.fn[pluginName] = function (options) {
    var args = arguments;
    // Is the first parameter an object (options), or was omitted,
    // instantiate a new instance of the plugin.
    if (options === undefined || typeof options === "object") {
      return this.each(function () {
        if (!$.data(this, "plugin_" + pluginName)) {
          $.data(this, "plugin_" + pluginName, new Plugin(this, options));
        }
      });
    } else if (typeof options === "string" && options[0] !== "_" && options !== "init") {
      // If the first parameter is a string and it doesn't start
      // with an underscore or "contains" the `init`-function,
      // treat this as a call to a public method.
      // Cache the method call to make it possible to return a value
      var returns;
      this.each(function () {
        var instance = $.data(this, "plugin_" + pluginName);
        // Tests that there's already a plugin-instance
        // and checks that the requested public method exists
        if (instance instanceof Plugin && typeof instance[options] === "function") {
          // Call the method of our plugin instance,
          // and pass it the supplied arguments.
          returns = instance[options].apply(instance, Array.prototype.slice.call(args, 1));
        }
        // Allow instances to be destroyed via the 'destroy' method
        if (options === "destroy") {
          $.data(this, "plugin_" + pluginName, null);
        }
      });
      // If the earlier cached method gives a value back return the value,
      // otherwise return this to preserve chainability.
      return returns !== undefined ? returns : this;
    }
  };
  /********************
   *  STATIC METHODS
   ********************/
  // get the country data object
  $.fn[pluginName].getCountryData = function () {
    return allCountries;
  };
  // set the country data object
  $.fn[pluginName].setCountryData = function (obj) {
    allCountries = obj;
  };
});

// Refer to https://gist.github.com/remy/350433
try {
  // Test webstorage existence.
  if (!window.localStorage || !window.sessionStorage) throw "exception";
  // Test webstorage accessibility - Needed for Safari private browsing.
  localStorage.setItem('storage_test', 1);
  localStorage.removeItem('storage_test');
} catch (e) {
  (function () {
    var Storage = function (type) {
      function createCookie(name, value, days) {
        var date, expires;

        if (days) {
          date = new Date();
          date.setTime(date.getTime() + (days * 24 * 60 * 60 * 1000));
          expires = "; expires=" + date.toGMTString();
        } else {
          expires = "";
        }
        document.cookie = name + "=" + value + expires + "; path=/";
      }

      function readCookie(name) {
        var nameEQ = name + "=",
          ca = document.cookie.split(';'),
          i, c;

        for (i = 0; i < ca.length; i++) {
          c = ca[i];
          while (c.charAt(0) == ' ') {
            c = c.substring(1, c.length); 2480
          }

          if (c.indexOf(nameEQ) == 0) {
            return c.substring(nameEQ.length, c.length);
          }
        }
        return null;
      }

      function setData(data) {
        // Convert data into JSON and encode to accommodate for special characters.
        data = encodeURIComponent(JSON.stringify(data));
        // Create cookie.
        if (type == 'session') {
          createCookie(getSessionName(), data, 365);
        } else {
          createCookie('localStorage', data, 365);
        }
      }

      function clearData() {
        if (type == 'session') {
          createCookie(getSessionName(), '', 365);
        } else {
          createCookie('localStorage', '', 365);
        }
      }

      function getData() {
        // Get cookie data.
        var data = type == 'session' ? readCookie(getSessionName()) : readCookie('localStorage');
        // If we have some data decode, parse and return it.
        return data ? JSON.parse(decodeURIComponent(data)) : {};
      }

      function getSessionName() {
        // If there is no name for this window, set one.
        // To ensure it's unquie use the current timestamp.
        if (!window.name) {
          window.name = new Date().getTime();
        }
        return 'sessionStorage' + window.name;
      }

      // Initialise if there's already data.
      var data = getData();

      return {
        length: 0,
        clear: function () {
          data = {};
          this.length = 0;
          clearData();
        },
        getItem: function (key) {
          return data[key] === undefined ? null : data[key];
        },
        key: function (i) {
          // not perfect, but works
          var ctr = 0;
          for (var k in data) {
            if (ctr == i) return k;
            else ctr++;
          }
          return null;
        },
        removeItem: function (key) {
          delete data[key];
          this.length--;
          setData(data);
        },
        setItem: function (key, value) {
          data[key] = value + ''; // forces the value to a string
          this.length++;
          setData(data);
        }
      };
    };

    // Replace window.localStorage and window.sessionStorage with out custom
    // implementation.
    var localStorage = new Storage('local');
    var sessionStorage = new Storage('session');
    window.localStorage = localStorage;
    window.sessionStorage = sessionStorage;
    // For Safari private browsing need to also set the proto value.
    window.localStorage.__proto__ = localStorage;
    window.sessionStorage.__proto__ = sessionStorage;
  })();
}
var shortWeekdays = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'];
$j(document).ready(function () {
  WT.init();
});

var WT = {
  ReservationData: {
    destinationConnections: [],
    destinationDatesFares: [],
    flight: {},
    classes: {},
    packages: {},
    passengerAgeTypes: { "adult": "ADT", "child": "CHD", "infant": "INF" },
    passengers: {},
    seats: {},
    extras: {},
    free_extras: {},
    single_package: {}
  },
  Config: {
    //defaults
    airportNameFormat: ["oneway_trip", "round_trip"],
    possibleTripTypes: ["city_name", "airport_code"],
    datePickerColorDefault: '#ededed',
    datePickerColorActive: '#3287be',
    datePickerfareDisplayFormat: "date_cell",
    datePickerMonths: 3,
    airportsGroupedBy: 'country',
    passengersAmountMaximum: 10,
    passengersAmountAdult: 7,
    passengersAmountChild: 7,
    passengersAmountInfant: 7,
    passengersMaxInfantAge: 3,
    passengersMaxChildAge: 16,
    passengersMinStudentAge: 18,
    passengersMaxStudentAge: 21,
    passengersStudentPriceGroups: ['student'],
    passengersMinSeniorAge: 65,
    passengersMaxSeniorAge: 120,
    passengersSeniorPriceGroups: ['senior'],
    passengersShowLoginImmediately: 1,
    passengersProceedAsGuest: 1,
    activateDateTimeFilters: 1,
    minSeatsToShow: 9,
    cookieLifeTime: 0,
    regions: [],
    compactflowEnabledSteps: [],
    compactflowHiddenSteps: [],
    compactflowPreselectSteps: [],
    loadstep_url: "booking/loadstep",
    remindPopups: { ssr: '', seatselect: '' },
    dateFormat: '',
    dateFormatDefault: 'DD/MM/YYYY',
    modifyAutoSearch: '',
    validateAge: true,
    groupType: '',
    displaySenior: true,
    displayStudent: true,
    displayTimeFilter: true,
    previousStore: null,
    previousCurrency: null,
    allowChildrenSearchForStudent: false,
    allowChildrenSearchForSenior: false,
    summaryIsOpen: true,
    summaryDirection: 'outbound',
    maxWidthMobile: 900,
    isHotelsFlow: location.pathname.indexOf('/hotels') !== -1,
    isHotelsPlusFlightFlow: location.pathname.indexOf('/hotels/flight') !== -1,
    isIranian: false,
    recaptchaUrl: 'https://www.google.com/recaptcha/api.js',
    maxCitiesInColumn: 11
  },
  Templates: {
    item_list: "",
    item_table: "",
    item_table_heading: "",
    classes: "",
    package: "",
    summary_flight_item: "",
    datetime_filters: "",
    passenger_form: "",
    seatmap_items: "",
    top_flight_switcher: "",
    passenger_switcher: "",
    summary_package_items: "",
    extra: ""
  },
  Steps: {
    backend_extended_data: ['flights', 'passengers', 'ssr', 'seatselect', 'hotels', 'checkout'],// ids for step templates
    backend_data: ['flights', 'passengers', 'checkout'], //can be rewrited by compact flow
    skipped_steps: [],
    activeIndex: 0,
    init: function () {
      this.setup();
      this.refresh();
      this.stepsClick();
    },
    setup: function () {
      var elem = $j('#page-header-steps');
      var chang_step = 'changedate';
      var imagesList = WT.Utiles.SVGIconsList;

      this.prepareMobileSettingsDrawer();

      if (WT.modify_flag == chang_step) {
        WT.Steps.backend_data.unshift(chang_step);
        WT.Steps.skipped_steps.unshift(chang_step);
        this.activeIndex = 1;
      }

      if (elem) {
        var content = '';

        for (var i in this.backend_data) {
          if (this.backend_data.hasOwnProperty(i)) {
            var name = this.backend_data[i] === 'ssr' ? 'extra services' : this.backend_data[i];

            content += "<li class='disabled' data-idx='" + (this.backend_data[i]) + "' data-id='" +
              (i) + "' id='step" + i + "'><span>" + imagesList[this.backend_data[i]] +
              "</span>" + Translator.translate(name) + "</li>";
          }
        }

        elem.html(content);
        elem.addClass('items-' + this.backend_data.length);
      }

      RegionUpdater.prototype._checkRegionRequired = function () { }
    },
    refresh: function () {
      for (var i in this.backend_data) {
        var cssClasses = '';
        if (this.activeIndex == i) {
          cssClasses += ' active';
          var isFlex = this.backend_data[i] == 'ssr'
            || this.backend_data[i] == 'seatselect';

          $j('.step-data').fadeOut().stop(true, true);
          isFlex
            ? $j('#step-' + this.backend_data[i]).css('display', 'flex')
            : $j('#step-' + this.backend_data[i]).fadeIn('fast').stop(true, true);

          var id = this.backend_data[i].replace(/[^\w\d]+/, '_');

          $j('.step-data').parent().parent().attr('id', 'wt-' + id);
          WT.Summary.unstickOldSummary();
          WT.Summary.stickyOldSummary();
        }
        if (this.activeIndex > i) {
          cssClasses += ' complete';
          cssClasses += ($j.inArray(this.backend_data[i], WT.Steps.skipped_steps) > -1) ? ' skipped' : ' allow';
        }
        $j('#step' + i).attr('class', cssClasses);
      }

      if (WT.modify_flag === 'checkout' || WT.modify_flag === 'unticketed' || WT.Refund.isOnlyRefundStep()) {
        this.disableAllSteps();
      }

      WT.Summary.refresh();
    },
    stepsClick: function () {
      var self = this;

      $j('#page-header-steps li').off().on('click', function () {
        var clicked_id = $j(this).data('id'),
          step = $j(this).data('idx');

        if ($j(this).hasClass('allow')) {
          WT.Checkout.resetDiscount();
          if (WT.Config.isHotelsPlusFlightFlow) {
            WT.Utiles._showCountDown(1, {}, 'hide');
          }

          switch (step) {
            case 'flights': {
              if (self.resetReservationProducts(clicked_id)) return;

              $j('#form-flights-buttons').css('display', 'flex');
              break;
            }
            case 'flight + hotel': {
              WT.Hotels.onStepChange('HOTEL_FLIGHT_SEARCH');
              WT.Steps.refreshHotelSteps();
              break;
            }
            case 'passengers': {
              if (self.resetReservationProducts(clicked_id)) return;

              $j('#tab-passengers').click();
              break;
            }
            case 'hotel': {
              WT.Hotels.onStepChange('HOTEL_SEARCH');
              WT.Steps.refreshHotelSteps();
              break;
            }
            case 'room': {
              WT.Hotels.onStepChange('HOTEL_ROOM_SEARCH');
              WT.Steps.refreshHotelSteps();
              break;
            }
            case 'contact':
            case 'guest and contact': {
              WT.Hotels.onStepChange('GUEST_DETAIL');
              WT.Steps.refreshHotelSteps();
              break;
            }
          }

          WT.Utiles.setTitleBarByBookingStep(step);
          WT.Steps.activeIndex = clicked_id;
          WT.Summary._hideDirectPayment();
          self.refresh();
        }
      });
    },
    setPageTitleForCurrentStep: function () {
      var step = $j('#page-header-steps li.active').data('idx');
      WT.Utiles.setTitleBarByBookingStep(step);
    },
    prepareMobileSettingsDrawer: function () {
      if ($j(window).width() > WT.Config.maxWidthMobile) return;

      var $rightDrawer = $j('#mobile-right-drawer');

      $j('#lang-switcher-wrapper-mobile, #currency-switcher-wrapper-mobile').on('click', function () {
        var $currentItems = $j(this).find('ul.dropdown-content'),
          currentClassName = $j(this).children().attr('class');

        if ($rightDrawer.hasClass('open')) return;

        $rightDrawer.append($currentItems.clone().addClass(currentClassName).show());
        $rightDrawer.addClass('open');
      })
      $j('.close-right-slider').on('click', function () {
        $rightDrawer.removeClass('open');
        $rightDrawer.find('ul.dropdown-content').remove();
      })
    },
    continueTransitionToClickedStep: function (clicked_id) {
      var self = this;
      $j('.continue-step-booking').on('click', function () {
        WT.ReservationData.packages = {};
        WT.ReservationData.extras = {};
        WT.ReservationData.seats = {};
        self.activeIndex = clicked_id;

        self.refresh();
      });
    },
    resetReservationProducts: function (clicked_id) {
      var isSelected = WT.Summary.getSelectedProduct();

      if (isSelected) {
        $j('#remind-passengers').modal();
        this.continueTransitionToClickedStep(clicked_id);

        return true;
      }

      WT.ReservationData.packages = {};
      WT.ReservationData.extras = {};
      WT.ReservationData.seats = {};
      WT.ReservationData.flight.ssrs = {};
      WT.ReservationData.flight.sortingSsrs = {};

      return false;
    },
    getStepIndexByText: function (text) {
      var steps = this.backend_data,
        needle = '';
      $j.each(steps, function (index, value) {
        if (value == text) {
          needle = index;
        }
      });
      return needle;
    },
    disableAllSteps: function () {
      var steps = this.backend_data;
      for (var i in steps) {
        if (steps.hasOwnProperty(i)) {
          $j('#step' + i).not('.active').attr("class", "complete disabled");
        }
      }
    },
    refreshHotelSteps: function () {
      $j('#step-checkout').hide();
      $j('#search_form').show();
    },
    _updateBackendDataForRoute: function (result) {
      var self = this,
        step_data = $j('.steps-data'),
        flow_type = $j('#flow_type'),
        extend_checkboxes = $j('.extend-flow-checkboxes');

      if (typeof result.flow != 'undefined') {
        if (result.flow == 'extended') {
          self.backend_data = self.backend_extended_data;
          step_data.removeClass('compact-flow');
          extend_checkboxes.hide();
        }
        else {
          WT.Config.compactflowHiddenSteps = result.hidden;
          WT.Config.compactflowEnabledSteps = result.enabled;
          WT.Config.compactflowPreselectSteps = result.preselection;
          !WT.Utiles._getParams('modify') && (self.backend_data = self._stripHiddenStepsFromEnabled());
          step_data.addClass('compact-flow');
          this._viewHiddenStepsOnPassengers(result.hidden);

        }
        flow_type.val(result.flow);
        WT.Steps.init();
      }
    },
    _viewHiddenStepsOnPassengers: function (hidden_steps) {
      var extend_checkboxes = $j('.extend-flow-checkboxes'),
        checkbox_inputs = $j('.checkbox', extend_checkboxes);

      if (hidden_steps.length > 0) {
        extend_checkboxes.show();
      } else {
        extend_checkboxes.hide();
      }

      checkbox_inputs.hide();
      $j.each(hidden_steps, function (index, value) {
        $j('.checkbox-' + value).show();
      });
    },
    _stripHiddenStepsFromEnabled: function () {
      var hidden_steps = WT.Config.compactflowHiddenSteps,
        enabled_steps = WT.Config.compactflowEnabledSteps;
      $j.each(hidden_steps, function (index, value) {
        var index = enabled_steps.indexOf(value);
        if (index >= 0) {
          enabled_steps.splice(index, 1);
        }
      });
      return enabled_steps;
    },
    _compactFlowStepsOnClick: function () {
      var self = this,
        extended_steps = self.backend_extended_data,
        steps_checkboxes = $j('input.steps-to-enable');
      steps_checkboxes.on('change', function () {
        var el = $j(this),
          steps_after_adding = [];
        if (el.prop('checked') == true) {
          self.backend_data.splice(0, 0, el.val());
          $j.each(extended_steps, function (index, value) {
            var index = self.backend_data.indexOf(value);
            if (index > -1) {
              steps_after_adding.push(value);
            }
          });
          self.backend_data = steps_after_adding;
        }
        else {
          var index = self.backend_data.indexOf(el.val());
          if (index > -1) {
            self.backend_data.splice(index, 1);
          }
        }
        WT.Steps.init();
      });
    }
  },
  init: function () {
    if (this.Config.isHotelsFlow) {
      var steps = WT.Config.isHotelsPlusFlightFlow
        ? ['flight + hotel', 'room', 'contact', 'ssr', 'seatselect', 'checkout']
        : ['hotel', 'room', 'guest and contact', 'checkout'];

      this.Modify.rewriteSteps({
        enabled: steps
      });
      this.Hotels.init();
      this.Utiles.init();

      return;
    }

    this.Utiles.initFlashSaleBooking();
    this.Steps.init();
    this.Steps._compactFlowStepsOnClick();
    this.FindTrip.init();

    this.Utiles.init();
  }
};

WT.Utiles = {
  init: function () {
    var self = this;
    self._cookieLifeTimeManagerUpdate();
    $j(document).ajaxStop(function () {
      self._cookieLifeTimeManagerUpdate();
    });
    self._customOwlTabs();
    self.checkDebitAccountSelection();
    self.emergencyPopup();
    self.bookingFirstStepPopup();
    self.initElementVisibilityState();
    self.initChineseLanguageByDatePicker();
  },
  fetchTopHotels: function (params, body) {
    var endpoint = WT.Options.hotelEndpoint,
      query = '?',
      queryKeys = Object.keys(params);

    queryKeys.forEach(function (key) {
      if (key === 'occupancies') {
        query += WT.Hotels.getOccupanciesParams(params[key]) + '&';
      } else {
        query += key + '=' + params[key] + '&';
      }
    });

    return $j.ajax({
      url: endpoint + '/hotel-offer-service/top-destinations/nears' + query,
      type: 'POST',
      dataType: 'json',
      contentType: 'application/json; charset=utf-8',
      data: JSON.stringify(body)
    });
  },
  updateFlashSaleDate: function (url) {
    var self = this;
    var $timerUi = $j('#flashSaleMiniTimer, #flashSaleTimer');
    var $title = $j('#start-in-title');
    var $flashSaleButton = $j('#flash-sale-button');
    var reload = false;
    var $staticBanner = $j('#flash-sale-static-block');
    var $staticBannerButton = $staticBanner.find('a.button');

    $flashSaleButton.tooltip({
      title: $flashSaleButton.data('disable-title')
    });

    $timerUi.on('flashSaleSchedule', function (e) {
      $title.text(Translator.translate('Start in'));
      reload = true;
    });

    $timerUi.on('flashSaleStart', function (e) {
      $title.text(Translator.translate('End in'));

      $flashSaleButton.addClass('active');
      $flashSaleButton.tooltip('disable');

      if ($staticBannerButton.length && isLoggedIn) {
        $staticBannerButton.attr('href', WT.Options.baseUrl + 'flash-sale/flights');
      }

      if (reload && self.isFlashSalePage()) {
        location.reload();
      }
    });

    $timerUi.on('flashSaleEnd', function (e) {
      if (self.isFlashSalePage()) {
        location.href = '/';
      }
    });
  },
  isFlashSalePage: function () {
    return /flash-sale/.test(window.location.href);
  },
  fetchFlashSaleUi: function (url) {
    var script = document.createElement('script');

    script.type = 'text/javascript';
    script.src = url;

    $j('#flash-sale-wrapper, #flash-sale-static-block').append(script);
  },
  initLoginModal: function (baseUrl) {
    var $loginModal = $j('#flash-sale-wrapper .ajax-login-modal'),
      url = baseUrl + 'flash-sale/flights';

    $j('#flash-sale-button').on('click', function () {
      if (!$j(this).hasClass('active')) {
        return false;
      }

      if ($loginModal.length) {
        $loginModal.modal();
      } else {
        $j(location).attr('href', url);
      }
    });

    WT.Session.additionalPostData.login = [
      { name: 'redirect', value: false },
    ];

    $j(document).on('ajaxCustomerLogin', function (event, result) {
      $j(location).attr('href', url);
    });
  },
  flashSaleInit: function (flashSaleUiUrl, baseUrl) {
    this.fetchFlashSaleUi(flashSaleUiUrl);
    this.initLoginModal(baseUrl);
  },
  initFlashSaleBanner: function () {
    this.fetchFlashSaleUi(WT.Options.flashSaleUiUrl);
    this.updateFlashSaleDate(WT.Options.flashSaleService);
  },
  initFlashSaleTerms: function () {
    var $container = $j('.collapseable');
    $container.find('.c-button').click(function (e) {
      e.preventDefault();

      $container.toggleClass('open');
    })
  },
  initFlashSaleBookingStyles: function (step) {
    if (WT.ReservationData.FlashSaleData) {
      WT.Steps.skipped_steps.push('flights');
      if (step === 'passengers') {
        $j('body').addClass('flash-sale-reservation');
        this.flashSaleLoader(false);
      }
    }
  },
  renderNotifications: function (result, timerId) {
    var news = result && result.notifications,
      hiddenNewsList = JSON.parse(localStorage.getItem('hiddenNews')) || [],
      visibleNews = [],
      displayCount = result.display_count,
      totalUnreadNews = result.total_count;

    if (!news.length) {
      clearTimeout(timerId);

      return;
    }

    var diff = news.length - displayCount;

    if (hiddenNewsList && hiddenNewsList.length) {
      hiddenNewsList = hiddenNewsList.reverse();
      news = news.filter(function (item) {
        return hiddenNewsList.indexOf(item.id) === -1;
      });

      diff = news.length - displayCount;
      totalUnreadNews = news.length;

      if (diff <= 0) {
        for (var i = 0; i < diff * -1; i++) {
          var id = hiddenNewsList[i];
          var currentItem = result.notifications.find(function (item) {
            return item.id == id;
          });

          if (!currentItem) continue;

          news.push(currentItem);
        }
      }
    }

    visibleNews = diff ? news.slice(0, displayCount) : news;

    var $notificationBlock = $j('#notification-wrapper'),
      $counterNewItems = $notificationBlock.find('.container-bells .count b'),
      $itemsWrapper = $notificationBlock.find('.notifi-container');

    if (!visibleNews.length) {
      $notificationBlock.hide();
      clearTimeout(timerId);
    }

    if (totalUnreadNews) {
      $counterNewItems
        .text(totalUnreadNews)
        .parent().show();
    } else {
      $counterNewItems.parent().hide();
    };

    WT.Utiles._compileBlockWithHandlebars($itemsWrapper, 'notification_items', { news: visibleNews, list_url: result.list_url });

    if (diff && diff < 1 || diff == 0) {
      $itemsWrapper.addClass('without-close');
      $itemsWrapper.find('.news-item').each(function () {
        var id = $j(this).attr('data-id');

        if (hiddenNewsList.indexOf(id) !== -1) $j(this).removeClass('unread');
      })
    } else if (result.show_close_button) {
      $itemsWrapper.removeClass('without-close');
    }

    $itemsWrapper.find('.hide-news, a.label').on('click', function () {
      var id = $j(this).attr('data-id'),
        isCloseable = parseInt($j(this).attr('data-is-closeable')),
        listHiddenNews = JSON.parse(localStorage.getItem('hiddenNews')) || [];

      if (!isCloseable) {
        return;
      }

      if (id && listHiddenNews && listHiddenNews.indexOf(id) < 0) {
        listHiddenNews.push(id);
        localStorage.setItem('hiddenNews', JSON.stringify(listHiddenNews))
      }

      $j(this).parent().removeClass('unread');

      if (totalUnreadNews <= displayCount) {
        $itemsWrapper.addClass('without-close');
      } else {
        WT.Utiles.renderNotifications(result, timerId)
      }
    });

    $notificationBlock.css('opacity', 1);
  },
  checkNotificationPositionConfig: function (isMobile) {
    var $notificationBlock = $j('#notification-wrapper'),
      isOpenNotification = JSON.parse(localStorage.getItem('isOpenNotification'));

    if (isOpenNotification == null && $notificationBlock.hasClass('config-open-state')) {
      $notificationBlock
        .removeClass('config-open-state')
        .addClass('open');
      $j('#root-wrapper, #owl-bg').addClass('blur');
      localStorage.setItem('isOpenNotification', true);
    }
  },
  initNotifications: function () {
    var baseUrl = WT.Options.baseUrl || '/',
      interval = 10000,
      timerId = '';

    function getNews() {
      $j.ajax({
        url: baseUrl + 'notifications/json',
        type: 'GET',
        dataType: 'json',
        success: function (result) {
          var $notificationBlock = $j('#notification-wrapper');

          if (result && result.notifications && result.notifications.length) {
            if (!$notificationBlock.length) {
              WT.Utiles.renderNotificationsWrapper();
            }

            WT.Utiles.renderNotifications(result, timerId);
            $j('.close-mobile-notifi').off().on('click', WT.Utiles.toggleNotificationBlock);
          } else {
            $notificationBlock.remove();
            $j('#root-wrapper, #owl-bg').removeClass('blur');
          }
        }
      });
    }

    getNews();
    timerId = setInterval(function () {
      getNews();
    }, interval);
  },
  renderNotificationsWrapper: function () {
    WT.Utiles._compileBlockWithHandlebars('body', 'notification_wrapper', {}, 'append');

    var $notificationBlock = $j('#notification-wrapper'),
      isOpenNotification = JSON.parse(localStorage.getItem('isOpenNotification'));

    this.checkNotificationPositionConfig();

    if (isOpenNotification !== null) {
      $notificationBlock.toggleClass('open', isOpenNotification);
      $j('#root-wrapper, #owl-bg').toggleClass('blur', isOpenNotification);
    }

    $notificationBlock.find('.notifi-btn .container-bells').on('click', this.toggleNotificationBlock);
  },
  toggleNotificationBlock: function () {
    var $notificationBlock = $j('#notification-wrapper');

    $notificationBlock.toggleClass('open');
    $j('#root-wrapper, #owl-bg').toggleClass('blur');

    var isOpen = $notificationBlock.hasClass('open')

    localStorage.setItem('isOpenNotification', isOpen);
  },
  initMobileSettingsButton: function () {
    var isMobile = $j(document).width() < WT.Config.maxWidthMobile,
      currentLang = $j('#lang-switcher-wrapper-regular .value').text(),
      currentCurrency = $j('#currency-switcher-wrapper-regular .value').text();

    if (isMobile) {
      $j('#mobile-settings-button')
        .text(currentLang + ' | ' + currentCurrency)
        .show();
    } else {
      $j('#mobile-settings-button').hide();
    }
  },
  initSearch: function () {
    var $searchForm = $j('#search-form'),
      $searchBtn = $j('#search-button'),
      $searchInput = $j('#search-input');

    $searchBtn.on('click', function () {
      $searchForm.addClass('active');
      $searchInput.focus();
    });

    $searchInput.on('blur', function () {
      $searchForm.removeClass('active');
    });
  },
  appendScript: function (url) {
    var script = document.createElement('script');

    script.type = 'text/javascript';
    script.src = url;

    $j('head').append(script);
  },
  resizeMobileSettings: function () {
    $j(window).resize(function () {
      WT.Utiles.initMobileSettingsButton();
    });
  },
  setTitleBarByBookingStep: function (step) {
    var title;

    switch (step) {
      case 'hotel':
        title = 'Select hotel';
        break;
      case 'flights':
        title = 'Select flights';
        break;
      case 'passengers':
      case 'contact':
      case 'guest and contact':
        title = "Enter passenger's details";
        break;
      case 'ssr':
        title = 'Pre-book extras';
        break;
      case 'seatselect':
        title = 'Pre-select seat';
        break;
      case 'hotels':
        title = 'Step hotels';
        break;
      case 'checkout':
        title = 'Review details and pay';
        break;
      case 'refund':
        title = 'Refund';
        break;
      case 'cancel':
        title = 'Cancel';
        break;
      case 'room':
        title = 'Select room';
        break;
      case 'flight + hotel':
        title = 'Hotel + flight';
        break;
      default:
        title = 'Booking'
    }

    document.title = Translator.translate(title) + ' ' + WT.Options.titleSuffix;
  },
  validatePhone: function () {
    var currentVal = $j(this).val().trim(),
      regexp = /^[0-9]+$/,
      errorMsg = 'Please use only digital (0-9) in this field.',
      $tooltip = $j(this).parent('.intl-tel-input').siblings('.validation-error-tooltip');

    if (currentVal && !(regexp.test(currentVal))) {
      var listDigits = currentVal.match(/\d+/g) || [];

      $j(this).val(listDigits.join(''));
      $tooltip.text(Translator.translate(errorMsg)).show();
    } else {
      $tooltip.hide();
    }
  },
  onChangePhone: function () {
    var $this = $j(this),
      $container = $this.parent('.intl-tel-input'),
      $telInput = $container.parent('.input-box').find('.full-telephone-input'),
      code = $container.find('.selected-dial-code').text(),
      value = $this.val() ? code + $this.val() : '';

    $telInput.val(value);
  },
  isValidDate: function (date) {
    return date instanceof Date && !isNaN(date);
  },
  rewriteDates: function () {
    var dates = $j('.date-time');

    if ((!WT.Config.isIranian && !WT.Config.isChinese) || !dates) return;

    $j(dates).each(function () {
      var gregorianDate = $j(this).data('date'),
        formattedDate = '';

      if (WT.Config.isChinese) {
        if (!gregorianDate) return;
        var date = new Date(gregorianDate),
          realDate = WT.Utiles.isValidDate(date)
            ? moment(gregorianDate)
            : moment(gregorianDate, WT.Options.dateFormat);

        formattedDate = realDate.format(WT.Utiles.getDateFormat());
      }

      if (WT.Config.isIranian) {
        var validDate = gregorianDate && new Date(gregorianDate) || $j(this).data('time') && new Date($j(this).data('time')),

          formattedDate = new persianDate(validDate).format(gregorianDate ? WT.Utiles.getDateFormat() : 'HH:mm');
      }

      $j(this).text(formattedDate);
    })
  },
  handlerCountryInput: function (countries, defaultCountry, topCountries, $inputs, isAccount) {
    var $inputsCountry = $j('.input-country');

    if ($inputsCountry.countrySelect) {
      $inputsCountry.each(function () {
        var $inputCountry = $j(this),
          selectedCountryCode = $inputCountry.parent().parent().find('select').val();

        if (isAccount) {
          defaultCountry = selectedCountryCode;
        }

        $inputCountry
          .countrySelect({
            countries: countries,
            defaultCountry: defaultCountry.toLowerCase(),
            preferredCountries: topCountries.map(function (country) {
              return country.toLowerCase()
            })
          })
          .on('change', function () {
            var selectedCountry = $j(this).countrySelect('getSelectedCountryData');

            $j(this).parent().parent().find('select').val(selectedCountry.iso2.toUpperCase()).change();
            if ($inputs) $inputs.change();
          });
      })
    }
  },
  isSpace: function (str) {
    var regexp = /\s/g;

    return regexp.test(str);
  },
  getCountSymbolsByFullName: function (value, input) {
    var $input = $j(input),
      siblingId = $input.data('siblingId'),
      $siblingInput = $j('#' + siblingId),
      siblingValue = $siblingInput && $siblingInput.length ? $siblingInput.val() : '';

    return (value + siblingValue).length;
  },
  getMaxCharactersLengthByFullNamePassenger: function (input, configValue) {
    var $input = $j(input),
      titleId = $input.data('titleId'),
      $titleInput = $j('#' + titleId),
      titleValue = $titleInput && $titleInput.length ? $titleInput.val() : '',
      lengthTitle = (titleValue || '').length;

    return configValue - lengthTitle;
  },
  isMaxCharactersByFullNamePassenger: function (value, input, configValue) {
    var maxValue = this.getMaxCharactersLengthByFullNamePassenger(input, configValue);

    return this.getCountSymbolsByFullName(value, input) <= maxValue;
  },
  renderMessageTooltip: function ($input, value, message) {
    if (!$input.length) return;

    $input
      .val(value)
      .siblings('.validation-error-tooltip')
      .text(Translator.translate(message))
      .show();
  },
  objectToFormData: function (obj, form, namespace) {
    var fd = form || new FormData(),
      formKey;

    for (var property in obj) {
      if (namespace) {
        formKey = namespace + '[' + property + ']';
      } else {
        formKey = property;
      }

      if (obj[property] instanceof Date) {
        fd.append(formKey, obj[property].toISOString());
      } else if (typeof obj[property] === 'object'
        && !(obj[property] instanceof File)
        && !(obj[property] instanceof Blob)) {
        WT.Utiles.objectToFormData(obj[property], fd, formKey);
      } else {
        // if it's a string or a File object
        fd.append(formKey, obj[property]);
      }
    }

    return fd;
  },
  renderHeaderByStep: function (container_selector, step, cls, isNew, isShowInfant = false) {
    WT.Utiles._compileBlockWithHandlebars(container_selector + ' .top-flight-switcher', 'top_flight_switcher', {
      flights: WT.flights,
      cls: cls
    });
    WT.Utiles._compileBlockWithHandlebars(container_selector + ' .passenger-switcher', 'passenger_switcher', {
      passengers: this.addInitialsToPassengers(WT.ReservationData.passengers),
      flights: WT.flights,
      step: step,
      isNew: isNew,
      isShowInfant: isShowInfant
    });
  },
  addInitialsToPassengers: function (passengers) {
    return passengers.map(function (item) {
      item.initials = item.firstname.substring(0, 1) + item.lastname.substring(0, 1);
      return item;
    })
  },
  formatWithCurrency: function (val, format) {
    if (!WT.Options) return;

    val = this.numberFormat(val, WT.Options.priceDecimalPrecision, WT.Options.priceDecimalSeparator, WT.Options.priceGroupSeperator);

    var template = format,
      dots = "%s",
      commas = '0,00',
      integer = '0';

    if (typeof format !== 'undefined') {
      if (format.indexOf(dots) > -1) {
        val = template.replace(dots, val);
      } else if (format.indexOf(integer) > -1) {
        val = template.replace(integer, val);
      } else {
        val = template.replace(commas, val);
      }
    }

    return val;
  },
  numberFormat: function (number, decimals, dec_point, thousands_sep) {
    var n = number, prec = decimals;

    var toFixedFix = function (n, prec) {
      var k = Math.pow(10, prec);
      return (Math.round(n * k) / k).toString();
    };

    n = !isFinite(+n) ? 0 : +n;
    prec = !isFinite(+prec) ? 0 : Math.abs(prec);
    var sep = (typeof thousands_sep === 'undefined') ? ',' : thousands_sep;
    var dec = (typeof dec_point === 'undefined') ? '.' : dec_point;
    var s = (prec > 0) ? toFixedFix(n, prec) : toFixedFix(Math.round(n), prec);
    var abs = toFixedFix(Math.abs(n), prec);
    var _, i;

    if (abs >= 1000) {
      _ = abs.split(/\D/);
      i = _[0].length % 3 || 3;

      _[0] = s.slice(0, i + (n < 0)) +
        _[0].slice(i).replace(/(\d{3})/g, sep + '$1');
      s = _.join(dec);
    } else {
      s = s.replace('.', dec);
    }

    var decPos = s.indexOf(dec);

    if (prec >= 1 && decPos !== -1 && (s.length - decPos - 1) < prec) {
      s += new Array(prec - (s.length - decPos - 1)).join(0) + '0';
    } else if (prec >= 1 && decPos === -1) {
      s += dec + new Array(prec).join(0) + '0';
    }

    return s;
  },
  getDateFormat: function () {
    if (WT.Config.isChinese) return 'YY年MM月DD日';

    return WT.Config.dateFormat || WT.Config.dateFormatDefault;
  },
  getMappingByDocumentForm: function (type) {
    switch (type) {
      case 'docs': {
        return [{
          name: 'docs_type',
          type: 'select',
          value: 'type',
          element: 'select'
        }, {
          name: 'docs_number',
          type: 'input',
          value: 'number',
          element: 'input'
        }, {
          name: 'docs_nationality',
          type: 'select',
          value: 'nationality',
          element: 'select'
        }, {
          name: 'docs_document_expirydate',
          type: 'date',
          value: 'expiry_date',
          element: 'input'
        }, {
          name: 'docs_country',
          type: 'select',
          value: 'country',
          element: 'select'
        }, {
          name: 'docs_document_birthdate',
          type: 'date',
          value: 'birthdate',
          element: 'input'
        }]
      }
      case 'docid': {
        return [{
          name: 'docid_type',
          type: 'select',
          value: 'type',
          element: 'select'
        }, {
          name: 'docid_number',
          type: 'input',
          value: 'number',
          element: 'input'
        }, {
          name: 'docid_document_expirydate',
          type: 'date',
          value: 'expiry_date',
          element: 'input'
        }, {
          name: 'docid_country',
          type: 'country',
          value: 'country',
          element: 'select'
        }]
      }
      case 'doca': {
        return [{
          name: 'doca_type',
          type: 'select',
          value: 'type',
          element: 'select'
        }, {
          name: 'doca_address',
          type: 'input',
          value: 'address',
          element: 'input'
        }, {
          name: 'doca_city',
          type: 'input',
          value: 'city',
          element: 'input'
        }, {
          name: 'doca_country',
          type: 'country',
          value: 'country',
          element: 'select'
        }, {
          name: 'doca_province',
          type: 'input',
          value: 'province',
          element: 'input'
        }, {
          name: 'doca_zipcode',
          type: 'input',
          value: 'zipcode',
          element: 'input'
        }]
      }
      case 'doco': {
        return [{
          name: 'doco_type',
          type: 'select',
          value: 'type',
          element: 'select'
        }, {
          name: 'doco_number',
          type: 'input',
          value: 'number',
          element: 'input'
        }, {
          name: 'doco_place',
          type: 'input',
          value: 'issue_place',
          element: 'input'
        }, {
          name: 'doco_country',
          type: 'country',
          value: 'country',
          element: 'select'
        }, {
          name: 'doco_birth_place',
          type: 'input',
          value: 'birth_place',
          element: 'input'
        }, {
          name: 'doco_document_issuedate',
          type: 'date',
          value: 'issue_date',
          element: 'input'
        }]
      }
      default:
        return null;
    }
  },
  initElementVisibilityState: function () {
    (function ($) {
      $.each(['show', 'hide'], function (i, ev) {
        var el = $.fn[ev];
        $.fn[ev] = function () {
          this.trigger(ev);
          return el.apply(this, arguments);
        };
      });
    })(jQuery);
  },
  getDateFormatForDatePicker: function () {
    return (WT.Config.dateFormat || WT.Config.dateFormatDefault).toLowerCase().replace('yyyy', 'yy');
  },
  getDateFormatForMask: function (isChinese) {
    if (isChinese) return 'YYYY年MM月DD日';

    return WT.Config.dateFormat || WT.Config.dateFormatDefault;
  },
  emergencyPopup: function () {
    $j('#emergency_popup').modal();
  },
  bookingFirstStepPopup: function () {
    $j('#booking_first_step_popup').modal();
  },
  validateAssociatedAdult: function () {
    var $associatedAdultFields = $j('.field-associated-adult').find('select'),
      values = [],
      isSuccess = true;

    $associatedAdultFields.each(function () {
      var $select = $j(this),
        selectedValue = $select.val(),
        isSelectedUnique = values.indexOf(selectedValue) === -1;

      if (isSelectedUnique) {
        values.push(selectedValue);
        $select
          .removeClass('custom-validation-failed')
          .parent()
          .find('.validation-advice')
          .hide();
      } else {
        isSuccess = false;

        $select
          .addClass('custom-validation-failed')
          .parent()
          .find('.validation-advice')
          .show();
      }
    });

    return isSuccess;
  },
  checkDebitAccountSelection: function () {
    $j(document).on('click', '#checkout-btn', function () {
      var debit_form = $j('#p_method_wt_corporate_debit');
      if (debit_form.length && debit_form.is(':checked')) {
        var selected_account = $j('#corporate-debit-account option:selected');
        if (!selected_account.length) {
          alert(Translator.translate('Please select Debit Account.'));

          return false;
        }
      }
      localStorage.setItem('reserved', JSON.stringify(WT.ReservationData));
      return true;
    });
  },
  loaderCount: 0,

  stepLoader: function (show) {
    var coShadow = $j('#co-shadow, #stepchangeloader'),
      body = $j('body');

    if (show) {
      this.loaderCount++;
    } else {
      this.loaderCount--;
    }

    if (this.loaderCount <= 0) {
      body.removeClass('loading');
      coShadow.fadeOut(150);
      this.loaderCount = 0;
    } else {
      if (WT.modify_flag) body.addClass('loading');

      coShadow.fadeIn(150);
    }
  },
  bookingSummaryLoader: function (show, wrapperId) {
    var parentsList = ['summary', 'form-flights-buttons', 'ticket-verification-button'];

    $j(parentsList).each(function (_, wrapperId) {
      var coShadow = $j('#' + wrapperId + ' .loader-absolute');

      if (show) {
        coShadow.fadeIn(150);
      }
      else {
        coShadow.fadeOut(150);
      }
    })
  },
  notificationPopup: function (show, message) {
    var coShadow = $j('#notification-popup');

    if (show) {
      $j(coShadow).find('.message').html(Translator.translate(message));
      coShadow.fadeIn(150);
      coShadow.delay(1000).fadeOut('slow');
    }
    else {
      coShadow.fadeOut(150);
    }
  },
  scrollPerform: function (el, offset) {
    $j('html, body').animate({
      scrollTop: el.offset().top - offset
    }, 600);
  },
  scrollTo: function (el, add_offset, mobile_only) {
    if (el.length > 0) {
      var offset_additional = add_offset ? add_offset : 0;
      if (mobile_only) {
        if (matchMedia('only screen and (max-width:  ' + bp.large + 'px)').matches) {
          offset_additional = 0;
          this.scrollPerform(el, offset_additional);
        }
      }
      else {
        this.scrollPerform(el, offset_additional);
      }
    }
  },
  _filterItemsByTypes: function () {
    var container_selector = '#step-' + WT.Steps.backend_data[WT.Steps.activeIndex],
      checked_passengers = $j(container_selector + ' .passenger-switcher input[type=checkbox]:checked'),
      items = $j(container_selector + ' .item'),
      passenger_types = [],
      message = '<ul class="messages"><li class="notice-msg"><ul><li><span>' + Translator.translate('This item is not available for selected passengers age type') + '</span></li></ul></li></ul>';

    if (items.length > 0) {
      checked_passengers.each(function () {
        if (typeof ($j(this).data('passenger_type') != 'undefined')) {
          passenger_types.push($j(this).data('passenger_type'));
        }
      });

      if ($j.inArray('ADT', passenger_types) > -1) {
        deactivateEl(items);
        activateEl($j(container_selector).find('.ADT,.INF'));
      }

      if ($j.inArray('CHD', passenger_types) > -1) {
        deactivateEl(items);
        activateEl($j(container_selector).find('.CHD'));
      }

      if ($j.inArray('CHD', passenger_types) > -1 && $j.inArray('ADT', passenger_types) > -1) {
        deactivateEl(items);
        activateEl($j(container_selector).find('.CHD.ADT'));
      }
    }

    function deactivateEl(el) {
      el.addClass('deactivated-item');
      el.append(message);
      el.find('input').prop('disabled', true);
      el.find('.numbers-row').css('visibility', 'hidden');
    }

    function activateEl(el) {
      el.removeClass('deactivated-item');
      el.find('.messages').remove();
      el.find('.numbers-row').css('visibility', 'visible');
      el.find('input').prop('disabled', false);
    }
  },
  _cookieLifeTimeManagerUpdate: function () {
    if (parseInt(WT.Config.cookieLifeTime) > 0) {
      var toDay = new Date();//for getting todays date.
      toDay.setTime(toDay.getTime());
      var expaireTime = WT.Config.cookieLifeTime * 1000;
      var expaireDate = new Date(toDay.getTime() + (expaireTime));
      Mage.Cookies.expires = expaireDate;
      if (Mage.Cookies.get('booking_flag') !== null) {
        this._cookieBookingFlagCreate();
      }
    }
  },
  _cookieBookingFlagCreate: function () {
    var flag_number = (Math.floor(Math.random() * (1000000000 - 10 + 1)) + 10).toString();
    //microsoft edge fix
    document.cookie = 'booking_flag' + "=; expires=Fri, 31 Dec 1999 23:59:59 GMT;  path=/";
    document.cookie = 'booking_flag' + "=; expires=Fri, 31 Dec 1999 23:59:59 GMT;  path=/#/";
    Mage.Cookies.clear('booking_flag');
    Mage.Cookies.set('booking_flag', flag_number);
    localStorage.setItem('booking_flag', flag_number);
  },
  _localStorageUpdate: function (item, form, just_string, just_object) {
    this._cookieLifeTimeManagerUpdate();
    if (just_object) {
      localStorage.setItem(item, JSON.stringify(form));
    } else if (just_string) {
      localStorage.setItem(item, form);
    } else {
      localStorage.setItem(item, JSON.stringify(form.serializeObject()));
    }

    this._cookieBookingFlagCreate();
  },
  localStorageClear: function () {
    if (Mage.Cookies.get('booking_flag') != localStorage.getItem('booking_flag')) {
      var keysStorage = Object.keys(localStorage || {}) || [];

      keysStorage.forEach(function (key) {
        if (WT.Utiles._getParams('modify') === 'checkout' && (key === 'reserved' || key === 'selected')) return;

        if (key !== 'remember_contact') {
          localStorage.removeItem(key);
        }
      })
    }
  },
  _makeRadiobuttonAsCheckboxes: function () {
    var step_container = '#step-' + WT.Steps.backend_data[WT.Steps.activeIndex];
    $j(step_container + " .customized-radio >  input:radio:checked").data("chk", true);
    $j(step_container + " .customized-radio >  input:radio").click(function () {
      $j("input[name='" + $j(this).attr("name") + "']:radio").not(this).removeData("chk");
      $j(this).data("chk", !$j(this).data("chk"));
      $j(this).prop("checked", $j(this).data("chk")).change();
    });
  },
  _makeCheckboxesAsRadiobuttons: function (chkbox_selector, selectall_selector) {
    $j(chkbox_selector).click(function () {
      var ul_list = $j(this).closest('ul.passengers');
      if (ul_list.find('input:checked').length == 0) {
        $j(this).prop('checked', true);
      }
    });
    $j(selectall_selector).on('click', function () {
      $j(chkbox_selector).prop('checked', true);
      WT.Utiles._filterItemsByTypes();
    })

  },
  _getArrayIndexByText: function (text, array) {
    var steps = array,
      needle = '';
    $j.each(steps, function (index, value) {
      if (value == text) {
        needle = index;
      }
    });
    return needle;
  },
  _compileBlockWithHandlebars: function (elemSelector, tplName, data, operation) {
    var source = WT.Templates[tplName],
      template = Handlebars.compile(source),
      results_block = $j(elemSelector),
      result = template(data);

    if (operation === 'append') {
      results_block.append(result);
    } else {
      results_block.html(result);
    }
  },
  _showCountDown: function (time, data, stop) {
    var container_inner = $j('.countdown-inner'),
      container = $j('.countdown'),
      duration_seconds = parseInt(time) * 1000 - Date.now(),
      id = data.rloc || data.referenceId,
      redirectLink = data.redirect || '#',
      updateData = data.updateData !== undefined ? data.updateData : true,
      reference_message = '<div class="reference-number item">'
        + Translator.translate('Your reference number  - ')
        + id + '</div>';

    if (time) {
      if (stop) {
        if (typeof window.countdown !== 'undefined') {
          clearInterval(window.countdown);
          container.removeClass('start').fadeOut();
        }
      } else {
        if (updateData && WT.ReservationData && WT.ReservationData.flight) {
          WT.ReservationData.flight.bookingTimeLeft = time;
          WT.ReservationData.flight.bookingReferenceID = data.referenceId;
          WT.ReservationData.flight.rloc = data.rloc;
        }

        this._showCountDown(1, {}, 'hide');
        container.addClass('start').fadeIn();

        window.countdown = setInterval(function () {
          if (duration_seconds > 1000) {
            container_inner.html(msToTime(duration_seconds) + reference_message);
          } else {
            clearInterval(window.countdown);
            redirect();
          }
          duration_seconds -= 1000;
        }, 1000);
      }
    } else {
      $j('.valid-booking').hide();

      if (!WT.modify_flag) container.fadeIn();

      container_inner.html(reference_message);
    }

    function msToTime(s) {
      var localS = s;
      var ms = localS % 1000;
      localS = (localS - ms) / 1000;
      var secs = localS % 60;
      localS = (localS - secs) / 60;
      var mins = localS % 60;
      var hrs = (localS - mins) / 60;

      var currentHours = (hrs < 10 ? '0' : '') + hrs,
        currentMins = (mins < 10 ? '0' : '') + mins,
        currentSec = (secs < 10 ? '0' : '') + secs;

      if (WT.Config.isIranian) {
        var iranianTime = new persianDate().month(1).date(1).hours(currentHours).minutes(currentMins).seconds(currentSec)
        currentHours = iranianTime.format('HH'),
          currentMins = iranianTime.format('mm'),
          currentSec = iranianTime.format('ss');
      }

      return '<ul><li class="wt-bg1 countdown-hrs' + (hrs ? '' : ' hide') + '">'
        + currentHours
        + '<span>'
        + Translator.translate('hrs')
        + '<span></li><li class="wt-bg1' + (hrs ? ' colon' : '') + '">'
        + currentMins
        + '<span>'
        + Translator.translate('mins')
        + '<span></li><li class="wt-bg1">'
        + currentSec + '<span>'
        + Translator.translate('secs')
        + '<span></li></ul>';
    }

    function redirect() {
      container_inner.html(Translator.translate("Your booking is expired"));
      window.location = redirectLink;
    }
  },
  _activateBootstrapTab: function (tab) {
    $j('.nav-tabs a[href="#' + tab + '"]').click();
  },
  tooltipsInit: function () {
    var iOS = /iPad|iPhone|iPod/.test(navigator.userAgent) && !window.MSStream;

    if (iOS) {
      $j('[data-toggle="tooltip"]').tooltip('destroy');

      return;
    };

    $j('[data-toggle="tooltip"]').tooltip({ html: true });
  },
  tooltipsDestroy: function () {
    $j('[data-toggle="tooltip"]').tooltip('destroy');
  },
  _defineProperty: function (obj, key, value) {
    if (key in obj) {
      Object.defineProperty(obj, key, {
        value: value,
        enumerable: true,
        configurable: true,
        writable: true
      });
    } else {
      obj[key] = value;
    }
    return obj;
  },
  _customOwlTabs: function () {
    $j('.owl-tabs').each(function () {
      var $jactive, $jcontent, $jdirection, $jid, $jlinks = $j(this).find('a');
      $jactive = $j($jlinks.filter('[href="' + location.hash + '"]')[0] || $jlinks[0]);
      $jactive.addClass('active');
      if (typeof $jactive[0] !== 'undefined') {
        $jcontent = $j($jactive[0].hash);
        $jlinks.not($jactive).each(function () {
          $j(this.hash).hide();
        });
        $j(this).on('click', 'a', function (e) {
          // Make the old tab inactive.
          $jactive.removeClass('active');
          $jcontent.hide();
          // Update the variables with the new link and content
          $jactive = $j(this);
          $jcontent = $j(this.hash);
          $jdirection = $j(this).data('direction');
          $jid = $j(this).data('id');
          // Make the tab active.
          $jactive.addClass('active');
          $jcontent.show();
          // Prevent the anchor's default click action
          e.preventDefault();

          if (+$j('#search_period').val()) {
            WT.SelectTrip.preselectFare(WT.SelectTrip.flights, [$jdirection, $jid]);
          }

          WT.SelectTrip.activeTab = {
            direction: $jdirection,
            id: $jid
          };
          $j('.pricegroup-descriptions').maxHeightBox('.fare-max td');
        });
      }
    });

    $j(".owl-tabs").each(function () {
      var owl = $j(this);
      owl.owlCarousel({
        navigation: true,
        mouseDrag: true,
        autoPlay: false,
        itemsCustom: [
          [0, 1],
          [320, 3],
          [600, 5],
          [960, 7]
        ],
        responsiveRefreshRate: 50,
        navigationText: ['<i class="fas fa-chevron-left"></i>', '<i class="fas fa-chevron-right"></i>'],
        afterInit: function () {
          nonPaginatedMark();
        },
        afterUpdate: function () {
          nonPaginatedMark();
        }
      });

      function nonPaginatedMark() {
        var parentContainer = owl.parent();
        ($j('.owl-controls', owl).is(":visible") == false)
          ? parentContainer.addClass('non-paginated')
          : parentContainer.removeClass('non-paginated');
      }
    });
  },
  _getParams: function (x) {
    var params = {};

    if (location.search) {
      var parts = location.search.substring(1).split('&');

      for (var i = 0; i < parts.length; i++) {
        var nv = parts[i].split('=');
        if (!nv[0]) continue;
        params[nv[0]] = decodeURIComponent(nv[1]) || true;
      }
    }
    return x ? params[x] : params;
  },
  objectSize: function (obj) {
    var size = 0, key;
    for (key in obj) {
      obj.hasOwnProperty(key) && size++;
    }
    return size;
  },
  diffDate: function (firstDate, secondDate) {
    try {
      var msdiff = new Date(firstDate).getTime() - new Date(secondDate).getTime();

      return Math.floor((msdiff) / (1000 * 60));
    } catch (e) {
      return 0;
    }
  },
  initChineseLanguageByDatePicker: function () {
    if (!WT.Config.isChinese) {
      var data = WT.Passengers.getDaysAndMonths();

      $j.datepicker.regional['en'] = {
        monthNames: data.months,
        monthNamesShort: data.monthsShort,
        dayNames: data.days,
        dayNamesShort: data.daysShort,
        dayNamesMin: data.daysMin,
      };

      $j.datepicker.setDefaults($j.datepicker.regional['en']);
      return;
    };

    $j.datepicker.regional['zh'] = {
      monthNames: ['一月', '二月', '三月', '四月', '五月', '六月', '七月', '八月', '九月', '十月', '十一月', '十二月'],
      monthNamesShort: ['1月', '2月', '3月', '4月', '5月', '6月', '7月', '8月', '9月', '10月', '11月', '12月'],
      dayNames: ['星期日', '星期一', '星期二', '星期三', '星期四', '星期五', '星期六'],
      dayNamesShort: ['周日', '周一', '周二', '周三', '周四', '周五', '周六'],
      dayNamesMin: ['日', '一', '二', '三', '四', '五', '六'],
      showMonthAfterYear: true,
      yearSuffix: '年'
    };

    $j.datepicker.setDefaults($j.datepicker.regional['zh']);
  },
  initFlashSaleBooking: function () {
    var flashSaleId = WT.Utiles._getParams('flashsale');
    var flashSaleData = localStorage.getItem('flash_sale_data');

    if (flashSaleId && flashSaleData) {
      flashSaleData = JSON.parse(flashSaleData);

      var preselect = {
        originid: flashSaleData.departureAirport,
        destinationid: flashSaleData.arrivalAirport,
        depart_date: flashSaleData.departureDate,
        currency: flashSaleData.currency,
        traveltype: "oneway",
        departdate: flashSaleData.departureDate,
        numadult: "1",
        numchild: "0",
        numinfant: "0",
        time_entity: "D",
        step: "flights",
        search_period: "0",
        grouptype: "regular"
      };

      WT.ReservationData.FlashSaleData = flashSaleData;

      WT.Utiles._localStorageUpdate('selected', JSON.stringify(preselect), true);
      sessionStorage.setItem('bookingAutosearch', 1);
      this.flashSaleLoader(true);
    }
  },
  flashSaleLoader: function (enable) {
    if (enable) {
      $j('body').addClass('flash-sale-loader');
    } else {
      $j('body').removeClass('flash-sale-loader');
    }
  },
  triggerGoogleEvents: function (events) {
    if (!Mage.Cookies.get('cookielaw')) {
      return false;
    }

    if (typeof gtag === "undefined") {
      return false;
    }

    events.forEach(function (event) {
      gtag('event', event.name, event.data);
    });
  },
  sendWithRecaptcha: function (data, callback) {
    if (window.isRecaptchaV3Enabled) {
      grecaptcha.ready(function () {
        grecaptcha.execute(window.recaptchaV3Key, { action: 'submit' }).then(function (token) {
          if (typeof data === 'string' || data instanceof String) {
            data += '&captcha=' + token;
          } else {
            data.captcha = token;
          }

          callback(data);
        });
      });
    } else {
      callback(data);
    }
  }
};

Date.prototype.toGMTDate = function () {
  return new Date(this.getFullYear() + "-" + (this.getMonth() < 9 ? "0" : "") + (this.getMonth() + 1) + "-" + (this.getDate() < 10 ? "0" : "") + this.getDate());
};
Date.prototype.addDays = function (days) {
  this.setDate(this.getDate() + days);
  return this;
};
Array.prototype.remove = function () {
  var what, a = arguments, L = a.length, ax;
  while (L && this.length) {
    what = a[--L];
    while ((ax = this.indexOf(what)) !== -1) {
      this.splice(ax, 1);
    }
  }
  return this;
}

var WT = WT || {};
WT.googleAnalyticsEvents = {
  /* global: ga */
  sendEvent: function (eventCategory, eventAction, eventLabel) {
    if (typeof ga == 'function') {
      ga('send', 'event', eventCategory, eventAction, eventLabel);
    }
  },
  sendPage: function (page) {
    if (typeof ga == 'function') {
      ga('send', 'pageview', page);
    }
  },
  sendCurrentPage: function () {
    WT.googleAnalyticsEvents.sendPage(location.pathname + location.search + location.hash);
  },
  sendException: function (exDescription, exFatal) {
    var active_step = WT.Steps.backend_data[WT.Steps.activeIndex];
    if (typeof ga == 'function') {
      ga('send', 'exception', {
        'exDescription': active_step + '. ' + exDescription,
        'exFatal': exFatal
      });
    }
  }
};

window.addEventListener('hashchange', function () {
  WT.googleAnalyticsEvents.sendCurrentPage();
}, false);

var WT = WT || {};
WT.FindTrip = {
  init: function () {
    this.PersianDatePickerConfig = {
      viewMode: 'day',
      initialValue: false,
      inline: true,
      altFormat: WT.Config.dateFormat || 'YYYY/MM/DD',
      autoClose: true,
      position: 'auto',
      onlyTimePicker: false,
      onlySelectOnDate: false,
      calendarType: 'persian',
      inputDelay: 800,
      observer: false,
      format: WT.Utiles.getDateFormat(),
      calendar: {
        persian: {
          locale: 'fa',
          showHint: true,
          leapYearMode: 'algorithmic'
        },
        gregorian: {
          locale: 'en',
          showHint: false
        }
      },
      navigator: {
        enabled: true,
        scroll: {
          enabled: false
        },
        text: {
          btnNextText: '<',
          btnPrevText: '>'
        }
      },
      toolbox: {
        enabled: false,
        calendarSwitch: {
          enabled: false,
          format: 'MMMM'
        }
      },
      dayPicker: {
        enabled: true,
        titleFormat: 'YYYY/MM'
      },
      monthPicker: {
        enabled: false,
        titleFormat: 'YYYY'
      },
      yearPicker: {
        enabled: false,
        titleFormat: 'YYYY'
      },
      responsive: false
    };

    this.isIranian = WT.Config.isIranian;
    this.preparePersianStyles();
    if (this.isIranian) {
      $j('#destination, #origin').attr('dir', 'rtl');
    }
    localStorage.removeItem('search-period-preselected');
    $j.extend(WT.Config, WT.Options);
    if ($j('#tripsearch').length === 0 && $j('#quicksearch').length === 0) return;
    this.adultField = $j('#select-adult');
    this.childField = $j('#select-child');
    this.passengerSelect = $j('.passengers-dd');
    this.infantField = $j('#select-infant');
    this.originSelect = 'originselect';
    this.destinationSelect = 'destinationselect';
    this.departureSelect = 'departdatebox';
    this.returnSelect = 'returndatebox';
    this.originInputId = 'origin';
    this.originHintInputId = 'origin-hint';
    this.destinationInputId = 'destination';
    this.destinationHintInputId = 'destination-hint';
    this.deparutreInputId = 'departdate';
    this.returnInputId = 'returndate';
    this.continueCheckout = $j('#continue-checkout');
    this.passengersTypeBlock = $j('#passengers-type-block');
    this.passengersSubBox = $j('#passengers-sub-box');
    this.passengerTypeSenior = $j('#passenger-type-senior');
    this.passengerTypeStudent = $j('#passenger-type-student');
    this.passengerTypeUngdom = $j('#passenger-type-ungdom');
    this.travelFromBlock = $j('.travel-from');
    this.travelToBlock = $j('.travel-to');
    this.openedModalId = '';
    if (WT.modify_flag) WT.Utiles.localStorageClear();
    this.travelWithChildren();
    this.zeroPassengersNoSelect();
    this.passengerSelectsChange();
    this.refreshSelectInfant();
    this.oneWayOnlyClick();
    this.onFocusShowBox('origin', 'originselect');
    this.onFocusShowBox('destination', 'destinationselect');
    this.onFocusShowBox('departdate', 'departdatebox');
    this.onFocusShowBox('returndate', 'returndatebox');
    this.originsAutoCompleteOnKeyUp();
    this.destinationsAutoCompleteOnKeyUp();
    this.refreshOrigin(false);
    this.refreshSelectedOnBlur();
    this.tripTypesDetect();
    this.clearNextSteps();
    this._updateSearchPeriodSelect();
    this._getDeepLink();
    this._updateDiscountBox();
    this.submitSearchForm();
    this.dynamicStyles();
    this.windowResize();
    this.checkModify();
    this.spread = WT.Utiles.spread;
    this.displayPassengerPopup();
    this.calculateTotalPassengers();
    this.dropdownInit('#field-search-period-title', '#search_period');
    this.dropdownInit('#field-outbound-compartment-select-title', '.compartment-outbound-select-wrapper ');
    this.dropdownInit('#field-inbound-compartment-select-title', '.compartment-inbound-select-wrapper ');
    this.dropdownInit('#field-passengers-type-title', '#passengers-type ');
    this.initBackdrop();
    this.dropdownControllerMobile();

    if (location.pathname === "/") {
      this.defaultAirports();
    } else {
      this.changeStore();
      /** global: sessionStorage */
      if (sessionStorage.getItem('bookingAutosearch') || sessionStorage.getItem('homeAutoSearch')) {
        this.preselectForm();
      } else {
        var modify_flag = WT.Utiles._getParams('modify') || WT.Utiles._getParams('dl');
        if (modify_flag) {
          this.preselectForm();
        } else {
          this._displayCompartmentType(false);
          this.defaultAirports();
        }
      }
    }

    if (!+WT.Options.enabledSimpleAirportList) {
      var params = WT.FindTrip.calculateAirportListItems();
      WT.FindTrip.calculateAirportListHeight(params.countriesCount, params.maxCitiesCount);
    }

    if (!this.travelFromBlock.find('#origin').val() ||
      !this.travelToBlock.find('#destination').val()) {
      this.passengersTypeBlock.addClass('no-display');
      this.passengersSubBox.addClass('no-display');
    }

    WT.Summary.init();
    this.discountVsPromo();
    this.travelUserTypeValidation();
    this.callSwitchDestinations();
  },
  selected: {
    "origin": null,
    "destination": null,
    "depart_date": null,
    "return_date": null
  },
  windowResize: function () {
    var self = this;
    $j(window).resize(function () {
      self._datePickerResize();
      WT.Summary.summaryResize();
      $j('.pricegroup-descriptions').maxHeightBox('.fare-max td');
    });
  },
  dropdownControllerMobile: function () {
    if ($j(window).width() > WT.Config.maxWidthMobile) return;

    var $dropdownIcon = $j('#settingsModal .dropdown-heading.cover');

    $dropdownIcon.on('click touch', function () {
      var dropdownWrapper = $j(this).parent();

      if (dropdownWrapper.hasClass('open')) {
        dropdownWrapper.removeClass('open');
        dropdownWrapper.find('.dropdown-content').hide();
      } else {
        dropdownWrapper.addClass('open');
        dropdownWrapper.find('.dropdown-content').show();
      }
    });
  },
  preparePersianStyles: function () {
    if (this.isIranian) {
      $j('.preface, #tripsearch, #top, #scroll-to-top, .footer-container, #wt-flights, body').attr('dir', 'rtl');
      if ($j(window).width() < WT.Config.maxWidthMobile) return;
    }
  },
  setDestinationHintMobile: function (wrapperId, airportCode, airportName) {
    if ($j(window).width() > WT.Config.maxWidthMobile) return;
    $j('#' + wrapperId).removeClass('empty-block');
    $j('#' + wrapperId + ' .code').html(airportCode);
    $j('#' + wrapperId + ' .name').html(airportName);
  },
  initBackdrop: function () {
    if ($j(window).width() > WT.Config.maxWidthMobile) return;
    var $backdrop = $j('#mobile-backdrop'),
      target = $j('.infobox'),
      self = this;

    $j('#originselect, #destinationselect').on('touchmove', function (e) {
      $j(this).addClass('non-click');
    })

    $j('#originselect, #destinationselect').on('touchend', function (e) {
      $j(this).removeClass('non-click');
    })

    var observer = new MutationObserver(function (mutations) {
      mutations.forEach(function (mutation) {
        if (mutation.type == 'attributes' && mutation.attributeName == 'style') {
          var infoboxState = $j(mutation.target).css('display');

          switch (infoboxState) {
            case 'block': {
              $backdrop.show();
              if (mutation.target.id == 'destinationselect' || mutation.target.id == 'originselect') $j('body').addClass('backdrop-shown');

              break;
            }
            case 'none': {
              if (mutation.target.id !== self.openedModalId) return;
              $backdrop.hide();
              $j('body').removeClass('backdrop-shown');

              break;
            }
          }

          self.openedModalId = mutation.target.id;
        }
      });
    });

    var config = { attributes: true, childList: true, characterData: true };

    target.each(function (i, element) {
      observer.observe(element, config);
    });
  },
  _datePickerResize: function () {
    var datePicker = $j(".datepicker"),
      self = this;
    if (matchMedia('only screen and (max-width:  ' + bp.medium + 'px)').matches) { /** global: bp */
      datePicker.datepicker("option", "numberOfMonths", 1);
    } else {
      datePicker.datepicker("option", "numberOfMonths", WT.Config.datePickerMonths);
    }
    setTimeout(self._updateDatePickerCellsPrices(), 2000);
  },
  dynamicStyles: function () {
    $j('head').append('<style  type="text/css" >' +
      '.ui-datepicker-calendar .ui-state-default {background: ' + WT.Config.datePickerColorDefault + ' }' +
      '.ui-datepicker-header {color: ' + WT.Config.datePickerColorActive + ' }' +
      '.ui-datepicker-calendar .ui-state-active, .ui-datepicker-calendar .ui-state-hover {background:' + WT.Config.datePickerColorActive + '}' +
      '');
  },
  travelWithChildren: function () {
    $j('#select-child-note').on('click', function () {
      $j(this).hide();
      $j(this).parent().toggleClass('active');
      $j('#passengers-select-child, #passengers-select-infant').show();
    });
  },

  zeroPassengersNoSelect: function () {
    var selectChild = $j('#select-child'),
      selectAdult = $j('#select-adult'),
      selectInfant = $j('#select-infant'),
      self = this;

    selectChild.change(function () {
      if (+selectChild.val() === 0 && +selectAdult.val() === 0) {
        self.setValueByPassenger(selectAdult, '1');
      }

      self.calculateTotalPassengers();
    });
    selectAdult.change(function () {
      var passengerTravelType = $j('.travel-users input:checked').val();

      if (+selectAdult.val() === 0 && +selectChild.val() === 0) {
        if (!WT.FindTrip.isChildrenSearchAllowed(passengerTravelType)) {
          self.setValueByPassenger(selectAdult, '1');

          return;
        }

        self.setValueByPassenger(selectChild, '1');
        $j('#umnr-text-modal').modal();
      }

      self.calculateTotalPassengers();
    });

    selectInfant.change(function () {
      self.calculateTotalPassengers();
    });
  },
  _updateDiscountBox: function () {
    var localdata = JSON.parse(localStorage.getItem('routeInfo')),
      /** global: localStorage */
      discount_box = $j('.discount-box'),
      discount_code = $j('#discount_code'),
      promo_code = $j('#promo_code'),
      sign = $j('#discount_code').data('currency'),
      template = '';

    if (localdata != null) {
      if (typeof localdata.discount_info !== 'undefined' && localdata.discount_info != null && localdata.discount_info != false) {
        if (localdata.discount_info.simple_action == 'percent') sign = '%';
        template = Handlebars.compile('<span class="discount-message">({{discount_text}} - {{discount_amount}}' + sign + '!)</span>');
        var result = template(localdata.discount_info);
        $j('.message-discount').html(result);

        discount_box.fadeIn();
      } else {
        discount_box.hide();
        discount_code.prop('checked', false);
        promo_code.prop("disabled", false);
      }
    }
  },
  discountVsPromo: function () {
    var discount_code = $j('#discount_code'),
      promo_code = $j('#promo_code');

    discountCheckboxBehaviour();
    promoBehaviour();

    function discountCheckboxBehaviour() {
      if (discount_code.is(':checked')) {
        promo_code.prop("disabled", true);
        promo_code.val('');
      } else {
        promo_code.prop("disabled", false);
      }
    }

    function promoBehaviour() {
      if (promo_code.val() !== '') {
        discount_code.prop('checked', false);
      }
    }

    discount_code.on('change', function () {
      discountCheckboxBehaviour();
    });

    promo_code.on('change', function () {
      promoBehaviour();
    })
  },
  passengerSelectsChange: function () {
    var self = this;
    this.adultField.on('change', function () {
      self.refreshSelectInfant();
    });
    this.passengerSelect.on('change', function (e) {
      self._refreshSelectsOther(e);
    })
  },
  _refreshSelectsOther: function (e) {
    var xSum = 0,
      maximumAllowed = WT.Config.passengersAmountMaximum;
    this.passengerSelect.each(function () {
      xSum += parseInt($j(this).val());
    });
    if (xSum > maximumAllowed) {
      alert(Translator.translate('Maximum allowed amount of passengers for reservation is ') + maximumAllowed);
      $j(e.target).find("option:first").prop("selected", true);
    }
  },
  refreshSelectInfant: function () {
    var numAdt = parseInt(this.adultField.val());
    var numInf = parseInt(this.infantField.val());

    if (numInf > numAdt) {
      numInf = numAdt;
    }

    var str = "";
    var tmpl = "<option value='{0}'{2}>{1}</option>";
    for (var i = 0; i < (WT.Config.passengersAmountInfant + 1); i++) {
      str += tmpl.replace("{0}", i).replace("{1}", i + ' ' + Translator.translate("Infant" + (i == 1 ? "" : "s")));
      str = str.replace("{2}", (i <= numAdt ? "{2}" : "{2} disabled='disabled'"));
      str = str.replace("{2}", (i == numInf ? " selected='selected'" : ""));
    }
    this.infantField.empty().append(str);
  },
  _updateSearchPeriodSelect: function () {
    if (typeof (WT.Config.searchPeriodDefault) != 'undefined') {
      var localdata = JSON.parse(localStorage.getItem('routeInfo')),
        select = $j('#search_period'),
        period_ammount_array = WT.Config.searchPeriodDefault.amount,
        period_type = WT.Config.searchPeriodDefault.type,
        period_default = WT.Config.searchPeriodDefault.default;

      if (localdata != null) {
        if (localdata.search_period_amount != null) {
          period_ammount_array = localdata.search_period_amount;
        }

        if (localdata.search_period_type != null) {
          period_type = localdata.search_period_type;
        }

        if (localdata.search_period_default_amount != null) {
          period_default = localdata.search_period_default_amount;
        }
      }

      $j('#time_entity').val(period_type);

      if (period_type == 'D') {
        period_type = 'day';
      } else {
        period_type = 'week';
      }

      select.empty();
      var self = this,
        preselectedPeriod = localStorage.getItem('search-period-preselected');

      select.append('<span class="header">' + Translator.translate('Search period') + '</span></ul>');
      $j.each(period_ammount_array, function (key, value) {
        var output = '';
        if (value == 0) {
          output = Translator.translate('Exact') + ' ' + Translator.translate(period_type);
        } else if (value == 1) {
          output = '+/-' + ' ' + value + ' ' + Translator.translate(period_type);
        } else {
          output = '+/-' + ' ' + value + ' ' + Translator.translate(period_type + 's');
        }

        select.append('<li data-title="' + output + '">' +
          '<input type="radio"  name="search_period" value="' + value + '" />' +
          '<span>' + Translator.translate(output) + '</span>' + '</li>');
        self._preselectDropdownInputs(preselectedPeriod ? preselectedPeriod : period_default, 'search_period', '#field-search-period-title', period_ammount_array);
      });
    }
  },
  dropdownInit: function (clickedBlock, dropdownWrapper) {
    $j(clickedBlock).on('click', function (e) {
      var $dropdownWrapper = $j(dropdownWrapper + '.infobox'),
        $dropdownItems = $j(dropdownWrapper + '.infobox li'),
        $allInputs = $j($dropdownItems).children('input');

      $dropdownWrapper.show();

      $dropdownItems.on('click', function (e) {
        var $currentInput = $j(this).children('input'),
          $title = $j(clickedBlock),
          titleText = $j(this).data('title');

        $allInputs.prop('checked', false);
        $currentInput.prop('checked', true);
        $title.text(Translator.translate(titleText));
        $dropdownWrapper.hide();
      });
    });

    $j(clickedBlock).parent().on('blur', function () {
      $j(this).find('.infobox').hide();
    })
  },
  tripTypesDetect: function () {
    var tripTypes = WT.Config.possibleTripTypes,
      onewayInput = $j('#traveltype-one-way'),
      returnInput = $j('#traveltype-return');

    if ($j.inArray('round_trip', tripTypes) == -1) {
      $j('.flights-select-return, .traveltype li:first, .travel-date:last').hide();
      onewayInput.click();
    }
    if ($j.inArray('oneway_trip', tripTypes) == -1) {
      $j('.traveltype li:last').addClass('disabled').hide();
      returnInput.click();
    }
    if (onewayInput.prop('checked')) {
      $j('.flights-select-return').addClass('disabled');
      onewayInput.parent().parent().removeClass('return-active');
      $j('#returndate').hide();
    }
  },
  airportNameFormat: function (airport, lowercase) {
    var nameFormats = WT.Config.airportNameFormat,
      nameReady = '';
    if (typeof airport === 'object' && airport.name) {
      nameReady = ($j.inArray('departure_airport_code', nameFormats) > -1) ?
        airport.name + ' (' + airport.airportcode + ')' :
        airport.name;
    }

    if (lowercase) {
      nameReady = nameReady.toLowerCase();
    }

    return nameReady;
  },
  oneWayOnlyClick: function () {
    var self = this;

    $j('.traveltype input').on("change", function (e) {
      var returnEl = $j('#returndate'),
        $returnDate = $j('#returndatebox .datepicker'),
        compartmentTypeInbound = $j('.compartment-type-inbound');

      if (e.target.id == 'traveltype-return') {
        var returnDate = $returnDate.datepicker('getDate');

        returnEl.show();
        compartmentTypeInbound.show();
        returnEl.parent().removeClass('disabled');

        if (returnDate) {
          $j('#return_date').val(returnDate.toGMTDate());
          self.selected.return_date = returnDate.toGMTDate();
        }

        if (typeof self.selected !== 'undefined') {
          if (self.selected.destination !== null) {
            self._updatedestinationDatesFares(self.selected.origin.airportcode, self.selected.destination.airportcode);
          }
        }
      } else {
        returnEl.hide();
        compartmentTypeInbound.hide();
        returnEl.parent().addClass('disabled');
        self.selected.return_date = null;
      }
    });
  },
  _onOtherEventsShowBox: function (activatorId, showboxId) {
    var self = this,
      showBox = $j('#' + showboxId),
      activator = $j('#' + activatorId);

    self._preventingFoucForUnselectedPreviousSteps(showboxId);
    showBox.on('mousedown', function (e) {
      activator.attr('cl', 1);
    });
    showBox.on('mouseup touchend', function (e) {
      activator.focus();
    });
    activator.on('keydown', function (event) {
      if (event.keyCode == 38 || event.keyCode == 40) {
        event.preventDefault();
      }
    });
    activator.on('blur', function (e) {
      Validation.validate(activatorId);

      var onBlur = function () {
        if (activator.attr('cl') == 1) {
          activator.removeAttr('cl');
        } else {
          self._preventingFoucForUnselectedPreviousSteps(showboxId);
          showBox.hide();
          self.refreshDestination(true);

          var $coutries = $j('#destinationselect .flights-navigation-wrapper .tab');

          if ($coutries.length && !$coutries.hasClass('active')) $coutries.first().click();
        }
      }

      if (activatorId === 'returndate' || activatorId === 'departdate') {
        onBlur();
      } else {
        setTimeout(onBlur, 200);
      }
    });
  },
  _preventingFoucForUnselectedPreviousSteps: function (showboxId) {
    if (showboxId != this.originSelect) $j('#' + showboxId + ' .destinations').hide();
    $j('#' + showboxId + ' .datepicker').hide();
  },
  onFocusShowBox: function (activatorId, showboxId) {
    var self = this,
      showBox = $j('#' + showboxId),
      activator = $j('#' + activatorId);

    self._onOtherEventsShowBox(activatorId, showboxId);
    activator.on('focus click', function (e) {
      if ($j(this).attr('id') == 'origin') {
        if (!($j(this).attr('cl') == 1)) {
          self.refreshOrigin('showAll');
          var $coutries = $j('#originselect .flights-navigation-wrapper .tab');
          if ($coutries.length && !$coutries.hasClass('active')) $coutries.first().click();
        }
      }
      if (activatorId == 'destination') {
        if (!WT.Options.defaultArrivalAirport) {
          showBox.show();
        } else {
          WT.Options.defaultArrivalAirport = false;
        }
      } else {
        WT.Options.defaultArrivalAirport = false;
        showBox.show();
      }
    });
    activator.on('keypress keyup active mousedown', function () {
      self.setFocusFirstAvailableMonthForDatepickers();
    });
    activator.on('focus click', function () {
      self._checkPreviousSteps(activatorId);
      self.setupDatepickerHoverEffect(showBox);
      if (activatorId == 'departdate' || activatorId == 'returndate') {
        self._updateDatePickerCellsPrices();
      }
    });
  },
  _checkPreviousSteps: function (activatorId) {
    var self = this;
    setTimeout(function () {
      switch (activatorId) {
        case self.destinationInputId:
          var prevSelectedOr = ((self.selected.origin == null) ? '' : parseInt(self.selected.origin.id)),
            noticeOr = $j('#destination-notice'),
            destBox = $j('#' + self.destinationSelect + ' .destinations');
          if (isNaN(prevSelectedOr) || prevSelectedOr == '') {
            destBox.hide();
            noticeOr.html(Translator.translate('Please select the city you want to travel from first'));
          } else {
            noticeOr.html('');
            destBox.show();
          }
          break;
        case self.deparutreInputId:
          var prevSelected = ((self.selected.destination == null) ? '' : parseInt(self.selected.destination.id)),
            notice = $j('#departure-notice'),
            departureBox = $j('#' + self.departureSelect + ' .datepicker');
          if (isNaN(prevSelected) || prevSelected == '') {
            departureBox.hide();
            notice.html(Translator.translate('Please select the city you want to travel to first'));
          } else {
            notice.html('');
            departureBox.show();
          }
          break;
        case self.returnInputId:
          var prevSelectedDe = ((self.selected.destination == null) ? '' : parseInt(self.selected.destination.id)),
            noticeDe = $j('#return-notice'),
            retBox = $j('#' + self.returnSelect + ' .datepicker');
          if (isNaN(prevSelectedDe) || prevSelectedDe == '') {
            retBox.hide();
            noticeDe.html(Translator.translate('Please select the city you want to travel to first'));
          } else {
            noticeDe.html('');
            retBox.show();
          }
          break;
      }
    }, 200);
  },
  clearNextSteps: function () {
    var origin = $j('#origin'),
      destination = $j('#destination'),
      departdate = $j('#departdate'),
      returndate = $j('#returndate'),
      self = this;

    this.clearDestination = function () {
      self.selected.destination = null;
      destination.val('');
      $j('#destination-hint').val(Translator.translate('To'));
    };
    this.clearReturnDate = function () {
      self.selected.return_date = null;
      $j('#departdatebox .datepicker').datepicker('setDate', 0);
      returndate.val('');
    };
    this.clearDepartDate = function () {
      self.selected.depart_date = null;
      $j('#returndatebox .datepicker').datepicker('setDate', 0);
      departdate.val('');
    };

    origin.on('change', function () {
      self.clearDestination();
      self.clearReturnDate();
      self.clearDepartDate();
      self._refreshFromToLabels(origin);
    });

    destination.change(function () {
      var value = jQuery(this).val();
      self.clearReturnDate();
      self.clearDepartDate();

      if (!value) {
        self._toggleSearchDate('removeClass');
      } else {
        self._toggleSearchDate('addClass');
      }
    });
  },
  _toggleSearchDate: function (operation) {
    var $quicksearchContent = $j('#quicksearch-fields'),
      $otherFields = $j('#quicksearch-other-fields'),
      $expander = $j('.new-arrow.expander'),
      $tripsearch = $j('#tripsearch');

    $tripsearch[operation]('active-date');
    $quicksearchContent[operation]('active-date');
    $quicksearchContent[operation]('active');
    $otherFields[operation]('active');
    $expander[operation]('active');
  },
  defaultAirports: function () {
    var self = this,
      origin = 'origin',
      originInput = $j('#' + origin),
      destinationInput = $j('#destination'),
      defaultArrivalAirportId = 0,
      destinationsLength = WT.ReservationData.destinationConnections.length,
      defaultDepartureAirport = WT.Config.defaultDepartureAirport,
      defaultArrivalAirport = WT.Config.defaultArrivalAirport;

    localStorage.removeItem('selected');

    function setDefaultAirport(defaultArrivalExist) {
      var airportCode = '';
      var cities;
      var cityIndex;
      if (defaultArrivalExist) {
        for (var i = 0; i < destinationsLength; i++) {
          cities = WT.ReservationData.destinationConnections[i].cities;
          for (cityIndex = 0; cityIndex < cities.length; cityIndex++) {
            if (defaultArrivalAirport == cities[cityIndex].airportcode) {
              defaultArrivalAirportId = cities[cityIndex].id;
            }
          }
        }
      }
      for (i = 0; i < destinationsLength; i++) {
        cities = WT.ReservationData.destinationConnections[i].cities;
        for (cityIndex = 0; cityIndex < cities.length; cityIndex++) {
          if (defaultDepartureAirport == cities[cityIndex].airportcode) {
            airportCode = cities[cityIndex].id;

            (function (airportCode) {
              setTimeout(function () {
                self._cityClick(self.originSelect, airportCode, false);
                WT.FindTrip.inputBlur(originInput, originInput.val());
                originInput.blur();
              }, 100);
            })(airportCode);

            if (defaultArrivalAirportId) {
              setTimeout(function () {
                self._cityClick(self.destinationSelect, defaultArrivalAirportId);
                WT.FindTrip.inputBlur(destinationInput, destinationInput.val());
              }, 100);
            }
          }
        }
      }
    }
    if (defaultArrivalAirport) {
      setDefaultAirport(true);
    } else {
      setDefaultAirport();
    }
  },
  refreshSelectedOnBlur: function () {
    $j('#origin, #destination').blur(function (e) {
      setTimeout(function () {
        var el = ($j(e.target)),
          searchStr = el.val();
        WT.FindTrip.inputBlur(el, searchStr);
      }, 100);
    });
  },
  inputBlur: function (el, searchStr) {
    var self = this,
      origin = 'origin',
      need_refresh = false;

    var foundCities = self.searchOriginByString(searchStr);

    if (foundCities.length == 1) {
      el.val(WT.FindTrip.airportNameFormat(foundCities[0]));
      if (el.attr('id') == origin) {
        self.selected.origin = foundCities[0];
      } else {
        var destination_before = self.selected.destination ? self.selected.destination.id : null;
        self.selected.destination = foundCities[0];
        if (destination_before != self.selected.destination.id) {
          need_refresh = true;
        }
      }
    } else if (el.attr('id') == origin) {
      self.selected.origin = null;
    } else {
      self.selected.destination = null;
    }

    if (self.selected.destination && need_refresh) {
      self.datePickerInit();
      self._updatedestinationDatesFares(self.selected.origin.airportcode, self.selected.destination.airportcode);
      self._refreshFromToLabels(el);
      self.refreshDestination('showAll');
    }
  },
  _updatedestinationDatesFares: function (from, to) {
    var loader = $j('.infobox .loader-absolute'),
      self = this,
      baseUrl = WT.Options.baseUrl || '/',
      travelTypeValue = $j('input[name=traveltype]:checked').val(),
      mod = '';

    if (WT.modify_flag === 'seat') return;
    if (typeof from == 'undefined' || typeof to == 'undefined') return;
    if (WT.modify_flag) {
      mod = '&modify=' + WT.modify_flag;
      if (WT.modify_flag == 'changedate') {
        if (!(WT.Utiles._getParams('change-segment-outbound') && WT.Utiles._getParams('change-segment-inbound'))) {
          if (WT.Utiles._getParams('change-segment-outbound')) {
            mod += '&return_date=' + WT.Modify.order.return_date;
          }
          if (WT.Utiles._getParams('change-segment-inbound')) {
            mod += '&depart_date=' + WT.Modify.order.depart_date;
          }
        }
      }
    }
    loader.show();


  },
  _zeroAdultShow: function (umnr_enable) {
    var adultSelect = $j('#select-adult'),
      childSelect = $j('#select-child');

    if (+umnr_enable !== 0) {
      adultSelect.data('minvalue', '0');
      $j(adultSelect).find('option:first-child').removeAttr('hidden');
    } else {
      var valueAdultSelect = +adultSelect.val();
      adultSelect.data('minvalue', '1');

      if (valueAdultSelect === 0) {
        this.setValueByPassenger(adultSelect, '1');
        this.setValueByPassenger(childSelect, '0');
        this.calculateTotalPassengers();
      }
    }
  },
  _sortAvailableDates: function () {
    WT.Config.firstAvailable = '';
    var temp = [];
    if (this.selected.destination && this.selected.origin) {
      var availableDates = this._datePickerAvailableDatesForSelectedAirports(this.selected.origin.airportcode, this.selected.destination.airportcode);
      for (var key in availableDates) {
        if (availableDates.hasOwnProperty(key)) {
          var from = key.split('-');
          temp.push(new Date(from[0], from[1] - 1, from[2]));
        }
      }
      var date_sort_asc = function (date1, date2) {
        if (date1 > date2) return 1;
        if (date1 < date2) return -1;
        return 0;
      };
      var sorted = temp.sort(date_sort_asc);
      WT.Config.firstAvailable = sorted[0];
    }
  },
  _refreshFromToLabels: function (elem) {
    var originHint = $j('#origin-hint'),
      destinationHint = $j('#destination-hint'),
      destinationInput = $j('#destination'),
      originInput = $j('#origin');
    if (elem.attr('id') == 'origin') {
      if (originInput.val() == '') {
        originHint.val(Translator.translate("From"));
      } else {
        originHint.val("");
      }
    } else {
      if (destinationInput.val() == "") {
        destinationHint.val(Translator.translate("To"));
      } else {
        destinationHint.val('');
      }
    }
  },
  refreshOrigin: function (showAll, action) {
    var self = this,
      strResult = "",
      connections = WT.ReservationData.destinationConnections,
      topDestinations = WT.ReservationData.topDestinationConnections,
      searchStr = showAll ? "" : $j('#origin').val(),
      destinationBox = $j('#' + this.originSelect + ' .destinations'),
      countryBox = $j('#' + this.originSelect + ' .flights-navigation-wrapper'),
      result = this.prepareContentForAirportList(connections, searchStr, '_origin', null);

    countryBox.html(result.navigationHtml);
    destinationBox.html(result.countryHtml);

    if (topDestinations.length && action !== 'search' || topDestinations.length && !searchStr.length) {
      var topDestinationHtml = this.prepareContentForAirportList(topDestinations, searchStr, '_origin', null, true);

      countryBox.prepend(topDestinationHtml.navigationHtml);
      destinationBox.prepend(topDestinationHtml.countryHtml);
    }

    this._noticeRefresh(strResult);
    $j('#' + this.originSelect + ' .destinations li[item]').on('touchend click', function (e) {
      if ($j('#' + self.originSelect).hasClass('non-click')) return true;

      e.preventDefault();
      e.stopPropagation();
      var airportCode = $j(this).attr('item');
      self._cityClick(self.originSelect, airportCode);
    });
    this.refreshDestination();
    this.airportListClickHandle('origin');
  },
  airportListClickHandle: function (direction) {
    var $parentWrapper = $j('#' + direction + 'select');

    $j('#' + direction + 'select .flights-navigation-wrapper .tab').on('click', function () {
      var activeId = $j(this).data('activeId');

      $parentWrapper.find('.active').removeClass('active');
      $j(this).addClass('active');
      $j('.' + activeId).addClass('active');
    })
  },
  calculateAirportListHeight: function (maxCountCountries, maxCountCities) {
    var countryItemHeight = 50,
      cityItemHeight = 28,
      defaultWrapperHeight = 410,
      result = 0,
      currentCountriesHeight,
      currentCitiesHeight;

    currentCountriesHeight = maxCountCountries * countryItemHeight;
    currentCitiesHeight = maxCountCities * cityItemHeight + 48;
    result = currentCountriesHeight > currentCitiesHeight ? currentCountriesHeight : currentCitiesHeight;

    if (currentCountriesHeight > defaultWrapperHeight || currentCitiesHeight > defaultWrapperHeight) result = defaultWrapperHeight;

    $j('.infobox#originselect, .infobox#destinationselect').css('height', result);

    return;
  },
  calculateAirportListItems: function () {
    var topDestinationConnections = WT.ReservationData.topDestinationConnections || [],
      destinationConnections = WT.ReservationData.destinationConnections || [],
      countriesCount = destinationConnections.length,
      maxCitiesCount = 0,
      topDestionationLength = topDestinationConnections.length;

    for (var i = 0; i < countriesCount; i++) {
      maxCitiesCount = destinationConnections[i].cities.length > maxCitiesCount ? destinationConnections[i].cities.length : maxCitiesCount;
    };

    maxCitiesCount++;

    if (topDestionationLength) {
      var topDestinationCities = 0;
      countriesCount++;

      for (var i = 0; i < topDestionationLength; i++) {
        topDestinationCities += topDestinationConnections[i].cities.length;
      }

      topDestinationCities += i;
      maxCitiesCount = topDestinationCities > maxCitiesCount ? topDestinationCities : maxCitiesCount;
    }

    return { maxCitiesCount: maxCitiesCount, countriesCount: countriesCount };
  },
  _noticeRefresh: function (str) {
    var noticeBox = $j('#origin-notice');
    if (str == "") {
      noticeBox.html(Translator.translate('No cities match your search.'));
    } else {
      noticeBox.html('');
    }
  },
  _cityClick: function (parentBox, airportCode, withFocus = true) {
    var infoboxParent = $j('#' + parentBox).parent(),
      inputbox = infoboxParent.find("input"),
      codeBox = inputbox.parent().find('.flights-select-code');
    ctId = airportCode,
      connections = WT.ReservationData.destinationConnections,
      self = this,
      city = null;

    if (ctId) {
      for (var i = 0; i < connections.length; i++) {
        for (var j = 0; j < connections[i].cities.length; j++) {
          if (connections[i].cities[j].id == parseInt(ctId)) {
            city = connections[i].cities[j];
            break;
          }
        }
        if (city) break;
      }
    }

    if (city) {
      inputbox.val(WT.FindTrip.airportNameFormat(city)).change();
      inputbox.attr('data-code', airportCode);

      if (codeBox.length) {
        codeBox.html(city.airportcode);
      }
    }

    switch (parentBox) {
      case self.originSelect:
        self.setDestinationHintMobile('mobile-origin', city.airportcode, city.name);
        this.refreshOrigin();
        if (withFocus) {
          $j('#destination').focus();
        }

        break;
      case self.destinationSelect:
        if (city && city.airportcode && city.name) self.setDestinationHintMobile('mobile-destination', city.airportcode, city.name);
        this.refreshDestination();
        setTimeout(function () {
          $j('#destination').change();
          $j('#departdate').focus();
        }, 200);
        break;
    }
  },
  callSwitchDestinations: function () {
    var self = this;
    $j('#destination-switcher').on('click', function () {
      self.switchDestinations();
    });
  },
  switchDestinations: function () {
    var data = JSON.parse(localStorage.getItem('routeInfo')),
      self = this,
      check_if_evelop = $j('#tripsearch').hasClass('hide'),
      check_if_extended_on_evelop = $j('.booking-extended-index').length,
      departure_airport,
      arrival_airport;

    if (data && check_if_extended_on_evelop == 0) {
      if ((data.departure_airport != '' && typeof data.departure_airport != 'undefined') || check_if_evelop) {
        if (data.departure_airport) {
          departure_airport = this._findCityByairportCode(data.departure_airport);
        }

        if (data.arrival_airport) {
          arrival_airport = this._findCityByairportCode(data.arrival_airport);
        }

        if (departure_airport && arrival_airport) {
          if (!arrival_airport.linkto.includes(departure_airport.id)) {
            return false;
          }
        }

        if (departure_airport) {
          this.selected.destination = departure_airport;
        }

        if (arrival_airport) {
          this.selected.origin = arrival_airport;
        }

        self.datePickerInit();
        self._updatedestinationDatesFares(data.arrival_airport, data.departure_airport);

        if (this.selected.origin) {
          var originInput = $j('#' + this.originInputId);
          var originInputCodeBox = originInput.parent().find('.flights-select-code');

          originInput
            .val(self.airportNameFormat(arrival_airport))
            .attr('data-code', arrival_airport.id);

          if (originInputCodeBox.length) {
            originInputCodeBox.html(arrival_airport.airportcode);
          }

          $j('#' + this.originHintInputId).val("");
          self.setDestinationHintMobile('mobile-origin', arrival_airport.airportcode, arrival_airport.name)
        }
        if (this.selected.destination) {
          var destinationInput = $j('#' + this.destinationInputId);
          var destinationInputCodeBox = destinationInput.parent().find('.flights-select-code');

          destinationInput
            .val(self.airportNameFormat(departure_airport))
            .attr('data-code', departure_airport.id);

          if (destinationInputCodeBox.length) {
            destinationInputCodeBox.html(departure_airport.airportcode);
          }

          $j('#' + this.destinationHintInputId).val("");
          self.setDestinationHintMobile('mobile-destination', departure_airport.airportcode, departure_airport.name)
        }
        self._cityClick(self.destinationSelect, departure_airport);

        self.refreshOrigin();
        self.refreshDestination();
      }
      sessionStorage.removeItem('bookingAutosearch');
      sessionStorage.removeItem('homeAutoSearch');
    }
  },
  refreshDestination: function (showAll, action) {
    var str = "",
      originId = ((this.selected.origin == null) ? '' : parseInt(this.selected.origin.id)),
      self = this,
      connections = WT.ReservationData.destinationConnections,
      topDestinations = WT.ReservationData.topDestinationConnections,
      searchStr = showAll ? "" : $j('#destination').val(),
      destinationBox = $j('#' + this.destinationSelect + ' .destinations'),
      countryBox = $j('#' + this.destinationSelect + ' .flights-navigation-wrapper'),
      destinationNotice = $j('#destination-notice'),
      linkto_connections = [],
      linkToTopDestinations = [];

    for (var i = 0; i < connections.length; i++) {
      for (var j = 0; j < connections[i].cities.length; j++) {
        if (connections[i].cities[j].id == originId) {
          linkto_connections = connections[i].cities[j].linkto;
        }
      }
    }

    var result = this.prepareContentForAirportList(connections, searchStr, '_destination', linkto_connections);

    countryBox.html(result.navigationHtml);
    destinationBox.html(result.countryHtml);

    if (connections.length && action !== 'search' || connections.length && !searchStr.length) {
      for (var i = 0; i < connections.length; i++) {
        for (var j = 0; j < connections[i].cities.length; j++) {
          if (connections[i].cities[j].id == originId) {
            linkToTopDestinations = connections[i].cities[j].linkto;
          }
        }
      }

      var topDestinationHtml = this.prepareContentForAirportList(topDestinations, searchStr, '_destination', linkToTopDestinations, true);

      if (topDestinationHtml.navigationHtml && topDestinationHtml.countryHtml) {
        countryBox.prepend(topDestinationHtml.navigationHtml);
        destinationBox.prepend(topDestinationHtml.countryHtml);
      }
    }

    $j('#' + this.destinationSelect + ' .destinations li[item]').on('touchend click', function (e) {
      if ($j('#' + self.destinationSelect).hasClass('non-click')) return true;

      e.preventDefault();
      e.stopPropagation();
      var airportCode = $j(this).attr('item');
      var activeItemClassName = self.findCountryById(airportCode).toLowerCase() + '_destination';
      self._cityClick(self.destinationSelect, airportCode);

      $j('#' + self.destinationSelect + ' .flights-navigation-wrapper .tab.' + activeItemClassName).addClass('active');
    });
    if (str == "") {
      destinationNotice.html(Translator.translate('No cities match your search.'));
    } else {
      destinationNotice.html('');
    }
    this.airportListClickHandle('destination');
  },
  checkTopDestinationIsActive: function (id) {
    var topDestinations = WT.ReservationData.topDestinationConnections,
      result = false;
    if (!topDestinations.length) return result;

    for (var i = 0; i < topDestinations.length; i++) {
      for (var j = 0; j < topDestinations[i].cities.length; j++) {
        if (topDestinations[i].cities[j].id == id) {
          result = true;

          break;
        }
      }
      if (result) break;
    }

    return result;
  },
  prepareContentForAirportList: function (connections, searchStr, direction, linkto_connections, isTop) {
    var result = {},
      airFrom = '',
      searchFrom = '',
      str = '',
      navigationHtml = '',
      navigationItem = "<div class='tab' data-active-id=" + 'top_destination' + direction + ">" + Translator.translate('Top destinations') + "</div>";
    isLinkedConnections = true,
      countryId = '',
      activeItemClassName = '',
      countCountries = connections.length,
      airportCode = $j('#' + direction.substr(1)).attr('data-code');

    if (airportCode) {
      activeItemClassName = this.checkTopDestinationIsActive(airportCode) ? 'top_destination' + direction : this.findCountryById(airportCode).toLowerCase() + direction;
    }

    for (var i = 0; i < countCountries; i++) {
      var counter = 0,
        isActive = ' ',
        countCities = connections[i].cities.length,
        isColumns = countCities > WT.Config.maxCitiesInColumn;

      countryName = connections[i].name;
      countryId = isTop ? 'top_destination' : countryName.toLowerCase();

      if (activeItemClassName == countryId + direction) isActive = ' active ';
      countryHtml = "<ul class='airport-wrapper " + countryId + direction + isActive + "'><li class='country wt-color1'>" + countryName + "</li>";

      if (!isTop) {
        navigationItem = "<div class='" + isActive + ' tab ' + countryId + direction + "' data-active-id=" + countryId + direction + ">" + countryName + "</div>";
      }

      connections[i].cities.sort(function (prev, next) {
        return prev.name > next.name ? 1 : -1
      });

      for (var j = 0; j < countCities; j++) {
        if (linkto_connections) isLinkedConnections = $j.inArray(connections[i].cities[j].id, linkto_connections) > -1;
        airFrom = connections[i].cities[j].airportcode.toLowerCase();
        searchFrom = WT.FindTrip.airportNameFormat(connections[i].cities[j], 'lowercase');

        if ((searchFrom.startsWith(searchStr.toLowerCase()) || airFrom.startsWith(searchStr.toLowerCase())) && isLinkedConnections) {
          if (linkto_connections === null && connections[i].cities[j].linkto.length === 0) {
            continue;
          }

          counter++;

          var startColumn = isColumns ? WT.FindTrip.renderCitiesStartColumn(counter) : '',
            endColumn = isColumns ? WT.FindTrip.renderCitiesEndColumn(counter, countCities) : '';

          countryHtml += startColumn + WT.FindTrip.renderCityItem(connections[i].cities[j]) + endColumn;
        }
      }

      countryHtml += "</ul>";

      if (counter > 0) {
        str += countryHtml;
        navigationHtml += navigationItem;
      }
    }

    result.countryHtml = str;
    result.navigationHtml = isTop ? navigationItem : navigationHtml;

    return result;
  },
  renderCityItem: function (city) {
    return "<li item='" + city.id + "'>" + this.airportNameFormat(city) + "</li>";
  },
  renderCitiesStartColumn: function (counter) {
    var startIndexCityBySecondColumn = WT.Config.maxCitiesInColumn + 1,
      startIndexCityByFullColumn = (WT.Config.maxCitiesInColumn * 2) + 1,
      startColumn = counter === 1 || counter === startIndexCityBySecondColumn
        ? '<div class="column">'
        : '';

    if (counter === startIndexCityByFullColumn) {
      startColumn = '<div class="full-column">'
    }

    return startColumn;
  },
  renderCitiesEndColumn: function (counter, countCities) {
    var maxCitiesInFirstColumn = WT.Config.maxCitiesInColumn,
      maxCitiesInTwoColumns = maxCitiesInFirstColumn * 2;

    return (counter === maxCitiesInFirstColumn || counter === maxCitiesInTwoColumns || counter === countCities)
      ? '</div>'
      : '';
  },
  findCountryById: function (id) {
    var result = null,
      connections = WT.ReservationData.destinationConnections;
    for (var i = 0; i < connections.length; i++) {
      for (var j = 0; j < connections[i].cities.length; j++) {
        if (connections[i].cities[j].id == id) {
          result = connections[i].name;
          break;
        }
      }
      if (result) break;
    }
    return result;
  },
  _findCityByairportCode: function (id) {
    var result = null,
      connections = WT.ReservationData.destinationConnections;
    for (var i = 0; i < connections.length; i++) {
      for (var j = 0; j < connections[i].cities.length; j++) {
        if (connections[i].cities[j].airportcode == id) {
          result = connections[i].cities[j];
          break;
        }
      }
      if (result) break;
    }
    return result;
  },
  searchOriginByString: function (str, addAirportCode) {
    var result = [],
      connections = WT.ReservationData.destinationConnections,
      airFrom,
      searchFrom;

    for (var i = 0; i < connections.length; i++) {
      for (var j = 0; j < connections[i].cities.length; j++) {
        airFrom = connections[i].cities[j].airportcode.toLowerCase();
        searchFrom = WT.FindTrip.airportNameFormat(connections[i].cities[j], 'lowercase');
        if (searchFrom.startsWith(str.toLowerCase()) || (addAirportCode && airFrom.startsWith(str.toLowerCase()))) {
          result.push(connections[i].cities[j]);
        }
      }
    }
    return result;
  },
  searchDestinationByString: function (str, addAirportCode) {
    var result = [],
      connections = WT.ReservationData.destinationConnections,
      searchFrom,
      airFrom;

    if (this.selected.origin) {
      var originId = parseInt(this.selected.origin.id);
      for (var i = 0; i < connections.length; i++) {
        for (var j = 0; j < connections[i].cities.length; j++) {
          airFrom = connections[i].cities[j].airportcode.toLowerCase();
          searchFrom = WT.FindTrip.airportNameFormat(connections[i].cities[j], 'lowercase');
          if ((searchFrom.startsWith(str.toLowerCase()) && connections[i].cities[j].linkto.indexOf(originId) > -1) || (addAirportCode && airFrom.startsWith(str.toLowerCase()))) {
            result.push(connections[i].cities[j]);
          }
        }
      }
    }
    return result;
  },
  originsAutoCompleteOnKeyUp: function () {
    var self = this,
      originHint = $j('#origin-hint'),
      originInput = $j('#origin'),
      destinationInput = $j('#destination');

    originInput.on('keyup', function (event) {
      var searchStr = $j('#origin');
      if (searchStr.val().length > 0) {
        var foundCities = self.searchOriginByString(searchStr.val());
        if (foundCities.length > 0) {
          var name = WT.FindTrip.airportNameFormat(foundCities[0]);
          originHint.val(searchStr.val() + name.substring(searchStr.val().length));
        } else {
          originHint.val('');
        }
        if (event.keyCode === 13) {
          if (originHint.val() !== "") {
            originInput.val(WT.FindTrip.airportNameFormat(foundCities[0]));

            destinationInput.focus();

          } else {
            var foundCitiesWA = self.searchOriginByString(searchStr.val(), true);
            if (foundCitiesWA.length > 0) {
              originInput.val(WT.FindTrip.airportNameFormat(foundCitiesWA[0]));
              destinationInput.focus();
            }
          }
        }

      } else {
        originHint.val('');
      }

      if (event.keyCode === 38 || event.keyCode === 40) {
        self._arrowUpDownShowBoxBehaviour(self.originSelect, self.originInputId, self.originHintInputId, event.keyCode);
      } else {
        self.refreshOrigin(false, 'search');
        var $coutries = $j('#originselect .flights-navigation-wrapper .tab');

        if ($coutries.length && !$coutries.hasClass('active')) $coutries.first().click();
      }
    });
  },
  _arrowUpDownShowBoxBehaviour: function (showboxId, inputId, hintId, eventCode) {
    var showbox = $j('#' + showboxId),
      li = $j('li:not(.country)', showbox),
      liFirst = li.first(),
      liLast = li.last(),
      liActive = $j('li.active', showbox),
      inputAndHint = $j('#' + inputId + ', #' + hintId),
      self = this;
    this.findAppropriateSibling = function (nextOrPrev) {
      var neededEl;
      if (nextOrPrev === 'next') {
        if (liActive.next().length === 0)
          neededEl = liActive.parent().next().find($j('li:not(.country)')).first();
        else {
          neededEl = liActive.next();
        }
      } else {
        if (liActive.prev().not('.country').length === 0)
          neededEl = liActive.parent().prev().find($j('li:not(.country)')).last();
        else {
          neededEl = liActive.prev();
        }
      }

      liActive.removeClass('active');

      if (neededEl && neededEl.length > 0) {
        neededEl.addClass('active');
        inputAndHint.val(neededEl.html()).change();
        showbox.scrollTop(showbox.scrollTop() + neededEl.position().top);
      }
    };

    this.activateFirst = function () {
      liFirst.addClass('active');
      inputAndHint.val(liFirst.html()).change();
    };

    this.activateLast = function () {
      liLast.addClass('active');
      inputAndHint.val(liLast.html()).change();
    };


    if (eventCode === 40) {
      if (liActive.length === 0) {
        self.activateFirst();
      } else {
        self.findAppropriateSibling('next');
      }
    }

    if (eventCode === 38) {
      if (liActive.length === 0) {
        self.activateLast();
      } else {
        self.findAppropriateSibling('prev');
      }
    }
  },
  destinationsAutoCompleteOnKeyUp: function () {
    var self = this,
      destinationHint = $j('#destination-hint'),
      destinationInput = $j('#destination'),
      departdateInput = $j('#departdate');

    destinationInput.on('keyup', function (event) {
      var searchStr = $j('#destination');

      if (searchStr.val().length > 0) {
        var foundCities = self.searchDestinationByString(searchStr.val());
        if (foundCities.length > 0) {
          var name = WT.FindTrip.airportNameFormat(foundCities[0]);
          destinationHint.val(searchStr.val() + name.substring(searchStr.val().length));
        } else {
          destinationHint.val('');
        }
        if (event.keyCode === 13) {
          if (destinationHint.val() !== "") {
            destinationInput.value = WT.FindTrip.airportNameFormat(foundCities[0]);
            setTimeout(function () {
              destinationInput.change();
              departdateInput.focus();
            }, 200);
          } else {
            var foundCitiesWA = self.searchDestinationByString(searchStr.val(), true);
            if (foundCitiesWA.length > 0) {
              destinationInput.val(WT.FindTrip.airportNameFormat(foundCities[0]));
              setTimeout(function () {
                destinationInput.change();
                departdateInput.focus();
              }, 200);
            }
          }
        }
      } else {
        destinationHint.val("");
      }
      if (event.keyCode === 38 || event.keyCode === 40) {
        self._arrowUpDownShowBoxBehaviour(self.destinationSelect, self.destinationInputId, self.destinationHintInputId, event.keyCode);
        event.preventDefault();
      } else {
        self.refreshDestination(false);
        var $coutries = $j('#destinationselect .flights-navigation-wrapper .tab');

        if ($coutries.length && !$coutries.hasClass('active')) $coutries.first().click();
      }
    });
  },
  _datePickerAvailableDatesForSelectedAirports: function (departure_airport, arrival_airport) {
    var connections = WT.ReservationData.destinationDatesFares,
      availableDates = [];
    for (var i = 0; i < connections.length; i++) {
      if (connections[i].departure_airport == departure_airport && connections[i].arrival_airport == arrival_airport) {
        if (parseInt(connections[i].total_fare_amount) > 0)
          availableDates[connections[i].departure_date] = connections[i].total_fare_amount + ' ' + connections[i].currency;
        else
          availableDates[connections[i].departure_date] = " ";
      }
    }
    return (availableDates);
  },
  _datePickerHighlightUnavailableDates: function (date, availableDates) {
    var result;
    var price = "";
    var dmy = date.getFullYear();
    if (date.getMonth() < 9)
      dmy += "-0" + (date.getMonth() + 1);
    else
      dmy += "-" + (date.getMonth() + 1);
    dmy += "-";
    if (date.getDate() < 10) dmy += "0";
    dmy += date.getDate();

    if (availableDates[dmy]) {
      if (WT.Config.datePickerfareDisplayFormat !== 'disabled') price = availableDates[dmy];
      result = [true, "", price]; //set price as title

    } else {
      result = [false, "", ""]; //unAvailable
    }
    return result;
  },
  _updateDatePickerCellsPrices: function () {

    var dynamicCSSRules = [];

    var addCSSRule = function (rule) {
      if ($j.inArray(rule, dynamicCSSRules) == -1) {
        $j('head').append('<style  type="text/css" >' + rule + '</style>');
        dynamicCSSRules.push(rule);
      }
    };

    if (WT.Config.datePickerfareDisplayFormat == 'date_cell') {
      setTimeout(function () {
        $j('.datepicker td > *').each(function () {
          var className = 'datepicker-content-' + (Math.floor(Math.random() * (1000000000 - 10 + 1)) + 10).toString(),
            parentTitle = $j(this).parent().attr('title');
          if (parentTitle !== '' && typeof (parentTitle) !== 'undefined') //unAvailable
            addCSSRule('.ui-datepicker td a.' + className + ':after {content: "' + parentTitle + '";}');
          $j(this).addClass(className);
        });
      }, 0);
    }
  },
  datePickerInit: function () {
    var self = this,
      departDate = $j("#departdatebox .datepicker"),
      returnDate = $j("#returndatebox .datepicker"),
      returnDateInput = $j('#returndate'),
      departDateInput = $j('#departdate');
    if (WT.Config.datePickerfareDisplayFormat == 'date_cell') {
      departDate.addClass('dateCell');
      returnDate.addClass('dateCell');
    }
    if (self.isIranian) {
      $j('.infobox#departdatebox, .infobox#returndatebox').addClass('persian-picker-wrapper');

      this._departDatePersianDatepicker(returnDateInput, departDateInput);
      this._returnDatePersianDatepicker(returnDateInput);
    } else {
      this._departDateDatepicker(self, departDate, returnDate, returnDateInput, departDateInput);
      this._returnDateDatepicker(self, departDate, returnDate, returnDateInput);
    }
    self._datePickerResize();
  },
  _departDateDatepickeSelected: function (selDate) {
    var returnDatePicker = $j("#returndatebox .datepicker");
    returnDatePicker.datepicker("option", "minDate", selDate);
  },
  _departDatePersianDatepicker: function (returnDateInput, departDateInput) {
    var self = this,
      currentConfig = self.PersianDatePickerConfig;

    self._prepareInputsForPersianDp('departdate');

    $j('#alt-input-departdate').on('click', function () {
      $j('#departdate').click();
      $j('#returndate').blur();
    });
    $j('#alt-input-returndate').on('blur', function () {
      $j('#departdate').blur();
    });

    if (self.departPersianPicker) return;

    self.departPersianPicker = $j("#departdatebox").pDatepicker(self.spread(
      currentConfig, {
      altField: '#alt-input-departdate',
      minDate: new persianDate().valueOf(),
      maxDate: new persianDate().add('month', 10).valueOf(),
      onSelect: function (unixDate) {
        var correctGregorianDate = self._convertToGregorianDate(unixDate);

        var isReturnFlight = $j('#traveltype-return').is(':checked');
        departDateInput.val(correctGregorianDate);
        self.selected.depart_date = self._convertToGregorianDate(unixDate, true);

        if (self.selected.return_date != null && self.selected.return_date < self.selected.depart_date) {
          returnDateInput.value = "";
          self.selected.return_date = null;
        }

        if (isReturnFlight) {
          returnDateInput.focus();
          departDateInput.blur();
        } else {
          departDateInput.blur();
        }

        self.returnPersianPicker.options = self.spread(self.returnPersianPicker.options, {
          minDate: unixDate
        });
      },
      checkDate: function (unix) {
        var availableDates = [];

        if (self.selected.destination && self.selected.origin) {
          availableDates = self._datePickerAvailableDatesForSelectedAirports(self.selected.origin.airportcode, self.selected.destination.airportcode);
        }

        var correctGregorianDate = self._convertToGregorianDate(unix, null, 'YYYY-MM-DD');

        return !!availableDates[correctGregorianDate];
      }
    }))
  },

  _returnDatePersianDatepicker: function (returnDateInput) {
    var self = this,
      currentPersianConfig = self.PersianDatePickerConfig;

    self._prepareInputsForPersianDp('returndate');
    $j('#alt-input-returndate').on('click', function () {
      $j('#returndate').click();
      $j('#departdate').blur();
    });
    $j('#alt-input-returndate').on('blur', function () {
      $j('#returndate').blur();
    })

    if (self.returnPersianPicker) return;

    self.returnPersianPicker = $j("#returndatebox").pDatepicker(self.spread(
      currentPersianConfig, {
      altField: '#alt-input-returndate',
      onSelect: function (unixDate) {
        var correctGregorianDate = self._convertToGregorianDate(unixDate);

        returnDateInput.val(correctGregorianDate);
        self.selected.return_date = self._convertToGregorianDate(unixDate, true);
        $j('#returndate').blur();
        $j('.infobox#returndatebox').hide();
      },
      checkDate: function (unix) {
        var availableDates = [];

        if (self.selected.destination && self.selected.origin) {
          availableDates = self._datePickerAvailableDatesForSelectedAirports(self.selected.destination.airportcode, self.selected.origin.airportcode);
        }

        var correctGregorianDate = self._convertToGregorianDate(unix, null, 'YYYY-MM-DD');

        return !!availableDates[correctGregorianDate];
      }
    }))
  },
  _prepareInputsForPersianDp: function (inputId) {
    $currentInput = $j('input#' + inputId);
    $currentInput.fadeTo(0, 0);
    $j($currentInput).siblings('input').remove();

    $currentInput.parent().append('<input autocomplete="off" id="alt-input-' + inputId + '">');
  },
  _convertToGregorianDate: function (unixDate, isClearDate) {
    var enFormat = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'DD/MM/YYYY';
    var pDate = new persianDate(unixDate);
    var gregorianDate = new Date(pDate.ON.gDate);

    return isClearDate ? gregorianDate : moment.from(gregorianDate, 'en').locale('en').format(enFormat);
  },
  _departDateDatepicker: function (self, departDate, returnDate, returnDateInput, departDateInput) {
    var self = this;
    departDate.datepicker({
      firstDay: 1,
      minDate: "0",
      numberOfMonths: WT.Config.datePickerMonths,
      dateFormat: WT.Utiles.getDateFormatForDatePicker(),
      onSelect: function (selDate) {
        var isReturnFlight = $j('#traveltype-return').is(':checked'),
          formattedDate = WT.Config.isChinese ? moment(selDate, WT.Options.dateFormat).format('YY年MM月DD日') : selDate;

        departDateInput.val(formattedDate);
        departDateInput.trigger('selected', selDate);
        self.selected.depart_date = departDate.datepicker("getDate").toGMTDate();

        if (self.selected.return_date != null && self.selected.return_date < self.selected.depart_date) {
          $j('#returndatebox .datepicker').datepicker('setDate', 0);
          returnDateInput.val('');
          self.selected.return_date = null;
        }
        if (isReturnFlight) {
          returnDateInput.focus();
          WT.FindTrip.setFocusFirstAvailableMonthForDatepickers();
        } else {
          departDateInput.blur();
        }
      },
      beforeShowDay: function (date) {
        var availableDates = [];

        if (self.selected.destination && self.selected.origin) {
          availableDates = self._datePickerAvailableDatesForSelectedAirports(self.selected.origin.airportcode, self.selected.destination.airportcode);
        }

        var result = self._datePickerHighlightUnavailableDates(date, availableDates);

        if (self.selected.return_date) {
          var d = date.toGMTDate();
          if (self.selected.return_date.getTime() == d.getTime()) {
            result[1] = "selected-date";
          }
          if (self.selected.depart_date) {
            if (d > self.selected.depart_date && d < self.selected.return_date) {
              result[1] = "selectbetween";
            }
          }
        }
        return result;
      }
    });
  },
  _returnDateDatepickeSelected: function (selDate) {
    if (WT.Utiles._getParams('change-segment-outbound') && selDate) {
      $j("#departdatebox .datepicker").datepicker("option", "maxDate", selDate);
    }
  },
  _returnDateDatepicker: function (self, departDate, returnDate, returnDateInput) {
    var self = this;
    returnDate.datepicker({
      firstDay: 1,
      minDate: "0",
      numberOfMonths: WT.Config.datePickerMonths,
      dateFormat: WT.Utiles.getDateFormatForDatePicker(),
      onSelect: function (selDate) {
        var formattedDate = WT.Config.isChinese ? moment(selDate, WT.Options.dateFormat).format('YY年MM月DD日') : selDate;

        self._returnDateDatepickeSelected(selDate);
        returnDateInput.val(formattedDate);
        returnDateInput.trigger('selected', selDate);
        self.selected.return_date = returnDate.datepicker("getDate").toGMTDate();
        returnDateInput.blur();
      },
      beforeShowDay: function (date) {
        var result = [true, ""];
        var availableDates;

        if (self.selected.destination && self.selected.origin) {
          availableDates = self._datePickerAvailableDatesForSelectedAirports(self.selected.destination.airportcode, self.selected.origin.airportcode);
          result = self._datePickerHighlightUnavailableDates(date, availableDates);
        }

        if (self.selected.depart_date) {
          var d = date.toGMTDate();
          if (self.selected.depart_date.getTime() == d.getTime()) {
            result[1] = "selected-date";
          }
          if (self.selected.return_date) {
            if (d > self.selected.depart_date && d < self.selected.return_date) {
              result[1] = "selectbetween";
            }
          }
        }
        return result;
      }
    });
  },
  setupDatepickerHoverEffect: function (ctrl) {
    var dateCell = ctrl.find(".ui-datepicker-calendar tbody td:not(.ui-datepicker-unselectable)"),
      currentCalendar = ctrl.find(".ui-datepicker-calendar");
    dateCell.on("mouseover", function () {
      var selectables = dateCell,
        mouseOverDate = {
          year: parseInt($j(this).attr("data-year")),
          month: parseInt($j(this).attr("data-month")),
          day: parseInt($j(this).find("a").html())
        },
        selectedDate = null,
        dat;

      if (ctrl.attr('id') === "returndatebox") {
        if (WT.FindTrip.selected.depart_date) {
          dat = WT.FindTrip.selected.depart_date;
          selectedDate = {
            year: dat.getFullYear(),
            month: dat.getMonth(),
            day: dat.getDate()
          };
        }
      } else {
        if (WT.FindTrip.selected.return_date) {
          dat = WT.FindTrip.selected.return_date;
          selectedDate = {
            year: dat.getFullYear(),
            month: dat.getMonth(),
            day: dat.getDate()
          };
        }
      }
      if (selectedDate) {
        var counter = 0;
        while (counter < selectables.length) {
          var curDate = {
            year: parseInt($j(selectables[counter]).attr("data-year")),
            month: parseInt($j(selectables[counter]).attr("data-month")),
            day: parseInt($j(selectables[counter]).find("a").html())
          },
            hoverItem = false;

          if (ctrl.attr('id') === "returndatebox") {
            hoverItem = (mouseOverDate.year > curDate.year || (mouseOverDate.year == curDate.year && mouseOverDate.month > curDate.month) || (mouseOverDate.year == curDate.year && mouseOverDate.month == curDate.month && mouseOverDate.day > curDate.day));
            hoverItem = hoverItem && (selectedDate.year < curDate.year || (selectedDate.year == curDate.year && selectedDate.month < curDate.month) || (selectedDate.year == curDate.year && selectedDate.month == curDate.month && selectedDate.day < curDate.day));
          } else {
            hoverItem = (mouseOverDate.year < curDate.year || (mouseOverDate.year == curDate.year && mouseOverDate.month < curDate.month) || (mouseOverDate.year == curDate.year && mouseOverDate.month == curDate.month && mouseOverDate.day < curDate.day));
            hoverItem = hoverItem && (selectedDate.year > curDate.year || (selectedDate.year == curDate.year && selectedDate.month > curDate.month) || (selectedDate.year == curDate.year && selectedDate.month == curDate.month && selectedDate.day > curDate.day));
          }
          if (hoverItem) {
            $j(selectables[counter]).removeClass("nohoverbetween");
            $j(selectables[counter]).addClass("hoverbetween");
          } else {
            $j(selectables[counter]).removeClass("hoverbetween");
            $j(selectables[counter]).addClass("nohoverbetween");
          }
          counter++;
        }
      }
    });

    currentCalendar.on("mouseout", function (e) {
      $j('.ui-datepicker-calendar td').removeClass("nohoverbetween");
      $j('.ui-datepicker-calendar td').removeClass("hoverbetween");
    });
  },
  setFocusFirstAvailableMonthForDatepickers: function () {
    var thisDate = new Date(),
      departDatePicker = $j("#departdatebox .datepicker"),
      returnDatePicker = $j("#returndatebox .datepicker");
    if (typeof WT.Config.firstAvailable !== 'undefined' && WT.Config.firstAvailable !== '') {
      var first_date = WT.Config.firstAvailable;

      if (first_date.getTime() < thisDate.getTime()) first_date = thisDate;

      departDatePicker.datepicker("option", "minDate", first_date);

      if (this.isIranian) this.departPersianPicker.options = this.spread(this.departPersianPicker.options, {
        minDate: new persianDate().valueOf()
      });

      returnDatePicker.datepicker("option", "minDate", WT.FindTrip.selected.depart_date === null ? first_date : moment(this.selected.depart_date).utc().format(WT.Utiles.getDateFormat()));

      if (this.isIranian) this.returnPersianPicker.options = this.spread(this.returnPersianPicker.options, {
        minDate: new persianDate(
          WT.FindTrip.selected.depart_date == 'null' ? first_date : this.selected.depart_date
        ).valueOf()
      });
    }
  },
  _refreshHiddenFields: function (form_id) {
    var dat = this.selected,
      hOrigin = $j('#originid'),
      hDestination = $j('#destinationid'),
      hDepartDate = $j('#depart_date'),
      hReturnDate = $j('#return_date'),
      data = JSON.parse(localStorage.getItem('routeInfo'));

    if (data !== null) {
      hOrigin.val(dat.origin ? dat.origin.airportcode : "");
      hDestination.val(dat.destination ? dat.destination.airportcode : "");
      if (dat.depart_date) {
        hDepartDate.val(dat.depart_date.toJSON().substring(0, 10));
      }
      if (dat.return_date) {
        hReturnDate.val(dat.return_date.toJSON().substring(0, 10));
      }
      $j('#route_entity_id').val(data.entity_id);
    }
  },
  changeStore: function () {
    $j('.dropdown-content a').on('click', function () {
      sessionStorage.setItem('bookingAutosearch', 1);
    })
  },
  submitSearchForm: function () {
    var self = this;
    $j('#btnSearch').on('click', function (e) {
      var form_id = 'quicksearch_form',
        quickSearch = new VarienForm(form_id);
      if (quickSearch.validator.validate() == true) {
        self.isAllowSearchTypeReturn();
        sessionStorage.setItem('homeAutoSearch', 1);
        self._submitSearchForm(form_id);
      }
    });

    $j('#searchtrip').on('click', function (e) {
      var form_id = 'tripsearch_form',
        bookSearch = new VarienForm(form_id);

      if (WT.modify_flag == "checkout") {
        var url = window.location.href.split('?')[0];
        WT.modify_flag = '';
        window.history.pushState({}, url, url);
      }

      if (bookSearch.validator.validate() == true) {
        var passengers = WT.ReservationData.passengers;

        self.isAllowSearchTypeReturn();
        WT.Checkout.resetDiscount();

        if (+WT.Options.bookingAutosearch) {
          sessionStorage.setItem('bookingAutosearch', 1);
        }

        if (Array.isArray(passengers)) {
          if (passengers.length) {
            WT.Summary.refresh();
            WT.ReservationData.passengers = [];
          }
        }

        WT.Summary.isVisible = true;
        self._submitSearchForm(form_id);
      }
      return false;
    });
  },
  _getDeepLink: function () {
    if (WT.Utiles._getParams('dl')) {
      var search = location.search.substring(1);
      var get_url_params = JSON.parse('{"' + decodeURI(search).replace(/"/g, '\\"').replace(/&/g, '","').replace(/=/g, '":"') + '"}')
      WT.Utiles._localStorageUpdate('selected', get_url_params, false, true);
      this._refreshHiddenFieldsFromDeepLink();
    }
  },
  _removeDeepLink: function () {
    if (WT.Utiles._getParams('dl')) {
      window.history.pushState('', '', '#');
    }
  },
  _refreshHiddenFieldsFromDeepLink: function () {
    if (WT.Utiles._getParams('originid')) {
      $j('#originid').val(WT.Utiles._getParams('originid'));
    }

    if (WT.Utiles._getParams('destinationid')) {
      $j('#destinationid').val(WT.Utiles._getParams('destinationid'));
    }

    if (WT.Utiles._getParams('depart_date')) {
      $j('#depart_date').val(WT.Utiles._getParams('depart_date'));
      $j('#departdate').val(WT.Utiles._getParams('depart_date'));
    }

    if (WT.Utiles._getParams('return_date')) {
      $j('#return_date').val(WT.Utiles._getParams('return_date'));
      $j('#returndate').val(WT.Utiles._getParams('return_date'));
    }

    if (WT.Utiles._getParams('route_entity_id')) {
      $j('#route_entity_id').val(WT.Utiles._getParams('route_entity_id'));
    }

    if (WT.Utiles._getParams('currency')) {
      $j('#currency').val(WT.Utiles._getParams('currency'));
    }

    if (WT.Utiles._getParams('is_promotion')) {
      $j('#is_promotion').val(WT.Utiles._getParams('is_promotion'));
    }

    if (WT.Utiles._getParams('outbound_compartment_type')) {
      var outboundCompartment = WT.Utiles._getParams('outbound_compartment_type');
      $j('[name="outbound_compartment_type"]').val([outboundCompartment]);
    }

    if (WT.Utiles._getParams('inbound_compartment_type')) {
      var inboundCompartment = WT.Utiles._getParams('inbound_compartment_type');
      $j('[name="inbound_compartment_type"]').val([inboundCompartment]);
    }
  },
  _submitSearchForm: function (form_id) {
    var self = this,
      baseUrl = WT.Options.baseUrl || '/';

    self._refreshHiddenFields(form_id);
    WT.Utiles._localStorageUpdate('selected', $j('#' + form_id));

    if (+WT.Options.umnrEnabled) {
      var route = JSON.parse(localStorage.getItem('routeInfo')),
        selected = JSON.parse(localStorage.selected);

      if (!selected) return false;

      if (!WT.Utiles._getParams('dl')) {
        if (!route) return false;

        if (!+route.umnr_enable && (+selected.numadult == 0) && (+selected.numchild >= 1)) {
          $j("#no-umnr-warning-modal").modal();
          return false;
        }
      }
    }

    var $form = $j('#' + form_id);
    var formUrl = this.getSearchFormUrl($form);
    WT.Utiles.stepLoader(true);
    if (form_id == 'quicksearch_form') {
      $form.attr('action', formUrl);
      $form.submit();
    } else {
      var data = $form.serialize();
      WT.Utiles.sendWithRecaptcha(data, function (data) {
        $j.ajax({
          url: baseUrl + WT.Config.loadstep_url,
          data: data,
          type: "POST",
          success: function (result) {
            self._removeDeepLink();
            WT.Utiles.stepLoader(false);
            WT.Summary.buildNextStep(result);
            if (result.return == 'error') {
              WT.Utiles.stepLoader(false);
              WT.googleAnalyticsEvents.sendException(result.message, true);

              if (result.message !== 'SMS_SEARCH_REQUEST_BODY_EXCEPTION') {
                alert(Translator.translate(result.message));
              }
            }
            if (WT.modify_flag == "changedate") {
              if (WT.Config.applyToRebookFlow == '1') {
                WT.SelectTrip.preselectFare(WT.SelectTrip.flights);
              }
            } else {
              if (+WT.Options.showAirportsInUrl) {
                formUrl += location.search;

                window.history.pushState(null, null, formUrl);
              }

              WT.SelectTrip.preselectFare(WT.SelectTrip.flights);
            }
          },
          error: function (xhr, ajaxOptions, thrownError) {
            WT.Utiles.stepLoader(false);
            WT.googleAnalyticsEvents.sendException('Status: ' + xhr.status + ' ' + thrownError, true);
            alert('Status: ' + xhr.status + ' ' + thrownError);
          }
        });
      });
    }
  },
  getSearchFormUrl: function ($form) {
    var action = $form.attr('action');
    var url = action || WT.Options.baseUrl + 'booking/';

    if (+WT.Options.showAirportsInUrl) {
      url += this.getAirportsUrlByForm($form);
    }

    return url;
  },
  getAirportsUrlByForm: function ($form) {
    var $originInput = $form.find('#originid');
    var originId = $originInput.val().toLowerCase();
    var $destinationInput = $form.find('#destinationid');
    var destinationId = $destinationInput.val().toLowerCase();

    return originId + '-' + destinationId;
  },
  checkModify: function () {
    var modify_flag = WT.Utiles._getParams('modify');

    if (modify_flag) {
      WT.modify_flag = modify_flag;
      if (modify_flag == 'buyextras') {
        WT.Summary.submitSummary(false, 'modifyextras');
      }
      if (modify_flag == 'changedate') {
        if (WT.Modify.order) WT.Modify._changeDate();
      }
      if (modify_flag == 'seat') {
        WT.Summary.submitSummary(false, 'seatselect', 'render');
      }
      if (modify_flag == 'changename') {
        var localStorageLength = localStorage.length;

        for (var i = 0; i < localStorageLength; i++) {
          if (localStorage.key(0) != 'remember_contact') {
            localStorage.removeItem(localStorage.key(0));
          } else {
            localStorage.removeItem(localStorage.key(1));
          }
        }
        WT.Summary.submitSummary(false, 'changename');
      }
      if (modify_flag == 'refund') {
        WT.Steps.backend_data = ['cancel', 'refund'];
        WT.Steps.setup();
        $j('#tripsearch, #summary').hide();
        WT.Summary.submitSummary(false, 'cancel');
      }

      if (modify_flag == 'checkout') {
        this.buildCheckoutStep('checkoutUnPaid');
        $j('.summary-box').hide();
        $j('.grid12-9.steps-data').css('width', '98%');
      }

      if (modify_flag == 'unticketed') {
        WT.Steps.backend_data = ['pay', 'checkout'];
        WT.Steps.activeIndex = 1;
        WT.Steps.setup();
        $j('#tripsearch, .summary-box').hide();
        this.buildCheckoutStep('unTicketedReservation', 'unticketed');
      }
      if (modify_flag == 'updatedoc') {
        WT.Summary.submitSummary(false, 'updatedoc');
      }
    }
  },
  buildCheckoutStep: function (type, modifyFlag) {
    WT.Utiles.stepLoader(true);
    var data = localStorage.getItem('reserved'),
      baseUrl = WT.Options.baseUrl || '/';

    WT.ReservationData = data ? JSON.parse(data) : WT.ReservationData;
    if (WT.modify_flag === 'unticketed') WT.Modify.clearProducts();

    $j.ajax({
      url: baseUrl + WT.Config.loadstep_url,
      data: type,
      type: "POST",
      success: function (result) {
        if (result.return == 'success') {
          WT.Utiles.stepLoader(false);
          WT.Summary.buildNextStep(result, modifyFlag);
        } else {
          WT.Utiles.stepLoader(false);
          WT.googleAnalyticsEvents.sendException(result.message, true);
          if (result.message == 'Email exists') {
            WT.Passengers.showLoginModal(true);
          } else {
            alert(result.message);
          }
        }
      },
      error: function (xhr, ajaxOptions, thrownError) {
        WT.Utiles.stepLoader(false);
        WT.googleAnalyticsEvents.sendException(result.message, 'Status: ' + xhr.status + ' ' + thrownError);
        alert('Status: ' + xhr.status + ' ' + thrownError);
      }
    });
  },
  preselectForm: function () {
    var modify_flag = WT.Utiles._getParams('modify');
    var origin;
    var destination;
    var d;
    var $departDate = $j("#departdatebox .datepicker");
    var $returnData = $j("#returndatebox .datepicker");

    if (modify_flag != 'buyextras'
      &&
      modify_flag != 'seat'
      &&
      modify_flag != 'unticketed'
      &&
      modify_flag != 'refund'
      &&
      modify_flag != 'updatedoc'
    ) {
      var data = JSON.parse(localStorage.getItem('selected')),
        self = this,
        discount_input = $j('#discount_code'),
        check_if_evelop = $j('#tripsearch').hasClass('hide'),
        check_if_extended_on_evelop = $j('.booking-extended-index').length;

      if (data && check_if_extended_on_evelop == 0) {
        if ((data.originid != '' && typeof data.originid != 'undefined') || check_if_evelop) {
          if (data.originid) {
            origin = this._findCityByairportCode(data.originid);
            if (origin) {
              this.selected.origin = origin;
            }
          }
          if (data.destinationid) {
            destination = this._findCityByairportCode(data.destinationid);
            if (destination) {
              this.selected.destination = destination;
            }
          }
          if (data.depart_date) {
            this.selected.depart_date = new Date(data.depart_date);
          }
          if (data.return_date) {
            this.selected.return_date = new Date(data.return_date);
          }
          self._toggleSearchDate('addClass');
          self.datePickerInit();
          self._updatedestinationDatesFares(data.originid, data.destinationid);
          self.refreshDestination('showAll');
          if (this.selected.origin) {
            $j('#' + this.originInputId).val(self.airportNameFormat(origin));
            $j('#' + this.originHintInputId).val("");
            self.setDestinationHintMobile('mobile-origin', origin.airportcode, origin.name);
          }
          if (this.selected.destination) {
            $j('#' + this.destinationInputId).val(self.airportNameFormat(destination));
            $j('#' + this.destinationHintInputId).val("");
            self.setDestinationHintMobile('mobile-destination', destination.airportcode, destination.name);
          }
          if (this.selected.depart_date) {
            d = self.selected.depart_date;
            $departDate.datepicker("setDate", moment(d).utc().format(WT.Utiles.getDateFormat()));
            this.departPersianPicker ? this.departPersianPicker.setDate(new persianDate(d).valueOf()) : null;
            $j('#' + this.deparutreInputId).val(moment(d).utc().format(WT.Utiles.getDateFormat()));
          }
          if (this.selected.return_date) {
            d = self.selected.return_date;
            $returnData.datepicker("setDate", moment(d).utc().format(WT.Utiles.getDateFormat()));
            this.returnPersianPicker ? this.returnPersianPicker.setDate(new persianDate(d).valueOf()) : null;
            $j('#' + this.returnInputId).val(moment(d).utc().format(WT.Utiles.getDateFormat()));
          }
          if (data.traveltype === "oneway") {
            $j('#traveltype-one-way').click();
          }
          WT.Config.groupType = data.grouptype;
          if (data.grouptype) {
            $j('#' + data.grouptype).click();
          }
          if (data.numadult !== undefined) {
            $j('#select-adult')
              .val(data.numadult)
              .siblings('.num-pass-view').text(Translator.translate(data.numadult));
            self.refreshSelectInfant();
          }
          if (data.numchild || data.numinfant) {
            if (data.numchild) {
              $j('#select-child')
                .val(data.numchild)
                .siblings('.num-pass-view').text(Translator.translate(data.numchild));
            }
            if (data.numinfant) {
              $j('#select-infant')
                .val(data.numinfant)
                .siblings('.num-pass-view').text(Translator.translate(data.numinfant));
            }
          }
          if (data.numchild || data.numinfant || data.numadult) {
            self.calculateTotalPassengers()
          }
          self._preselectDropdownInputs(data.outbound_compartment_type, 'outbound_compartment_type', '#field-outbound-compartment-select-title')
          self._preselectDropdownInputs(data.inbound_compartment_type, 'inbound_compartment_type', '#field-inbound-compartment-select-title')
          if (!data.directonly) {
            $j('#ckbDirectonly').attr('checked', false);
          } else {
            $j('#ckbDirectonly').attr('checked', true);
          }
          if (data.search_period) {
            self._preselectDropdownInputs(data.search_period, 'search_period', '#field-search-period-title')
            localStorage.setItem('search-period-preselected', data.search_period)
          }
          $j('#promo_code').val(data.promo_code);
          if (data.discount_code != 1) {
            discount_input.prop('checked', false);
          } else {
            discount_input.prop('checked', true);
          }
          var flag = WT.modify_flag;
          if (flag !== 'changedate' && flag !== 'checkout') {
            self._checkIfSubmit();
          }

          if (WT.Utiles._getParams('change-segment-outbound') && data.return_date && !WT.Utiles._getParams('change-segment-inbound')) {
            $departDate.datepicker("option", "maxDate", $returnData.val());
            if (self.departPersianPicker) {
              var opts = self.departPersianPicker.options
              opts = this.spread(opts, {
                maxDate: new persianDate($returnData.val()).valueOf()
              })
            }
          }

          if (WT.Utiles._getParams('change-segment-inbound')) {
            $returnData.datepicker("option", "minDate", $departDate.val());
            if (self.departPersianPicker) {
              var opts = self.departPersianPicker.options
              opts = this.spread(opts, {
                minDate: new persianDate($departDate.val()).valueOf()
              })
            }
          }
        }
        sessionStorage.removeItem('bookingAutosearch');
        sessionStorage.removeItem('homeAutoSearch');
      }
    }
  },
  _preselectDropdownInputs: function (currentValue, inputName, textFieldName, values) {
    $j('input[name=' + inputName + ']').filter(function () {
      var currentInput = $j(this).val() == currentValue;

      if (currentInput) $j(textFieldName).text(Translator.translate($j(this).parent().data('title')));

      return currentInput
    }).prop('checked', true);

    if (!values) return;

    var className = '.' + inputName + '_container';

    if (Array.isArray(values) && values.length === 1) {
      $j(textFieldName).parents(className).addClass('no-display');
    } else {
      $j(textFieldName).parents(className).removeClass('no-display');
    }
  },
  _checkSelectedInputs: function (inputName) {
    var value = $j('input[name=' + inputName + ']').filter(":checked").map(function () {
      return this.value;
    }).get();

    return value.length;
  },
  _checkIfSubmit: function () {
    var self = this,
      modify = WT.Utiles._getParams('modify');
    if (
      ((WT.modify_flag == 'changedate' &&
        WT.Config.modifyAutoSearch == '1') ||
        WT.modify_flag != 'changedate') ||
      (WT.Utiles._getParams('dl') ||
        (WT.Options.bookingAutosearch == "1" && !modify) ||
        sessionStorage.getItem('bookingAutosearch') ||
        sessionStorage.getItem('homeAutoSearch') ||
        WT.Config.previousStore != sessionStorage.getItem('store') ||
        WT.Config.previousCurrency != sessionStorage.getItem('currency'))
    ) {
      if ($j('#tripsearch').length && !WT.Utiles._getParams('nosearch')) self._submitSearchForm('tripsearch_form');
    }
  },
  travelUserTypeValidation: function () {
    var $travelUserType = $j('.travel-users input'),
      $adultCount = $j('#select-adult'),
      $childrenCount = $j('#select-child'),
      $infantCount = $j('#select-infant'),
      self = this;

    $travelUserType.on('click', function () {
      var currentType = $j(this).attr('id');

      if (!WT.FindTrip.isChildrenSearchAllowed(currentType)) {
        if (+$childrenCount.val() > 0 || +$infantCount.val() > 0) {
          $childrenCount.val(0);
          $infantCount.val(0);

          if (+$adultCount.val() < 1) self.setValueByPassenger($adultCount, '1');

          self.calculateTotalPassengers();
        }
      }
    });
  },
  isChildrenSearchAllowed: function (type) {
    if (type !== 'regular') {
      var allowChildrenSearchForStudent = WT.Config.allowChildrenSearchForStudent;
      var allowChildrenSearchForSenior = WT.Config.allowChildrenSearchForSenior;

      var senior = type === 'senior' && allowChildrenSearchForSenior;
      var student = type === 'student' && allowChildrenSearchForStudent;

      return senior || student;
    } else {
      return true;
    }
  },
  routeSettings: function (display_senior, display_student, display_ungdom, display_time_filter) {
    WT.Config.displaySenior = display_senior;
    WT.Config.displayStudent = display_student;
    WT.Config.displayUngdom = display_ungdom;
    WT.Config.displayTimeFilter = display_time_filter;
    var $regular = $j('#passenger-type-regular');
    if (WT.Config.displaySenior === false && WT.Config.displayStudent === false) {
      $j('#regular').click();
      $regular.addClass('no-display');
      WT.FindTrip.passengersTypeBlock.addClass('no-display');
      this.passengersSubBox.addClass('no-display');
    } else {
      $regular.removeClass('no-display');
      WT.FindTrip.passengersTypeBlock.removeClass('no-display');
      WT.FindTrip.passengersSubBox.removeClass('no-display');
      if (!WT.Config.displaySenior) {
        WT.FindTrip.passengerTypeSenior.addClass('no-display');
        if (WT.Config.groupType == 'senior') {
          $j('#regular').click();
        }
      } else {
        WT.FindTrip.passengerTypeSenior.removeClass('no-display');
      }
      if (!WT.Config.displayStudent) {
        WT.FindTrip.passengerTypeStudent.addClass('no-display');
        if (WT.Config.groupType == 'student') {
          $j('#regular').click();
        }
      } else {
        WT.FindTrip.passengerTypeStudent.removeClass('no-display');
      }
      if (!WT.Config.displayUngdom) {
        WT.FindTrip.passengerTypeUngdom.addClass('no-display');
        if (WT.Config.groupType == 'ungdom') {
          $j('#regular').click();
        }
      } else {
        WT.FindTrip.passengerTypeUngdom.removeClass('no-display');
      }
    }
  },
  isAllowSearchTypeReturn: function () {
    if (WT.modify_flag) return;

    var $returnData = $j('#' + this.returnInputId),
      $returnType = $j('#traveltype-return'),
      $oneWayType = $j('#traveltype-one-way');

    if (!$returnData.val() && $returnType.prop('checked')) {
      $oneWayType.prop('checked', true).change();
      $returnData.parent().addClass('disabled');
    }
  },
  _displayCompartmentType: function (isDisplay, selectedValue) {
    var $blockCompartmentTypes = $j('.sub-box.compartment-types').length ? $j('.sub-box.compartment-types') : $j('.compartment-type'),
      isSelected = this._checkSelectedInputs('outbound_compartment_type');

    if (!!isDisplay) {
      $blockCompartmentTypes.show();

      if (!isSelected) {
        this._preselectDropdownInputs(selectedValue, 'outbound_compartment_type', '#field-outbound-compartment-select-title');
        this._preselectDropdownInputs(selectedValue, 'inbound_compartment_type', '#field-inbound-compartment-select-title');
      }
    } else {
      $blockCompartmentTypes.hide();
    }
  },
  displayPassengerPopup: function () {
    var passengersType = ['adult', 'child', 'infant'],
      self = this;

    $j('#passengers-counter').find('.close-button-wrap').on('click', function () {
      $j(this).parent().parent().blur();
    });

    $j('.travel-date').find('.close-button-wrap').on('click', function () {
      $j(this).parent().hide();
    });

    $j('#quicksearch-passengers').on('focus', function () {
      $j(this).find('.infobox').show();
    });

    $j('#quicksearch-passengers').on('blur', function () {
      $j(this).find('.infobox').hide();
    });

    passengersType.forEach(function (passenger) {
      $j('#plus-' + passenger).on('click', function () {
        var targetInput = $j(this).data('target'),
          $input = $j('#' + targetInput),
          $selectAdult = $j('#select-adult'),
          allPass = 0,
          childrenSearchErrorMessage = 'Children and infants are not allowed for reservation with this passenger type. Please select adults only or change passenger type to regular',
          passengerTravelType = $j('.travel-users input:checked').val(),
          maximumAllowed = WT.Config.passengersAmountMaximum,
          value = $input.val(),
          isChildrenType = passenger == 'infant' || passenger == 'child',
          maxValue = $input.data('maxvalue');

        self.passengerSelect.each(function () {
          allPass += parseInt($j(this).val());
        });

        if (!WT.FindTrip.isChildrenSearchAllowed(passengerTravelType) && isChildrenType) alert(Translator.translate(childrenSearchErrorMessage));

        switch (passenger) {
          case 'infant': {
            if (+value === +$selectAdult.val() || !WT.FindTrip.isChildrenSearchAllowed(passengerTravelType)) return;
          }
          case 'child': {
            var childrenPerAdultMaxNumber = +WT.Options.childrenPerAdultMaxNumber,
              adultValue = +$selectAdult.val(),
              umnrEnabled = +$selectAdult.data('minvalue') === 0,
              maxChildren = umnrEnabled && !adultValue
                ? WT.Options.maxUmnrAmount
                : adultValue * childrenPerAdultMaxNumber;

            if (maxChildren <= +value || !WT.FindTrip.isChildrenSearchAllowed(passengerTravelType)) return;
          }
        }

        if (+maxValue === +value || allPass + 1 > maximumAllowed) {
          if (+maxValue !== +value) alert(Translator.translate('Maximum allowed amount of passengers for reservation is ') + maximumAllowed);

          return;
        }

        var currentValue = +value + 1;
        $input.val(currentValue).change();
        $input.siblings('.num-pass-view').text(Translator.translate(currentValue))
      });

      $j('#minus-' + passenger).on('click', function () {
        var targetInput = $j(this).data('target'),
          $input = $j('#' + targetInput),
          passengerTravelType = $j('.travel-users input:checked').val(),
          value = $input.val(),
          minValue = $input.data('minvalue');


        if (+value === +minValue) return;

        if (passenger === 'adult') {
          var $selectInfant = $j('#select-infant'),
            $selectChildren = $j('#select-child'),
            $selectAdult = $j('#select-adult'),
            childrenPerAdultMaxNumber = +WT.Options.childrenPerAdultMaxNumber,
            childValue = +$selectChildren.val(),
            isUmnrEnable = +$selectAdult.data('minvalue'),
            isMaxValue = (+value * childrenPerAdultMaxNumber >= childValue) || !childrenPerAdultMaxNumber;

          if (+value <= +$selectInfant.val()) {
            $selectInfant.val(+value - 1).change();
          };

          if (isUmnrEnable && isMaxValue && childValue > +value) {
            $selectChildren.val((+value - 1) * childrenPerAdultMaxNumber).change();
          }

          if (+value <= 1 && !WT.FindTrip.isChildrenSearchAllowed(passengerTravelType)) return;
        }

        var currentValue = +value - 1;

        self.setValueByPassenger($input, currentValue);
      });
    });
  },
  calculateTotalPassengers: function () {
    var passengersType = ['adult', 'child', 'infant'],
      allPassengers = 0,
      self = this,
      $countInfoBlock = $j('#field-info-passenger-count'),
      msgLabel = 'Passengers';

    passengersType.forEach(function (passenger) {
      var $passengerInput = $j('#select-' + passenger),
        totalPassengersByType = +$passengerInput.val();

      self.setValueByPassenger($passengerInput, totalPassengersByType, false)
      allPassengers += totalPassengersByType;
    });

    msgLabel = allPassengers > 1 ? msgLabel : 'Passenger';
    $countInfoBlock.text(Translator.translate(allPassengers) + ' ' + Translator.translate(msgLabel));
  },
  setValueByPassenger: function ($input, value, needChange) {
    if (needChange !== false) $input.val(+value).change();

    $input.siblings('.num-pass-view').text(Translator.translate(value));
  }
};

var WT = WT || {};
WT.Modify = {
  init: function (data, modifyStepFlag) {
    $j('#tripsearch').hide();
    $j('body').addClass('modify-booking').addClass(modifyStepFlag);
    this.rewriteSteps(data);
    this.rewriteReservationDataForFlightAndPassengers(data);
    this.prevExtras(data);
    this.backToManageBooking();
  },
  prevExtras: function (data) {
    if (data.prev_extras) {
      $j('#extras-popup-content').html(data.prev_extras);
      $j('#see-prev-extras-button').show();
    }
  },
  clearProducts: function () {
    WT.ReservationData.packages = {};
    WT.ReservationData.extras = {};
    WT.ReservationData.seats = {};
  },
  rewriteSteps: function (data) {
    if (data && !data.enabled) return false;

    WT.Steps.activeIndex = 0;
    WT.Steps.backend_data = data.enabled;
    WT.Steps.init();
  },
  rewriteReservationDataForFlightAndPassengers: function (data) {
    var listKeysAirports = ['arrival', 'departure'];

    if (data.flights && data.flights.length) {
      data.flights.forEach(function (flight) {
        WT.ReservationData.flight[flight.flight_direction + '_marketing_airline_code'] = flight.marketing_airline_code;
        WT.ReservationData.flight[flight.flight_direction + '_flight_number'] = flight.marketing_flight_number;
        listKeysAirports.forEach(function (keyAir) {
          var keyCode = flight.flight_direction + '_' + keyAir + '_airport_code',
            keyFullName = flight.flight_direction + '_' + keyAir + '_airport_name',
            keyDate = flight.flight_direction + '_' + keyAir + '_datetime',
            keyDateOrigin = flight.flight_direction + '_' + keyAir + '_datetime_origin';
          WT.ReservationData.flight[keyCode] = flight[keyAir + '_airport'];
          WT.ReservationData.flight[keyFullName] = flight[keyAir + '_airport_name'];
          WT.ReservationData.flight[keyDate] = flight[keyAir + '_date'];
          WT.ReservationData.flight[keyDateOrigin] = flight[keyDateOrigin];
        })
      });
    }

    if (data.flight) WT.ReservationData.flight = $j.extend({}, WT.ReservationData.flight, data.flight);

    WT.ReservationData.flight.base_fare = 0;
    WT.ReservationData.flight.currency_format = "%s €";
    WT.ReservationData.flight.total_fare = 0;
    WT.ReservationData.flight.taxes = {};
    WT.ReservationData.flight.taxes.taxes_total = 0;
    WT.ReservationData.flight.bookingReferenceID = data.bookingReferenceID;
    WT.ReservationData.flight.rloc = data.rlocToDisplay;


    if (typeof WT.ReservationData.passengers.length == 'undefined' && data.passengers) {
      WT.ReservationData.passengers = data.passengers.passengers;
    }

    WT.Passengers.updateReservationDataPassengersFromBackendData(data);
    WT.SelectTrip._formatFlightAddedNodes(WT.ReservationData.flight, 'from');
    WT.SelectTrip._formatFlightAddedNodes(WT.ReservationData.flight, 'to');
    WT.ReservationData.flight.modify_flag = WT.modify_flag;

  },
  rewriteFlightTotals: function (prices) {
    var totals = prices.fare_breakdowns.totals;

    if (totals && totals.currency_format && totals.total_base_formatted) {
      WT.ReservationData.flight.currency_format = totals.currency_format;
      WT.ReservationData.flight.base_fare = totals.total_base;
      WT.ReservationData.flight.total_fare = totals.total;
      WT.ReservationData.flight.taxes.taxes_total = totals.total_taxes;
      WT.ReservationData.flight.taxes.fee_total = totals.total_fee;
    }

    WT.ReservationData.flight.added_total_discount = 0;
    WT.ReservationData.flight.added_totalprice_discounted = 0;
    WT.ReservationData.flight.added_total_float_discounted = 0;
    WT.ReservationData.flight.added_baseprice_discounted = 0;

    if (totals && totals.total_discount) {
      WT.ReservationData.flight.total_discount = totals.total_discount;
      WT.ReservationData.flight.total_discount_show = totals.total_discount_show;
      WT.ReservationData.flight.is_total_discount_price = totals.is_total_discount_price;
      WT.ReservationData.flight.base_fare_discounted = totals.total_base_discounted;
      WT.ReservationData.flight.total_fare_discounted = totals.total_discounted;
    } else {
      WT.ReservationData.flight.total_discount = 0;
      WT.ReservationData.flight.total_discount_show = false;
      WT.ReservationData.flight.is_total_discount_price = false;
      WT.ReservationData.flight.base_fare_discounted = 0;
      WT.ReservationData.flight.total_fare_discounted = 0;
    }
  },
  _changeDate: function () {
    WT.Utiles._localStorageUpdate('selected', JSON.stringify(WT.Modify.order), true);
    $j('#origin, #destination').attr('disabled', 'disabled');
    $j('#promo_code').attr('type', 'hidden');
    $j('#quicksearch-passengers select, .traveltype input, #ckbDirectonly, .travel-users input, #promo_code').focus(function (e) {
      $j('option:not(:selected)', $j(this)).remove();
    });
    $j('#tripsearch_form label').on('click', function (e) {
      e.preventDefault();
    });
    if (!WT.Utiles._getParams('change-segment-outbound')) $j('#departdate').attr('disabled', 'disabled');
    if (!WT.Utiles._getParams('change-segment-inbound')) $j('#returndate').attr('disabled', 'disabled');
  },
  _selectFlightIfInResponseUpdatePassengers: function (data) {
    $j.each(data.flights_selected, function (index, value) {
      var id_sel = '';
      id_sel = index + '-';
      $j.each(value, function (key, val) {
        id_sel += val;
      });
      $j('#' + id_sel).click();
    });
    setTimeout(function () {
      WT.Passengers.updateReservationDataPassengersFromBackendData(data);
      WT.Summary.refresh();
    }, 3000);
  },
  passengerFormFillModifyChangeName: function (data) {
    if (typeof data.passengers !== 'undefined') {
      var data_passengers = data.passengers.passengers;
      if (typeof data_passengers != 'undefined') {
        for (var $i = 0; $i < WT.ReservationData.passengers.length; $i++) {
          var item = WT.ReservationData.passengers[$i];
          WT.Passengers._preselectPassengerRow(item.id, WT.ReservationData.passengers[$i]);
          $j('#passengers .passenger .field').hide();
          $j('.copy-from').remove();
          $j('#contactinfo').remove();
          $j('.passenger .field.changename-box').show();
          $j('.extend-flow-checkboxes, #passenger-login').hide();
          $j('#passenger-modal').remove();
          $j('.docs-block').remove();
          $j('.doco-block').remove();
          $j('.doca-block').remove();
          $j('.docid-block').remove();
        }
      }
    }
  },
  passengerFormFillModifyDoc: function (data) {
    if (typeof data.passengers !== 'undefined') {
      var data_passengers = data.passengers.passengers;
      if (typeof data_passengers != 'undefined') {
        for (var $i = 0; $i < WT.ReservationData.passengers.length; $i++) {
          var item = WT.ReservationData.passengers[$i];
          WT.Passengers._preselectPassengerRow(item.id, WT.ReservationData.passengers[$i]);
          $j('.copy-from').remove();
          $j('#contactinfo').remove();
          $j('.extend-flow-checkboxes, #passenger-login, #login-tab-wrapper, .pass-input').hide();
          $j('#passenger-modal').remove();
        }
      }
    }
  },
  updateReservationPricesModifyChangeName: function (data) {
    if (typeof data.prices !== 'undefined') {
      WT.ReservationData.flight.taxes = {};
      WT.ReservationData.flight.bookingReferenceID = data.bookingReferenceID;
      WT.ReservationData.flight.rloc = data.rlocToDisplay;
      WT.SelectTrip.rewriteFlightWithBreakdownsAndRules(data.prices);
      WT.Modify.rewriteFlightTotals(data.prices);
      WT.Summary.refresh();
      $j('.hidden-modify-totals').show();
    }
  },
  _validateChangeName: function () {
    var reserved_pax = WT.ReservationData.passengers;
    var error_count = 0;
    var isErrors = false;

    $j.each(reserved_pax, function (key, value) {
      var localString = value.passenger_title + value.passenger_firstname + value.passenger_lastname;
      var domString = $j('#passenger_title_' + key).val()
        + $j('#passenger_firstname_' + key).val()
        + $j('#passenger_lastname_' + key).val();

      if (localString === domString) {
        error_count++;
      }
    });
    if (error_count > 0) {
      isErrors = true;
      jQuery('#passengers').show();
      alert(Translator.translate("One or more passengers weren't changed."));
    }

    return isErrors;
  },
  backToManageBooking: function () {
    if (WT.modify_flag === 'refund') return;

    var $summaryBox = $j('#form-flights'),
      $buttonsForm = $j('#form-flights-buttons'),
      label = Translator.translate('Start over'),
      $backButton = $j('<div class="button btn-inline btn-checkout btn-back-manage">' +
        '<i class="fas fa-chevron-left"></i></div>')
        .on('click', function () {
          WT.Checkout.resetDiscount();
          window.history.back();
          $j(this).prop('disabled', true);
        });

    $backButton
      .clone()
      .on('click', function () {
        WT.Checkout.resetDiscount();
        window.history.back();
        $j(this).prop('disabled', true);
      })
      .appendTo($summaryBox);
    $backButton.text(label).prependTo($buttonsForm);
  }
}

var WT = WT || {};
WT.Checkout = {
  isInitialized: false,
  data: null,
  init: function (data) {
    this.data = data;

    this.createCheckoutView(data);
    this.panelsArrowsImproving();
    this.registerHandler();
    this.preselectCustomPayOneMethod();
    this.prepareEmerchantPayInfoPopup(!data.isRenderDiscounts);
    this.handlerResetDiscount(!data.isRenderDiscounts);
    this.initPrivatInstallmentModal();
    this.initHoldFare();

    if (data.hotel !== undefined) {
      WT.ReservationData.hotel = data.hotel;
    }

    if (data.prices) {
      WT.SelectTrip.rewriteFlightWithBreakdownsAndRules(data.prices);
      WT.Modify.rewriteFlightTotals(data.prices);
      WT.Summary.refresh();
    }

    WT.Summary.showSummary();
    if (WT.FindTrip.isIranian) {
      $j('#form-checkout .modal-body .content').attr('dir', 'rtl');
    }
    if (!!+localStorage.getItem('isEnableCloseCheckoutTab')) $j(window).on('beforeunload', function () { return true; });

    if (this.isInitialized) {
      this.initLoyaltyPayByPoints();
    }

    this.isInitialized = true;
  },
  afterPageIsFullyLoaded: function () {
    this.initLoyaltyPayByPoints();
  },
  preselectCustomPayOneMethod: function () {
    var $paymentBlock = $j('#collapse-payment'),
      $fieldsetWrap = $paymentBlock.find('.fieldset-wrap'),
      $wtPay = $j('#p_method_wt_pay_wt_pay');

    if ($fieldsetWrap.hasClass('one-method') && $wtPay.prop('checked')) {
      var $paymentMethods = $paymentBlock.find('.wt-custom-payment-type');

      if ($paymentMethods.length === 1) {
        $paymentMethods.prop('checked', true).click();
      }
    }
  },
  switchPaymentMethod: function (currentMethod) {
    var baseUrl = WT.Options.baseUrl || '/',
      $input = $j('#dt_method_wt_pay_' + currentMethod).find('input[name="payment[type]"]'),
      countAsync = +$input.data('count-async'),
      data = { payment: { method: currentMethod } },
      paymentData = $input.data('payment');

    if ($input && $input.length) {
      data.payment.method = 'wt_pay';
      data.payment.type = currentMethod;
    }

    if (countAsync === 1) {
      data.paymentInfo = paymentData.async[0];
    }

    WT.Utiles.stepLoader(true);

    $j.ajax({
      url: baseUrl + 'booking/checkout/getMethodDiscount',
      type: 'POST',
      data: data,
      success: function (result) {
        if (result && result.return) {
          result.isRenderDiscounts = true;
          WT.Checkout.init(result);

          if (currentMethod === 'privat') {
            WT.Checkout.showPrivatInstallmentModal();
          }

          WT.Checkout.paymentNotificationPopup(currentMethod);
        }

        WT.Utiles.stepLoader(false);
      },
      error: function (xhr, ajaxOptions, thrownError) {
        WT.Utiles.stepLoader(false);
      }
    });
  },
  switchPaymentMethodWithoutDiscount: function (currentMethod) {
    if (currentMethod === 'privat') {
      WT.Checkout.showPrivatInstallmentModal();
    }

    WT.Checkout.paymentNotificationPopup(currentMethod);
  },
  initPrivatInstallmentModal: function () {
    var rawTotalAmount = $j('#shopping-cart-totals-table tfoot strong .price').text();
    var match = rawTotalAmount.match(/([0-9\s.]+)(.+)/);
    var totalAmount = parseFloat(match[1].replace(' ', ''));
    var currency = match[2];

    $j("#modal_method_privat").off('shown.bs.modal').on('shown.bs.modal', function () {
      if (window.modal_method_privat_slider_state !== undefined) {
        return false;
      }

      window.modal_method_privat_slider_state = new rSlider({
        target: '#modal_method_privat_slider',
        values: [2, 3, 4, 5, 6],
        range: false,
        set: [2],
        tooltip: false,
        onChange: function (val) {
          var partsCount = val;
          var resCalc = PP_CALCULATOR.calculatePhys(partsCount, totalAmount);

          $j('#modal_method_privat_slider').val(resCalc.payCount);

          WT.Utiles._compileBlockWithHandlebars('#privat-installment-table', 'privat_installment_table', {
            currency: currency,
            ppValue: resCalc.ppValue,
            totalAmount: totalAmount,
            partsCount: resCalc.payCount
          });
        }
      });
    });
  },
  showPrivatInstallmentModal: function () {
    $j("#modal_method_privat").modal('show');
  },
  paymentNotificationPopup: function (currentMethod) {
    var methods = WT.Options.paymentNotificationPopupMethods;
    if (methods.includes(currentMethod) || methods.includes('wt_pay_' + currentMethod)) {
      $j("#payment-notification-popup").modal('show');
    }
  },
  resetDiscount: function () {
    var modifyEnabled = ['changedate', 'unticketed', 'checkout'];

    if (modifyEnabled.indexOf(WT.modify_flag || 'checkout') === -1) return;

    if (WT.Steps.getStepIndexByText('checkout') === WT.Steps.activeIndex && WT.Options.isEnabledPaymentMethodDiscounts) {
      var baseUrl = WT.Options.baseUrl || '/';

      WT.Checkout.isNotRegisterPaymentDiscountHandler = true;

      $j.ajax({
        url: baseUrl + 'booking/checkout/resetDiscount',
        type: 'POST',
        data: {},
        success: function (result) {
          if (result && result.return) {
            if (result.prices) {
              WT.SelectTrip.rewriteFlightWithBreakdownsAndRules(result.prices);
              WT.Modify.rewriteFlightTotals(result.prices);
              WT.Summary.refresh();
            }
          }
        }
      });
    }
  },
  createCheckoutView: function (data) {
    var checkout_container = $j('#step-checkout');

    if (data.isRenderDiscounts) {
      var html = $j('<div>' + data.output + '</div>'),
        $confirmationContent = html.find('#step-confirmation').children(),
        $totals = html.find('#collapse-payment').find('.totals-inner.main-font').find('.opc').children();

      checkout_container.find('#step-confirmation').html($confirmationContent);
      checkout_container.find('.totals-inner.main-font').find('.opc').html($totals);
    } else {
      checkout_container.html(data.output);
    }

    this.normalizeTotalBlockPosition();
  },
  normalizeTotalBlockPosition: function () {
    if ($j('#form-checkout .payments-container + .totals-wrapper').length) return;
    $j('#form-checkout').append($j('#form-checkout .totals-wrapper'));
  },
  panelsArrowsImproving: function () {
    this._removeReservedData();
    $j('.checkout-heading').click(function () {
      var cur_panel = $j(this);
      cur_panel.toggleClass('disactivated');
    });
  },
  _removeReservedData: function () {
    if (window.location.pathname === '/checkout/onepage/success/') {
      localStorage.removeItem('reserved');
    }
  },
  prepareEmerchantPayInfoPopup: function (isPrepare) {
    if (!$j('#modal_method_emerchantpay').length || !isPrepare) return;

    var $countriesContainer = $j('#emerchantpay-popup-wrapper .countries-list'),
      $countryImage = '',
      $countryTitle = '',
      crimeaTitle = Translator.translate('Republic of Crimea');

    WT.Options.countries.push({ label: crimeaTitle, value: 'RI' });

    $countriesContainer.children().each(function () {
      var countryCode = $j(this).data('country-code');
      var currentCountry = WT.Options.countries.find(function (item) {
        return item.value == countryCode.toUpperCase()
      });

      $countryImage = '<div class="iti-flag ' + currentCountry.value.toLowerCase() + '"></div>';
      $countryTitle = '<div class="country-name">' + Translator.translate(currentCountry.label) + '</div>';
      $j(this)
        .append($countryImage)
        .append($countryTitle);
    });
  },
  registerHandler: function () {
    $j('.night-header').on('click', function () {
      var $self = $j(this);

      $self.toggleClass('active').parent().find('.night-content').toggle(500);
    });

    $j('.contact-information').on('click', function () {
      var $self = $j(this);

      $self.toggleClass('active').parent().find('.contact-information-content').toggle(500);
    });
  },
  handlerResetDiscount: function (isHandler) {
    if (!isHandler
      ||
      !WT.Options.isEnabledPaymentMethodDiscounts
      ||
      WT.Checkout.isNotRegisterPaymentDiscountHandler
    ) return false;

    $j('.header-container a, .footer-container a').on('click', function () {
      WT.Checkout.resetDiscount();
    })
  },
  initHoldFare: function () {
    var self = this;
    var checkbox = $j('#hold-fare-agreement');
    var label = $j('#hold-fare-label')
    var popup = $j('#hold-fare-popup');

    label.off('click').on('click', function (e) {
      e.preventDefault();

      var checked = checkbox.is(':checked');
      if (!checked) {
        popup.modal('show');
        return false;
      } else {
        checkbox.prop('checked', false);
        self.sendHoldFareRequest();
      }
    });

    $j('#hold-fare-request').off('click').on('click', function () {
      checkbox.prop('checked', true);
      self.sendHoldFareRequest();
    });
  },
  sendHoldFareRequest: function () {
    var baseUrl = WT.Options.baseUrl || '/';
    var checked = $j('#hold-fare-agreement').is(':checked');
    WT.Utiles.stepLoader(true);
    $j.ajax({
      url: baseUrl + 'booking/checkout/holdFareFee',
      type: 'POST',
      data: { checked: checked },
      success: function (result) {
        if (result && result.return) {
          var output = $j('<div>' + result.output + '</div>');
          if (checked) {
            output.find('#hold-fare-agreement').attr('checked', true);
          }
          result.output = output.html();
          WT.Checkout.init(result);
        }

        WT.Utiles.stepLoader(false);
      },
      error: function (xhr, ajaxOptions, thrownError) {
        WT.Utiles.stepLoader(false);
      }
    });
  },
  initLoyaltyPayByPoints: function () {
    var self = this;

    var $ffpPayPanel = $j('.ffp-pay-panel-wrapper');
    if (!$ffpPayPanel.length) {
      return false;
    }

    var passengersList = this.data['loyaltyPassengers'];
    if (!Array.isArray(passengersList) || !passengersList.length) {
      return false;
    }

    var templateFfpPayPanel = Handlebars.compile(WT.Templates.checkout_ffp_pay_panel);
    $ffpPayPanel.html(templateFfpPayPanel({}));

    var $passengersListSelect = $j('.ffp-passengers-select-widget');

    var select2Template = function (state) {
      if (!state.id) {
        return state.text;
      }

      return $j('<div>' + state.name + ' <span>(' + state.points + ' ' + Translator.translate('Points') + ')</span></div>');
    };

    $passengersListSelect.select2({
      data: passengersList,
      minimumResultsForSearch: 10,
      templateResult: select2Template,
      templateSelection: select2Template,
    });

    self.initLoyaltySlider(passengersList[0]);

    $passengersListSelect.on('select2:select', function (e) {
      self.initLoyaltySlider({
        rph: e.params.data.rph,
      });
    });
  },
  initLoyaltySlider: function (data) {
    var self = this;
    var baseUrl = WT.Options.baseUrl || '/';
    var $ffpSlider = $j('.ffp-points-slider-wrapper');
    var $loaders = $j('.ffp-points-slider-wrapper, .totals-wrapper');
    $ffpSlider.html('');
    $loaders.addClass('loading');
    var errorMessage = Translator.translate('An SMS error was encountered while processing your request. Please try again later.');

    $j.ajax({
      url: baseUrl + 'booking/checkout/getLoyaltySliderData',
      type: 'POST',
      data: data,
      success: function (result) {
        if (result) {
          self.initLoyaltySliderForPassenger(result, data);
        } else {
          $ffpSlider.html(errorMessage);
        }

        $loaders.removeClass('loading');
      },
      error: function (xhr, ajaxOptions, thrownError) {
        $ffpSlider.html(errorMessage);
        $loaders.removeClass('loading');
      }
    });
  },
  initLoyaltySliderForPassenger: function (data, passengerData) {
    var baseUrl = WT.Options.baseUrl || '/';
    var errorMessage = Translator.translate('An SMS error was encountered while processing your request. Please try again later.');

    var totalPrice = WT.ReservationData.flight.added_total_float_discounted || WT.ReservationData.flight.added_total_float;
    var currencyFormat = WT.ReservationData.flight.currency_format;

    var pointsRate = data.maxPayPoints / data.maxPayAmount;

    var $ffpSlider = $j('.ffp-points-slider-wrapper');
    var $loaders = $j('.ffp-points-slider-wrapper, .totals-wrapper');
    var template = Handlebars.compile(WT.Templates.checkout_ffp_slider);
    $ffpSlider.html(template({
      maxPayAmount: data.maxPayAmount,
      maxPayPoints: data.maxPayPoints,
      currency: currencyFormat.replace('%s ', ''),
      offerId: data.offerId,
    }));

    var $ffpInput = $j('.ffp-input');
    var $inputAmount = $j('.ffp-input-amount');
    var $inputPoints = $j('.ffp-input-points');
    var $cartGrandTotal = $j('.cart-grand-total .price');

    var slider = new rSlider({
      target: '#ffp-slider-widget',
      values: {
        min: 0,
        max: data.maxPayAmount
      },
      step: 1,
      range: false,
      tooltip: false,
      scale: false,
      labels: false,
      throttling: 5,
      onChange: function (val) {
        var amount = parseFloat(val);

        $inputAmount.val(amount);
        inputAmountWasUpdated(amount);
        $ffpInput.each(setFfpInputWidth);
      }
    });

    var setFfpInputWidth = function () {
      var length = this.value.length || 1;

      $j(this).width(length * 9);
    }

    $ffpInput.each(setFfpInputWidth);
    $ffpInput.on('input', setFfpInputWidth);

    $inputAmount.on('input', function () {
      var selectedAmount = parseFloat($inputAmount.val()) || 0;

      inputAmountWasUpdated(selectedAmount);
      slider.setValues(selectedAmount);
    });

    var pointsTimeOut;
    var inputAmountWasUpdated = function (selectedAmount) {
      var points = Math.floor(selectedAmount * pointsRate);
      $inputPoints.val(points).trigger('input');

      var grandTotal = totalPrice - selectedAmount;
      var grandTotalFormatted = currencyFormat.replace('%s', grandTotal.toFixed(2));

      $cartGrandTotal.html(grandTotalFormatted);

      if (selectedAmount) {
        clearTimeout(pointsTimeOut);
        pointsTimeOut = setTimeout(function () {
          passengerData.amountToBeRedeemedByPoints = selectedAmount;

          $loaders.addClass('loading');
          $j.ajax({
            url: baseUrl + 'booking/checkout/getLoyaltySliderData',
            type: 'POST',
            data: passengerData,
            success: function (result) {
              if (result) {
                if (result.requiredPointsForAmountToBeRedeemed) {
                  $inputPoints.val(result.requiredPointsForAmountToBeRedeemed);
                }

                $ffpInput.each(setFfpInputWidth);
              } else {
                $ffpSlider.html(errorMessage);
              }

              $loaders.removeClass('loading');
            },
            error: function (xhr, ajaxOptions, thrownError) {
              $ffpSlider.html(errorMessage);
              $loaders.removeClass('loading');
            }
          });
        }, 500);
      }
    };
  },
};

var WT = WT || {};
WT.SSR = {
  init: function (data) {
    var self = this,
      flightReservation = WT.ReservationData.flight,
      step_text_code = WT.Steps.backend_data[WT.Steps.activeIndex];

    self.container_selector = '#step-' + step_text_code;
    self.country_vat = data.countryVat;

    if (WT.modify_flag === 'buyextras' && !WT.flights) {
      WT.Passengers.receiveFlights(data);
    };

    WT.Passengers.updateReservationDataPassengersFromBackendData(data);
    self.sortProductsOnCategory(data);
    $j.extend(flightReservation, data);
    $j.extend(flightReservation, { step: step_text_code });
    self.isInsurance = self.checkInsurance(data);
    WT.Utiles.renderHeaderByStep(self.container_selector, step_text_code, 'ssr', true, self.isInsurance);
    self.renderProducts(flightReservation);
    self.hideEmptyCategoriesExtra();
    WT.SeatSelect.setFirstCheckboxActive('#step-ssr', '.passenger-checkbox');
    WT.Utiles._makeCheckboxesAsRadiobuttons('#step-ssr .passenger-checkbox', '#step-ssr .select_all_passengers');
    WT.SSR._inputNumberIncrements('.numbers-row');
    WT.Summary.refresh(data);
    self.initHandler();
    self.showEnableExtraProducts(data.extras_groups_expand, data.ssrs);
    self.passengersRefresh();
    self.displayPassengersButtons();
    WT.Utiles._filterItemsByTypes();
    self.preselectInsuranceForAllUsers();
    self.preselectFreeProductsForAllUsers();
  },
  renderProducts: function (data) {
    var source = WT.Templates.ssr,
      self = this,
      template = Handlebars.compile(source),
      results_block = $j('#ssr-content'),
      isSsrsByFlyFrom = true,
      isSsrsByFlyTo = true,
      dataToTemplate = {};

    dataToTemplate.flights = WT.flights;
    dataToTemplate.data = $j.extend({}, data);

    dataToTemplate.flights.forEach(function (flight) {
      var counterProductCategories = 0,
        newSsrs = $j.extend(true, {}, data).ssrs;

      flight.ssrs = newSsrs
        .filter(function (ssr) {
          switch (ssr.type) {
            case 'package':
              return ssr.data.available_in_rphs.indexOf(flight.flight_rph) !== -1;
            case 'single_package':
              return ssr.data.available_in_rphs.indexOf(flight.flight_rph) !== -1;
            case 'category_extras':
              return ssr.data.products.some(function (product) {
                return (product.available_in_rphs.indexOf(flight.flight_rph) !== -1);
              });
            case 'configurable':
              return ssr.data.options.products.some(function (product) {
                return (product.available_in_rphs.indexOf(flight.flight_rph) !== -1);
              });
            case 'category_configurable':
              return ssr.data.products.some(function (category) {
                return category.options.products.some(function (product) {
                  return (product.available_in_rphs.indexOf(flight.flight_rph) !== -1);
                })
              });
            default:
              return false;
          }
        })
        .map(function (ssr) {
          if (ssr.type !== 'package') {
            counterProductCategories++;

            ssr.isEven = (counterProductCategories % 2) === 0;
          };

          switch (ssr.type) {
            case 'category_extras': {
              ssr.data.products = ssr.data.products.map(function (product) {
                product = self.getProductPriceForConnectedFlight(product);

                product.show_remark = Number((!product.show_remark || product.show_remark == 2) ?
                  data.global_remark :
                  product.show_remark
                );

                return product;
              });

              return ssr;
            }
            case 'package': {
              ssr.data = self.getProductPriceForConnectedFlight(ssr.data, true);

              return ssr;
            }
            case 'single_package': {
              ssr.data = self.getProductPriceForConnectedFlight(ssr.data, true);

              return ssr;
            }
            case 'configurable':
              var superAttributes = ssr.data.options.super_attributes;

              ssr.data.options.products = self.transformConfigurableProduct(superAttributes, ssr.data.options.products, flight);

              return ssr;
            case 'category_configurable':
              ssr.data.products = ssr.data.products.map(function (category) {
                var products = category.options.products,
                  superAttributes = category.options.super_attributes,
                  newProducts = self.transformConfigurableProduct(superAttributes, products);

                category.options.products = newProducts;

                return category;
              })

              return ssr;
            default:
              return ssr;
          }
        });

      if (flight.flight_rph === 1 && !flight.ssrs.length) isSsrsByFlyFrom = false;
      if (flight.flight_rph === 2 && !flight.ssrs.length) isSsrsByFlyTo = false;
    });

    var result = template(dataToTemplate);

    results_block.html(result);

    if (!isSsrsByFlyFrom && isSsrsByFlyTo) {
      $j('#step-ssr').find('a[aria-controls=ssr-1]').parent().addClass('disable');
      $j('.passenger-ssr-button[data-direction=to]').addClass('active');
      $j('.passenger-ssr-button[data-direction=from]').addClass('disable').removeClass('active');
      $j('.passenger-ssr-content').removeClass('active').filter('.passenger-to-ssr-block').addClass('active');
      $j('#step-ssr').find('a[aria-controls=ssr-2]').click();
    } else {
      results_block.find('.tab-panel:first-child').addClass('active');
    }
  },
  sortProductsOnCategory: function (data) {
    var self = this;

    data.sortingSsrs = data.ssrs.reduce(function (acc, ssr) {
      acc[ssr.type] = acc[ssr.type] || {};

      var data = ssr.data,
        type = ssr.type,
        newAcc = acc[type];

      switch (type) {
        case 'package':
        case 'single_package': {
          newAcc[data.product_id] = data;
          break;
        }
        case 'configurable': {
          var products = data.options.products,
            superAttributes = data.options.super_attributes,
            newProducts = self.transformConfigurableProduct(superAttributes, products);

          newProducts.forEach(function (product) {
            newAcc[product.product_id] = product;
          });
          break;
        }
        case 'category_extras': {
          var products = data.products;

          products.forEach(function (product) {
            newAcc[product.product_id] = product;
          });
          break;
        }
        case 'category_configurable': {
          data.products.forEach(function (category) {
            var products = category.options.products,
              superAttributes = category.options.super_attributes,
              newProducts = self.transformConfigurableProduct(superAttributes, products);

            newProducts.forEach(function (product) {
              newAcc[product.product_id] = product;
            });
          });
        }
        default: {
          break;
        }
      }

      return acc;
    }, {});
  },
  transformConfigurableProduct: function (superAttributes, products, flight) {
    return products.map(function (product) {
      var newProduct = WT.SSR.getProductPriceForConnectedFlight($j.extend({}, product)),
        superAttribute = superAttributes[0],
        values = superAttribute.values,
        attrId = newProduct[superAttribute.attribute_code] || 0,
        attrValue = values.find(function (value) {
          return +value.value_index === +attrId;
        }) || {};

      newProduct.superAttribute = attrValue;

      if (flight !== undefined) {
        if (product['free_product_' + flight.flight_direction] === true) {
          newProduct['free_price'] = true;
          newProduct['price_formatted'] = newProduct['currency_format'].replace('%s', 0);
        }
      }

      return newProduct;
    });
  },
  checkInsurance: function (data) {
    return data.sortingSsrs.single_package && Object.keys(data.sortingSsrs.single_package).length;
  },
  initHandler: function () {
    var self = this;

    $j('.selected-products-wrapper, .products-empty-block').on('click', function () {
      var $category = $j(this).parents('.category-products'),
        $selectedProducts = $j(this).parent(),
        $productsWrapper = $category.find('.products-wrapper'),
        isOpen = $selectedProducts.hasClass('open');

      if (isOpen) return;

      if ($selectedProducts.hasClass('configurable-category')) {
        $productsWrapper.find('.select-item-0').trigger('click');
        $selectedProducts.find('.button-select').show();
        $selectedProducts.find('.button-change-selection').hide();
      }

      $productsWrapper.show(400);
      $selectedProducts.addClass('open');

      $j('html, body').stop().animate({ scrollTop: $productsWrapper.position().top }, 600, 'swing');
    });

    $j('.button-change-selection, .button-select').on('click', function () {
      var $category = $j(this).parents('.category-products'),
        $selectedProducts = $j(this).parent(),
        $productsWrapper = $category.find('.products-wrapper');

      if ($selectedProducts.hasClass('configurable-category')) {
        if (!$selectedProducts.hasClass('open')) {
          $productsWrapper.find('.select-item-0').trigger('click');
          $selectedProducts.find('.button-select').show();
          $selectedProducts.find('.button-change-selection').hide();
        } else {
          $selectedProducts.find('.button-select').hide();
          $selectedProducts.find('.button-change-selection').show();
        }
      }

      $productsWrapper.toggle(400);
      $selectedProducts.toggleClass('open');

      if ($selectedProducts.hasClass('open')) {
        var body = $j('html, body'),
          positionTop = $productsWrapper.position().top;

        body.stop().animate({ scrollTop: positionTop }, 600, 'swing');
      }
    });

    $j('.button-select.configurable-category').on('click', function () {
      var $this = $j(this),
        $category = $this.parents('.category-products'),
        selector = $category.find('.fa-chevron-circle-up').data('selector'),
        $content = $j(selector + '-products-content'),
        $selectedItem = $content.find('.selected-item'),
        $input = $selectedItem.find('input'),
        data = $input.data();

      self.configurableProductSelect(1, data);
      self.passengersRefresh();
    })

    $j('#ssr-content .package-type').on('click', function (e) {
      e.stopPropagation();
      e.preventDefault();

      var el = $j(this).find('input[type=radio]'),
        rphData = $j(this).data(),
        value = el.attr('value'),
        type = el.data('package_type'),
        check = el.prop('checked');

      if (!check) {
        self.packageSelect(value, type, rphData);
      } else {
        self.packageUnSelect(value, type, rphData);

        el.prop('checked', false);
      }

      WT.Summary.refresh();
      self.passengersRefresh();
      self.hideExtasForPackages();
    });

    $j('#ssr-content .single-package-type').on('click', function (e) {
      e.stopPropagation();
      e.preventDefault();

      var el = $j(this).find('input[type=checkbox]'),
        rphData = el.data(),
        check = el.prop('checked');

      if (rphData.insurance_selector === 'unselect' && check) return;

      if (!check) {
        self.extraSelect(1, rphData, 'single_package');
        el.prop('checked', true);
      } else {
        self.extraSelect(0, rphData, 'single_package');

        el.prop('checked', false);
      }

      WT.Summary.refresh();
      self.passengersRefresh();
    });

    if ($j(window).width() < WT.Config.maxWidthMobile) {
      var $link = $j('a#ssr_rules_btn');

      $link.length && $link
        .attr('data-target', '#ssr_rules')
        .attr('data-toggle', 'modal')
        .attr('href', '#')
    }

    $j('#ssr-content .confifurable-item').on('click', function (e) {
      e.stopPropagation();
      e.preventDefault();

      var el = $j(this).find('input[type=radio]'),
        domData = el.data(),
        name = el.attr('name'),
        $inputs = $j(self.container_selector).find('input[name=' + name + ']'),
        check = el.prop('checked');

      if (!check) {
        $inputs.prop('checked', false);

        self.configurableProductSelect(1, domData);
        el.prop('checked', true);
      } else {
        self.configurableProductSelect(0, domData);
        el.prop('checked', false);
      }

      WT.Summary.refresh();
      self.passengersRefresh();
    });

    $j('.configurable-category-selected-item').on('click', function () {
      $j(this).parent().find('.configurable-category-select-items').toggle();
    });

    $j('#ssr-content .configurable-category-select-items').find('.select-item').on('click', function () {
      var $this = $j(this),
        $items = $this.parent(),
        $select = $items.parent(),
        $selectedItem = $select.find('.configurable-category-selected-item').find('span'),
        $content = $this.parents('.products-content'),
        flight_rph = $this.data('flight_rph'),
        name = $this.data('name'),
        product_id = $this.data('product_id'),
        selector = '.configurable-category-' + flight_rph + '-' + product_id;

      $items.hide();
      $selectedItem.html(name);
      $content.find('.configurable-category-wrapper').hide();
      $content.find(selector + '-wrapper').show();
      $content.find('.configurable-category-products-content').hide();
      $content.find(selector + '-products-content').show();
      $content.find('.switch-products').data('selector', selector);
    });

    $j('#ssr-content input.incrementing').on('change', function () {
      var $this = $j(this),
        $tile = $this.closest('.item'),
        domData = $this.data(),
        value = $this.val();

      self.extraSelect(value, domData);

      if (value > 0) {
        $tile.addClass('active-tile');
      } else {
        $tile.removeClass('active-tile');
      }

      self.passengersRefresh();
    });

    $j('#ssr-content .switch-products').on('click', function () {
      var $this = $j(this),
        $parent = $this.parent(),
        handle = $this.data('handle'),
        selector = $this.data('selector'),
        $products = $parent.find(selector + '-products-content').children(),
        selectedIndex = $products.filter('.selected-item').data('index'),
        lengthProducts = $products.length - 1,
        index = handle === 'dec' ? +selectedIndex - 1 : +selectedIndex + 1;

      if ((handle === 'dec' && index >= 0) ||
        (handle === 'inc' && index <= lengthProducts)) {
        $products
          .removeClass('selected-item')
          .filter('.configurable-category-item-' + index)
          .addClass('selected-item')
      }
    });

    $j(this.container_selector + ' .passenger-switcher .line').on('click', function (e) {
      e.preventDefault();
      e.stopPropagation();

      var isCheckedElements = $j(self.container_selector + ' .passenger-switcher input')
        .filter(function () { return $j(this).prop('checked') });
      input = $j(this).find('input[type=checkbox]'),
        parentInput = input.parent(),
        isChecked = input.prop('checked');

      if (isCheckedElements.length === 1 && isChecked) return;

      input.prop('checked', !isChecked);

      if (!isChecked) {
        parentInput.addClass('active');
      } else {
        parentInput.removeClass('active');
      }

      WT.Utiles._filterItemsByTypes();
      self.preselectPackagesForPassengers();
      self.preselectExtrasForPassengers();
    });

    $j(this.container_selector + ' .passenger-ssr-button').on('click', function (e) {
      e.stopPropagation();
      e.preventDefault();

      var $this = $j(this),
        direction = $this.data('direction'),
        flightRph = $this.data('flight_rph'),
        $ssrBlock = $this.parents('.passenger-ssr-block');

      if ($this.hasClass('disable')) return;

      $this.siblings().removeClass('active');
      $this.addClass('active');
      $ssrBlock.find('.passenger-ssr-content').removeClass('active');
      $ssrBlock.find('.passenger-' + direction + '-' + flightRph + '-ssr-block').addClass('active');

      $j('.tab-pane-content[data-flight-rph="' + flightRph + '"]').trigger('click');
    });

    $j(this.container_selector + ' .passenger-ssr-block').removeAttr('style');

    $j(this.container_selector + ' .passenger-switcher-arrow').on('click', function (e) {
      e.stopPropagation();
      e.preventDefault();

      var $check = $j(this).parent().parent(),
        $line = $check.parent().parent();

      $check.toggleClass('active');
      $line.toggleClass('active')
    });

    $j(this.container_selector + ' .passenger-switcher-arrow-mobile').on('click', function (e) {
      e.stopPropagation();
      e.preventDefault();

      if (!$j(this).parents('label').hasClass('empty')) {
        $j(this).parents('.line').toggleClass('active-mobile');
        $j('.backdrop-ssr').show();
      }
    });

    $j(this.container_selector + ' .fal.passenger-ssr-close-block').on('click', function (e) {
      $j(this).parents('.line').toggleClass('active-mobile');
      $j('.backdrop-ssr').hide();
    });

    $j(this.container_selector + ' .extra-remark').on('click', function (e) {
      e.stopPropagation();
      e.preventDefault();

      var $infobox = $j('.infobox-remark'),
        $infoboxBtn = $j('.infobox-remark-btn'),
        data = $j(this).data() || {},
        extraId = data.extra_id,
        flight_rph = data.flight_rph,
        reservation_extras = WT.ReservationData.extras,
        checked_passengers = $j(self.container_selector + ' .passenger-switcher input[type=checkbox]:checked');

      Object.keys(data).forEach(function (key) {
        $infoboxBtn.data(key, data[key]);
      });

      $j('.infobox-remark-content').find('textarea').val('');

      if (reservation_extras.to_extras && reservation_extras.from_extras) {
        checked_passengers.each(function () {
          var passenger_id = $j(this).data('entity_id'),
            passangerTo = reservation_extras.to_extras[passenger_id] = reservation_extras.to_extras[passenger_id] || {},
            passangerFrom = reservation_extras.from_extras[passenger_id] = reservation_extras.from_extras[passenger_id] || {},
            passanger = data.extra_type == 'to' ? passangerTo : passangerFrom;

          passanger.flights = passanger.flights || {};
          passanger.flights[flight_rph] = passanger.flights[flight_rph] || {};

          if (passanger.flights[flight_rph][extraId]) {
            var remark = passanger.flights[flight_rph][extraId].remark || '';

            $j('.infobox-remark-content').find('textarea').val(remark);
          }
        });
      }

      $infobox.show(300);
    })

    $j(this.container_selector + ' .infobox-remark').on('click', function (e) {
      e.stopPropagation();
      e.preventDefault();

      $j(this).hide(300);
    })

    $j(this.container_selector + ' .infobox-remark-content').on('click', function (e) {
      e.stopPropagation();
      e.preventDefault();
    });

    $j(this.container_selector + ' .infobox-remark-btn').on('click', function () {
      var data = $j(this).data() || {},
        extraId = data.extra_id,
        flight_rph = data.flight_rph,
        text = $j(this).parent().find('textarea').val(),
        reservation_extras = WT.ReservationData.extras,
        checked_passengers = $j(self.container_selector + ' .passenger-switcher input[type=checkbox]:checked');

      if (reservation_extras.to_extras && reservation_extras.from_extras) {
        checked_passengers.each(function () {
          var passenger_id = $j(this).data('entity_id'),
            passangerTo = reservation_extras.to_extras[passenger_id] = reservation_extras.to_extras[passenger_id] || {},
            passangerFrom = reservation_extras.from_extras[passenger_id] = reservation_extras.from_extras[passenger_id] || {},
            passanger = data.extra_type == 'to' ? passangerTo : passangerFrom;

          passanger.flights = passanger.flights || {};
          passanger.flights[flight_rph] = passanger.flights[flight_rph] || {};

          if (passanger.flights[flight_rph][extraId]) {
            passanger.flights[flight_rph][extraId].remark = text;
            WT.ReservationData.flight.sortingSsrs.category_extras[extraId].remark = text;

            var addClass = text ? 'fa-comment-alt-edit' : 'fa-comment-alt-dots',
              removeClass = text ? 'fa-comment-alt-dots' : 'fa-comment-alt-edit';

            $j('.extra-remark-' + flight_rph + '-' + extraId).addClass(addClass).removeClass(removeClass);
          }
        });
      }

      $j('.infobox-remark').hide(300);
    });
    $j('#insurance-terms').on('click', function (e) {
      if (/Android|webOS|iPhone|iPod|BlackBerry/i.test(navigator.userAgent)) {
        e.preventDefault();
        $j('#insurance-terms-popup').modal();
      }
    });
  },
  passengersRefresh: function () {
    if (!WT.Templates.passenger_ssrs) return;

    var extras = WT.ReservationData.extras,
      packages = WT.ReservationData.packages,
      passengers = WT.ReservationData.passengers,
      source = WT.Templates.passenger_ssrs,
      template = Handlebars.compile(source),
      directions = ['from', 'to'],
      self = this;

    if (typeof (extras.from_extras) !== 'undefined' || typeof (extras.to_extras) !== 'undefined'
      || typeof (packages.from_packages) !== 'undefined' || typeof (packages.to_packages) !== 'undefined') {
      passengers.forEach(function (passenger) {
        directions.forEach(function (direction) {
          var extrasKey = direction + '_extras',
            packagesKey = direction + '_packages',
            passengerExtras = extras[extrasKey] && extras[extrasKey][passenger.entity_id] || {},
            passengerPackages = packages[packagesKey] && packages[packagesKey][passenger.entity_id] || {},
            flightKeys = WT.flights
              .filter(function (flight) {
                return flight.flight_direction === direction;
              })
              .map(function (flight) { return flight.flight_rph });

          flightKeys.forEach(function (flightRph) {
            var resultsBlock = $j(self.container_selector).find('#pass-' + direction + '-' + passenger.entity_id + '-' + flightRph + '-ssr'),
              $line = $j(self.container_selector).find('#pass-' + passenger.entity_id).parent(),
              $label = $line.find('label'),
              result = template({
                flightsExtras: (passengerExtras && passengerExtras.flights && passengerExtras.flights[flightRph]) || null,
                package: (passengerPackages && passengerPackages.flights && passengerPackages.flights[flightRph]) || null,
                direction: direction,
                passengerId: passenger.entity_id
              });

            if (!!result.trim()) {
              resultsBlock.html(result);
            }

            if (self.getQtyReservation(extras) || self.getQtyReservation(packages)) {
              $label.removeClass('empty');
            } else {
              $label.addClass('empty');

              if ($line.hasClass('active-mobile')) {
                $line.removeClass('active-mobile');
                $j('.backdrop-ssr').hide();
              }
            }
          });

          self.removeProduct();
        })
      });
    } else {
      $j(this.container_selector + ' .passenger-switcher label').addClass('empty');
    }
  },
  displayPassengersButtons: function () {
    if (WT.flights && WT.flights.length === 1) {
      $j('.passenger-ssr-button').filter('[data-direction=to]').hide();
      $j('.passenger-ssr-button').filter('[data-direction=from]').addClass('align-left');
    }
  },
  removeProduct: function () {
    var self = this;

    $j('.remove-product').off().on('click', function (e) {
      e.preventDefault();
      e.stopPropagation();

      var data = $j(this).data();

      switch (data.category_type) {
        case 'extra': {
          if (data.default_selector == 'unselect') return;

          if (data.one_price_for_trip) {
            var singlePackageInput = $j('.single-package-type [data-flight_rph="' + data.flight_rph + '"][data-extra_id="' + data.product_id + '"]');
            singlePackageInput.parents('.single-package-type').click();

            break;
          }

          var $incrementInput = $j('input[name=increment_' + data.type + '_' + data.product_id + '_' + data.flight_rph + ']');

          if (self.checkExtrasBeforeRemove('extras', data.type + '_extras', data.product_id)) {
            $j('input#single_package-inp-' + data.type).prop('checked', false);
            $incrementInput
              .val(0)
              .closest('.item')
              .removeClass('active-tile');
          }

          var newData = $j.extend({}, data, {
            extra_id: data.product_id,
            extra_type: data.type
          });

          WT.SSR.extraSelect(0, newData);
          break;
        }
        case 'package': {
          if (self.checkPackageBeforeRemove(data.type + '_packages', data.product_id)) {
            $j('.package-type-' + data.product_id + '-flight' + data.flight_rph + data.type)
              .find('input[type=radio]')
              .prop('checked', false);
          }

          WT.SSR.packageUnSelect(data.product_id, data.type, data);
          WT.Summary.refresh();
          break;
        }
        case 'configurable': {
          var newData = $j.extend({}, data, {
            type: data.category_type,
            configurable_type: data.type,
            configurable_id: data.product_id
          });

          if (self.checkExtrasBeforeRemove('extras', data.type + '_extras', data.product_id)) {
            $j('.confifurable-item-' + data.product_id + '-flight' + data.flight_rph + data.type)
              .find('input[type=radio]')
              .prop('checked', false);
          }

          WT.SSR.configurableProductSelect(0, newData);
          break;
        }
        case 'configurable_category': {
          var newData = $j.extend({}, data, {
            type: data.category_type,
            configurable_type: data.type,
            configurable_id: data.product_id
          });

          WT.SSR.configurableProductSelect(0, newData);
          break;
        }
        default: {
          break;
        }
      }

      WT.SSR.passengersRefresh();
    });
  },
  getQtyReservation: function (reserved_obj, type) {
    var qty_reservation = 0;

    for (var $i in reserved_obj) {
      if (reserved_obj.hasOwnProperty($i)) {
        for (var key in reserved_obj[$i]) {
          var reserved_item = reserved_obj[$i][key];

          if (reserved_item && reserved_item.flights && !$j.isEmptyObject(reserved_item.flights)) {
            for (var rph in reserved_item.flights) {
              var products = reserved_item.flights[rph];

              if (products && !$j.isEmptyObject(products)) {
                for (var product in products) {
                  if (type) {
                    if (products[product].hasOwnProperty(type)) qty_reservation++;
                  } else {
                    qty_reservation++;
                  }
                }
              }
            }
          }
        }
      }
    }

    return qty_reservation;
  },
  checkExtrasBeforeRemove: function (productType, key, productId) {
    var currentExtras = WT.ReservationData[productType][key],
      result = true,
      countPassengersWithExtras = 0;

    if (WT.ReservationData[productType][key]) {
      for (var passId in currentExtras) {
        if (currentExtras.hasOwnProperty(passId)) {
          var flights = currentExtras[passId].flights;
          if (Object.keys(flights).length) {
            for (var flKey in flights) {
              if (flights.hasOwnProperty(flKey)) {
                var extras = flights[flKey],
                  extrasIds = Object.keys(extras),
                  currentExtraIds = extrasIds.length && extrasIds.filter(function (id) {
                    return id == productId
                  });

                if (extrasIds.length && currentExtraIds.length) countPassengersWithExtras++;
                if (countPassengersWithExtras > 1) return false;
              }
            }
          }
        }
      }
    }

    return result;
  },
  checkPackageBeforeRemove: function (key, productId) {
    var currentProduct = WT.ReservationData.packages[key],
      result = true,
      countPassengersWithProduct = 0;

    if (currentProduct) {
      for (var passId in currentProduct) {
        if (currentProduct.hasOwnProperty(passId)) {
          var flights = currentProduct[passId].flights;
          if (Object.keys(flights).length) {
            for (var flKey in flights) {
              if (flights.hasOwnProperty(flKey)) {
                var package = flights[flKey];

                if (package.product_id == productId) countPassengersWithProduct++;
                if (countPassengersWithProduct > 1) return false;
              }
            }
          }
        }
      }
    }

    return result;
  },
  packageSelect: function (package_id, type, rphData) {
    var checked_passengers = $j(this.container_selector + ' .passenger-switcher input[type=checkbox]:checked'),
      lenCheckedPassengers = checked_passengers.length - 1,
      reservation_packages = WT.ReservationData.packages,
      packages = WT.ReservationData.flight.sortingSsrs.package,
      self = this;

    reservation_packages.to_packages = reservation_packages.to_packages || {};
    reservation_packages.from_packages = reservation_packages.from_packages || {};

    checked_passengers.each(function (index) {
      var passenger_id = $j(this).data('entity_id'),
        isLastPassenger = index === lenCheckedPassengers,
        passengerType = $j(this).data('passenger_type'),
        passangerTo = reservation_packages.to_packages[passenger_id] = reservation_packages.to_packages[passenger_id] || {},
        passangerFrom = reservation_packages.from_packages[passenger_id] = reservation_packages.from_packages[passenger_id] || {};

      packages[package_id].passenger_id = passenger_id;
      packages[package_id].direction = type;

      if (passengerType == 'INF') return;

      if (type == 'to') {
        passangerTo.flights = passangerTo.flights || {};
        self.onlyBothProductsSelectByPackage({
          type: type,
          id: package_id,
          rphData: rphData,
          selector: self.container_selector,
          productType: 'package',
          selectedData: passangerTo,
          products: packages,
          isLastPassenger: isLastPassenger,
          passengerId: passenger_id,
        });
      } else {
        passangerFrom.flights = passangerFrom.flights || {};
        self.onlyBothProductsSelectByPackage({
          type: type,
          id: package_id,
          rphData: rphData,
          selector: self.container_selector,
          productType: 'package',
          selectedData: passangerFrom,
          products: packages,
          isLastPassenger: isLastPassenger,
          passengerId: passenger_id,
        });
      }

      WT.googleAnalyticsEvents.sendEvent('Packages', 'packageSelect', type);
    });
  },
  packageUnSelect: function (package_id, type, rphData) {
    var checked_passengers = $j(this.container_selector + ' .passenger-switcher input[type=checkbox]:checked'),
      reservation_packages = WT.ReservationData.packages;

    reservation_packages.to_packages = reservation_packages.to_packages || {};
    reservation_packages.from_packages = reservation_packages.from_packages || {};

    checked_passengers.each(function (index) {
      var passenger_id = $j(this).data('entity_id'),
        isEnd = (index + 1) === checked_passengers.length;
      passangerTo = reservation_packages.to_packages[passenger_id] = reservation_packages.to_packages[passenger_id] || {},
        passangerFrom = reservation_packages.from_packages[passenger_id] = reservation_packages.from_packages[passenger_id] || {};
      unSelectedProducts = $j('.select-both-flights')
        .filter('input[value=' + package_id + ']')
        .filter('input[data-package_type=' + type + ']');

      if (rphData.passenger_id && rphData.passenger_id !== passenger_id) return;

      if (type === 'to') {
        if (unSelectedProducts.length) {
          unSelectedProducts.each(function () {
            var thisFlightRph = $j(this).data('flight_rph');

            passangerTo.flights && (delete passangerTo.flights[thisFlightRph]);
            if (isEnd) $j(this).removeClass('select-both-flights').prop('checked', false);
          });

          if (isEnd) WT.SSR.displayMessagePopup('The product has been removed on both connected flights');
        } else {
          passangerTo.flights && (delete passangerTo.flights[rphData.flight_rph]);
        }
      } else {
        if (unSelectedProducts.length) {
          unSelectedProducts.each(function () {
            var thisFlightRph = $j(this).data('flight_rph');

            passangerFrom.flights && (delete passangerFrom.flights[thisFlightRph]);
            if (isEnd) $j(this).removeClass('select-both-flights').prop('checked', false);
          });

          if (isEnd) WT.SSR.displayMessagePopup('The product has been removed on both connected flights');
        } else {
          passangerFrom.flights && (delete passangerFrom.flights[rphData.flight_rph]);
        }
      }

      WT.googleAnalyticsEvents.sendEvent('Packages', 'packageUnselect', type);
    });
  },
  configurableProductSelect: function (qty, domData, isRemove) {
    var checked_passengers = $j(this.container_selector + ' .passenger-switcher input[type=checkbox]:checked'),
      lenCheckedPassengers = checked_passengers.length - 1,
      reservation_extras = WT.ReservationData.extras,
      extras = domData.type === 'configurable_category'
        ? WT.ReservationData.flight.sortingSsrs.category_configurable
        : WT.ReservationData.flight.sortingSsrs.configurable,
      extraId = domData.configurable_id,
      flight_rph = domData.flight_rph,
      passenger_rph = domData.passenger_rph,
      extra_type = domData.configurable_type,
      parent_id = domData.parent_id,
      isRemove = isRemove === undefined ? true : isRemove,
      step = $j(this.container_selector),
      isPreselectForAllSegments = domData.preselect_for_all_segments,
      showPreselectionPopup = domData.show_preselection_popup,
      freeProductsHaveBeenRemoved = false,
      self = this;

    reservation_extras.to_extras = reservation_extras.to_extras || {};
    reservation_extras.from_extras = reservation_extras.from_extras || {};

    checked_passengers.each(function (index) {
      var passenger_id = $j(this).data('entity_id'),
        isLastPassenger = lenCheckedPassengers === index,
        passangerTo = reservation_extras.to_extras[passenger_id] = reservation_extras.to_extras[passenger_id] || {},
        passangerFrom = reservation_extras.from_extras[passenger_id] = reservation_extras.from_extras[passenger_id] || {},
        passanger = extra_type == 'to' ? passangerTo : passangerFrom,
        passengerType = $j(this).data('passenger_type'),
        direction = step.find('input[data-configurable_id=' + extraId + ']').filter('input[data-configurable_type=' + extra_type + ']'),
        segments = step.find('input[data-configurable_id=' + extraId + ']'),
        isVisibleProduct = self.isVisibleProductOnConnectedFlight(direction),
        selectedProduct = step
          .find('input[name=' + extra_type + '-' + domData.type + parent_id + 'flight' + flight_rph + ']')
          .filter(function () { return $j(this).data('configurable_id') == extraId }),
        isSelectConnectionFlightsOnly = selectedProduct.data('select_conn_flights_only');

      passanger.flights = passanger.flights || {};
      passanger.flights[flight_rph] = passanger.flights[flight_rph] || {};

      if (passengerType === 'INF') return;

      if (qty) {
        var clearConfigrableProducts = function (flightRph) {
          Object.keys(passanger.flights[flightRph] || {}).forEach(function (extraId) {
            var product = passanger.flights[flightRph][extraId];

            if (product.category_type === domData.type && product.parent_id === parent_id) {
              if (product.price === 0) {
                freeProductsHaveBeenRemoved = true;
              }

              delete passanger.flights[flightRph][extraId];
            }
          });
        }

        function setFreeProductPrice(product, direction) {
          if (product['free_product_' + direction] === true) {
            product['special_price'] = -1;
            product['price'] = 0;
            product['price_formatted'] = product['currency_format'].replace('%s', 0);
            product['show_free_product_popup'] = true;
          }

          return product;
        }

        if (isPreselectForAllSegments) {
          segments
            .each(function () {
              var thisFlightRph = $j(this).data('flight_rph'),
                configurableType = $j(this).data('configurable_type'),
                directionPassenger,
                newProduct = $j.extend({ isConfigurable: true }, extras[extraId], {
                  qty: qty,
                  passenger_id: passenger_id,
                  direction: extra_type,
                  flight_rph: thisFlightRph,
                  passenger_rph: passenger_rph,
                  category_type: domData.type,
                  parent_id: parent_id
                });

              newProduct = setFreeProductPrice(newProduct, configurableType);

              clearConfigrableProducts(thisFlightRph);

              directionPassenger = configurableType === 'to' ? passangerTo : passangerFrom;
              directionPassenger.flights = directionPassenger.flights || {};
              directionPassenger.flights[flight_rph] = directionPassenger.flights[flight_rph] || {};
              directionPassenger.flights[thisFlightRph] = directionPassenger.flights[thisFlightRph] || {};
              directionPassenger.flights[thisFlightRph][extraId] = newProduct;

              self.renderSelectedProductsByCategory(newProduct, $j(this), domData.type, passengerType);
            })
            .prop('checked', true);

          if (showPreselectionPopup) {
            self.displayMessagePopup('The product has been added to all segments. If you like, you switch to return flight view and remove it.');
          }
        } else if (isVisibleProduct && isSelectConnectionFlightsOnly && typeof (isSelectConnectionFlightsOnly) === 'boolean') {
          var extraProduct = $j.extend({ isConfigurable: true }, extras[extraId]);

          direction
            .each(function () {
              var thisFlightRph = $j(this).data('flight_rph');

              clearConfigrableProducts(thisFlightRph);

              var newProduct = $j.extend({
                qty: qty,
                passenger_id: passenger_id,
                direction: extra_type,
                flight_rph: thisFlightRph,
                passenger_rph: passenger_rph,
                category_type: domData.type,
                parent_id: parent_id
              }, extraProduct);

              newProduct = setFreeProductPrice(newProduct, extra_type);

              passanger.flights[thisFlightRph] = passanger.flights[thisFlightRph] || {};
              passanger.flights[thisFlightRph][extraId] = newProduct

              self.renderSelectedProductsByCategory(newProduct, $j(this), domData.type, passengerType);
            })
            .prop('checked', true)

          self.displayMessagePopup('The product has been added on both connected flights');
        } else {
          clearConfigrableProducts(flight_rph);

          var newProduct = $j.extend({
            qty: qty,
            passenger_id: passenger_id,
            direction: extra_type,
            flight_rph: flight_rph,
            passenger_rph: passenger_rph,
            category_type: domData.type,
            parent_id: parent_id
          }, extras[extraId]);

          newProduct = setFreeProductPrice(newProduct, extra_type);

          passanger.flights[flight_rph][extraId] = newProduct;
          self.renderSelectedProductsByCategory(newProduct, selectedProduct, domData.type, passengerType);
        }

        WT.googleAnalyticsEvents.sendEvent('Configurable', 'configurableSelect', extra_type);
      } else {
        if (domData.passenger_id && domData.passenger_id !== passenger_id) return;

        if (isVisibleProduct && isSelectConnectionFlightsOnly) {
          direction
            .each(function () {
              var thisFlightRph = $j(this).data('flight_rph');

              var product = passanger.flights[thisFlightRph][extraId];
              if (product.price === 0) {
                freeProductsHaveBeenRemoved = true;
              }

              passanger.flights[thisFlightRph] && passanger.flights[thisFlightRph][extraId] && delete (passanger.flights[thisFlightRph][extraId]);
              passanger.flights[thisFlightRph] && $j.isEmptyObject(passanger.flights[thisFlightRph]) && delete passanger.flights[thisFlightRph];

              self.removeSelectedProductsByCategory(extraId, isRemove, domData.type, $j(this));


            })
            .prop('checked', false)

          if (isLastPassenger) self.displayMessagePopup('The product has been removed on both connected flights');
        } else {
          var product = passanger.flights[flight_rph][extraId];
          if (product.price === 0) {
            freeProductsHaveBeenRemoved = true;
          }

          delete passanger.flights[flight_rph][extraId];
          $j.isEmptyObject(passanger.flights[flight_rph]) && delete passanger.flights[flight_rph];
          self.removeSelectedProductsByCategory(extraId, isRemove, domData.type, selectedProduct);
        }

        WT.googleAnalyticsEvents.sendEvent('Configurable', 'configurableUnselect', extra_type);
      }
    });

    if (freeProductsHaveBeenRemoved) {
      self.showFreeProductRemovePopup();
    }

    WT.Summary.refresh();
  },
  validateInfantAge: function (minDate, infantRph) {
    var valid = false;
    if (WT.ReservationData.passengers && minDate) {
      var infantsList = this.getPassengerByParam('age_code', 'INF'),
        today = new Date();
      infantsList.each(function (currentInfant) {
        if (currentInfant.rph == infantRph) {
          var diffDays = currentInfant && currentInfant.birthdate && moment(today).diff(moment(currentInfant.birthdate), 'days');

          valid = diffDays > minDate;
        }
      });
    }

    return valid;
  },
  validateAdultAge: function (maxAge, rph) {
    var currentPassenger = this.getPassengerByParam('rph', rph);
    var passangerDob = currentPassenger && currentPassenger[0].birthdate,
      today = new Date();

    return moment(today).diff(moment(passangerDob), 'year') < +maxAge;
  },

  getPassengerByParam: function (param, value) {
    var passenger = WT.ReservationData.passengers.filter(function (passenger) { return passenger[param] == value });

    return passenger;
  },
  getRphAssociatedAdult: function () {
    var result = [];
    $j('.field-associated-adult select').each(function (_, element) {
      var rphItem = { "adultRph": $j(element).val(), "infantRph": $j(element).data('infant_prh') };

      result.push(rphItem);

    })

    return result;
  },
  extraSelect: function (qty, domData, extraType = 'category_extras') {
    var checked_passengers = $j(this.container_selector + ' .passenger-switcher input[type=checkbox]:checked'),
      lenCheckedPassengers = checked_passengers.length - 1,
      reservation_extras = WT.ReservationData.extras,
      extras = WT.ReservationData.flight.sortingSsrs[extraType],
      extraId = domData.extra_id,
      flight_rph = domData.flight_rph,
      passenger_rph = domData.passenger_rph,
      extra_type = domData.extra_type,
      maxAdultAge = domData.adult_age_to,
      minInfantAge = domData.infant_age_from,
      isSinglePackage = extraType === 'single_package',
      self = this,
      availablePassengerTypes = domData.available_passenger_types,
      isOnePriceForTrip = domData.one_price_for_trip,
      isPreselectForAllSegments = domData.preselect_for_all_segments,
      freeProductsHaveBeenRemoved = false;

    if (availablePassengerTypes) {
      availablePassengerTypes = availablePassengerTypes.split(' ');
    }

    reservation_extras.to_extras = reservation_extras.to_extras || {};
    reservation_extras.from_extras = reservation_extras.from_extras || {};

    checked_passengers.each(function (index) {
      var passenger_id = $j(this).data('entity_id'),
        isLastPassenger = lenCheckedPassengers === index,
        passangerTo = reservation_extras.to_extras[passenger_id] = reservation_extras.to_extras[passenger_id] || {},
        passangerFrom = reservation_extras.from_extras[passenger_id] = reservation_extras.from_extras[passenger_id] || {},
        passanger = extra_type == 'to' ? passangerTo : passangerFrom,
        step = $j(self.container_selector),
        flightsList = [],
        currentQty = qty,
        lastQty = 0,
        passengerRph = $j(this).data('passenger_rph'),
        passengerType = $j(this).data('passenger_type'),
        isAdult = passengerType == 'ADT',
        isInfant = passengerType == 'INF',
        isChildren = passengerType == 'CHD',
        selectedProduct = step.find('input[name=increment_' + extra_type + '_' + extraId + '_' + flight_rph + ']'),
        direction = step.find('input[data-extra_id=' + extraId + ']').filter('input[data-extra_type=' + extra_type + ']'),
        segments = step.find('input[data-extra_id=' + extraId + ']'),
        uniqueDirection = direction.filter(function () {
          var rph = $j(this).data('flight_rph'),
            isUniqueFlight = flightsList.indexOf(rph) === -1;

          if (rph !== flight_rph) lastQty = $j(this).val();
          if (isUniqueFlight) flightsList.push(rph);

          return isUniqueFlight;
        }),
        isConnectionFlight = uniqueDirection.length > 1,
        isSelectConnectionFlightsOnly = selectedProduct.data('select_conn_flights_only');

      passanger.flights = passanger.flights || {};
      passanger.flights[flight_rph] = passanger.flights[flight_rph] || {};

      if (isSinglePackage) {
        var validInfant = isInfant && (minInfantAge === '' || self.validateInfantAge(minInfantAge, passengerRph)),
          validAdult = isAdult && (maxAdultAge === '' || self.validateAdultAge(maxAdultAge, passengerRph)),
          passengerTypeValid = $j.inArray(passengerType, availablePassengerTypes) !== -1;

        if (!(validInfant || validAdult || isChildren) || !passengerTypeValid) currentQty = 0;
      }

      if (currentQty > 0) {
        var tabPanel = selectedProduct.parents('.tab-panel');

        if (isOnePriceForTrip || (isPreselectForAllSegments && tabPanel.is(':first-child') && !selectedProduct.hasClass('isPreselectForAllSegments_changed'))) {
          segments
            .each(function () {
              var thisFlightRph = $j(this).data('flight_rph'),
                extraType = $j(this).data('extra_type'),
                directionPassenger,
                newProduct = $j.extend({}, extras[extraId], {
                  qty: currentQty,
                  passenger_id: passenger_id,
                  direction: extra_type,
                  flight_rph: thisFlightRph,
                  category_type: 'extra',
                });

              if (isOnePriceForTrip) {
                newProduct = self.getProductPriceForOnePriceForTrip(newProduct, segments.length);
              }

              directionPassenger = extraType === 'to' ? passangerTo : passangerFrom;
              directionPassenger.flights = directionPassenger.flights || {};
              directionPassenger.flights[flight_rph] = directionPassenger.flights[flight_rph] || {};
              directionPassenger.flights[thisFlightRph] = directionPassenger.flights[thisFlightRph] || {};
              directionPassenger.flights[thisFlightRph][extraId] = newProduct;

              self.renderSelectedProductsByCategory(newProduct, $j(this), 'extra', passengerType);

              if ($j(this).hasClass('incrementing')) {
                $j(this)
                  .val(qty)
                  .parents('.extras-item')
                  .addClass('active-tile');
              }
            })
            .prop('checked', true);

          if (isPreselectForAllSegments && !selectedProduct.hasClass('isPreselectForAllSegments')) {
            self.displayMessagePopup('The product has been added to all segments. If you like, you switch to return flight view and remove it.');
            selectedProduct.addClass('isPreselectForAllSegments');
          }
        } else if (isConnectionFlight && isSelectConnectionFlightsOnly && typeof (isSelectConnectionFlightsOnly) === 'boolean') {
          var extraProduct = $j.extend({}, extras[extraId]);

          direction
            .each(function () {
              var thisFlightRph = $j(this).data('flight_rph'),
                newProduct = $j.extend({}, extraProduct, domData, {
                  qty: currentQty,
                  passenger_id: passenger_id,
                  direction: extra_type,
                  flight_rph: thisFlightRph,
                  category_type: 'extra',
                });

              passanger.flights[thisFlightRph] = passanger.flights[thisFlightRph] || {};
              passanger.flights[thisFlightRph][extraId] = newProduct;

              self.renderSelectedProductsByCategory(newProduct, $j(this), 'extra', passengerType);
            })
            .val(currentQty)
            .parents('.extras-item')
            .addClass('active-tile');

          if (+currentQty === 1 && +currentQty > +lastQty) {
            self.displayMessagePopup('The product has been added on both connected flights');
          }
        } else {
          var newProduct = $j.extend({
            qty: currentQty,
            passenger_id: passenger_id,
            direction: extra_type,
            flight_rph: flight_rph,
            passenger_rph: passenger_rph,
            category_type: 'extra'
          }, extras[extraId]);

          passanger.flights[flight_rph][extraId] = newProduct;

          self.renderSelectedProductsByCategory(newProduct, selectedProduct, 'extra', passengerType);

          if (isPreselectForAllSegments) {
            segments.first().addClass('isPreselectForAllSegments_changed');
          }
        }

        WT.googleAnalyticsEvents.sendEvent('Extras', 'extraSelect', extra_type);
      } else {
        if (domData.passenger_id && domData.passenger_id !== passenger_id) return;

        var productToDelete = passanger.flights[flight_rph][extraId];
        if (productToDelete['free_product_' + productToDelete.direction] === true && productToDelete.qty <= 1) {
          freeProductsHaveBeenRemoved = true;
        }

        if (isOnePriceForTrip) {
          segments
            .each(function () {
              var thisFlightRph = $j(this).data('flight_rph'),
                extraType = $j(this).data('extra_type');

              var directionPassenger = extraType === 'to' ? passangerTo : passangerFrom;
              directionPassenger.flights[thisFlightRph] && directionPassenger.flights[thisFlightRph][extraId] && delete (directionPassenger.flights[thisFlightRph][extraId]);
              directionPassenger.flights[thisFlightRph] && $j.isEmptyObject(directionPassenger.flights[thisFlightRph]) && delete directionPassenger.flights[thisFlightRph];
            })
            .prop('checked', false);
        } else if (isConnectionFlight && isSelectConnectionFlightsOnly) {
          direction
            .each(function () {
              var thisFlightRph = $j(this).data('flight_rph');

              passanger.flights[thisFlightRph] && passanger.flights[thisFlightRph][extraId] && delete (passanger.flights[thisFlightRph][extraId]);
              passanger.flights[thisFlightRph] && $j.isEmptyObject(passanger.flights[thisFlightRph]) && delete passanger.flights[thisFlightRph];
            })
            .val(0)
            .parents('.extras-item')
            .removeClass('active-tile');

          if (isLastPassenger) self.displayMessagePopup('The product has been removed on both connected flights');
        } else {
          delete passanger.flights[flight_rph][extraId];
          $j.isEmptyObject(passanger.flights[flight_rph]) && delete passanger.flights[flight_rph];
        }

        self.removeSelectedProductsByCategory(extraId, $j.isEmptyObject(passanger.flights[flight_rph]), 'extra');
        $j('.extra-remark-' + flight_rph + '-' + extraId).addClass('fa-comment-alt-dots').removeClass('fa-comment-alt-edit');

        WT.googleAnalyticsEvents.sendEvent('Extras', 'extraUnselect', extra_type);
      }
    });

    if (freeProductsHaveBeenRemoved) {
      self.showFreeProductRemovePopup();
    }

    WT.Summary.refresh();
  },
  showFreeProductRemovePopup: function () {
    this.displayMessagePopup('You are about to remove a product, which was included into your fare. You may add it back in the corresponding product category, before you proceed to check-out.');
  },
  onlyBothProductsSelectByPackage: function (data) {
    var step = $j(data.selector),
      rphData = data.rphData,
      id = data.id,
      product,
      packages = WT.ReservationData.packages,
      isLastPassenger = data.isLastPassenger,
      selectedData = data.selectedData,
      allProducts = step.find('.item-special').find('input[data-package_type=' + data.type + ']'),
      selectedProduct = step.find('#' + data.productType + id + '_flight' + rphData.flight_rph),
      isSelectConnectionFlightsOnly = selectedProduct.data('select_conn_flights_only'),
      isPreselectForAllSegments = selectedProduct.data('preselect_for_all_segments'),
      direction = step.find('input[value=' + id + ']').filter('input[data-package_type=' + data.type + ']'),
      segments = step.find('input[value=' + id + ']'),
      isConnectionFlight = direction.length > 1;

    if (isPreselectForAllSegments) {
      product = $j.extend({ category_type: 'package' }, data.products[id]);

      segments
        .each(function () {
          var thisFlightRph = $j(this).data('flight_rph'),
            direction = $j(this).data('package_type'),
            packageType = direction + '_packages',
            thisData = $j(this).parent().data();

          product.direction = direction;
          product.flight_rph = thisFlightRph;

          var newProduct = $j.extend({}, product, thisData);
          var directionPassenger = packages[packageType][data.passengerId];
          directionPassenger.flights = directionPassenger.flights || {};
          directionPassenger.flights[thisFlightRph] = newProduct;
        })
        .prop('checked', true)
        .addClass('select-both-flights');
    } else if (isConnectionFlight && isSelectConnectionFlightsOnly) {
      product = $j.extend({ category_type: 'package' }, data.products[id]);

      direction
        .each(function () {
          var thisFlightRph = $j(this).data('flight_rph'),
            thisData = $j(this).parent().data();

          selectedData.flights[thisFlightRph] = $j.extend({}, product, thisData);
        })
        .prop('checked', true)
        .addClass('select-both-flights');

      if (isLastPassenger) WT.SSR.displayMessagePopup('The product has been added on both connected flights');
    } else {
      isSelectConnectionFlightsOnly && allProducts
        .each(function () {
          var thisFlightRph = $j(this).data('flight_rph');
          selectedData.flights[thisFlightRph] && delete (selectedData.flights[thisFlightRph]);
        })
        .prop('checked', false)
        .removeClass('select-both-flights');

      selectedData.flights[rphData.flight_rph] = $j.extend(
        { category_type: 'package' },
        data.products[id],
        rphData
      );
      selectedProduct.prop('checked', true);
    }
  },
  displayMessagePopup: function (message) {
    var $modal = $j('#remind-select-product');

    $j('#reminder-text-select-product').text(Translator.translate(message));
    $modal.modal('show');
    $modal.find('.modal-backdrop').not('.in').remove();
  },
  preselectExtrasForDirection: function (extrasForDirection, direction, passId) {
    if (extrasForDirection && extrasForDirection.flights) {
      for (var flight_rph in extrasForDirection.flights) {
        var extras = extrasForDirection.flights[flight_rph];

        for (var product_id in extras) {
          var product = extras[product_id],
            type = product.category_type;

          if (type === 'configurable') {
            var $input = $j('.confifurable-item-' + product.product_id + '-flight' + flight_rph + direction)
              .find('input[type=radio]');

            $input.prop('checked', true);

            this.renderSelectedProductsByCategory(product, $input, type);
          } else {
            var $tile = $j('#' + direction + '_extra_' + product.product_id + '_' + flight_rph);

            $tile
              .addClass('active-tile')
              .find('.incrementing')
              .val(product.qty);

            this.renderSelectedProductsByCategory(product, $tile, 'extra');
          }
        }
      }
    }
  },
  preselectExtrasForPassengers: function () {
    var checked_passengers = $j(this.container_selector + ' .passenger-switcher input[type=checkbox]:checked'),
      tiles = $j(this.container_selector + ' .extras-item'),
      reservation_extras = WT.ReservationData.extras,
      self = this;

    reservation_extras.to_extras = reservation_extras.to_extras || {};
    reservation_extras.from_extras = reservation_extras.from_extras || {};

    tiles.removeClass('active-tile').find('.incrementing').val(0);
    $j('.configurable-product-input').prop('checked', false);
    $j('.in-package').removeClass('in-package');

    checked_passengers.each(function () {
      self.deselectExtrasFirst();
      var passenger_id = $j(this).data('entity_id'),
        extras_to_for_this = reservation_extras.to_extras[passenger_id],
        extras_from_for_this = reservation_extras.from_extras[passenger_id];

      self.preselectExtrasForDirection(extras_to_for_this, 'to', passenger_id);
      self.preselectExtrasForDirection(extras_from_for_this, 'from', passenger_id);
      self.inIncludedHidePackages(passenger_id, ['from', 'to'], self.container_selector);

      self.selectedPackageItems();
    });
  },
  preselectInsuranceForAllUsers: function () {
    var $insuranceFrom = $j('#single_package-from'),
      $insuranceTo = $j('#single_package-to'),
      $insuranceType = $insuranceFrom.data('insurance_selector');

    if ($insuranceType === 'yes' || $insuranceType === 'unselect') {
      $j('#step-ssr .passenger-checkbox, #step-ssr .select_all_passengers').trigger('click');
      $insuranceFrom.trigger('click');
      $insuranceTo.trigger('click');
    }
  },
  preselectFreeProductsForAllUsers: function () {
    $j('#step-ssr .passenger-checkbox, #step-ssr .select_all_passengers').trigger('click');

    var configurableFrom = $j('[data-configurable_type="from"][data-free_product_from="true"]');
    var configurableTo = $j('[data-configurable_type="to"][data-free_product_to="true"]');
    configurableFrom.trigger('click');
    configurableTo.trigger('click');

    var extraFrom = $j('[data-extra_type="from"][data-free_product_from="true"]');
    var extraTo = $j('[data-extra_type="to"][data-free_product_to="true"]');
    extraFrom.parents('.numbers-row').find('.inc').trigger('click');
    extraTo.parents('.numbers-row').find('.inc').trigger('click');
  },
  hideExtasForPackages: function () {
    var checked_passengers = $j(this.container_selector + ' .passenger-switcher input[type=checkbox]:checked'),
      self = this;

    checked_passengers.each(function () {
      var passenger_id = $j(this).data('entity_id');

      self.inIncludedHidePackages(passenger_id, ['from', 'to'], self.container_selector);
    });
  },
  inIncludedHidePackages: function (passengerId, direction, container) {
    var $inPackageProduct = $j(container).find('.item.in_package');

    if (!$inPackageProduct.length) return;

    $inPackageProduct.removeClass('in_package_active');

    direction.forEach(function (item) {
      var $passanger = $j('#' + item + '_packages' + passengerId);

      $inPackageProduct.each(function () {
        var flightRph = $j(this).data('flight_rph'),
          productId = $j(this).find('.incrementing').data('extra_id'),
          selectedPackage = $passanger.find('.in-package-' + productId + '-' + flightRph);

        if (selectedPackage.length) {
          $j(this).addClass('in_package_active');
        }
      })

    });
  },
  selectedPackageItems: function () {
    var items,
      options,
      productsId = [],
      reservationPackages = WT.ReservationData.packages;

    for (var direction in reservationPackages) {
      for (var userId in reservationPackages[direction]) {
        if (reservationPackages[direction][userId] && reservationPackages[direction][userId].flights) {
          for (var flight_rph in reservationPackages[direction][userId].flights) {
            options = reservationPackages[direction][userId].flights[flight_rph]['options'];
            if (typeof options === 'object' && !Array.isArray(options)) {
              for (var key1 in options) {
                items = options[key1]['items'];
                for (var key2 in items) {
                  productsId.push(items[key2]['product_id']);
                }
              }
            }
            (productsId.length > 0) && this.extrasItems(direction, productsId);
          }
        }
      }
    }
  },
  extrasItems: function (key, productsId) {
    var flightExtras = WT.ReservationData.flight.sortingSsrs.category_extras,
      listIds = Object.keys(flightExtras),
      localKey = key === 'from_packages' ? 'from' : 'to';

    listIds.forEach(function (id) {
      var product = flightExtras[id];

      if (productsId.indexOf(product.product_id) !== -1) {
        $j('[id ^= ' + localKey + '_extra_' + product.product_id + ']').addClass('in-package');
      }
    });
  },
  preselectPackagesForPassengers: function () {
    var checked_passengers = $j(this.container_selector + ' .passenger-switcher input[type=checkbox]:checked'),
      checkedPassengersCount = checked_passengers.length,
      reservation_packages = WT.ReservationData.packages,
      self = this;

    reservation_packages.to_packages = reservation_packages.to_packages || {};
    reservation_packages.from_packages = reservation_packages.from_packages || {};

    if (checkedPassengersCount === 1) {
      checked_passengers.each(function () {
        self.deselectPackagesFirst();
        var entity_id = $j(this).data().entity_id;

        reservation_packages && Object.keys(reservation_packages).forEach(function (direction) {
          var packagesForDirectionUser = reservation_packages[direction] && reservation_packages[direction];

          packagesForDirectionUser && Object.keys(packagesForDirectionUser).forEach(function (userId) {
            if (entity_id == userId) {
              var packageForUser = packagesForDirectionUser[userId].flights;
              packageForUser && Object.keys(packageForUser).forEach(function (flight_rph) {
                var selector = '#package' + packageForUser[flight_rph].product_id + '_flight' + flight_rph;
                $j(selector).prop('checked', true);
                $j(selector).data('chk', true);
              })
            }
          })
        });
      });
    } else {
      self.deselectPackagesFirst();
      var flatPackages = self.flatPackagePreparation(WT.ReservationData.packages);
      var packagesIds = (function (packages) {
        var result = {};
        packages.forEach(function (pac) {
          result[pac.product_id] = true;
        });
        return Object.keys(result);
      })(flatPackages);

      var flights = (function (packages) {
        var result = {};
        packages.forEach(function (pac) {
          result[pac.flight_rph] = true;
        });
        return Object.keys(result);
      })(flatPackages);

      var res = {};
      packagesIds.forEach(function (packageId) {
        flights.forEach(function (flightNum) {
          var count = flatPackages.filter(function (pac) {
            return (pac.product_id == packageId) && (pac.flight_rph == flightNum)
          }).length;

          (count == checkedPassengersCount) && (res[flightNum] = packageId);
        })

      });

      Object.keys(res).forEach(function (flight_rph) {
        var selector = '#package' + res[flight_rph] + '_flight' + flight_rph;
        $j(selector).prop('checked', true);
        $j(selector).data('chk', true);
      });
    }
  },
  deselectPackagesFirst: function () {
    $j('.category-products.package :radio').prop('checked', false);
    $j('.category-products.package :radio').data('chk', false);
  },
  deselectExtrasFirst: function () {
    $j(this.container_selector + ' .extras-item')
      .removeClass('active-tile')
      .find('.incrementing')
      .val(0);
    $j('.configurable-product-input').prop('checked', false);
    this.removeSelectedProductsByCategory();
  },
  renderSelectedProductsByCategory: function (product, $block, type, passengerType) {
    var $blockSelectedProducts = $block.parents('.category-products').find('.selected-products');

    if (passengerType && passengerType == 'INF') return;

    switch (type) {
      case 'extra': {
        var $selectedItems = $blockSelectedProducts.find('.items');

        $selectedItems.find('.extra-product-' + product.product_id).remove();
        var element = '<div class="selected-extra-product extra-product-' + product.product_id +
          '">' + product.name + '<strong> x' + product.qty + '</strong><i class="fas fa-check-circle"></i>' + '</div>';

        $j(element).appendTo($selectedItems);
        break;
      }
      case 'configurable': {
        var price = +product.special_price === -1 ? product.price_formatted : product.special_price_formatted,
          $selectedItem = $blockSelectedProducts.find('.selected-configurable-product'),
          element = '<div><span class="product-label">' + product.superAttribute.label +
            '</span><span class="product-price">' + price + '</span></div>';

        $selectedItem.empty();
        $j(element).appendTo($selectedItem);

        break;
      }
      case 'configurable_category': {
        var $selectedItem = $blockSelectedProducts.find('.selected-configurable-product'),
          element = '<div><div class="product-image" style="background-image: url(' + product.image + ')"></div>' +
            '<p class="product-name">' + product.name + '</p></div>';

        $selectedItem.empty();
        $j(element).appendTo($selectedItem);

        break;
      }
    }

    $blockSelectedProducts.addClass('selected');
  },
  removeSelectedProductsByCategory: function (productId, isEmpty, type, $selected) {
    switch (type) {
      case 'extra': {
        $j('.extra-product-' + productId)
          .each(function () {
            var $product = $j(this),
              $blockSelectedProducts = $product.parents('.selected-products');

            if (isEmpty || !$blockSelectedProducts.find('.items').children().length) {
              $blockSelectedProducts.removeClass('selected');
            }

            $product.remove();
          });
        break;
      }
      case 'configurable': {
        var $product = $j('.selected-configurable-product-' + productId),
          $blockSelectedProducts = $selected.parents('.category-products').find('.selected-products');

        if (isEmpty) {
          $blockSelectedProducts.removeClass('selected');
        }

        $product.remove();
        break;
      }
      default: {
        $j('.selected-products').removeClass('selected').find('.items').empty();
        break;
      }
    }
  },
  flatPackagePreparation: function (data) {
    var localData = $j.extend({}, data),
      returnedData = [];

    localData && Object.keys(localData).forEach(function (key) {
      var directionPackages = localData[key];

      Object.keys(directionPackages) && Object.keys(directionPackages).forEach(function (pasId) {
        for (var flight_rph in directionPackages[pasId].flights) {
          var passId = directionPackages[pasId].flights[flight_rph].passenger_id,
            passenger = {
              passenger_rph: WT.ReservationData.passengers.filter(function (pass) {
                return pass.entity_id == passId;
              })[0].rph
            };

          returnedData.push($j.extend({}, directionPackages[pasId].flights[flight_rph], passenger))
        }
      })
    });

    return returnedData.sort(function (a, b) {
      return a.flight_rph > b.flight_rph ? 1 : -1;
    });
  },
  flatExtrasPreparation: function (data) {
    var localData = $j.extend({}, data),
      returnedData = [];

    localData && Object.keys(localData).forEach(function (key) {
      var directionExtras = localData[key],
        userExtras = Object.keys(directionExtras);

      userExtras.length > 0 && userExtras.forEach(function (pasId) {
        var flights = directionExtras[pasId].flights;
        for (var flight_rph in flights) {
          var extrasIds = Object.keys(flights[flight_rph]);

          extrasIds.length > 0 && extrasIds.forEach(function (extraId) {
            var passId = flights[flight_rph][extraId].passenger_id;
            returnedData.push(
              $j.extend(
                {},
                flights[flight_rph][extraId],
                {
                  passenger_rph: WT.ReservationData.passengers.filter(function (pass) {
                    return pass.entity_id == passId;
                  })[0].rph
                }
              )
            )
          })
        }
      })
    });

    localData = returnedData.sort(function (a, b) {
      var result = 0;

      if (a.flight_rph > b.flight_rph) {
        result = 1;
      } else {
        result = -1;
      }
      return result;
    });

    return localData;
  },
  showEnableExtraProducts: function (listName, ssrs) {
    if (!ssrs.length) return;

    ssrs.forEach(function (ssr, index) {
      if ((ssr.type === 'category_extras') || ssr.type == 'configurable') {
        var title = ssr.data && ssr.data.title ? ssr.data.title.toLowerCase() : ssr.data.name.toLowerCase(),
          categoryId = ssr.type === 'category_extras' ? ssr.data.category_id : ssr.data.product_id;

        if (!listName.length && !index) {
          $j('.category-id-' + categoryId).trigger('click');
        }

        listName.forEach(function (name) {
          if (title === name.toLowerCase()) {
            $j('.category-id-' + categoryId).trigger('click');
          }
        });
      }
    });
  },
  hideEmptyCategoriesExtra: function () {
    $j('.category-products').find('.products-body').each(function () {
      var $content = $j(this).find('.products-content');

      if (!$content.children().length) {
        $content.parents('.category-products').hide();
      }
    });
  },
  getProductPriceForConnectedFlight: function (product, isPackage) {
    var isConnectionFlight = this.isConnectionFlight(WT.flights);

    if (isConnectionFlight && product.select_conn_flights_only && !product.price_doubled_conn_flights) {
      var currencyFormat = product.price_formatted.split(' '),
        price = product.price / 2,
        isSpecialPrice = product.special_price > 0,
        specialPrice = isSpecialPrice ? product.special_price / 2 : product.special_price;

      product.price = price;
      product.price_formatted = this.transformPrice(price, currencyFormat);
      product.special_price = specialPrice;
      product.special_price_formatted = isSpecialPrice
        ? this.transformPrice(specialPrice, currencyFormat)
        : product.special_price_formatted;
    } else if (isPackage) {
      product.price = (+product.price).toFixed(2);
      product.special_price = (+product.special_price || 0).toFixed(2);
    }

    return product;
  },
  getProductPriceForOnePriceForTrip: function (product, $segmentsCount) {
    var currencyFormat = product.price_formatted.split(' '),
      price = product.price / $segmentsCount,
      isSpecialPrice = product.special_price > 0,
      specialPrice = isSpecialPrice ? product.special_price / $segmentsCount : product.special_price;

    product.price = price;
    product.price_formatted = this.transformPrice(price, currencyFormat);
    product.special_price = specialPrice;
    product.special_price_formatted = isSpecialPrice
      ? this.transformPrice(specialPrice, currencyFormat)
      : product.special_price_formatted;

    return product;
  },
  transformPrice: function (price, currencyFormat) {
    var realPrice = '',
      separatorDecimal = ',',
      typeCurrency = parseFloat(currencyFormat[0]),
      currency = isNaN(typeCurrency) ? currencyFormat[0] : currencyFormat[1];

    if (!isNaN(typeCurrency)) {
      separatorDecimal = currencyFormat[0].indexOf(',') !== -1 ? ',' : '.';
      realPrice = price.toFixed(2) + ' ' + currency;
    } else {
      separatorDecimal = currencyFormat[1].indexOf(',') !== -1 ? ',' : '.';
      realPrice = currency + ' ' + price.toFixed(2);
    }

    return realPrice.replace('.', separatorDecimal);
  },
  isVisibleProductOnConnectedFlight: function ($directions) {
    var flightsList = [],
      uniqueDirection = $directions.filter(function () {
        var rph = $j(this).data('flight_rph'),
          isUniqueFlight = flightsList.indexOf(rph) === -1;

        if (isUniqueFlight) flightsList.push(rph);

        return isUniqueFlight;
      });

    return uniqueDirection.length > 1;
  },
  isConnectionFlight: function (flights) {
    var connectionFlights = flights.filter(function (flight) {
      return flight.flight_direction === 'from';
    });

    return connectionFlights.length > 1;
  },
  _inputNumberIncrements: function (container_selector) {
    var self = this;
    $j(container_selector + ' .button').on('click', function () {
      var $button = $j(this),
        $input = $button.parent().find('input'),
        oldValue = parseInt($input.val()),
        extraBuyLimit = $input.data('extra_buy_limit'),
        newVal,
        checked_passengers = $j(self.container_selector + ' .passenger-switcher input[type=checkbox]:checked');

      if (typeof extraBuyLimit !== 'object' && extraBuyLimit !== '') {
        extraBuyLimit = parseInt(JSON.parse(extraBuyLimit));
      }

      if ($button.text() == '+') {
        var limitExceeded = false;
        if (typeof extraBuyLimit === 'object') {
          checked_passengers.each(function () {
            var passengerRph = $j(this).data('passenger_rph');

            if (extraBuyLimit[passengerRph] < 1 || oldValue >= extraBuyLimit[passengerRph]) {
              limitExceeded = true;
            }
          });
        }

        if (extraBuyLimit === '' || (typeof extraBuyLimit === 'object' && !limitExceeded) || (typeof extraBuyLimit === 'number' && oldValue < extraBuyLimit)) {
          newVal = oldValue + 1;
        } else {
          newVal = oldValue;
        }
      } else {
        if (oldValue > 0) {
          newVal = oldValue - 1;
        } else {
          newVal = 0;
        }
      }

      $input.val(newVal).change();
    });
  },
};

var WT = WT || {};
WT.Passengers = {
  init: function (data) {
    this.activeTab = 'tab-passengers';
    this.forceCompactOnConnected(data);
    this.clearReservationDataForPassengers();
    this.createPassengersItems();
    if (WT.modify_flag == 'changename') {
      this.updateReservationDataPassengersFromBackendData(data);
      WT.Modify.passengerFormFillModifyChangeName(data);
      WT.Modify.updateReservationPricesModifyChangeName(data);
    }
    if (WT.modify_flag == 'updatedoc') {
      this.updateReservationDataPassengersFromBackendData(data);
      WT.Modify.passengerFormFillModifyDoc(data);
    }
    this.createPreselectDropdowns(data);
    this.refreshCopyFromSelect();
    this.refreshLinkInfantsSelect();
    this.bindFirstLastChanging();
    this.copyAction();
    this.showLoginModalImmediately();
    this.passengerLoginAction();
    this.preselectFormContactInfoFromLocalStorage();
    this.preselectDocCountry();
    this._proceedAsGuestClick();
    this.isIranian = WT.Config.isIranian;
    this.receiveFlights(data);
    this.spread = WT.Utiles.spread;
    this.pickersList = new Map();
    WT.Passengers.checkAdditionalForms();
    this.isIranian ? this.initPersianDatepicker() : this.initDatepicker();
    this.changeDatePickerRanges();
    WT.Utiles.latinValidation();
    this.windowResize();
    this.initPassengerModalForMobile();
    this.initActiveTab();
    this.renderOptionsByAssociatedAdult();
    WT.Passengers.preselectFormInfoFromBackendData(data, 'passenger', '0');
    WT.Passengers.preselectFormInfoFromBackendData(data, 'contactinfo');
    setTimeout(function () {
      WT.Passengers.preselectAddOnsCheckboxes();
    }, 600);
    this.initPinDataCheckbox(data);
  },
  receiveFlights: function (data) {
    WT.flights = [];
    if (!data.flights) return;
    data.flights.forEach(function (flight) {
      var localFlight = $j.extend({}, flight);
      WT.flights.push(localFlight);
    });
  },
  forceCompactOnConnected: function (data) {
    if (data.is_allowed_addons == false) {
      WT.Steps.backend_data.remove('packages');
      WT.Steps.backend_data.remove('extras');
      WT.Steps.backend_data.remove('seatselect');
      WT.Steps.init();
    }
  },
  preselectAddOnsCheckboxes: function () {
    var preselection = WT.Config.compactflowPreselectSteps;
    if (preselection) {
      var compact_flow_selects = $j('.steps-to-enable:visible');
      $j.each(compact_flow_selects, function () {
        var current_checkbox = $j(this);
        if ($j.inArray(current_checkbox.val(), preselection) > -1) {
          current_checkbox.prop('checked', true).change();
        }
      });
    }
  },
  createPreselectDropdowns: function (data) {
    var self = this;
    if (typeof data.passengers !== 'undefined') {
      var dataPassengers = data.passengers.passengers,
        $copyFrom = $j('.passenger-copyfrom-adult, .passenger-copyfrom-child, .passenger-copyfrom-infant');

      this.bindHandlersForSelectCopy($copyFrom);

      if (typeof dataPassengers != 'undefined') {
        dataPassengers.forEach(function (passenger, index) {
          var age = WT.Utiles._getArrayIndexByText(passenger.passenger_usertype, WT.ReservationData.passengerAgeTypes),
            $wrapper = $j('.passenger-copyfrom-' + age).find('.passenger-copyfrom-options');

          $wrapper
            .append($j('<div class="passenger-option" data-index="' + index + '"></div>')
              .html(passenger.passenger_firstname + ' ' + passenger.passenger_lastname));

          $j('.copyfrom-' + age + '-box').show();
        });
      };

      $copyFrom.find('.passenger-option').on('click', function () {
        var $this = $j(this),
          $row = $this.parent().parent();
        rowId = $row.data('passenger_id'),
          index = $this.data('index'),
          data = dataPassengers[index];

        $this.siblings().removeClass('active');
        $this.addClass('active');
        $row.trigger('blur')
          .find('.passenger-copyfrom-selected-value')
          .text(data.passenger_firstname + ' ' + data.passenger_lastname);
        $j('.user-desc-firstname' + rowId).text(data.passenger_firstname);
        $j('.user-desc-lastname' + rowId).text(data.passenger_lastname);
        self._preselectPassengerRow(rowId, data);
      });
    }
  },
  _preselectPassengerRow: function (row_id, data) {
    var contact_info = data,
      contact_box = $j('#passenger_' + row_id),
      user_inputs = contact_box.find('input[type=text]'),
      user_checkboxes = contact_box.find('input[type=checkbox]'),
      self = this,
      user_selects = contact_box.find('> .field select');
    if (contact_info !== null) {
      $j.each(user_selects, function () {
        var needle_id = $j(this).attr('id');
        if (typeof needle_id != 'undefined') {
          var str = '_' + row_id,
            backend_id = needle_id.replace(str, "");

          $j('#' + needle_id + ' option[value="' + contact_info[backend_id] + '"]').prop('selected', true).change();

          if (needle_id == 'passenger_country_id' + str && $j('#' + needle_id).length > 0) {
            self.preselectCountry('passenger_country_id' + str, contact_info[backend_id]);

            if ($j('#passenger_region' + str).length > 0) {
              var updator = new RegionUpdater('passenger_country_id' + str, 'passenger_region' + str, 'passenger_region_id' + str, WT.Config.regions, undefined, undefined);
            }

            if (typeof updator != 'undefined') updator.update();
          }
        }
      });

      $j.each(user_inputs, function () {
        var needle_id = $j(this).attr('id'),
          str = '_' + row_id,
          backend_id = needle_id.replace(str, ''),
          be_value = contact_info[backend_id];

        if (needle_id.indexOf('telephone') !== -1 || needle_id.indexOf('mobile') !== -1) {
          return $j('#' + needle_id).intlTelInput('setNumber', be_value || '').change();
        }

        $j('#' + needle_id).val(backend_id == 'passenger_birthdate' ? self.validateCurrentFormatDate(be_value) : be_value).change();
      });

      $j.each(user_checkboxes, function () {
        var needle_id = $j(this).attr('id'),
          str = '_' + row_id,
          backend_id = needle_id.replace(str, '');
        if (contact_info[needle_id]) $j('#' + backend_id).prop('checked', 'checked');
      });

      self.preselectDataByDocsInfo(data, row_id);
      WT.googleAnalyticsEvents.sendEvent('Passengers', 'preselectFields', 'fromPrevious');
    }
  },
  preselectDataByDocsInfo: function (data, passengerId) {
    var additionalInfo = data.passenger_additional_data,
      passengerPrefix = '[' + passengerId + ']';

    if (additionalInfo && additionalInfo.docx) {
      var documentTypes = ['docs', 'doco', 'docid', 'doca'],
        self = this;

      documentTypes.forEach(function (type) {
        var inputsData = WT.Utiles.getMappingByDocumentForm(type),
          docsInfo = additionalInfo.docx[type];

        if (!inputsData || !docsInfo) return;

        inputsData.forEach(function (input) {
          var inputName = input.name + passengerPrefix,
            key = input.value,
            value = docsInfo[key],
            $element = $j(input.element + '[name="' + inputName + '"]')

          switch (input.type) {
            case 'select': {
              $element.find('option[value="' + value + '"]').prop('selected', true).change();

              break;
            }
            case 'input': {
              $element.val(value).change();

              break;
            }
            case 'country': {
              self.preselectCountry('', value, $element);

              break;
            }
            case 'date': {
              if (!value) return;

              var formatDate = moment(value.date || '').format(WT.Options.dateFormat);
              $element.val(formatDate);

              break;
            }
          }
        })
      });
    } else {
      $j('input[name="docs_number' + passengerPrefix + '"]').val('').change();
      $j('input[name="docid_number' + passengerPrefix + '"]').val('').change();
    }
  },
  updateReservationDataPassengersFromBackendData: function (data) {
    /* used on step packages for refreshing passenger switcher from backend response, which comes with user's entity_id*/
    if (typeof data.passengers !== 'undefined') {
      var data_passengers = data.passengers.passengers,
        flight = WT.ReservationData.flight;
      flight.listUserType = [];

      if (typeof data_passengers != 'undefined') {

        for (var $i = 0; $i < WT.ReservationData.passengers.length; $i++) {
          var item = WT.ReservationData.passengers[$i];

          for (var $z = 0; $z < data_passengers.length; $z++) {
            var userType = data_passengers[$z].passenger_usertype;
            if (
              (item.passenger_usertype == userType || item.age_code == userType) &&
              data_passengers[$z].used === undefined
            ) {
              var idsPassengersReservedSeats = data.reservedSeats ?
                WT.SeatSelect.viewAssignedSeats(data).idsPassengersReservedSeats :
                null;

              item.firstname = data_passengers[$z].passenger_firstname;
              item.lastname = data_passengers[$z].passenger_lastname;
              item.age_code = data_passengers[$z].passenger_usertype;
              item.is_umnr = data_passengers[$z].passenger_is_umnr;

              var age_label = WT.Utiles._getArrayIndexByText(item.age_code, WT.ReservationData.passengerAgeTypes);

              item.rph = data_passengers[$z].passenger_rph;
              item.age = age_label;
              item.age_label = Translator.translate(age_label);
              item.entity_id = data_passengers[$z].entity_id;
              item.id = $z;
              data_passengers[$z].used = 'true';

              if (idsPassengersReservedSeats && WT.modify_flag === 'seat') {
                item.isReservedSeat = (idsPassengersReservedSeats.indexOf(item.entity_id) !== -1);
              }

              if (flight.listUserType.indexOf(userType) === -1) flight.listUserType.push(userType);

              break;
            }

          }

        }
      }
    }
  },
  preselectFormContactInfoFromLocalStorage: function () {
    var contact_info = JSON.parse(localStorage.getItem('remember_contact')),
      contact_box = $j('#contactinfo'),
      create_account = $j('#create_account'),
      user_inputs = contact_box.find('input[type=text]'),
      user_checkboxes = contact_box.find('input[type=checkbox]'),
      user_selects = contact_box.find('select');

    if (contact_info !== null) {
      create_account.prop('checked', false);
      $j.each(user_selects, function () {
        var needle_id = $j(this).attr('id');
        $j('#' + needle_id + ' option[value="' + contact_info[needle_id] + '"]').prop('selected', true).change();

        if (needle_id == 'contact_country_id' && $j('#' + needle_id).length > 0) {
          WT.Passengers.preselectCountry('contact_country_id', contact_info[needle_id]);

          if ($j('#contact_region_id').length > 0) {
            var updator = new RegionUpdater('contact_country_id', 'contact_region', 'contact_region_id', WT.Config.regions, undefined, undefined);
          }

          if (typeof updator != 'undefined') updator.update();
        }
      });

      $j.each(user_inputs, function () {
        var needle_id = $j(this).attr('id');

        if (needle_id.indexOf('telephone') !== -1 || needle_id.indexOf('mobile') !== -1) {
          $j('#' + needle_id).intlTelInput('setNumber', contact_info[needle_id] || '').change();
        } else {
          $j('#' + needle_id).val(contact_info[needle_id]);
        }
      });

      $j.each(user_checkboxes, function () {
        var needle_id = $j(this).attr('id');
        if (contact_info[needle_id]) $j('#' + needle_id).prop('checked', 'checked');
      });
    }
  },
  preselectFormInfoFromBackendData: function (data, form_box, passenger_id) {
    var self = this;

    if (typeof data.passengers !== 'undefined') {
      var contact_info = data.passengers.contact,
        replace_id = '_' + passenger_id,
        form_name = passenger_id ? form_box + replace_id : form_box,
        $form = $j('#' + form_name),
        user_inputs = $form.find('input[type=text]'),
        user_checkboxes = $form.find('input[type=checkbox]'),
        user_selects = $form.find('select');

      if (contact_info !== null && typeof contact_info !== 'undefined') {
        $j.each(user_selects, function () {
          var id = $j(this).attr('id'),
            needle_id = validateIdForDataFormContact(id);

          if (!needle_id) return;
          if (contact_info[needle_id] == 0 && id === 'passenger_region_id_0' && contact_info.contact_region) {
            $j('#' + id).hide();
            $j('#passenger_region_0').show();
            return;
          };

          $j('#' + id + ' option[value="' + contact_info[needle_id] + '"]').prop('selected', true).change();

          if (id.indexOf('country_id') !== -1) {
            WT.Passengers.preselectCountry(id, contact_info[needle_id]);
          }
        });

        $j.each(user_inputs, function () {
          var id = $j(this).attr('id'),
            needle_id = validateIdForDataFormContact(id),
            be_value = contact_info[needle_id];

          if (!needle_id) return;

          if (id.indexOf('telephone') !== -1 || id.indexOf('mobile') !== -1) {
            return $j('#' + id).intlTelInput('setNumber', be_value || '').change();
          }

          $j('#' + id).val((needle_id == 'contact_birthdate') ? self.validateCurrentFormatDate(be_value) : be_value).change();
        });

        $j.each(user_checkboxes, function () {
          var id = $j(this).attr('id'),
            needle_id = validateIdForDataFormContact(id);

          if (!needle_id) return;

          if (contact_info[needle_id]) $j('#' + id).prop('checked', 'checked');
        });

        if (passenger_id === '0' && contact_info.contact_ffp_documents) {
          self.preselectDataByDocsInfo({
            passenger_additional_data: {
              docx: contact_info.contact_ffp_documents
            }
          }, 0);
        }
      }
      function validateIdForDataFormContact(id) {
        if (id === 'passenger_day_0') {
          id = 'passenger_birthdate_0';
        }

        return passenger_id && id ?
          id.replace(replace_id, '').replace('passenger', 'contact') :
          id;
      }
    }
  },
  preselectDocCountry: function () {
    $j(document).on('change', '.passenger .field-country .country-pp', function (e) {
      var $countrySelect = $j(this);
      var $passenger = $countrySelect.parents('.input-box');

      $passenger.find('.input-country').countrySelect('selectCountry', $countrySelect.val());
    });
  },
  validateCurrentFormatDate: function (date) {
    var correctDate = '';

    if (moment(date).isValid() && moment(date).format('Y') > 1900) {
      correctDate = moment(date).format(WT.Options.dateFormat.toUpperCase());
    }

    return correctDate;
  },
  clearReservationDataForPassengers: function () {
    for (var $i = 0; $i < WT.ReservationData.passengers.length; $i++) {
      delete WT.ReservationData.passengers[$i].firstname;
      delete WT.ReservationData.passengers[$i].lastname;
    }
  },
  showDOBforStudentsSeniors: function () {
    var data = JSON.parse(localStorage.getItem('selected'));

    if (data === null) {
      return;
    }
    var classes = $j.map(WT.ReservationData['classes'], function (val) {
      return val;
    });
    var student_matched = false;
    var senior_matched = false;

    if (data['grouptype'] === 'student') {
      student_matched = true;
    } else if (data['grouptype'] === 'senior') {
      senior_matched = true;
    } else {
      for (var i = 0; i < WT.Config.passengersStudentPriceGroups.length; i++) {
        if ($j.inArray(WT.Config.passengersStudentPriceGroups[i], classes) > -1) {
          student_matched = true;
          break;
        }
      }
      for (i = 0; i < WT.Config.passengersSeniorPriceGroups.length; i++) {
        if ($j.inArray(WT.Config.passengersSeniorPriceGroups[i], classes) > -1) {
          senior_matched = true;
          break;
        }
      }
    }

    if (student_matched === true) return 'verify_student';
    if (senior_matched === true) return 'verify_senior';
  },
  appendDobType: function (passenger) {
    var groupType = $j("input[name^='grouptype']:checked").val();
    var isAdult = passenger.age === 'adult';
    var isSenior = groupType === 'senior';
    var isStudent = groupType === 'student';

    if (isAdult && isSenior) {
      passenger.dobtype = 'senior';
    } else if (isAdult && isStudent) {
      passenger.dobtype = 'student';
    } else if (isAdult) {
      passenger.dobtype = 'adult';
    } else {
      passenger.dobtype = passenger.age;
    }
    passenger.age_type = passenger.age;
  },
  createPassengersItems: function () {
    var source = WT.Templates.passenger_form,
      template = Handlebars.compile(source),
      result = '';
    for (var $i = 0; $i < WT.ReservationData.passengers.length; $i++) {
      WT.ReservationData.passengers[$i].modify_flag = WT.modify_flag;
      this.appendDobType(WT.ReservationData.passengers[$i]);
      result += template(WT.ReservationData.passengers[$i]);
    }
    $j('#passengerDetailRows').html(result);
    for ($i = 0; $i < WT.ReservationData.passengers.length; $i++) {
      if ($j("#passenger_country_id_" + $i).length > 0 && $j("#passenger_region_" + $i).length > 0) {
        new RegionUpdater("passenger_country_id_" + $i, "passenger_region_" + $i, "passenger_region_id_" + $i, WT.Config.regions, undefined, undefined);
      }
      $j('.passenger').WT_phone_prefixes('> .field .country-pp', '> .field .phone-pp', '> .field .mobile-pp');
    }
  },
  refreshLinkInfantsSelect: function () {
    var selectLinkInfants = $j('.link_infants');
    selectLinkInfants.html('');
    for (var $i = 0; $i < WT.ReservationData.passengers.length; $i++) {
      var title = $j('#passenger_firstname_' + $i).val() + ' ' + $j('#passenger_lastname_' + $i).val();
      if (title == ' ') title = Translator.translate('Passenger') + ' ' + ($i + 1);
      if (WT.ReservationData.passengers[$i].age == 'adult') selectLinkInfants.append($j("<option/>").val($i).html(title));
    }
  },
  refreshCopyFromSelect: function () {
    var selectCopyFrom = $j('#contactinfo-copyfrom'),
      divCopyFrom = $j('.copyfrom-ctc-box'),
      $options = selectCopyFrom.find('.passenger-copyfrom-options'),
      hideCopyFrom = true;

    this.bindHandlersForSelectCopy(selectCopyFrom);
    divCopyFrom.show();

    WT.ReservationData.passengers.forEach(function (passenger, i) {
      if (passenger.age === 'adult') {
        var title = $j('#passenger_firstname_' + i).val() + ' ' + $j('#passenger_lastname_' + i).val();

        hideCopyFrom = false;

        if (title === ' ') title = Translator.translate('Passenger') + ' ' + (i + 1);

        $options
          .append($j('<div class="passenger-option" data-index="' + i + '"></div>')
            .html(title));
      }
    });

    this.copyAction();

    if (hideCopyFrom) {
      divCopyFrom.hide();
    }
  },
  bindFirstLastChanging: function () {
    var self = this;

    $j('#passengers').on('change', "input[name^='passenger_lastname']", function () {
      var user_id = $j(this).closest('.passenger ').data('user_id'),
        value = $j(this).val(),
        defaultValue = $j(".user-desc-firstname" + user_id).text() === Translator.translate('Passenger') ?
          user_id + 1 : '';

      self.refreshCopyFromSelect();
      self.refreshLinkInfantsSelect();
      WT.ReservationData.passengers[user_id]['lastname'] = value;

      $j('.user-desc-lastname' + user_id).text(value || defaultValue);
      WT.Summary.refresh();
      self.renderOptionsByAssociatedAdult();
    });

    $j('#passengers').on('change', "input[name^='passenger_firstname']", function () {
      var user_id = $j(this).closest('.passenger ').data('user_id'),
        value = $j(this).val();

      self.refreshCopyFromSelect();
      self.refreshLinkInfantsSelect();
      WT.ReservationData.passengers[user_id]['firstname'] = value;
      $j('.user-desc-firstname' + user_id).text(value || Translator.translate('Passenger'));
      $j("input[name='passenger_lastname[" + user_id + "]']").trigger('change');
      WT.Summary.refresh();
      self.renderOptionsByAssociatedAdult();
    });

    $j('#passengers').on('change', "select[name^='passenger_title']", function () {
      var user_id = $j(this).closest('.passenger ').data('user_id');
      self.refreshCopyFromSelect();
      self.refreshLinkInfantsSelect();
      WT.ReservationData.passengers[user_id]['title'] = $j(this).val().replace('.', '');
      WT.Summary.refresh();
    });

    $j('#passengers').on('change', "input[name^='passenger_email']", function () {
      var user_id = $j(this).closest('.passenger ').data('user_id');
      WT.ReservationData.passengers[user_id]['email'] = $j(this).val() || '';
      WT.Summary.refresh();
    });

    $j('#passengers').on('change', "input[name*='_birthdate']", function () {
      var user_id = $j(this).closest('.passenger ').data('user_id'),
        date = moment($j(this).val(), WT.Utiles.getDateFormatForMask(WT.Config.isChinese).toUpperCase()),
        type = $j(this).data('type'),
        arrIds = ['year', 'month', 'day'],
        msDate = new Date(date),
        arrDate = [msDate.getFullYear(), msDate.getMonth() + 1, msDate.getDate()];

      WT.ReservationData.passengers[user_id]['birthdate'] = date.format('YYYY-MM-DD');
      arrIds.forEach(function (id, index) {
        $j('#' + type + '_' + id + '_' + user_id).val(arrDate[index]);
      });
    });

    self.bindActionByMobilePhone();
    WT.Utiles.handlerCountryInput(WT.Options.countries, WT.Options.defaultCountry, WT.Options.topCountries);

    $j("input[name^='passenger_firstname'], input[name^='passenger_lastname'], select[name^='passenger_title']").change();
  },
  bindActionByMobilePhone: function () {
    var localizedCountries = WT.Utiles.getLocalizedCountriesWithTheme
      ? WT.Utiles.getLocalizedCountriesWithTheme()
      : {};

    $j('.mobile-pp, .phone-pp')
      .intlTelInput({
        separateDialCode: true,
        preferredCountries: WT.Options.topCountries,
        initialCountry: WT.Options.defaultCountry,
        localizedCountries: localizedCountries
      })
      .on('input', function () {
        var currentVal = $j(this).val().trim(),
          regexp = /^[0-9]+$/,
          errorMsg = 'Please use only digital (0-9) in this field.',
          $tooltip = $j(this).parent('.intl-tel-input').siblings('.validation-error-tooltip');

        if (currentVal && !(regexp.test(currentVal))) {
          var listDigits = currentVal.match(/\d+/g) || [];

          $j(this).val(listDigits.join(''));
          $tooltip.text(Translator.translate(errorMsg)).show();
        } else {
          $tooltip.hide();
        }
      })
      .on('change', WT.Utiles.onChangePhone)
      .each(function () {
        this.addEventListener('countrychange', WT.Utiles.onChangePhone)
      });
  },
  copyAction: function () {
    $j('#contactinfo-copyfrom').find('.passenger-option').on('click', function () {
      var $this = $j(this),
        username = $this.text(),
        $select = $this.parent().parent();
      user_id = $this.data('index'),
        passenger_box = $j("#passenger_" + user_id + ' > .field'),
        user_inputs = passenger_box.find('input[type=text]'),
        user_selects = passenger_box.find('select');

      WT.googleAnalyticsEvents.sendEvent('Passengers', 'preselectContact', 'fromPassengers');

      $this.siblings().removeClass('active');
      $this.addClass('active');
      $select.trigger('blur')
        .find('.passenger-copyfrom-selected-value')
        .text(username);

      $j.each(user_selects, function () {
        var needle_id = getContactId($j(this).attr('id'));
        $j('#' + needle_id + ' option[value="' + $j(this).val() + '"]').prop('selected', true).change();

        if (needle_id == 'contact_country_id' && $j('#' + needle_id).length > 0) {
          WT.Passengers.preselectCountry('contact_country_id', $j(this).val());

          if ($j('#contact_region').length > 0) {
            var updator = new RegionUpdater('contact_country_id', 'contact_region', 'contact_region_id', WT.Config.regions, undefined, undefined);
          }

          if (typeof updator != 'undefined') updator.update();
        }
      });

      $j.each(user_inputs, function () {
        var needle_id = getContactId($j(this).attr('id'));
        if (needle_id.indexOf('telephone') !== -1 || needle_id.indexOf('mobile') !== -1) {
          var fullPhoneNumber = $j(this).parent().parent().find('.full-telephone-input').val() || $j(this).val();

          return $j('#' + needle_id).intlTelInput('setNumber', fullPhoneNumber || '').change();
        }

        $j('#' + needle_id).val($j(this).val());
      });

    });

    function getContactId(passengerElId) {
      return passengerElId.substr(0, passengerElId.lastIndexOf("_")).replace("passenger", "contact");
    }
  },
  bindHandlersForSelectCopy: function ($select, element) {
    var className = element || '.passenger-copyfrom-options';

    $select
      .off()
      .on('focus', function () {
        if ($select.hasClass('readonly')) {
          return false;
        }

        $j(this).addClass('active').find(className).show(300);
      })
      .on('blur', function () {
        if ($select.hasClass('readonly')) {
          return false;
        }

        $j(this).removeClass('active').find(className).hide(300);
      });

    if (!element) {
      $select.children().html('');
    }

    $select
      .find('i')
      .on('click', function () {
        if ($select.hasClass('readonly')) {
          return false;
        }

        if ($j(this).parent().hasClass('active')) {
          $j(this).parent().trigger('blur');
        }
      });
  },
  _getPassengerAge: function (birth_month, birth_day, birth_year, departureDateTime) {
    return moment(departureDateTime).diff(birth_year + '-' + birth_month + '-' + birth_day, 'years');
  },
  _validateLinkedInfants: function () {
    var result;
    var select_first = $j('.link_infants:first');
    var val = select_first.val();
    var i = select_first.index();
    $j('select.link_infants:not(:eq(' + i + '))').each(function () {
      if ($j(this).val() === val) {
        result = 'error';
      }
    });

    if (result) {
      alert(Translator.translate('Infants should be linked to different adults'));
      return result;
    }

  },
  changeDatePickerRanges: function () {
    var departureDateTimeString = WT.ReservationData.flight.from_departure_datetime_origin,
      departureDateTime = new Date(departureDateTimeString),
      self = this,
      ageType = $j('[id*=passenger_age_type]');

    $j(ageType).each(function () {
      var passengerType = $j(this).val(),
        datePickerInput = $j(this).parent().find(':input[id*=birthdate]');

      if (passengerType == 'infant') {
        var minInfantAge = WT.Config.passengersMinInfantAge,
          infantStartDate = new Date(moment(departureDateTime).subtract(WT.Config.passengersMaxInfantAge, 'years').format()),
          infantEndDate = new Date(moment(departureDateTime).subtract(minInfantAge, 'days').format());
        self.updateBirthdayDatePicker(datePickerInput, infantStartDate, infantEndDate)
      }

      if (passengerType == 'child') {
        var minChildAge = WT.Config.isAllowInfantAgeForChild
          ? 0
          : WT.Config.passengersMaxInfantAge;

        var currentStartDate = new Date(moment(departureDateTime).subtract(WT.Config.passengersMaxChildAge, 'years').format()),
          currentEndDate = new Date(moment(departureDateTime).subtract(minChildAge, 'years').format());
        self.updateBirthdayDatePicker(datePickerInput, currentStartDate, currentEndDate);
      }

      if (passengerType == 'adult') {
        var minAdultAge,
          currentStartDate = null,
          yearData = $j(window).width() < WT.Config.maxWidthMobile
            ? { startYear: -6, endYear: 8, showYear: 15, diffYear: 30 }
            : { startYear: -14, endYear: 15, showYear: 30, diffYear: 30 };

        if (WT.Config.childAgeForAdult) {
          minAdultAge = WT.Config.passengersMaxInfantAge;
        } else {
          minAdultAge = WT.Config.passengersMaxChildAge;
        }

        var currentEndDate = new Date(moment(departureDateTime).subtract(minAdultAge, 'years').format());

        if (WT.Passengers.showDOBforStudentsSeniors() === 'verify_student') {
          currentStartDate = new Date(moment(departureDateTime).subtract(WT.Config.passengersMaxStudentAge, 'years').format());
          currentEndDate = new Date(moment(departureDateTime).subtract(WT.Config.passengersMinStudentAge, 'years').format());
        } else if (WT.Passengers.showDOBforStudentsSeniors() === 'verify_senior') {
          currentEndDate = new Date(moment(departureDateTime).subtract(WT.Config.passengersMinSeniorAge, 'years').format());
        }

        self.updateBirthdayDatePicker(datePickerInput, currentStartDate, currentEndDate, yearData);
      }
    });
  },
  updateBirthdayDatePicker: function (datePicker, startDate, endDate, yearData) {
    if (!datePicker) return;
    var inputId = datePicker.attr('id');
    var pPicker = this.pickersList.get(inputId);

    if (startDate) {
      datePicker.datepickerDate('setStartDate', startDate);

      this.filterForPersianPickerDates(inputId, startDate)
    }

    if (endDate) {
      datePicker.datepickerDate('setEndDate', endDate);
      if (!WT.modify_flag) {
        datePicker.val('');
      }

      this.filterForPersianPickerDates(inputId, endDate, true)
    }

    if (yearData) {
      datePicker.datepickerDate('setYearData', yearData)
    }

    $j('.table-days tr td').removeClass('selected');
    if (this.isIranian) pPicker.hide();
    datePicker.siblings().val('')
  },
  checkUniqueMobilePhoneByEachPassenger: function () {
    var $passengers = $j('#passengers').find('.passenger'),
      listMobilePhones = [];

    $passengers.each(function () {
      var $passenger = $j(this),
        userId = $passenger.data('user_id'),
        $mobileInput = $j(this).find('input[name="passenger_mobile[' + userId + ']"]');

      if ($mobileInput && $mobileInput.length && $mobileInput.val()) {
        listMobilePhones.push($mobileInput.val());
      }
    });

    var uniqueListMobilePhones = listMobilePhones.filter(function (value, index) {
      return listMobilePhones.indexOf(value) === index;
    });

    return uniqueListMobilePhones.length === listMobilePhones.length;
  },
  checkPassengerAge: function () {
    var $adultPassengers = $j('#passengers').find('.passenger.ADT'),
      $dobs = $adultPassengers.find('[id*=passenger_birthdate]'),
      result = true;

    if (!$dobs.length) $dobs = $adultPassengers.find('[id*=docs_document_birthdate]');

    if (!$dobs.length) return result;

    for (var i = 0; i < $dobs.length; i++) {
      var date = $j($dobs[i]).val(),
        dateFormat = WT.Utiles.getDateFormatForMask(WT.Config.isChinese);

      result = new Date(moment(new Date()).subtract(18, 'year')) > new Date(moment(date, dateFormat.toUpperCase()))

      if (result) break;
    }

    return result;
  },
  filterForPersianPickerDates: function (inputId, dateFilter, isMaxDate) {
    if (!this.isIranian) return;

    var pPicker = this.pickersList.get(inputId),
      opts = pPicker.options;

    $j('#plotId .table-days tr td').removeClass('selected');
    pPicker.options = this.spread(opts, {
      checkYear: function (y) {
        var result = true;

        if (new persianDate([y]).toCalendar('gregorian').year() !== moment(dateFilter).year()) {
          result = new persianDate([y]).toCalendar('gregorian').year() < moment(dateFilter).year();
          result = isMaxDate ? result : !result;
        }

        return result;
      }
    })

    if (isMaxDate) {
      pPicker.options.maxDate = new persianDate(dateFilter).valueOf();
      pPicker.setDate(dateFilter.valueOf());
    } else {
      pPicker.options.minDate = new persianDate(dateFilter).valueOf();
    };
  },
  _validatePassengerAges: function () {
    var self = this,
      errorCount = 0,
      adults,
      inputMask = WT.Options.dateFormat.replace(/\w/g, '_'),
      departureDateTimeString = WT.ReservationData.flight.from_departure_datetime_origin,
      departureDateTime = new Date(departureDateTimeString);

    $j.each($j('.passenger'), function () {
      var container = $j(this),
        message = '',
        month,
        day,
        year,
        dob = $j('[id*=passenger_birthdate]', container).val() || $j('[id*=docs_document_birthdate]', container).val();

      if (dob == inputMask) $j('[id*=passenger_birthdate]', container).val('');

      var currentDate = WT.Config.isChinese ? moment(dob, WT.Utiles.getDateFormatForMask(true)) : moment(dob, WT.Options.dateFormat.toUpperCase());

      if (dob && currentDate.isValid()) {
        month = currentDate.format('M');
        day = currentDate.format('D');
        year = currentDate.format('Y');
      } else {
        message = dob ? Translator.translate('Date format not valid') : '';
      }

      var age_type = $j('[id*=passenger_age_type]', container).val(),
        dobtype = $j('[id*=passenger_dobtype]', container).val(),
        age_years = (self._getPassengerAge(month, day, year, departureDateTime)),
        year_el = $j('[id^=passenger_birthdate]', container),
        is_umnr = $j('[id*=passenger_is_umnr]', container).val(),
        selected = JSON.parse(localStorage.getItem('selected'));

      if (year_el.offset() === undefined) {
        year_el = $j('[id^=docs_document_birthdate]', container);
      }

      if (selected != null) {
        adults = +selected.numadult;
      } else {
        adults = 0;
      }

      var isDayEmpty = day === '' || day === undefined;
      var isMonthEmpty = month === '' || month === undefined;
      var isYearEmpty = year === '' || year === undefined || year < 1900;
      var isDateEmpty = isDayEmpty && isMonthEmpty && isYearEmpty;
      var validate = !!WT.Config.validateAge[dobtype] || !!WT.Config.validateAge[age_type] || !!WT.Config.validateAge[age_years];

      year_el.removeClass('custom-validation-failed');
      $j('.advice', container).remove();

      if (!validate || !year_el.length) {
        return;
      }

      isDateEmpty = isDayEmpty || isMonthEmpty || isYearEmpty;

      if (isDateEmpty) {
        message = Translator.translate('Please, choose correct date');
      }

      if (age_type === 'infant' && age_years >= WT.Config.passengersMaxInfantAge) {
        message = Translator.translate('Maximum age for infant - ') + WT.Config.passengersMaxInfantAge + Translator.translate(' years.');
      }

      if (age_type === 'infant' && age_years < 0) {
        message = Translator.translate('Please, choose correct date');
      }

      var minChildAge = WT.Config.isAllowInfantAgeForChild
        ? 0
        : WT.Config.passengersMaxInfantAge;

      if (WT.modify_flag === 'changename' && age_type === 'child') {
        if (is_umnr === 'true') {
          if (age_years < WT.Options.minUmnrAge || age_years >= WT.Options.maxUmnrAge) {
            message = Translator.translate('Child age should be from ') +
              (WT.Options.minUmnrAge) + ' ' +
              Translator.translate('to') + ' ' +
              (WT.Options.maxUmnrAge - 1) +
              Translator.translate(' years.');
          }
        } else {
          if (age_years >= WT.Config.passengersMaxChildAge || age_years < minChildAge) {
            message = Translator.translate('Child age should be from ') +
              minChildAge + ' ' +
              Translator.translate('to') + ' ' +
              (WT.Config.passengersMaxChildAge - 1) +
              Translator.translate(' years.');
          }
        }
      } else {
        if (age_type === 'child' && adults && (age_years >= WT.Config.passengersMaxChildAge || age_years < minChildAge)) {
          message = Translator.translate('Child age should be from ') + minChildAge + ' ' + Translator.translate('to') + ' ' + (WT.Config.passengersMaxChildAge - 1) + Translator.translate(' years.');
        }

        if (age_type === 'child' && !adults && (age_years < WT.Options.minUmnrAge || age_years >= WT.Options.maxUmnrAge)) {
          message = Translator.translate('Child age should be from ') + (WT.Options.minUmnrAge) + ' ' + Translator.translate('to') + ' ' + (WT.Options.maxUmnrAge - 1) + Translator.translate(' years.');
        }
      }

      if (age_type === 'adult') {
        var minAdultAge;

        if (WT.Config.childAgeForAdult) {
          minAdultAge = WT.Config.passengersMaxInfantAge;
        } else {
          minAdultAge = WT.Config.passengersMaxChildAge;
        }

        if (WT.Passengers.showDOBforStudentsSeniors() === 'verify_student') {
          if (age_years < (WT.Config.passengersMinStudentAge) || age_years > (WT.Config.passengersMaxStudentAge)) {
            message = Translator.translate('Student age should be from ') + (WT.Config.passengersMinStudentAge) + ' ' + Translator.translate('to') + ' ' + WT.Config.passengersMaxStudentAge + Translator.translate(' years.');
          }
        } else if (WT.Passengers.showDOBforStudentsSeniors() === 'verify_senior') {
          if (age_years < (WT.Config.passengersMinSeniorAge)) {
            message = Translator.translate('Senior age should be from ') + (WT.Config.passengersMinSeniorAge) + Translator.translate(' years.');
          }
        } else if (age_years < minAdultAge) {
          message = Translator.translate('Minimum age for adult - ') + minAdultAge + Translator.translate(' years.');
        }
      }

      if (message !== '') {
        if (year_el.length) {
          year_el.addClass('custom-validation-failed');
          $j('<div class="validation-advice advice">' + message + '</div>').insertAfter(year_el);
          $j('html, body').animate({
            scrollTop: year_el.offset().top - 70
          }, 200);
        }
        errorCount++;
      } else {
        year_el.removeClass('custom-validation-failed');
        $j('.advice', container).remove();
      }
    });
    if (errorCount > 0) return 'error';
  },
  additionalValidatePassengerDate: function () {
    var $formPassengers = $j('#form-passengers');
    $dateInputs = $formPassengers.find('input[data-toggle="datepicker"], input[data-toggle="datepicker-expiry"]');

    $dateInputs.each(function () {
      var $this = $j(this);

      if (!$this.hasClass('required-entry') || $this.hasClass('validation-failed')) return;

      if (!$this.val()) {
        $this
          .addClass('validation-failed')
          .parent()
          .find('.validation-advice')
          .show();
      } else {
        $this
          .removeClass('validation-failed')
          .parent()
          .find('.validation-advice')
          .hide();
      }
    });

    return true;
  },
  showLoginModalImmediately: function () {
    var self = this;
    if (WT.Config.passengersShowLoginImmediately == 1 && $j('#logged_in').val() == 0) {
      setTimeout(function () {
        self.showLoginModal();
      }, 100);
    }
  },
  showLoginModal: function (email_exists) {
    var login_modal = $j('#passenger-modal');

    if (login_modal.length > 0) {

      login_modal.modal();

      if (email_exists) {
        $j('.registered-users .messages.exists').fadeIn();
      }
    }
  },
  activateLoginByExistsCustomer: function (message) {
    var $container = $j('#contactinfo .passenger.contact');

    WT.Session.showMessages('error', $container, message);

    setTimeout(function () {
      $container.find('.ajax-message').css({ 'opacity': 0, 'height': 0, 'padding': 0 });
    }, 4000);

    $j('#email').focus();
  },
  _proceedAsGuestCheck: function () {
    var self = this,
      result = false;

    if (
      WT.Config.passengersProceedAsGuest == 0 &&
      $j('#logged_in').val() == '' &&
      WT.Steps.backend_data[WT.Steps.activeIndex] == 'passengers'
    ) {
      self.showLoginModal();
      result = true;
    }

    return result;
  },
  _proceedAsGuestClick: function () {
    $j('#as_guest').on('click', function () {
      $j('#create_account').prop('checked', false);
    });
  },
  windowResize: function () {
    var self = this;

    $j(window).resize(function () {
      self.initPassengerModalForMobile(true);
    });
  },
  initPassengerModalForMobile: function (resize) {
    resize = resize || false;

    var isMobile = $j(window).width() < WT.Config.maxWidthMobile,
      login_modal = $j('.passenger-login-modal'),
      isNotLoggedin = $j('#logged_in').val() == 0;

    if (!resize && !isMobile) return;

    if (isMobile) {
      if (isNotLoggedin) {
        this.addAccountFieldToNavBar();

        login_modal
          .addClass('modal')
          .attr('id', 'passenger-modal')
          .attr('role', 'dialog');
        $j('.passenger-login-modal > div').attr('class', 'modal-dialog');
        $j('#step-passengers #passenger-login').css('display', 'flex');
      } else {
        login_modal.hide();
        $j('#account-wrapper-mobile').show();
        $j('#step-passengers #passenger-login').css('display', 'none');
      }
    } else {
      if (isNotLoggedin) {
        login_modal
          .removeClass('modal')
          .show();
        $j('.passenger-login-modal > div').removeClass('modal-dialog');
        $j('#passenger-login.mobile-member-login-btn, #passenger-login').hide();
      }
    }
  },
  addAccountFieldToNavBar: function () {
    $j('#passenger-login').show();
    $j('#account-wrapper-mobile').hide();

    if (!$j('#nav #passenger-login').length) {
      var $lefMenuContentBody = '<div id="passenger-login" data-toggle="modal" data-target="#passenger-modal" class="memeber-label">' +
        '<i class="fal fa-user-circle"></i>' + Translator.translate('Member Login/Register') + '</div>';

      $j('#nav').append($lefMenuContentBody);
    };
  },
  passengerLoginAction: function () {
    var login_button = $j('#passenger-login-modal'),
      login_form_id = 'passenger-login-form',
      mageform = new VarienForm(login_form_id),
      self = this,
      baseUrl = WT.Options.baseUrl || '/';

    WT.Session.additionalPostData.login = [
      { name: 'redirect', value: false },
      { name: 'passengers', value: true },
    ];

    $j(document).on('ajaxCustomerLogin', function (event, result) {
      self._updateBlocksAfterLogin(result.passengers.contact);
      WT.Passengers.createPreselectDropdowns(result);
      WT.Passengers.preselectFormInfoFromBackendData(result, 'passenger', '0');
      WT.Passengers.preselectFormInfoFromBackendData(result, 'contactinfo');
      $j('.registered-users .messages').fadeOut();
      WT.Passengers.initPassengerModalForMobile();
      WT.Passengers.initPinDataCheckbox(result);
    });

    login_button.on('click', function (e) {
      e.preventDefault();

      if (!WT.Session.validateRecaptcha($j('#' + login_form_id), 0)) {
        return;
      }

      if (typeof mageform.validator != 'undefined') {
        if (mageform.validator.validate() == true) {
          WT.Utiles.stepLoader(true);
          $j('.messages.exists').hide();

          $j.ajax({
            url: baseUrl + "booking/authorization/loginCustomer",
            data: $j('#' + login_form_id).serialize(),
            type: "POST",
            dataType: 'json',
            success: function (result) {
              if ((result.response === 'redirect')) {
                $j(location).attr('href', result.url);
              } else if (result.response === 'success') {
                WT.Utiles.stepLoader(false);
                self._updateBlocksAfterLogin(result.passengers.contact);
                WT.Passengers.createPreselectDropdowns(result);
                WT.Passengers.preselectFormInfoFromBackendData(result, 'passenger', '0');
                WT.Passengers.preselectFormInfoFromBackendData(result, 'contactinfo');
                $j('.registered-users .messages').fadeOut();
                WT.Passengers.initPassengerModalForMobile();
              } else {
                WT.Utiles.stepLoader(false);
                $j('.registered-users .messages').fadeOut();
                $j('.registered-users .messages.validation').fadeIn();
                WT.googleAnalyticsEvents.sendException(Translator.translate('Login error. Incorrect password'), false);
              }
            },
            error: function (xhr, ajaxOptions, thrownError) {
              WT.Utiles.stepLoader(false);
              WT.googleAnalyticsEvents.sendException(Translator.translate('Status: ') + xhr.status + ' ' + thrownError, false);
              alert(Translator.translate('Status: ') + xhr.status + ' ' + thrownError);
            }
          });
        }
      }
    });
  },
  checkAdditionalForms: function () {
    var doca = false,
      doco = false,
      docs = false,
      docid = false;

    if (WT.modify_flag !== 'changename') {
      var routeInfo = JSON.parse(localStorage.getItem('routeInfo'));
      WT.ReservationData.documentsInfo = {};
      doca = WT.ReservationData.documentsInfo.doca = +routeInfo.doca_enable;
      docs = WT.ReservationData.documentsInfo.docs = +routeInfo.docs_enable;
      doco = WT.ReservationData.documentsInfo.doco = +routeInfo.doco_enable;
      docid = WT.ReservationData.documentsInfo.docid = +routeInfo.docid_enable;
    }

    if (!docs) {
      $j('.docs-block').remove();
    } else {
      $j('.dob').remove();
    }

    if (!doco) {
      $j('.doco-block').remove();
    } else {
      $j("select.doco_type").on('change', function () {
        var block = $j(this).closest('.doco-block');
        if ($j(this).val() !== '') {
          block.find('label').addClass('required');
          block.find('input').addClass('required-entry');
          block.find('select').addClass('validate-select');
        } else {
          block.find('label').removeClass('required');
          block.find('.required-entry').removeClass('required-entry');
          block.find('.validate-select').removeClass('validate-select');
          block.find('.validation-failed').removeClass('validation-failed');
          block.find('.validation-advice').remove();
        }
      });
    }

    if (!doca) {
      $j('.doca-block').remove();
    }

    if (!docid) {
      $j('.docid-block').remove();
    }
  },
  _updateBlocksAfterLogin: function (contact) {
    var linksHtml = '<ul class="links dropdown-content" style="display: none;"><li class="first"></li><li class="last"></li></ul>',
      $links = $j('#header-account').append(linksHtml),
      $customerUsernameContainer = $j('#step-passengers .logout-form div.username'),
      $customerEmailContainer = $j('#step-passengers .logout-form span.email'),
      $customerFfpInfoContainer = $j('#step-passengers .logout-form .ffp-info'),
      $customerLastSignedInContainer = $j('#step-passengers .logout-form .last-signed-in-date'),
      isMobile = $j(window).width() < WT.Config.maxWidthMobile;

    $j('#step-passengers').addClass('user-is-loggedin');
    $j('#passenger-login').hide();
    $j('#logged_in').val('1');
    $links.find('.last').html('<a title="Log Out" href="/customer/account/logout/">' + Translator.translate('Log Out') + '</a>');
    $j('#create_account').prop('checked', false).closest('.field').hide();

    if (contact) {
      $links.find('.first').html('<a href="/customer/account/" title="Account">' + contact.contact_firstname + ' ' + contact.contact_lastname + '</a>');
      $customerUsernameContainer.html(contact.contact_title + ' ' + contact.contact_firstname + ' ' + contact.contact_lastname);
      $customerEmailContainer.html(contact.contact_email);
      $customerLastSignedInContainer.html(contact.contact_last_signed_in);

      if (contact.contact_ffp_data) {
        $customerFfpInfoContainer.find('.ffp-tier .value').html(contact.contact_ffp_data['current_tier']);
        $customerFfpInfoContainer.find('.ffp-miles .value').html(contact.contact_ffp_data['miles']);
        $customerFfpInfoContainer.show();
      }
    }

    if (isMobile) {
      $j('#mobile-login').remove();
      $j('#account-wrapper-mobile').html($j('#header-account').children());
    }
  },
  _rememberMyDetails: function () {
    var remember_me = $j('#remember_me'),
      create_account = $j('#create_account');

    if (remember_me.length > 0) {
      if (remember_me.prop('checked') == true) {
        WT.Utiles._localStorageUpdate('remember_contact', $j('#form-passengers'));
        create_account.prop('checked', false);
      } else {
        localStorage.removeItem('remember_contact');
      }
    }
  },
  initDatepicker: function (localize = true) {
    function isChinese() {
      return localize && WT.Config.isChinese;
    }

    var $inputDate = $j('input[data-toggle="datepicker"]'),
      $expiryInput = $j('input[data-toggle="datepicker-expiry"]'),
      dateFormat = WT.Utiles.getDateFormatForMask(isChinese()),
      mask = dateFormat.replace(/\w/g, '9');

    if ($inputDate.length && $inputDate.datepickerDate && $inputDate.mask) {
      var config = $j.extend({}, {
        weekStart: WT.Options.passengersDatePickerWeekStart,
        autoHide: true,
        startView: 2,
        format: dateFormat,
        endDate: Date.now(),
        startDate: new Date(1900, 1, 1),
        yearSuffix: isChinese() ? '年' : ''
      }, this.getDaysAndMonths());
      $inputDate.mask(mask).datepickerDate(config);
    }

    if ($expiryInput.length && $expiryInput.datepickerDate && $expiryInput.mask) {
      var config = $j.extend({}, {
        weekStart: WT.Options.passengersDatePickerWeekStart,
        autoHide: true,
        startView: 2,
        format: dateFormat,
        startDate: Date.now(),
        yearSuffix: isChinese() ? '年' : ''
      }, this.getDaysAndMonths())
      $expiryInput.mask(mask).datepickerDate(config)
    }

    return;
  },
  flatPassengersPreparation: function (formId, direct) {
    var $form = $j('#' + formId);
    data = $form.serializeObject();

    if (WT.Config.isChinese) {
      var dateFormat = WT.Utiles.getDateFormatForMask(WT.Config.isChinese),
        $inputsDate = $j('input[data-toggle="datepicker"], input[data-toggle="datepicker-expiry"]');

      $inputsDate.each(function () {
        var name = $j(this).attr('name'),
          value = data[name];

        if (!value) return;

        data[name] = moment(value, dateFormat).format(WT.Options.dateFormat);
      });
    }

    data.directCheckout = direct;

    return data;
  },
  preselectCountry: function (id, value, $input) {
    var $inputElement = $input || $j('#' + id),
      inputCountry = $inputElement.parent().find('.input-country');

    if (inputCountry.countrySelect && value) {
      inputCountry.countrySelect('selectCountry', value);
    }
  },
  initActiveTab: function () {
    var $buttons = $j('#form-flights-buttons');

    if (this.activeTab === 'tab-passengers' && !WT.modify_flag) {
      $buttons.hide();
    } else {
      $buttons.css('display', 'flex');
    }
  },
  getDaysAndMonths: function () {
    return {
      days: this.translate(['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday']),
      daysShort: this.translate(['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat']),
      daysMin: this.translate(['Su', 'Mo', 'Tu', 'We', 'Th', 'Fr', 'Sa']),
      months: this.translate(['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December']),
      monthsShort: this.translate(['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'])
    }
  },
  translate: function (array) {
    return array.map(function (item) {
      return Translator.translate(item);
    });
  },
  validateCustomForm: function () {
    if (window.customForm) {
      window.customForm.validator.validate();
      $j('#tab-contactinfo').click();
    }

    return WT.Utiles.validateAssociatedAdult();
  },
  renderOptionsByAssociatedAdult: function () {
    var passengers = WT.ReservationData.passengers,
      $associatedAdultFields = $j('.field-associated-adult');

    if (passengers && passengers.length && $associatedAdultFields.length) {
      var adultPassengers = passengers.filter(function (passenger) {
        return passenger.age_code === WT.ReservationData.passengerAgeTypes.adult;
      }),
        options = '';

      adultPassengers.forEach(function (passenger) {
        var rph = +passenger.id + 1,
          fullName = passenger.firstname && passenger.lastname
            ? passenger.firstname + ' ' + passenger.lastname
            : 'Passenger #' + rph;

        options += '<option value="' + rph + '">' + fullName + '</option>';
      });

      $associatedAdultFields.each(function () {
        var $select = $j(this).find('select'),
          selectValue = $select.val();

        $select.html(options);

        if (selectValue) {
          $select.val(selectValue);
        }
      })
    }
  },
  initPersianDatepicker: function () {
    var $inputDate = $j('input[data-toggle="datepicker"]'),
      $expiryInput = $j('input[data-toggle="datepicker-expiry"]'),
      self = this,
      dateFormat = WT.Options.dateFormat,
      currentConfig = self.spread(
        WT.FindTrip.PersianDatePickerConfig, {
        weekStart: WT.Options.passengersDatePickerWeekStart,
        viewMode: 'year',
        altFormat: WT.Utiles.getDateFormat(),
        position: [80, 0],
        autoClose: false,
        responsive: true,
        minDate: 0,
        maxDate: new persianDate().valueOf(),
        checkMonth: function () {
          return true;
        },
        checkYear: function () {
          return true;
        },
        checkDate: function () {
          return true;
        },
        monthPicker: {
          enabled: true
        },
        yearPicker: {
          enabled: true
        }
      });

    if ($inputDate.length) {
      $inputDate
        .height(0)
        .css('pointer-events', 'none')
        .fadeTo(0, 0);

      $inputDate.each(function () {
        var inputId = $j(this).attr('id'),
          childIdName = 'alt_input_' + inputId,
          $parentDiv = $j(this).parent();

        $j($parentDiv).append('<input disabled id="' + childIdName + '">');
        $j($parentDiv).attr('tabindex', '-1');

        self.pickersList.set(inputId, $parentDiv.pDatepicker(self.spread(
          currentConfig, {
          altField: '#' + childIdName,
          dayPicker: {
            onSelect: function (unixDate) {
              var correctGregorianDate = WT.FindTrip._convertToGregorianDate(unixDate, null, dateFormat),
                currentPicker = self.pickersList.get(inputId);

              $inputDate.val(correctGregorianDate);
              currentPicker.hide();
            }
          }
        })));

        self.pickersList.get(inputId).hide();
      });
    }

    if ($expiryInput.length) {
      $expiryInput.height(0).fadeTo(0, 0);

      $expiryInput.each(function () {
        var inputId = $j(this).attr('id'),
          childIdName = 'alt_input_' + inputId,
          $parentDiv = $j(this).parent();

        $j($parentDiv).append('<input disabled id="' + childIdName + '">');
        $j($parentDiv).attr('tabindex', '-1');

        self.pickersList.set(inputId, $parentDiv.pDatepicker(self.spread(
          currentConfig, {
          altField: '#' + childIdName,
          minDate: new persianDate().valueOf(),
          maxDate: null,
          checkMonth: function () {
            return true;
          },
          checkYear: function () {
            return true;
          },
          checkDate: function () {
            return true;
          },
          dayPicker: {
            onSelect: function (unixDate) {
              var correctGregorianDate = WT.FindTrip._convertToGregorianDate(unixDate, null, dateFormat),
                currentPicker = self.pickersList.get(inputId);

              $expiryInput.val(correctGregorianDate);
              currentPicker.hide();
            }
          }
        })));

        self.pickersList.get(inputId).hide();
      });
    }

    self.pickersList.forEach(function (value, inputId) {
      var parentWrapper = $j('#' + inputId).parent();

      $j(parentWrapper, $j('#alt_input_' + inputId)).on('focus click', function () {
        var currentKey = $j(this).children('input[data-toggle*="datepicker"]').attr('id');
        self.pickersList.get(currentKey).show();
      });

      $j(parentWrapper, $j('#alt_input_' + inputId)).on('blur', function () {
        var currentKey = $j(this).children('input[data-toggle*="datepicker"]').attr('id');

        self.pickersList.get(currentKey).hide();
      });
    })
  },
  initPinDataCheckbox: function (data) {
    var self = this;

    if (data.passengers === undefined) {
      return false;
    } else {
      $j('.ud-pin-data').show();
    }

    $j(document).on('change', '.ud-pin-data-checkbox', function (e) {
      e.preventDefault();

      self.pinPassengerFields($j(this), data);
    });

    $j('.ud-pin-data-checkbox').each(function () {
      self.pinPassengerFields($j(this), data);
    });
  },
  pinPassengerFields: function ($checkbox, data) {
    var isChecked = $checkbox.prop('checked');
    var passengerId = $checkbox.val();
    var $pinFields = $j('.passenger[data-user_id="' + passengerId + '"] .pin-field');
    var $pinCopyFromSelector = $j('.passenger-copyfrom-item[data-passenger_id="' + passengerId + '"]');

    if (isChecked) {
      WT.Passengers.preselectFormInfoFromBackendData(data, 'passenger', '0');
      $pinCopyFromSelector.addClass('readonly');
    } else {
      this.clearPassengerData(passengerId);
      $pinCopyFromSelector.removeClass('readonly');
    }

    $pinFields.each(function () {
      var $field = $j(this);

      if ($field.val() && isChecked) {
        $field.prop('readonly', true);
      } else {
        $field.prop('readonly', false);
      }
    });
  },
  clearPassengerData: function (passengerId) {
    var $fields = $j('.passenger[data-user_id="' + passengerId + '"] .field [name]');
    $fields.each(function () {
      var $field = $j(this);
      var type = this.type;
      var tag = this.tagName.toLowerCase();

      if (type === 'text' || type === 'password' || tag === 'textarea') {
        this.value = '';

        if ($field.hasClass('full-telephone-input')) {
          $field.parents('.input-box').find('.mobile-pp, .phone-pp').val('');
        }
      } else if (type === 'checkbox' || type === 'radio') {
        this.checked = false;
      } else if (tag === 'select') {
        if ($field.hasClass('country-pp')) {
          this.selectedIndex = 1;

          $field.trigger('change');
        } else {
          this.selectedIndex = -1;
        }
      }
    });
  }
};

var WT = WT || {};
WT.SeatSelect = {
  init: function (data) {
    var self = this,
      flightReservation = WT.ReservationData.flight,
      step_text_code = WT.Steps.backend_data[WT.Steps.activeIndex],
      container_selector = '#step-' + step_text_code,
      steps_box = $j('.steps-data'),
      iOS = /iPad|iPhone|iPod/.test(navigator.userAgent) && !window.MSStream;
    WT.Passengers.updateReservationDataPassengersFromBackendData(data);
    if (WT.modify_flag === 'seat') WT.Passengers.receiveFlights(data);
    $j.extend(flightReservation, data);
    $j.extend(flightReservation, { 'step': step_text_code });

    WT.Utiles.renderHeaderByStep(container_selector, step_text_code, 'seat', true);
    this.createAircraftView(flightReservation);

    if (iOS) {
      WT.Utiles.tooltipsDestroy();
    } else {
      WT.Utiles.tooltipsInit();
    }

    this.passengersRefresh();
    WT.Utiles._makeRadiobuttonAsCheckboxes();
    self._preselectSeatsForPassengers();
    WT.Utiles._makeCheckboxesAsRadiobuttons(container_selector + ' .passenger-checkbox', container_selector + ' .select_all_passengers');
    self.seatsClicksBehaviour(container_selector, data);
    self.initSeatLegendDisplaySwitcher(container_selector);
    steps_box.removeClass('persistent');
    self.passengerSwitcherChange(data);
    self.passengerSeatsHeaderSwitcher();
    self.infantRowsFunctionality(data);
    this.setFirstCheckboxActive('#step-seatselect', '.passenger-checkbox');
    if (WT.modify_flag === 'seat') this._activateShowBlockForAssignedSeat();
    this.selectFirstAvailablePassengerForFlightSwitcher();
  },
  setFirstCheckboxActive: function (block, className) {
    var $checkboxList = $j(block).find(className);

    if (!WT.modify_flag) {
      $j('body').addClass('seatselect');
    }

    if ($checkboxList.length) {
      $checkboxList.parent().removeClass('active');
      $checkboxList.first()
        .prop('checked', true)
        .parent()
        .addClass('active');
    }
  },
  passengersRefresh: function () {
    if (!WT.Templates.passenger_seats) return;

    var seats = WT.ReservationData.seats,
      passengers = WT.ReservationData.passengers,
      step_text_code = WT.Steps.backend_data[WT.Steps.activeIndex],
      container_selector = '#step-' + step_text_code,
      source = WT.Templates.passenger_seats,
      template = Handlebars.compile(source),
      flightsSegment = WT.Summary.getFlightsSegmentObject(),
      transformSeats = {};

    for (var rph in seats) {
      var passengerSeats = seats[rph];

      for (var passengerId in passengerSeats) {
        var selectedSeat = passengerSeats[passengerId];

        transformSeats[passengerId] = transformSeats[passengerId] || [];
        selectedSeat.realRph = rph;

        if (!selectedSeat.segment) {
          selectedSeat.segment = flightsSegment && flightsSegment[rph];
        }

        transformSeats[passengerId].push(selectedSeat);
      }
    }

    passengers.forEach(function (passenger) {
      var results_block = $j(container_selector).find('#pass-' + passenger.entity_id + '-seats'),
        line = $j(container_selector).find('#pass-' + passenger.entity_id).parent(),
        lineHeader = $j(container_selector).find('#pass-' + passenger.entity_id + '-seats-header'),
        seats = transformSeats[passenger.entity_id] || [],
        result = template({
          seats: seats,
          paxId: passenger.entity_id
        });

      results_block.html(result);
      lineHeader.text(seats.map(function (item) {
        return item.seat.seatNumber;
      }).join(', '));

      if (seats.length) {
        line.find('label').removeClass('empty-seats');
      } else {
        line.find('label').addClass('empty-seats');
      }
    });

    this._removeSeatFromSeatSelectedBlock();
  },
  selectFirstAvailablePassenger: function () {
    var $wrapper = $j('#step-seatselect');
    var $passengerSwitcher = $wrapper.find('.passenger-switcher .passengers');
    var $passengers = $passengerSwitcher.find('input[name^="passenger_"]:not([data-reserved="true"])');
    var passengersIds = $passengers.map((i, item) => $j(item).data('entity_id')).get();

    if (passengersIds.length <= 1) {
      return false;
    }

    var seats = WT.ReservationData.seats;
    var $flightSwitcher = $wrapper.find('#top-flight-switcher');
    var $activeFlight = $flightSwitcher.find('li.active a.tab-pane-content');
    var activeFlightRph = $activeFlight.data('flight-rph');
    var passengerIdToBeSelected = null;

    if (!seats[activeFlightRph]) {
      passengerIdToBeSelected = passengersIds[0];
    } else {
      var activeFlightSelectedSeats = Object.keys(seats[activeFlightRph])
      passengerIdToBeSelected = passengersIds.find((item) => {
        return !activeFlightSelectedSeats.includes('' + item)
      });
    }

    if (!passengerIdToBeSelected) {
      return false;
    }

    $j('input#pass-' + passengerIdToBeSelected).parents('.line').trigger('click');
  },
  selectFirstAvailablePassengerForFlightSwitcher: function () {
    var self = this;
    $j(document).on('shown.bs.tab', '#step-seatselect .tab-pane-content[data-toggle="tab"]', function (e) {
      self.selectFirstAvailablePassenger();
    });
  },
  infantRowsFunctionality: function (data) {
    var infantSeats = {
      'from_rows': {
        699: {
          'infant_seat_rows': '2,14,24',
          'passenger_id': 699
        }
      }
    };
    if (typeof infantSeats !== 'undefined') {
      var container_selector = '#step-' + WT.Steps.backend_data[WT.Steps.activeIndex],
        checked_passengers = $j(container_selector + ' .passenger-switcher input[type=checkbox]:checked');
      checked_passengers.each(function () {
        var passenger_id = $j(this).data('entity_id');
        applyFreeRowsPerDirection('from', 'departure');
        applyFreeRowsPerDirection('to', 'return');
        function applyFreeRowsPerDirection(dir, dir2) {
          if (infantSeats[dir + '_rows']) {
            if (typeof infantSeats[dir + '_rows'][passenger_id] !== 'undefined') {
              var rows_str = infantSeats[dir + '_rows'][passenger_id]['infant_seat_rows'];
              var rows_arr = rows_str.split(','),
                from_all_rows = Object.keys(data.seatMap.seatMap[dir2]),
                pay_rows = $j(from_all_rows).not(rows_arr).get();
              for (var current in rows_arr) {
                if (rows_arr.hasOwnProperty(current)) {
                  $j('#' + dir + '-seatselect').find("[data-row='" + rows_arr[current] + "']").addClass('infant-rows');
                }
              }
              for (var cur in pay_rows) {
                if (pay_rows.hasOwnProperty(cur)) {
                  $j('#' + dir + '-seatselect').find("[data-row='" + pay_rows[cur] + "']").addClass('adult-rows');
                }
              }

            } else {
              $j('.seat-row').removeClass('infant-rows');
              $j('.seat-row').removeClass('adult-rows');
            }
          }
        }
      });
    }
  },
  passengerSwitcherChange: function (data) {
    var self = this,
      container_selector = '#step-' + WT.Steps.backend_data[WT.Steps.activeIndex],
      passengers = $j(container_selector + ' .passenger-switcher .line');

    passengers.on('click', function () {
      var input = $j(this).find('input[type=checkbox]');

      input.prop('checked', true)
        .parent()
        .addClass('active');

      $j(container_selector + ' .passenger-switcher input[type=checkbox]')
        .not('#' + input.attr('id'))
        .not('input[data-reserved=true]')
        .prop('checked', false)
        .parent()
        .removeClass('active')
    });

    passengers.on('change', function () {
      self.infantRowsFunctionality(data);
    })
  },
  passengerSeatsHeaderSwitcher: function () {
    $j(document).on('click', '.passenger-seats-header-switcher .display-action', function () {
      var $switcherItem = $j(this);
      var $switcher = $switcherItem.parent();
      var $line = $switcherItem.parents('.line');
      var $seatsBlock = $line.find('.passenger-seats-block');

      $switcher.toggleClass('open');
      $seatsBlock.toggleClass('hide');
    })
  },
  checkExitSeat: function (selectedSeats) {
    var isExitSeat = false;

    if (!$j('#notifier-seatselect').length) return isExitSeat;

    for (var key in selectedSeats) {
      var seatsObj = selectedSeats[key];

      for (var seatKey in seatsObj) {
        if (seatsObj.hasOwnProperty(seatKey)) {
          var seatItemData = seatsObj[seatKey];

          if (seatItemData && seatItemData.seat && seatItemData.seat.seatType === 'EXIT_SEAT') {
            return true;
          }
        }
      }
    }

    return isExitSeat;
  },
  seatsClicksBehaviour: function (container_selector, data) {
    var self = this;

    $j(container_selector + ' .seat-button').on('click touchstart', function (e) {
      e.stopPropagation();
      e.preventDefault();

      var $this = $j(this);

      if ($this.hasClass('seat-button-header')) {
        return false;
      }

      var $passenger = $j(container_selector + ' .passenger-switcher input[type=checkbox]:checked').not('input[data-reserved=true]'),
        $seatInput = $this.find('input[type=radio]');

      if (!$passenger.length) {
        $seatInput.prop('checked', false);
        return;
      }

      var passengerCounter = $passenger.data('counter_id'),
        passengerId = $passenger.data().entity_id,
        passenger_name = $j(container_selector + ' .passenger-switcher label[for=pass-' + passengerId + ']').html(),
        flight_rph = $seatInput.data("seat_type"),
        seatType = $seatInput.data("seat-type"),
        seatNum = $j("label[for='" + $seatInput.attr("id") + "']").html(),
        seatId = $seatInput.val();

      if ($this.hasClass('chosen')) {
        $j('.remove-seat')
          .filter(function () {
            var toastRph = +($j(this).data('flight_rph')),
              toastPassengerId = +($j(this).data('pax-id'));

            return toastRph === +flight_rph && toastPassengerId === +passengerId;
          })
          .trigger('click')
          .trigger('touchstart');

        return;
      }

      $seatInput.prop('checked', true);

      self._removeLabelsNamesAfterDeselect(flight_rph, passengerId);
      self._addLabelsNamesAfterSelect(flight_rph, seatId, passengerCounter, passengerId);
      self._seatSelect(seatId, flight_rph, data, passengerId, passengerCounter);
      self.selectFirstAvailablePassenger();

      if (seatType === 'EXIT_SEAT') {
        showCustomModal("#notifier-seatselect");
      }
    });
  },
  initSeatLegendDisplaySwitcher: function (container_selector) {
    $j(container_selector).find('.seat-legend-wrapper').each(function () {
      var $seatLegendWrapper = $j(this);
      var $seatLegend = $seatLegendWrapper.find('.seat-legend');
      var $seatLegendSwitcher = $seatLegendWrapper.find('.seat-legend-switcher .display-action');

      if ($seatLegend.find('li').length > 2) {
        $seatLegendWrapper.addClass('multirow');
      } else {
        $seatLegendWrapper.removeClass('multirow');
      }

      $seatLegendSwitcher.on('click', function (e) {
        e.preventDefault();

        $seatLegendWrapper.toggleClass('open');
      });
    });
  },
  getSeatById: function (seat_id, flight_rph, data) {
    var seat;
    for (var row in data.seatMap.seatMap[flight_rph]) {
      if (data.seatMap.seatMap[flight_rph][row][seat_id]) {
        seat = $j.extend({}, data.seatMap.seatMap[flight_rph][row][seat_id]);
      }
    }
    return seat;
  },
  _seatSelect: function (seat_id, flight_rph, data, passenger_id, passenger_counter_id) {
    var reservation_seats = WT.ReservationData.seats,
      passenger = WT.ReservationData.passengers.find(item => parseInt(item.entity_id) === parseInt(passenger_id)),
      self = this;

    this._hidePersistentOffer();
    var selectedInput = $j('input[name=seat-' + flight_rph + '-' + seat_id + ']');

    selectedInput.parent().append('<span class="passenger_initials">' + passenger.initials + '</span>');
    selectedInput.parent().addClass('chosen');

    var seat = self.getSeatById(seat_id, flight_rph, data);
    reservation_seats[flight_rph] = reservation_seats[flight_rph] || {};
    reservation_seats[flight_rph][passenger_id] = seat;
    reservation_seats[flight_rph][passenger_id].passenger_rph = passenger_counter_id;

    WT.googleAnalyticsEvents.sendEvent('Seats', 'seatSelect', flight_rph);

    WT.Summary.refresh();
    this.passengersRefresh();
  },
  _addLabelsNamesAfterSelect: function (flight_rph, seat_id, passengerCounter, passengerId) {
    var passenger = WT.ReservationData.passengers.find(item => parseInt(item.entity_id) === parseInt(passengerId));
    var selectedInput = $j('input[name=seat-' + flight_rph + '-' + seat_id + ']');
    var parent = selectedInput.parent();
    parent.append('<span class="passenger_initials">' + passenger.initials + '</span>');
    selectedInput.prop('checked', true);
    parent.addClass('chosen');
    parent.addClass('passengerId' + passengerId + 'selected');
  },
  requestDataPreparation: function (data) {
    var localData = $j.extend({}, data);
    var returnedData = [];

    !$j.isEmptyObject(localData.selected_seats) && Object.keys(localData.selected_seats).forEach(function (flight_rph) {
      Object.keys(localData.selected_seats[flight_rph]).forEach(function (passengerId) {
        var newSeat = $j.extend({}, localData.selected_seats[flight_rph][passengerId]);
        newSeat.flight_rph = flight_rph;
        newSeat.passenger_rph = WT.ReservationData.passengers.filter(function (pass) {
          return pass.entity_id == passengerId;
        })[0].rph;
        returnedData.push(newSeat);
      });

    });

    localData.selected_seats = returnedData.sort(function (a, b) {
      var result = 0;
      if (a.flight_rph > b.flight_rph) {
        result = 1;
      } else {
        result = -1;
      }
      return result;
    });

    return localData
  },
  _preselectSeatsForPassengers: function () {
    var container_selector = '#step-' + WT.Steps.backend_data[WT.Steps.activeIndex],
      checked_passengers = $j(container_selector + ' .passenger-switcher input[type=checkbox]').not('input[data-reserved=true]'),
      reservation_seats = WT.ReservationData.seats,
      self = this;

    var step_text_code = WT.Steps.backend_data[WT.Steps.activeIndex];
    var container_selector = '#step-' + step_text_code;

    checked_passengers.each(function () {
      for (var flight_rph in reservation_seats) {
        Object.keys(reservation_seats[flight_rph]).forEach(function (userId) {
          var seat = reservation_seats
            && reservation_seats[flight_rph]
            && reservation_seats[flight_rph][userId],
            seatInput = seat && $j('input[name=seat-' + flight_rph + '-' + seat.seat.id + '] ');

          if (seatInput) {
            seatInput.prop('checked', true);
            self._removeLabelsNamesAfterDeselect(flight_rph, userId);
            self._addLabelsNamesAfterSelect(flight_rph, seat.seat.id, $j('#pass-' + userId).data().counter_id, userId);
          }
        })
      }
    });
  },
  _removeSeatFromSeatSelectedBlock: function () {
    var self = this;

    $j('.remove-seat').on('click', function () {
      if ($j(this).hasClass('processing')) {
        return false;
      } else {
        $j('.remove-seat').addClass('processing');
        setTimeout(function () {
          $j('.remove-seat').removeClass('processing');
        }, 500);
      }

      var seatId = $j(this).attr('data-seat-id'),
        flight_rph = $j(this).attr('data-flight_rph'),
        input = $j('input[name=seat-' + flight_rph + '-' + seatId + '] '),
        passengerId = $j(this).attr('data-pax-id');

      self._removeLabelsNamesAfterDeselect(flight_rph, passengerId);
      self._seatUnSelect(seatId, flight_rph, passengerId);
      self._seatHideOnPassengerSwitch(flight_rph, passengerId);
      input.prop('checked', false);
    });
  },
  _seatHideOnPassengerSwitch: function (flight_rph, passenger_id) {
    var pss = $j('.seats-wrapper#seats-' + flight_rph + ' #pax-' + passenger_id),
      holder = pss.parent().parent();

    pss.remove();
    if (!holder.find('p').length) {
      holder.slideUp();
    }
  },
  _removeLabelsNamesAfterDeselect: function (flight_rph, passengerId) {
    var inputs = $j('[data-seat_type="' + flight_rph + '"]');
    var parents = inputs.parent('.passengerId' + passengerId + 'selected');
    var spans = parents.find('.passenger_initials');
    spans.remove();
    parents.removeClass('chosen');
    parents.removeClass('passengerId' + passengerId + 'selected');
    parents.find('input').prop('checked', false);
  },
  createAircraftView: function (data) {
    var source = WT.Templates.seatmap_items,
      template = Handlebars.compile(source),
      results_block = $j('#seatselect-content'),
      isSeatsByFlyFrom = true,
      isSeatsByFlyTo = true,
      seat_types = data.seatMap.seatTypes;

    if (data.seatMap != false) {
      for (var y in seat_types) {
        if (seat_types.hasOwnProperty(y)) {
          var seat_type = seat_types[y];
          if (typeof (seat_type) == 'string') {
            data.seatMap.seatTypes[y] = {};
            data.seatMap.seatTypes[y]['price'] = seat_type;
          }
        }
      }
    }

    !$j.isEmptyObject(data.seatMap.seatMap) && Object.keys(data.seatMap.seatMap).forEach(function (flight_rph) {
      var flight = WT.flights.filter(function (flight) {
        return flight.flight_rph == flight_rph;
      })[0];

      flight.seatMap = data.seatMap.seatMap[flight_rph];
      flight.seatTypes = data.seatMap.seatTypes[flight_rph];

      var isSeatMap = Object.keys(flight.seatMap || {}).length;

      if (+flight_rph === 1 && !isSeatMap) isSeatsByFlyFrom = false;
      if (+flight_rph === 2 && !isSeatMap) isSeatsByFlyTo = false;
    });

    if (data.reservedSeats.length && WT.modify_flag === 'seat') {
      data.assignedSeatPassengers = this.viewAssignedSeats(data).infoPassengersReservedSeats;
    }

    var dataToTemplate = $j.extend({}, data);

    if (WT.flights !== undefined) {
      WT.flights.some(function (flight) { return flight.seatMap }) && (dataToTemplate.flights = WT.flights);
    } else {
      WT.flights = [];
    }

    results_block.html(template(dataToTemplate));

    if (!isSeatsByFlyFrom && isSeatsByFlyTo) {
      $j('#step-seatselect').find('a[aria-controls=seat-1]').parent().addClass('disable');
      $j('#step-seatselect').find('a[aria-controls=seat-2]').click();
    } else {
      results_block.find('.tab-pane:first-child').addClass('active');
    }
  },
  _flatSeatsWithoutTabsGrouping: function (data, direction) {
    var data = data.seatMap.seatMap[direction];
    var flatSeats = {};
    for (var y in data) {
      if (data.hasOwnProperty(y)) {
        var seat = data[y];
        for (var i in seat) {
          var seat_id = seat[i]['seat']['id'];
          flatSeats[seat_id] = seat[i];
        }
      }
    }
    return flatSeats;
  },

  _hidePersistentOffer: function () {
    $j('.persistent-offer').fadeOut();
  },
  _seatUnSelect: function (seat_id, flight_rph, passenger_id) {
    var reservation_seats = WT.ReservationData.seats;

    if (reservation_seats && reservation_seats[flight_rph]) {
      var lenReservedSeat = Object.keys(reservation_seats[flight_rph]).length;

      if (lenReservedSeat > 1) {
        delete reservation_seats[flight_rph][passenger_id];
      } else {
        delete reservation_seats[flight_rph];
      }
    }

    WT.googleAnalyticsEvents.sendEvent('Seats', 'seatUnselect', flight_rph);
    WT.Summary.refresh();
    this.passengersRefresh();
  },
  viewAssignedSeats: function (data) {
    var reservedSeats = data.reservedSeats,
      infoPassengersWhichReservedSeat = {},
      listIdsPassengersWhichReservedSeat = [],
      passengersList = data.passengers.passengers;

    reservedSeats.forEach(function (seat) {
      var passenger_rph = seat.passenger_rph;

      passengersList.forEach(function (passenger) {
        if (passenger_rph == passenger.passenger_rph) {
          var entity_id = passenger.entity_id,
            flightTab = seat.flight_rph;

          infoPassengersWhichReservedSeat[flightTab] = infoPassengersWhichReservedSeat[flightTab] || {};
          var passengerInfo = {
            lastName: passenger.passenger_lastname,
            firstName: passenger.passenger_firstname,
            age: WT.Utiles._getArrayIndexByText(passenger.age_code, WT.ReservationData.passengerAgeTypes),
            seat: seat.seat_number,
            id: entity_id,
            title: passenger.passenger_title,
            number: passenger_rph
          };
          var passengerToFlight = infoPassengersWhichReservedSeat[flightTab];

          passengerToFlight.seatselect = passengerToFlight.seatselect || [];
          passengerToFlight.ids_seatselect = passengerToFlight.ids_seatselect || [];

          passengerToFlight.seatselect.push(passengerInfo);
          passengerToFlight.ids_seatselect.push(+entity_id);
          listIdsPassengersWhichReservedSeat.push(entity_id);
        }
      });
    })

    return {
      idsPassengersReservedSeats: listIdsPassengersWhichReservedSeat,
      infoPassengersReservedSeats: infoPassengersWhichReservedSeat
    };
  },
  _activateShowBlockForAssignedSeat: function () {
    var assignedSeatPassengers = WT.ReservationData.flight.assignedSeatPassengers,
      self = this;

    if (assignedSeatPassengers) {
      var $seatsAssignedWrap = $j('.seats-assigned-wrap');

      if (assignedSeatPassengers['1'] && assignedSeatPassengers['1'].ids_seatselect) {
        this._toggleAssignedSeat(assignedSeatPassengers['1'].ids_seatselect);
        this._disableSelectedSeat(assignedSeatPassengers['1'].ids_seatselect);

        $seatsAssignedWrap.hide();
        $j('#seat-1-assigned-block').show();
      } else {
        this._toggleAssignedSeat([]);
        this._disableSelectedSeat([]);
        $seatsAssignedWrap.hide();
      }

      $j('.tab-pane-content').on('click', function () {
        var flight_rph = $j(this).data('flight-rph'),
          rph = (+flight_rph - 1),
          $seatSelectContent = $j('#seat-' + rph);

        if (assignedSeatPassengers[flight_rph] && assignedSeatPassengers[flight_rph].ids_seatselect) {
          self._toggleAssignedSeat(assignedSeatPassengers[flight_rph].ids_seatselect);
          self._disableSelectedSeat(assignedSeatPassengers[flight_rph].ids_seatselect);

          $seatSelectContent.find('.seats-assigned-wrap').hide();
          $seatSelectContent.find('#seat-' + flight_rph + '-assigned-block').show();

          return;
        }

        self._toggleAssignedSeat([]);
        self._disableSelectedSeat([]);
        $seatsAssignedWrap.hide();
      });
    }
  },

  _toggleAssignedSeat: function (seatsIds) {
    var $seatSelectTitle = $j('.seats-assigned-title'),
      $passengers = $j('.passengers').find('.line');

    if (seatsIds.length) {
      $seatSelectTitle.show();
    } else {
      $seatSelectTitle.hide();
    }

    $passengers.each(function () {
      var $self = $j(this),
        $checkbox = $self.find('input[type=checkbox]'),
        id = $checkbox.data('entity_id'),
        isSelectedId = seatsIds.indexOf(id) !== -1,
        operation = isSelectedId ? 'addClass' : 'removeClass';

      $self[operation]('disable-passenger-line');
      $checkbox.attr('data-reserved', isSelectedId).prop('checked', isSelectedId);;
    })
      .not('.disable-passenger-line')
      .find('input[type=checkbox]')
      .prop('checked', false)
      .first()
      .prop('checked', true)
  },
  _disableSelectedSeat: function (seatsIds) {
    seatsIds.forEach(function (seatId) {
      var $selectedPassenger = $j('#assigne-seats_passenger_' + seatId),
        paxName = $selectedPassenger.data('pax-name'),
        rph = $selectedPassenger.data('rph'),
        $btnSeat = $j('.seat-button.status-SELECTED'),
        entityId = $selectedPassenger.data('entity-id'),
        passenger = WT.ReservationData.passengers.find(item => parseInt(item.entity_id) === parseInt(entityId));

      var $selectedBtnSeat = $btnSeat.addClass('disabled-btn').filter(function () {
        return $j(this).data('pax-name') === paxName;
      });
      $btnSeat.find('input').prop('disabled', true);

      if (!$selectedBtnSeat.length) return;

      $j('<span></span>').appendTo($selectedBtnSeat).addClass('passenger_initials').text(passenger.initials);
    });
  },
  checkSeatMapsLength: function () {
    var seatMaps = WT.ReservationData.flight && WT.ReservationData.flight.seatMap && WT.ReservationData.flight.seatMap.seatMap,
      seatMapLength = 0;

    if (seatMaps) {
      for (var $i in seatMaps) {
        if (seatMaps.hasOwnProperty($i)) {
          for (var key in seatMaps[$i]) {
            if (Object.keys(seatMaps[$i][key]).length) seatMapLength++;
          }
        }
      }
    }

    return seatMapLength;
  }
};

var WT = WT || {};
WT.Hotels = {
  init: function () {
    this.registerCallback();
    this.checkModify();

    if (WT.Config.isHotelsPlusFlightFlow) {
      var data = JSON.parse(sessionStorage.getItem('hotelPlusFlightSearchCallbackData'));
      this.renderSearchToBar(data);
      this.filterSteps(data.departureAirport, data.arrivalAirport);
      WT.Summary.toggleSummary('#change-search');
      WT.Summary.clickSummary();
      WT.Summary.addSegmentsTabEventsHandler();

      WT.googleAnalyticsEvents.sendEvent('HotelPlusFlightStep', 'enter', 'flight + hotel');
    } else {
      var searchCriteria = JSON.parse(sessionStorage.getItem('hotelSearchCallbackData'));
      sessionStorage.removeItem('hotelSearchCallbackData');
      this.renderHotelSearchToBar(searchCriteria);
      WT.Summary.toggleSummary('#change-search');

      WT.googleAnalyticsEvents.sendEvent('HotelStep', 'enter', 'hotel');
    }

    $j('#tripsearch').hide();

    WT.Utiles._compileBlockWithHandlebars('#step-hotels' + ' .top-flight-switcher', 'top_flight_switcher', { flights: WT.flights, cls: 'extra' });

    this.loadContent('top');
  },
  registerCallback: function () {
    var self = this;

    window.hotelSearchCallback = function (data) {
      if (!WT.Utiles._getParams("checkout_success")) {
        self.refreshStep('hotel');
      }
      $j('#button-close-search').trigger('click');
      self.renderHotelSearchToBar(data);
      WT.Steps.refreshHotelSteps();
    };

    window.hotelPlusFlightSearchCallback = function (data) {
      $j('#button-close-search').trigger('click');
      self.refreshStep('flight + hotel');
      WT.Steps.refreshHotelSteps();

      if (data) {
        self.renderSearchToBar(data);
        self.filterSteps(data.departureAirport, data.arrivalAirport);
      }
    };

    window.hotelSelectedCallback = function () {
      self.refreshStep('room');

      if (WT.Config.isHotelsPlusFlightFlow) {
        WT.googleAnalyticsEvents.sendEvent('HotelPlusFlightStep', 'enter', 'room');
      } else {
        WT.googleAnalyticsEvents.sendEvent('HotelStep', 'enter', 'room');
      }
    };

    window.hotelRoomSelectedCallback = function () {
      var step = WT.Config.isHotelsPlusFlightFlow
        ? 'contact'
        : 'guest and contact';

      if (WT.Config.isHotelsPlusFlightFlow && WT.Utiles._getParams("logged_in")) {
        hotelPlusFlightBookingSummaryCallback(
          JSON.parse(sessionStorage.getItem('hotelPlusFlightBookingSummaryData'))
        );
      }

      self.refreshStep(step);

      if (WT.Config.isHotelsPlusFlightFlow) {
        WT.googleAnalyticsEvents.sendEvent('HotelPlusFlightStep', 'enter', 'contact');

        self.updateLoginBlock();
      } else {
        WT.googleAnalyticsEvents.sendEvent('HotelStep', 'enter', 'contact');
      }
    };

    window.hotelReservedCallback = function (data) {
      self.getCheckoutView('hotels/checkout/reservation', data);
    };

    window.hotelPlusFlightBookingSummaryCallback = function (data) {
      sessionStorage.setItem('hotelPlusFlightBookingSummaryData', JSON.stringify(data));

      self.renderHotelFlightSummary(data);
    };

    window.hotelPlusFlightReservedCallback = function (data) {
      var baseUrl = WT.Options.baseUrl || '/';
      var $body = $j('body');

      $j.ajax({
        url: baseUrl + 'hotels/checkout/flightReservation',
        type: 'POST',
        data: data,
        dataType: 'json',
        beforeSend: function () {
          $body.addClass('loading');
        },
        success: function (result) {
          if (result.return === 'success') {
            $j('#search_form').hide();
            WT.FindTrip.continueCheckout = $j('#continue-checkout');
            WT.flights = result.flights;
            WT.Modify.rewriteReservationDataForFlightAndPassengers(result);
            WT.Summary.buildNextStep(result, false, false);
            WT.googleAnalyticsEvents.sendEvent('HotelPlusFlightStep', 'enter', result.step);
          } else {
            alert(result.message);
          }
        },
        complete: function () {
          $body.removeClass('loading');
        }
      });
    };

    window.registerOnStepChange = function (callback) {
      self.onStepChange = callback;
    }
  },

  filterSteps: function (departureAirport, arrivalAirport) {
    var baseUrl = WT.Options.baseUrl || '/';


  },

  updateLoginBlock: function () {
    var baseUrl = WT.Options.baseUrl || '/';

    $j.ajax({
      url: baseUrl + 'customer/account/getLoginBlock',
      type: 'GET',
      dataType: 'json',
      success: function (result) {
        if (result.status) {
          var $loginBlockWrapper = $j('.rooms-allocation .member-login');
          var $mobileLoginBlockWrapper = $j('.member-management .member-login');

          $loginBlockWrapper.html(result.login_block);
          $mobileLoginBlockWrapper.html(result.mobile_login_block);

          WT.Passengers.windowResize();
          WT.Passengers.initPassengerModalForMobile();

          if (result.is_logged_in) {
            $j('body').removeClass('user-is-not-loggedin').addClass('user-is-loggedin');
          } else {
            $j('body').removeClass('user-is-loggedin').addClass('user-is-not-loggedin');
          }
        } else {
          alert(result.message);
        }
      },
      complete: function () {
        $j('.member-login').addClass('loaded');
      }
    });
  },
  getCheckoutView: function (absUrl, data) {
    var baseUrl = WT.Options.baseUrl || '/';

    $j.ajax({
      url: baseUrl + absUrl,
      type: 'POST',
      data: data,
      dataType: 'json',
      success: function (result) {
        WT.Utiles.stepLoader(false);

        if (result.status === 'success') {
          $j('#search_form').hide();
          WT.Summary.buildNextStep(result, false, false);

          WT.googleAnalyticsEvents.sendEvent('HotelStep', 'enter', 'checkout');
        } else {
          alert(result.message);
        }
      },
      error: function (xhr, ajaxOptions, thrownError) {
        WT.Utiles.stepLoader(false);
      }
    });
  },
  checkModify: function () {
    var modifyFlag = WT.Utiles._getParams('modify');

    if (modifyFlag === 'checkout') {
      WT.Steps.activeIndex = WT.Steps.getStepIndexByText('checkout');
      WT.Steps.disableAllSteps();
      WT.Utiles.stepLoader(true);
      if (WT.Config.isHotelsPlusFlightFlow) {
        this.getCheckoutView('hotels/checkout/flightReservation', {});
      } else {
        this.getCheckoutView('hotels/checkout', {});
      }
    }
  },
  getStep: function () {
    return WT.Utiles._getParams('code') ? 'SELECT_ROOM' : 'HOTEL_SEARCH';
  },
  loadContent: function (parentId) {
    var script = document.createElement('script');

    script.type = 'text/javascript';
    script.src = WT.Options.hotelsJsUrl;

    $j('#' + parentId).append(script);
  },
  isReadyLoadedContent: function () {
    var timerId = setInterval(function () {
      if ($j('hr-hotel-search.mb-1').children().length) {
        clearInterval(timerId);
        WT.Utiles.stepLoader(false);
        $j('.hotel-search__submit').trigger('click');
      }
    }, 200);
  },
  registerBackButton: function (delay) {
    setTimeout(function () {
      $j('#back-to-search-result, #back-to-room-selection').click(function () {
        WT.Steps.activeIndex -= 1;
        WT.Steps.refresh();
      })
    }, delay);
  },
  refreshStep: function (step) {
    WT.Steps.activeIndex = WT.Steps.getStepIndexByText(step);
    WT.Steps.refresh();
    WT.Steps.setPageTitleForCurrentStep();
  },
  getLanguage: function (lang) {
    if (!lang) return;

    var codes = lang.split('_');

    return (codes[0] && codes[0].toLowerCase()) + '-' + (codes[1] && codes[1].toUpperCase());
  },
  renderSearchToBar: function (data) {
    $j('.search-form-wrapper').addClass('is-summary');

    try {
      var searchInfo = WT.Templates.summary_search_info,
        templateSearchInfo = Handlebars.compile(searchInfo);

      if (!data) {
        if (templateSearchInfo) $j('#search-info').html(templateSearchInfo({}));
        return;
      }

      data.from_departure_airport_code = data.departureAirport;
      data.from_arrival_airport_code = data.arrivalAirport;
      data.added_type = data.arrivalDate ? 'return' : 'one_way';
      data.added_from_date = moment(data.departureDate).format('DD MMM YY');
      data.added_to_date = moment(data.arrivalDate).format('DD MMM YY');
      data.nightsNumber = Math.floor(moment.duration(moment(data.checkoutDate).diff(moment(data.checkinDate))).asDays());
      data.passengersNumber = data.adultsNumber + data.childrenNumber + data.infantsNumber;

      var summary_data = {
        fl: data,
        isHotelPlusFlight: true
      };

      if (templateSearchInfo) $j('#search-info').html(templateSearchInfo(summary_data));


      $j('#button-change-search').off().on('click', function () {
        $j(this).parent().parent().hide();
        $j('#hpf-search').show();
      });

      $j('#button-close-search').off().on('click', function () {
        $j(this).parent().parent().hide();
        $j('.summary-box').attr('style', '');
      });
    } catch (e) {
      console.warn(e, 'fail render top search bar');
    }
  },
  renderHotelSearchToBar: function (hotelCriteria) {
    if (!hotelCriteria) {
      return false;
    }

    try {
      var searchInfo = WT.Templates.summary_hotel_search_info,
        templateSearchInfo = Handlebars.compile(searchInfo);

      hotelCriteria.checkinDate = moment(hotelCriteria.checkin).format('DD MMM YY');
      hotelCriteria.checkoutDate = moment(hotelCriteria.checkout).format('DD MMM YY');
      hotelCriteria.passengers = hotelCriteria.adultCount + hotelCriteria.childCount;
      hotelCriteria.nights = Math.floor(
        moment.duration(moment(hotelCriteria.checkout).diff(moment(hotelCriteria.checkin))).asDays()
      );

      $j('#search-info').html(templateSearchInfo(hotelCriteria));

      $j('#button-change-search').off().on('click', function () {
        $j(this).parent().parent().hide();
        $j('#hpf-search').show();
      });

      $j('#button-close-search').off().on('click', function () {
        $j(this).parent().parent().hide();
        $j('.summary-box').attr('style', '');
      });
    } catch (e) {
      console.warn(e, 'fail render top search bar');
    }
  },
  submitSearchForm: function () {
    var selector = WT.Config.isHotelsPlusFlightFlow
      ? '.hotel-flight-search__submit'
      : '.hotel-search__submit';

    $j(selector).trigger('click');
  },
  getHotelLink: function (params) {
    var keys = ['checkin', 'checkout', 'currency', 'countryCode', 'occupancies'],
      baseUrl = WT.Options && WT.Options.baseUrl ? WT.Options.baseUrl : '/',
      url = baseUrl + 'hotels?',
      self = this;

    keys.forEach(function (key) {
      if (key === 'occupancies') {
        url += self.getOccupanciesParams(params[key]) + '&';
      } else {
        url += key + '=' + params[key] + '&';
      }
    });

    return url;
  },
  renderTopHotels: function (templateName, flag, selected) {
    var $topHotelsBlock = $j('#' + flag + 'top-hotels'),
      $content = $j('#' + flag + 'top-hotels-content'),
      $loader = $j('#hotel-loader'),
      source = WT.Templates[templateName],
      $dataBlock = $j('#top-hotels-data'),
      template = Handlebars.compile(source),
      language = this.getLanguage(selected.language || WT.Options.language) || 'en-US',
      countryCode = language.substr(-2),
      params = {
        checkin: selected.depart_date,
        checkout: selected.return_date || moment(selected.depart_date).add(1, 'days').format('YYYY-MM-DD'),
        occupancies: selected.occupancies,
        rateType: 'NIGHTLY_AVERAGE',
        priceType: 'INCLUSIVE',
        distance: '10km',
        lang: language,
        sort: 'PROVIDER_PREFERRED',
        currency: selected.currency,
        countryCode: countryCode || 'DK'
      },
      body = [];

    if (flag) {
      $dataBlock.children().each(function () {
        var dataObj = $j(this).data();

        body.push({
          code: dataObj.code,
          currency: dataObj.currency,
          maxPropertyContent: dataObj.maxpropertycontent
        });
      });
    } else {
      this.loadContent('top');

      body = [
        { code: selected.destinationid, currency: selected.currency, maxPropertyContent: selected.maxPropertyContent || 3 }
      ];
    }

    if (!$topHotelsBlock.length) return;
    if (!flag) $loader.show();

    WT.Utiles.fetchTopHotels(params, body)
      .done(function (data) {
        if (!flag) $loader.hide();

        var result = template({ hotels: data, url: WT.Hotels.getHotelLink(params) });

        $content.html(result);

        data && data[0] && data[0].propertyContents.each(function (element) {
          var images = JSON.stringify(element.images)
          $j('#photoLink' + element.code).attr('images', images)
        })

        $j('.hotel-item').on('click contextmenu', function () {
          var locationHotel = {
            code: $j(this).data('code'),
            name: $j(this).data('name')
          };

          selected.destinationAirportCode = selected.destinationid;
          selected.destinationid = locationHotel.name;
          localStorage.setItem('selected', JSON.stringify(selected));
          localStorage.setItem('locationHotel', JSON.stringify(locationHotel));
          localStorage.setItem('checkout_success_data', JSON.stringify({
            'selected': selected,
            'locationHotel': locationHotel,
          }));
        })
      })
      .fail(function () {
        console.warn('fail load top hotels');

        if (flag) {
          $j('#landing-top-hotels .title').hide();
        } else {
          $loader.hide();
        }

        var result = template({ hotels: null });
        $content.html(result);
      });
  },
  renderHotelFlightSummary: function (rawData) {
    var self = this,
      data = this.prettifyHotelFlightSummaryData(rawData),
      source = WT.Templates.hotel_flight_summary,
      template = Handlebars.compile(source),
      result_block = $j('#summary'),
      result = template(data);

    result_block.replaceWith(result);

    $j('.continue-booking-hotel-flight').off('click').on('click', function (e) {
      e.preventDefault();

      var nextIndex = WT.Steps.activeIndex + 1;
      var nextStep = WT.Steps.backend_data[nextIndex];

      if (nextStep === 'ssr') {
        WT.Hotels.onStepChange('CHECKOUT');
        return true;
      }

      if (nextStep === 'seatselect' && !WT.Steps.backend_data.includes('ssr')) {
        WT.Hotels.onStepChange('CHECKOUT');
        return true;
      }

      if (nextStep === 'seatselect' || nextStep === 'checkout') {
        $j('.continue-booking-check:visible').click();
        return true;
      }

      return false;
    });
  },
  updateHotelFlightSummary: function (bookingSummaryData) {
    var ndcSummaryData = JSON.parse(sessionStorage.getItem('hotelPlusFlightBookingSummaryData'));
    var totalPrice = parseFloat(ndcSummaryData.PriceInfo.totalPrice);
    var subTotal = parseFloat(ndcSummaryData.PriceInfo.subTotal);
    var taxAndFee = parseFloat(ndcSummaryData.PriceInfo.taxAndFee);
    var extrasTotal = parseFloat(bookingSummaryData.fl.added_extras_price);
    var extrasTotalWithVat = parseFloat(bookingSummaryData.fl.added_extras_price_with_vat);
    var extrasVatAmount = extrasTotalWithVat - extrasTotal;

    ndcSummaryData.PriceInfo.totalPrice = (totalPrice + extrasTotalWithVat).toFixed(2);
    ndcSummaryData.PriceInfo.subTotal = (subTotal + extrasTotal).toFixed(2);
    ndcSummaryData.PriceInfo.taxAndFee = (taxAndFee + extrasVatAmount).toFixed(2);

    this.renderHotelFlightSummary(ndcSummaryData);
  },
  prettifyHotelFlightSummaryData: function (rawData) {
    if (rawData.flightInfo !== undefined) {
      rawData.flightInfo = this.prettifyFlightSummaryData(rawData.flightInfo);
    }

    if (rawData.hotelInfo !== undefined) {
      rawData.hotelInfo = this.prettifyHotelSummaryData(rawData.hotelInfo);
    }

    return rawData;
  },
  prettifyFlightSummaryData: function (data) {
    for (const direction in data) {
      if (!data.hasOwnProperty(direction)) {
        continue;
      }

      const info = data[direction].flightInfo;
      data[direction].flightInfo.departureDateTime = info.departureDate + 'T' + info.departureTime;
      data[direction].flightInfo.departureDateTimeUTC = info.departureDateUTC + 'T' + info.departureTimeUTC;

      var durationDetails = info.durationDetail;
      var durationString = durationDetails.hours + ' ' + Translator.translate('Hour(s)');
      durationString += ' ' + durationDetails.minutes + ' ' + Translator.translate('Minute(s)');
      data[direction].flightInfo.durationString = durationString;
    }

    return data;
  },
  prettifyHotelSummaryData: function (data) {
    data.totalNights = moment(data.checkout).diff(moment(data.checkin), 'days');
    data.totalAdults = 0;
    data.totalChildren = 0;

    data.guests.forEach(function (room) {
      data.totalAdults += parseInt(room.adults);
      data.totalChildren += room.children.length;
    });

    return data;
  },
  getOccupationRooms: function (passengers) {
    var adults = [],
      children = [],
      rooms = [];

    if (passengers === undefined || !passengers) {
      return 2;
    }

    passengers.forEach(function (item) {
      if (item.age === 'adult') {
        adults.push(item)
      } else {
        children.push(item)
      }
    });

    var roomsCount = Math.ceil(adults.length / 2);
    for (var i = 1; i <= roomsCount; i++) {
      rooms.push({
        adults: adults.splice(0, 2),
        children: i >= roomsCount ? children : children.splice(0, 2),
      });
    }

    return rooms;
  },
  getOccupanciesParams: function (occupancies) {
    var self = this;
    var query = [];

    if (!Array.isArray(occupancies)) {
      query.push('occupancies=' + occupancies);
    } else {
      occupancies.forEach(function (item) {
        query.push('occupancies=' + self.getOccupanciesParam(item))
      });
    }

    return query.join('&');
  },
  getOccupanciesParam: function (room) {
    var adults = room.adults.length,
      children = [];

    room.children.forEach(function (item) {
      var years = moment.duration(new Date() - moment(item.birthdate)).years();
      children.push(years);
    });

    return children.length ? adults + '-' + children.join(',') : adults;
  }
};

var shortWeekdays = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'];
var fullWeekdays = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'];
var WT = WT || {};
var isFarePreselected = false;
WT.SelectTrip = {
  isPreselected: false,
  activeTab: {},
  dirs_alias: {
    'outbound': 'from',
    'inbound': 'to'
  },
  initResults: function (response) {
    var localdata = JSON.parse(localStorage.getItem('routeInfo'));
    if (localdata !== null) {
      this.flights = response.flights;
      var flights_selected = response.flights_selected;
      this.filters = { 'departure_min': 0, 'departure_max': 1440, 'return_min': 0, 'return_max': 1440 };
      this.createFlightItemsTable(this.flights, WT.modify_flag == 'changedate' ? flights_selected : null);
      this.createFiltersBlock(this.flights);
      this.windowResize();
      this.selectFlightIfSessionStill(this.flights);
      this.initReservationFlights(this.flights);
      WT.Summary.stickyOldSummary();

      if (WT.modify_flag != 'changedate') {
        WT.Modify._selectFlightIfInResponseUpdatePassengers(response);
      }

      this.displayInboundList(!WT.Options.isRefreshInbound || WT.Options.preselectFare !== 'do_not_preselect');
      WT.SelectTrip.isSoldOutTripsByDate();
    }
  },
  selectFlightIfSessionStill: function () {
    WT.ReservationData.flight = {};
  },
  windowResize: function () {
    WT.SelectTrip.isMobile = $j(window).width() < WT.Config.maxWidthMobile;

    $j(window).resize(function () {
      var isMobile = $j(this).width() < WT.Config.maxWidthMobile;

      if (WT.SelectTrip.isMobile !== isMobile) {
        $j('.row-flight').find('.class-input').removeClass('clicked');
        $j('.description-price').hide();
      }

      WT.SelectTrip.isMobile = isMobile;
    });
  },
  createFiltersBlock: function (flights) {
    var searchdata = JSON.parse(localStorage.getItem('selected')),
      localdata = JSON.parse(localStorage.getItem('routeInfo'));
    if (localdata.display_time_filter === true) {
      var source = WT.Templates.datetime_filters,
        template = Handlebars.compile(source),
        result = template(flights);
      $j('#flight-filters').html(result);
      var returnSlider = $j('#returnslider');
      this._filtersInit($j("#slider-range-departure"), $j("#time-departure"), 'departure', flights);
      this._filtersInit($j("#slider-range-return"), $j("#time-return"), 'return', flights);
      this._filtersSliderRangesClick(flights);
      if (returnSlider.length > 0) if (searchdata.traveltype == 'oneway') {
        returnSlider.fadeOut();
      } else returnSlider.fadeIn();
    } else {
      $j('#flight-filters').html('');
    }
  },
  isIE: function () {
    var ua = navigator.userAgent;
    var is_ie = ua.indexOf("MSIE ") > -1 || ua.indexOf("Trident/") > -1 || ua.indexOf("Edge") > -1;

    return is_ie;
  },
  preselectFare: function (result, linkData) {
    var activeTabOutbound,
      activeTabInbound,
      inboundDateValidation = this._inboundLaterValidation;

    function selectFlashSaleFare() {
      if (result && result.outbound && activeTabOutbound) {
        var data = WT.ReservationData.FlashSaleData;
        var date = moment(data.departureDate).format('MMDD');
        var tripId = data.carrierCode + data.flightNumber + '_' + date + '_' + data.departureAirport + '_' + data.arrivalAirport;
        var $input = $j('input[data-trip_id="' + tripId + '"][data-fare_basis_code="' + data.fareBasisCode + '"]');

        $input.prop('checked', true);
        WT.SelectTrip._flightSelect(tripId, result.outbound, "outbound");
        WT.SelectTrip._highlightCurrentColumn($input);
        WT.SelectTrip._classSelect();
        WT.SelectTrip._getAirPriceRulesBreakdowns();
      }
    }

    function selectLowestFare(direction) {
      var outboundCheapestTripID,
        outoundCheapestTripClass,
        inboundCheapestTripID,
        inboundCheapestTripClass;

      if (result && result.outbound && direction == 'outbound' && activeTabOutbound) {
        isFarePreselected = false;

        outboundCheapestTripID = result.outbound[activeTabOutbound].cheapest_price_trip_id;
        outoundCheapestTripClass = result.outbound[activeTabOutbound].cheapest_trip_class;

        if (!outboundCheapestTripID) return false;

        var id = 'from-' + outboundCheapestTripID + outoundCheapestTripClass,
          $input = $j('#' + id),
          isRefreshInbound = $input.data('refresh_inbound');

        $input.prop('checked', true);
        WT.SelectTrip._flightSelect(outboundCheapestTripID, result.outbound, "outbound");
        WT.SelectTrip._highlightCurrentColumn($input);
        WT.SelectTrip._classSelect();
        WT.SelectTrip._getAirPriceRulesBreakdowns(isRefreshInbound, id);

        if (!isRefreshInbound) {
          WT.SelectTrip.displayInboundList(true)
        }

        isFarePreselected = true;
      }
      if (result && result.inbound && direction == 'inbound' && !WT.Options.isRefreshInbound) {
        inboundCheapestTripID = result.inbound[activeTabInbound].cheapest_price_trip_id;
        inboundCheapestTripClass = result.inbound[activeTabInbound].cheapest_trip_class;

        if (!inboundCheapestTripID || inboundDateValidation(null, result.inbound[activeTabInbound].heading_flight) == 'error') return false;

        $j('#to-' + inboundCheapestTripID + inboundCheapestTripClass).prop('checked', true);
        WT.SelectTrip._flightSelect(inboundCheapestTripID, result.inbound, "inbound");
        WT.SelectTrip._highlightCurrentColumn($j('#to-' + inboundCheapestTripID + inboundCheapestTripClass));
        WT.SelectTrip._classSelect();
        WT.SelectTrip._getAirPriceRulesBreakdowns();
      }
    }

    function selectHighestFare() {
      var outboundHighestTripID,
        outoundHighestTripClass,
        inboundHighestTripID,
        inboundHighestTripClass;

      if (result && result.outbound) {
        outboundHighestTripID = result.outbound[activeTabOutbound].highest_price_trip_id;
        outoundHighestTripClass = result.outbound[activeTabOutbound].highest_trip_class;

        if (!outboundHighestTripID) return false;

        var id = 'from-' + outboundHighestTripID + outoundHighestTripClass,
          $input = $j('#' + id),
          isRefreshInbound = $input.data('refresh_inbound');

        $input.prop('checked', true);
        WT.SelectTrip._flightSelect(outboundHighestTripID, result.outbound, "outbound");
        WT.SelectTrip._highlightCurrentColumn($j('#from-' + outboundHighestTripID + outoundHighestTripClass));
        WT.SelectTrip._classSelect();
        WT.SelectTrip._getAirPriceRulesBreakdowns(isRefreshInbound, id);

        if (!isRefreshInbound) {
          WT.SelectTrip.displayInboundList(true)
        }
      }
      if (result && result.inbound && !WT.Options.isRefreshInbound) {
        inboundHighestTripID = result.inbound[activeTabInbound].highest_price_trip_id;
        inboundHighestTripClass = result.inbound[activeTabInbound].highest_trip_class;

        if (!inboundHighestTripID || inboundDateValidation(null, result.inbound[activeTabInbound].heading_flight) == 'error') return false;

        $j('#to-' + inboundHighestTripID + inboundHighestTripClass).prop('checked', true);
        WT.SelectTrip._flightSelect(inboundHighestTripID, result.inbound, "inbound");
        WT.SelectTrip._highlightCurrentColumn($j('#to-' + inboundHighestTripID + inboundHighestTripClass));
        WT.SelectTrip._classSelect();
        WT.SelectTrip._getAirPriceRulesBreakdowns();
      }
    }

    function selectFare(tripId, tripClass, tripDirection, tripTitle) {
      if (!tripId) return false;

      var id = tripTitle === 'outbound' ? 'from-' + tripId + tripClass : 'to-' + tripId + tripClass,
        $tripBlock = $j('#' + id),
        isRefreshInbound = $tripBlock.data('refresh_inbound');

      if (tripTitle == 'inbound' && inboundDateValidation(null, result.inbound[activeTabInbound].heading_flight) == 'error') return false;

      $tripBlock.prop('checked', true);
      WT.SelectTrip._flightSelect(tripId, tripDirection, tripTitle);
      WT.SelectTrip._classSelect();
      WT.SelectTrip._getAirPriceRulesBreakdowns(isRefreshInbound, id);
      WT.SelectTrip._highlightCurrentColumn($tripBlock);

      if (tripTitle === 'outbound' && !isRefreshInbound) {
        WT.SelectTrip.displayInboundList(true)
      }
    }

    if (arguments.length === 1) {
      if (result && result.outbound) {
        for (key in result.outbound) {
          if (result.outbound[key]['active'] === true) {
            activeTabOutbound = key;
          }
        }
      }
      if (result && result.inbound) {
        for (key in result.inbound) {
          if (result.inbound[key]['active'] === true) {
            activeTabInbound = key;
          }
        }
      }
    } else {
      if (linkData[0] === 'outbound') {
        activeTabOutbound = linkData[1];
      } else {
        activeTabInbound = linkData[1];
      }
    }

    if (WT.ReservationData.FlashSaleData) {
      selectFlashSaleFare();
    } else {
      switch (WT.Options.preselectFare) {
        case 'preselect_lowest_fare':
          if (result && result.outbound) {
            selectLowestFare('outbound');
          }
          if (result && result.inbound && !WT.Options.isRefreshInbound) {
            selectLowestFare('inbound');
          }
          break;
        case 'preselect_highest_fare':
          selectHighestFare();
          break;
        case 'preselect_price_group':
          if (WT.Options.priceGroups != '') {
            var priceGroups = (WT.Options.priceGroups.toLowerCase()).split(',');
            var lowestPriceOutbound = 0;
            var lowestPriceInbound = 0;
            if (result && result.outbound) {
              for (var key in result.outbound[activeTabOutbound].trips) {
                var trip_Id = result.outbound[activeTabOutbound].trips[key]['trip_id'];
                var trip_classes = result.outbound[activeTabOutbound].trips[key]['classes']['from'];
                for (var i = 0; i < priceGroups.length; i++) {
                  var priceGroup = priceGroups[i].trim();
                  for (var key in trip_classes) {
                    var bookDesigQty = trip_classes[key]['book_desig_qty'];
                    if (bookDesigQty === '' || bookDesigQty !== 0) {
                      if (!lowestPriceOutbound) {
                        if (key === priceGroup) {
                          var trip_Class = trip_classes[key]['class_id'];
                          if (lowestPriceOutbound < trip_classes[priceGroup]['total_fare']) {
                            lowestPriceOutbound = trip_classes[priceGroup]['total_fare'];
                            selectFare(trip_Id, trip_Class, result.outbound, "outbound");
                          }
                        }
                      }
                    }
                  }
                }
              }
              if (!lowestPriceOutbound) {
                selectLowestFare('outbound');
              }
            }

            if (result && result.inbound && !WT.Options.isRefreshInbound) {
              for (key in result.inbound[activeTabInbound].trips) {
                trip_Id = result.inbound[activeTabInbound].trips[key]['trip_id'];
                trip_classes = result.inbound[activeTabInbound].trips[key]['classes']['to'];
                for (i = 0; i < priceGroups.length; i++) {
                  priceGroup = priceGroups[i].trim();
                  for (var key in trip_classes) {
                    bookDesigQty = trip_classes[key]['book_desig_qty'];
                    if (bookDesigQty === '' || bookDesigQty != 0) {
                      if (!lowestPriceInbound) {
                        if (key === priceGroup) {
                          trip_Class = trip_classes[key]['class_id'];
                          if (lowestPriceInbound < trip_classes[priceGroup]['total_fare']) {
                            lowestPriceInbound = trip_classes[priceGroup]['total_fare'];
                            selectFare(trip_Id, trip_Class, result.inbound, "inbound");
                          }
                        }
                      }
                    }
                  }
                }
              }
              if (!lowestPriceInbound) {
                selectLowestFare('inbound');
              }
            }
          } else {
            selectLowestFare('outbound');
            selectLowestFare('inbound');
          }
          break;
        case 'do_not_preselect':
          WT.Summary.prepareSearchForm(false);
          break;
      }
    }

    if (this.isIE()) $j('#resultlist tr.row-flight td .class-input span.label').addClass('IE');
  },
  refreshInbound: function (inputId) {
    var baseUrl = WT.Options.baseUrl || '/',
      data = $j('#tripsearch_form').serialize(),
      fareBasisCode = $j('#' + inputId).data('fare_basis_code'),
      requestData = data + '&direction_inbound=true&fare_basis_code=' + fareBasisCode,
      outbound = WT.ReservationData.flight.segments && WT.ReservationData.flight.segments.outbound,
      trips = Object.keys(outbound || {});

    trips.forEach(function (tripId, index) {
      requestData += '&flight_number[' + index + ']=' + outbound[tripId].from_flight_number;
      requestData += '&marketing_airline_code[' + index + ']=' + outbound[tripId].from_marketing_airline_code;
    });

    WT.Utiles.stepLoader(true);

    $j.ajax({
      url: baseUrl + WT.Config.loadstep_url + '/refreshInbound',
      data: requestData,
      type: 'POST',
      success: function (result) {
        WT.Utiles.stepLoader(false);

        if (result.return == 'success') {
          var flights = $j.extend(true, {}, WT.SelectTrip.flights, result.flights);

          WT.SelectTrip.flights = flights;
          WT.SelectTrip.createFlightItemsTable(flights);
          WT.SelectTrip.displayInboundList(true);

          $j('#' + inputId).prop('checked', true);
          WT.SelectTrip._flightSelect();
          $j('html, body').animate({ scrollTop: $j(document).height() }, 1200);
        }
      },
      error: function (xhr, ajaxOptions, thrownError) {
        WT.Utiles.stepLoader(false);
      }
    });
  },
  selectTicket: function ($input, data, direction_title, isRefreshInbound) {
    $input.prop('checked', true);

    if (WT.Options.isRefreshInbound && $input.attr('id').indexOf('to-') === -1) {
      $j('.tableview-inbound').find('.class-input-field')
        .prop('checked', false)
        .parents('.price-group-item').removeClass('active');
      $j('.tableview-inbound').find('.description-price').hide();
    }

    this._flightSelect($input.data('trip_id'), data[direction_title], direction_title);
    this._classSelect();
    this._getAirPriceRulesBreakdowns(isRefreshInbound, $input.attr('id'));
    this._highlightCurrentColumn($input);

    if (!isRefreshInbound) {
      this.displayInboundList(true);
    }
  },
  _filtersSliderRangesClick: function (flights) {
    var self = this,
      direction = 'departure';

    $j('.interval-btn').find('li').on('click', function () {
      var min_seconds = parseInt($j(this).data('min')) * 60,
        max_seconds = parseInt($j(this).data('max')) * 60;
      direction = $j(this).closest('div').is('#returnslider')
        ? 'return'
        : 'departure';
      WT.googleAnalyticsEvents.sendEvent('Flights', 'filtering', direction);
      $j("#slider-range-" + direction)
        .slider({ values: [min_seconds, max_seconds] });
      $j("#time-" + direction)
        .text(self._filtersFormHhMmfromSeconds(min_seconds) + ' - ' + self._filtersFormHhMmfromSeconds(max_seconds));

      self.filters[direction + '_min'] = min_seconds;
      self.filters[direction + '_max'] = max_seconds;
      self.createFlightItemsTable(flights);
    });
  },
  _filtersInit: function (sliderElem, rangeElem, direction, flights) {
    var self = this;
    sliderElem.slider({
      range: true,
      min: 0,
      max: 1439,
      values: [0, 1439],
      step: 1,
      slide: function (e, ui) {
        rangeElem.html(self._filtersFormHhMmfromSeconds(ui.values[0]) + ' - ' + self._filtersFormHhMmfromSeconds(ui.values[1]));
        self.filters[direction + '_min'] = ui.values[0];
        self.filters[direction + '_max'] = ui.values[1];
      },
      stop: function () {
        self.createFlightItemsTable(flights);
        WT.googleAnalyticsEvents.sendEvent('Flights', 'filtering', direction);
      }
    });
    rangeElem.text(self._filtersFormHhMmfromSeconds(0) + ' - ' + self._filtersFormHhMmfromSeconds(1439));
  },
  _filtersFormHhMmfromSeconds: function (value) {
    var result = '';
    var hours1 = Math.floor(value / 60);
    var minutes1 = value - (hours1 * 60);
    if (hours1.toString().length === 1) hours1 = '0' + hours1;
    if (minutes1.toString().length === 1) minutes1 = '0' + minutes1;

    if (hours1 && minutes1) {
      result = WT.Config.isIranian
        ? new persianDate().month(1).date(1).hours(hours1).minutes(minutes1).format('HH:mm')
        : hours1 + ':' + minutes1;
    } else {
      result = ''
    }

    return result;
  },
  sortFlightsObj: function (data) {
    var keys = Object.keys(data).sort();
    var sortedData = {};

    for (var j = 0; j < keys.length; j++) {
      var key = keys[j].replace(keys[j], '+' + keys[j]);
      sortedData[key] = data[keys[j]];
    }

    return sortedData;
  },
  _flightItemsTabs: function (data, place, direction) {
    var countTabs = Object.keys(data || {}).length,
      tabs_heading = '<div class="flight-tabs ' + direction + '"><div class="tabs owl-tabs clearfix owl-tabs-' + countTabs + '">',
      active_count = 0,
      active_id = '',
      sortedData = this.sortFlightsObj(data);

    for (var d in sortedData) {
      var id_formatted = (typeof sortedData[d].title !== 'undefined') ? sortedData[d].title.replace(/:|,| /g, '') : '',
        date = WT.Config.isIranian ? new persianDate(new Date(sortedData[d].title)) : moment(new Date(sortedData[d].title)),
        day = date.format('D'),
        month = date.format(window.FLIGHT_TABS_MONTH_FORMAT ? window.FLIGHT_TABS_MONTH_FORMAT : 'MMMM'),
        dayOfWeek = date.format('ddd'),
        year = date.format('YYYY'),
        activated = (sortedData[d].active === true) ? 'active' : '',
        formattedDate = WT.Config.isChinese
          ? date.format('LL') + ', ' + dayOfWeek
          : Translator.translate(dayOfWeek) + ', ' + day + '.' + Translator.translate(month) + ' ' + year;

      tabs_heading += '<div class="' + (sortedData[d].empty == true ? 'unactive-tab tab' : 'tab') + '"><a href="#'
        + direction
        + id_formatted
        + '" id="tab'
        + direction
        + id_formatted
        + '" data-direction="'
        + direction
        + '" data-id="'
        + d
        + '"><h4>'
        + formattedDate
        + '</h4><span class="cheapest">'
        + ' '
        + sortedData[d].cheapest_price_formatted
        + '</span></a></div>';

      if (activated === 'active') {
        active_count++;
        active_id = id_formatted;
      }
    }

    tabs_heading += '</div></div>';
    var tabs_class = 'tab-contents';
    $j(tabs_heading).insertBefore($j(place));
    $j('#flightSelectList').addClass(tabs_class);
    WT.Utiles._customOwlTabs();
    setTimeout(function () {
      if (active_count > 0) $j('#tab' + direction + active_id).click();
      $j.each($j(".owl-tabs"), function () {
        $j(this).data('owlCarousel').reinit();
        $j(this).trigger('owl.goTo', $j('#tab' + direction + active_id).parent().parent().index());
        $j(this).trigger('owl.prev', $j('#tab' + direction + active_id).parent().parent().index());
      })
    }, 500);
  },
  createFlightItemsTable: function (data, selected) {
    var localdata = JSON.parse(localStorage.getItem('routeInfo'));
    var _result;
    var flight_amount_tab;
    var flight_amount;
    var additionalTable;

    if (localdata !== null) {
      var self = this,
        result = "",
        source = WT.Templates.item_table,
        template = Handlebars.compile(source),
        results_block = $j('#resultlist');

      if (data.length == 0) {
        results_block.html('<ul class="messages"><li class="error-msg"><ul><li><span' + Translator.translate('An SMS error was encountered while processing your request. Please try again later.') + '</span></li></ul></li></ul>');
        return;
      }

      results_block.html('');
      result += '<div id="flightSelectList" class="flight-list" >';
      for (var direction in data) { //inbound/outbound
        if (data[direction] != null) {
          var flyKeys = Object.keys(data[direction]);

          if (flyKeys.length) {
            var titlesForTable = this.getTitlesForFlyTable(data, direction);
            departureMessage = titlesForTable.departureMessage,
              arrivalMessage = titlesForTable.arrivalMessage;

            result += '<div class="table-header-title ' + direction + '">' +
              Translator.translate(direction) + ' ' +
              '<label>' +
              departureMessage + ' > ' + arrivalMessage +
              '</label>' +
              '</div>	<div class="tabs-panels flight-list tableview-list tableview-' + direction + '">';
          }

          var doesntShowMobilePanel = false,
            hideMobile = '';
          if (WT.Options.hidePriceGroupsDescriptionOnMobile) {
            hideMobile = '-hide';
          }

          for (var y in data[direction]) { //tabs
            var tab_data = data[direction];
            if (tab_data.hasOwnProperty(y)) {
              var id_formatted = tab_data[y].title;

              flight_amount = 0;
              (id_formatted !== undefined) ? id_formatted = id_formatted.replace(/:|,| /g, '') : '';
              _result = '<div class="panel table-tab" id="' + direction + id_formatted + '" ><table>' + Translator.translate(this._flightItemTableHeading(tab_data[y], direction));
              additionalTable = doesntShowMobilePanel ? '' : '<div class="mobile-panel' + hideMobile + ' panel table-tab"><table>' + Translator.translate(this._flightItemTableHeading(tab_data[y], direction));
              doesntShowMobilePanel = true;

              var flight = tab_data[y].trips;
              flight_amount_tab = 0;
              for (var i in flight) {
                if (
                  (flight[i].from_arrival_airport_name && flight[i].from_departure_minutes >= self.filters.departure_min &&
                    flight[i].from_departure_minutes <= self.filters.departure_max) ||
                  (flight[i].to_arrival_airport_name && (flight[i].to_departure_minutes === null ||
                    (flight[i].to_departure_minutes >= self.filters.return_min && flight[i].to_departure_minutes <= self.filters.return_max)))
                ) {
                  this._formatFlightAddedNodes(flight[i], self.dirs_alias[direction]);
                  this._extendFlightClassesWithLegend(flight[i], self.dirs_alias[direction], tab_data, y);

                  flight[i]['classesCount'] = Object.keys(flight[i].classes[flyDirection]).length;

                  for (var direction in flight[i].segments) {
                    var isSelected = selected && selected[self.dirs_alias[direction]]
                      && selected[self.dirs_alias[direction]].id
                      && selected[self.dirs_alias[direction]].id === i;
                    flight[i]['added_' + self.dirs_alias[direction] + '_selected_flight'] = isSelected;
                    flight[i]['added_' + self.dirs_alias[direction] + '_selected_class'] = isSelected
                      ? selected[self.dirs_alias[direction]].class : null;

                    var flightType = Object.keys(flight[i].segments[direction]).length > 1 ? 'connected' : 'normal',
                      connectedInfo = {};

                    if (flightType === 'connected') {
                      connectedInfo = this.formatByConnectedFlight(flight[i], flightType, direction);
                    } else {
                      for (var segment in flight[i].segments[direction]) {
                        var stops = flight[i].segments[direction][segment][self.dirs_alias[direction] + '_stops'];

                        if (Array.isArray(stops) && stops.length >= 1) flightType = 'multileg';

                        this._formatFlightAddedNodes(flight[i].segments[direction][segment], self.dirs_alias[direction]);
                      }
                    }

                    flight[i][direction + '_segment'] = flightType === 'connected' ? connectedInfo : flight[i].segments[direction];
                    flight[i].type = flightType;
                  }

                  flight[i].price_groups_description = {};

                  for (const [key, value] of Object.entries(flight[i].classes)) {
                    flight[i].price_groups_description[key] = self.getPriceGroupsDescriptionForClasses(Object.keys(flight[i].classes[key]));
                  }

                  _result += template(flight[i]);
                  flight_amount_tab++;
                  flight_amount++;
                }
              }
            }

            if (additionalTable) additionalTable += '</table></div>';

            _result += '</table></div>';
            result += additionalTable + _result;
          }
          result += '</div>';
        }
      }

      result += '</div>';

      results_block.hide().append(result);
      for (var direction in data) {
        self._flightItemsTabs(data[direction], '.tableview-' + direction, direction);
      }
      results_block.fadeIn("slow");
      this._appendPriceGroupsStaticBlocks();
      WT.Utiles.tooltipsInit();

      function isWrongOrderSelection($input) {
        return $input.data('direction') == 'inbound' && WT.ReservationData.flight.trip_id === undefined && $j('.tableview-outbound').length > 0;
      }

      function isOutboundLaterThanInbound($input) {
        var direction_title = $input.data('direction'),
          flights = self._flatFlightsWithoutTabsGrouping(data[$input.data('direction')]);

        return self._inboundLaterValidation(direction_title, flights[$input.data('trip_id')]) == 'error' && $j('.tableview-outbound').length > 0;
      }

      function isSameDataForModification($input) {
        selected_class = $input.val(),
          $sftr = $input.closest('.selected-flight'),
          isSelected = $sftr.length ? true : false;
        return isSelected && $sftr.attr('class').indexOf(selected_class) > -1;
      }

      $j('.class-input-field').on('click', function (e) {
        e.stopPropagation();
        var $this = $j(this),
          isRefreshInbound = $this.data('refresh_inbound');
        var direction_title = $this.data('direction');

        if ($this.prop('checked') == false) {
          var type = WT.ReservationData.flight.added_type;

          if (isRefreshInbound && direction_title === 'outbound' && type === 'return') {
            self.selectTicket($this, data, direction_title, isRefreshInbound);
            self.activeRefreshInbound = true;
          } else {
            self.selectTicket($this, data, direction_title);
          }

          return true;
        }

        return false;
      });

      $j('.inf-class').on('click', function (e) {
        var pricegroupPopup = $j('.pricegroup-popup .content');
        var target = $j(this).data('id');
        var targetExist = pricegroupPopup.find('#' + target).length;
        pricegroupPopup.find('div').removeClass('no-display');
        if (targetExist) {
          pricegroupPopup.find('div:not(#' + target + ')').addClass('no-display');
        }
      });

      $j('.class-input-select').on('click', function (event) {
        event.stopPropagation()
        var $expander = $j(this).find('.flight-price-expander');

        if (!$expander.length) return;

        var box = $expander.data('box'),
          price = $expander.data('price'),
          inputId = $expander.data('input-id'),
          $input = $j('#' + inputId),
          $rowFlight = $expander.parents('.row-flight'),
          $headingBlock = $rowFlight.siblings('.heading-under'),
          $listDataPrice = $headingBlock.siblings('.row-flight').children('td'),
          $descriptionPriceList = $headingBlock.find('.box-' + box).children('.description-categories'),
          $descriptionBlock = $rowFlight.next();
        var $descriptionList = $rowFlight.siblings('.description-price'),
          $priceBlock = $descriptionBlock.find('.price'),
          $selectBtn = $descriptionBlock.find('.btn-select-price'),
          $descriptionCategories = $descriptionBlock.find('.description-categories'),
          $fareRule = '<span title="Click here to see price group details" data-toggle="modal" ' +
            'data-target="#price-group-description" class="icon ic ic-info"><span>' +
            Translator.translate('Fare description') + '</span></span>',
          $modalContent = $j('#price-group-description').find('.content'),
          $priceGroup = $modalContent.find('#' + box),
          listGroup = [],
          lenDescriptionPrice = $descriptionPriceList.length;

        if (isSameDataForModification($input)) {
          alert(Translator.translate('You have selected the same flight and fare which you have in your original reservation. Please choose a new fare / flight and try again.'));
          return false;
        }

        if (isWrongOrderSelection($input)) {
          alert(Translator.translate('Please choose outbound flight first'));
          return false;
        }

        if (isOutboundLaterThanInbound($input)) {
          if (isFarePreselected) {
            alert(Translator.translate('Inbound flight should be later than Outbound'));
          }
          return false;
        }

        $j('.loyalty-info').html('');

        WT.SelectTrip.resetSelectedTripByTableview($rowFlight);
        $listDataPrice.removeClass('active');
        $descriptionList.hide();
        $descriptionCategories.empty();
        $selectBtn.data('input-id', '');
        $priceBlock.text(price);
        $input.parent().addClass('clicked');
        $input.parent().removeClass('closed');

        $descriptionPriceList.each(function () {
          var $self = $j(this);
          $self.clone().children().appendTo($descriptionCategories);
        });

        $rowFlight.addClass('active-row');
        $selectBtn.data('input-id', inputId);
        $j(this).parents('.price-group-item').addClass('active');
        $input.trigger('click');

        if ($priceGroup && $priceGroup.length) {
          $modalContent.children().hide();
          $priceGroup.show();
        } else {
          $modalContent.children().show();
        }

        if (!WT.Config.showPriceGroupsDescriptionInTable && $j(window).width() < WT.Config.maxWidthMobile) {
          $rowFlight.parents('.tabs-panels.flight-list').find('.row-flight').children('tr.description-price').remove();
          $descriptionBlock
            .clone()
            .appendTo($j(this).parents('.row-flight'))
            .show()
            .find('.btn-select-price')
            .data('input-id', inputId);

          self.initTrigger();
        } else {
          $descriptionBlock.show();
        }
      });

      self.initTrigger();

    }
  },
  getPriceGroupsDescriptionForClasses: function (classes) {
    var self = this;
    var normalizedClasses = classes.map(self.normalizePriceGroupName);
    var description = {
      options: [],
      price_groups: {},
    };

    if (WT.Config.priceGroupsDescription) {
      WT.Config.priceGroupsDescription.forEach(function (item) {
        description.options.push({
          icon: item.icon,
          name: item.option,
        });

        for (const [key, value] of Object.entries(item)) {
          if (normalizedClasses.includes(key)) {
            if (description.price_groups[key] === undefined) {
              description.price_groups[key] = {
                code: key,
                options: []
              };
            }

            description.price_groups[key].options.push({
              value: value
            });
          }
        }
      });
    }

    return description;
  },
  normalizePriceGroupName: function (name) {
    return name.replace(/[^\w\d]+/, '');
  },
  _highlightCurrentColumn: function (radio) {
    var col_no = radio.closest('td').index(),
      table_this = radio.closest("table");
    $j('td', table_this).removeClass('high-current');
    table_this.find(" > tbody > tr > td:nth-child(" + (col_no + 1) + ")")
      .addClass('high-current');
  },
  initTrigger: function () {
    $j('.btn-select-price').on('click', function () {
      var inputId = $j(this).data('input-id');

      $j('#' + inputId).trigger('click');
      $j('.close-price-button').trigger('click');
    });


    $j('.close-price-button').on('click', function () {
      var $container = $j(this).parents('.description-price');
      var $row = $container.parents('.row-flight');

      $row.find('.class-input-select.clicked').addClass('closed');
      $container.hide();
    })
  },
  getTitlesForFlyTable: function (data, direction) {
    var arrivalMessage = '',
      departureMessage = '';

    for (var key in data[direction]) {
      if (!data[direction][key].hasOwnProperty('cheapest_price_trip_id')) continue;
      var currentObject = data[direction][key];
      first_trip_id = Object.keys(currentObject.trips)[0],
        headingFlight = currentObject.trips[first_trip_id],
        flyDirection = direction == 'outbound' ? 'from' : 'to',
        arrivalMessage = headingFlight[flyDirection + '_arrival_airport_name'] + ' (' + headingFlight[flyDirection + '_arrival_airport_code'] + ')',
        departureMessage = headingFlight[flyDirection + '_departure_airport_name'] + ' (' + headingFlight[flyDirection + '_departure_airport_code'] + ')';
      if (arrivalMessage && departureMessage) break;
    }

    return { arrivalMessage: arrivalMessage, departureMessage: departureMessage }
  },
  _appendPriceGroupsStaticBlocks: function () {
    var desc = $j('.pricegroup-descriptions');
    if ($j('.fares-titles').length == 0) {
      desc.hide();
    } else {
      $j(".pricegroup-td").each(function () {
        $j(this).html($j('#pricegroup-' + $j(this).data('class_id')).html());
        desc.maxHeightBox('.fare-max td');
      });
    }
  },
  _inboundLaterValidation: function (direction, flight) {
    var reserved_flight = WT.ReservationData.flight;
    if (reserved_flight && flight) {
      if (new Date(flight.from_departure_datetime).getTime() >= new Date(reserved_flight.to_departure_datetime).getTime() ||
        new Date(flight.to_departure_datetime).getTime() <= new Date(reserved_flight.from_departure_datetime).getTime()
      ) {
        return 'error';
      }
    }
  },
  _formatFlightAddedNodes: function (flight, direction, index) {
    var departureDate = flight[direction + '_departure_datetime'],
      arrivalDate = flight[direction + '_arrival_datetime'];

    if (!departureDate || !arrivalDate) return;

    departureDate = new Date.parse(departureDate);
    arrivalDate = new Date.parse(arrivalDate);

    var duration = flight[direction + '_duration'];

    var durationHours = Math.floor(flight[direction + '_duration'] / 60).toString();
    var durationMinutes = Math.floor(flight[direction + '_duration'] % 60).toString();
    duration = durationHours + ' ' + Translator.translate('Hour(s)') + ' ' + durationMinutes + ' ' + Translator.translate('Minute(s)');

    if (WT.Config.isIranian) {
      var departureIranianDate = new persianDate(new Date(departureDate));
      var arrivalIranianDate = new persianDate(new Date(arrivalDate));
      duration = new persianDate().month(1).date(1).hours(durationHours).minutes(durationMinutes).format('HH:mm')
    }

    var directionDate = WT.Config.isIranian
      ? departureIranianDate.format(WT.Utiles.getDateFormat())
      : moment(departureDate).format(WT.Utiles.getDateFormat());
    var directionDay = WT.Config.isIranian
      ? departureIranianDate.format("dddd")
      : Translator.translate(fullWeekdays[departureDate.getDay()]);

    flight['flight_' + direction + '_duration'] = duration;
    flight['added_' + direction + '_week'] = directionDay;
    flight['added_' + direction + '_date'] = directionDate;
    flight['added_' + direction + '_duration'] = WT.Config.isIranian ? duration : durationHours + "h " + durationMinutes + "m";
    flight['added_' + direction + '_departure_datetime'] = WT.Config.isIranian ? departureIranianDate.format('HH:mm') : departureDate.toString('HH:mm');
    flight['added_' + direction + '_arrival_datetime'] = WT.Config.isIranian ? arrivalIranianDate.format('HH:mm') : arrivalDate.toString('HH:mm');

    this._applyMinSeatsToShowForClasses(flight, direction);

    if (index || index === 0) {
      flight.index = index;
    }
  },
  _applyMinSeatsToShowForClasses: function (flight, direction) {
    if (typeof (flight.classes) !== 'undefined') {
      if (typeof (flight.classes[direction]) !== 'undefined') {
        for (var class_item in flight.classes[direction]) {
          if (flight.classes[direction].hasOwnProperty(class_item)) {
            var class_obj = flight.classes[direction][class_item];
            if (parseInt(class_obj.book_desig_qty) > parseInt(WT.Config.minSeatsToShow)) class_obj.book_desig_qty = '';//WT.Config.minSeatsToShow + '+';
          }
        }
      }
    }
  },
  _extendFlightClassesWithLegend: function (flight, direction, tab_data, y) {
    if (typeof (flight.classes[direction]) !== 'undefined') {
      var obj = {};
      for (var $i in tab_data[y]['class_legend']) {
        if (flight.classes[direction][$i] == null) {
          obj[$i] = tab_data[y]['class_legend'][$i];
        } else {
          obj[$i] = flight.classes[direction][$i];
        }
      }
      flight.classes[direction] = $j.extend(true, {}, {}, obj);
    }
  },
  _getAirPriceRulesBreakdowns: function (isRefreshInbound, inputId) {
    var self = this,
      both_flights_selected = WT.ReservationData.flight.trip_id.indexOf('_END_') > -1 && $j('.tableview-inbound').length > 0,
      outbound_ow_selected = typeof WT.ReservationData.flight.trip_id !== 'undefined' && $j('.tableview-inbound').length == 0,
      modify_inboundonly_selected = typeof WT.ReservationData.flight.trip_id !== 'undefined' && $j('.tableview-inbound').length > 0 && $j('.tableview-outbound').length == 0 && jQuery.isEmptyObject(WT.Modify.order) == false,
      modify_indicator = jQuery.isEmptyObject(WT.Modify.order) == false,
      baseUrl = WT.Options.baseUrl || '/',
      url = baseUrl + WT.Config.loadstep_url + '/getPrices',
      type = WT.ReservationData.flight.added_type,
      isRefreshModel = WT.Options.isRefreshInbound && (inputId || '').indexOf('to-') === -1,
      isActiveRefresh = self.activeRefreshInbound && (inputId || '').indexOf('to-') === -1,
      isRefresh = type === 'return' && (isActiveRefresh || isRefreshInbound),
      $continueButtons = $j('#form-flights-buttons #continue, #summary #continue, #continue-checkout, #summary #form-flights');

    if (both_flights_selected || modify_inboundonly_selected || outbound_ow_selected) {
      WT.Utiles.bookingSummaryLoader(true);

      if (modify_indicator) url = baseUrl + WT.Config.loadstep_url + '/getModifyPrices';

      var data = WT.Summary._stepFlightsModel(isRefreshModel);
      WT.Utiles.sendWithRecaptcha(data, function (data) {
        $j.ajax({
          url: url,
          data: data,
          type: 'POST',
          dataType: 'json',
          success: function (result) {
            WT.Utiles.bookingSummaryLoader(false);

            if (result.redirect) {
              location.href = result.redirect;
            } else if (result.status === 1) {
              self.rewriteFlightWithBreakdownsAndRules(result.prices);
              WT.Modify.rewriteFlightTotals(result.prices);
              $continueButtons.removeClass('button-disabled');
              WT.Summary.refresh();

              if (modify_indicator) {
                $j('.hidden-modify-totals').show();
              }

              if (isRefresh) {
                self.refreshInbound(inputId);
              }

              // Update loyalty info
              if (result.prices.loyalty_info) {
                for (const direction in result.prices.loyalty_info) {
                  var $activeInputWrapper = $j('.tableview-' + direction + ' .class-input-select input:checked').parent();
                  var $loyaltyInfo = $activeInputWrapper.find('.loyalty-info');
                  var lItem = result.prices.loyalty_info[direction];

                  $loyaltyInfo.html(
                    '<div class="loyalty-wrapper">' +
                    '<p class="loyalty-earn">' + Translator.translate('Earn') + '</p>' +
                    '<p class="loyalty-value">' + lItem.value + ' ' + Translator.translate('Miles') + '</p>' +
                    '</div>'
                  );
                }
              }

              if (WT.ReservationData.FlashSaleData) {
                $j('#form-flights-buttons #continue').trigger('click');
                if (result.prices.ticket_time_limit) {
                  WT.Utiles._showCountDown(result.prices.ticket_time_limit, {});
                }
              }
            } else {
              var resultErrorMsg = 'There might be a problem with your booking, please try again in few minutes';

              if (result.return == 'error') resultErrorMsg = result.message;

              alert(Translator.translate(resultErrorMsg));
              WT.googleAnalyticsEvents.sendException(Translator.translate(resultErrorMsg), false);
              $continueButtons.addClass('button-disabled');
              self.displayInboundList(true);
            }
          },
          error: function (xhr, ajaxOptions, thrownError) {
            WT.Utiles.bookingSummaryLoader(false);
            WT.googleAnalyticsEvents.sendException(Translator.translate('Status: ') + xhr.status + ' ' + thrownError, false);
            alert(Translator.translate('Status: ') + xhr.status + ' ' + thrownError);
            $continueButtons.addClass('button-disabled');
            self.displayInboundList(true);
          }
        });
      });
    } else if (isRefresh) {
      self.refreshInbound(inputId);
    }
  },
  _flightItemTableHeading: function (tab_data, direction) {
    if (tab_data.trips !== undefined && tab_data.trips) {
      var source = WT.Templates.item_table_heading,
        template = Handlebars.compile(source),
        first_trip_id = Object.keys(tab_data.trips)[0];
      $j.extend(tab_data, { 'heading_flight': tab_data.trips[first_trip_id] });
      $j.extend(tab_data, { 'direction': direction });
      for (var $i in tab_data['class_legend']) {
        tab_data['class_legend'][$i]['name'] = Translator.translate(tab_data['class_legend'][$i]['name']);
      }
      return template(tab_data);
    }

    return '';
  },
  _checkChosenBothFlightsTableView: function () {
    var err_mess,
      err_message;

    if (WT.modify_flag || WT.ReservationData.FlashSaleData) return;

    if (!Object.keys(WT.ReservationData.flight || {}).length || !$j('#step-flights input[type=radio].class-input-field:checked').length) {
      err_mess = this.isSoldOutTripsByDate()
        ? 'The flight you selected is temporarily sold out, please try another flight date'
        : 'Please choose flight';

      alert(Translator.translate(err_mess));
      WT.googleAnalyticsEvents.sendException(err_mess, false);

      return 'error';
    } else {
      if (WT.ReservationData.flight.trip_id !== undefined) {
        if (WT.ReservationData.flight.trip_id.indexOf('_END_') <= -1 && $j('.tableview-inbound').length > 0 && $j('.tableview-outbound').length > 0) {
          err_message = Translator.translate('Please choose inbound and outbound flights');
          alert(err_message);
          WT.googleAnalyticsEvents.sendException(err_mess, false);

          return 'error';
        }
      }
    }
  },
  _createClassesBlockListView: function (data) {
    var result = "",
      source = WT.Templates.classes,
      template = Handlebars.compile(source),
      flights = this._flatFlightsWithoutTabsGrouping(data);

    for (var i in flights) {
      var results_block = $j('#classes' + flights[i].trip_id);
      if (flights[i].classes) {
        result = template(flights[i]);
        results_block.append(result);
        WT.Utiles.tooltipsInit();
      }
    }
  },
  _classSelect: function () {
    var fl = WT.ReservationData.flight;

    var commasToDot = function (price) {
      if (price !== undefined) {
        return parseFloat(("" + price).replace(/,/g, '.'));
      }
    };

    if (fl) {
      var f_id = fl.trip_id,
        taxes = 0,
        total_fare = 0,
        base_fare = 0,
        total_discount = 0,
        total_fare_discounted = 0,
        base_fare_discounted = 0,
        total_discount_show = false,
        is_total_discount_price = false;

      var checked_classes = $j('.class-input-field:checked');

      $j.each(checked_classes, function () {
        var class_id = $j(this).attr('value'),
          direction = $j(this).data('class_type'),
          current_class = WT.ReservationData.flight.classes[direction][class_id],
          fees = current_class['fees'] == null ? 0 : parseFloat(current_class['fees']);

        taxes += commasToDot(current_class['taxes'] + fees);
        total_fare += commasToDot(current_class['total_fare']);
        base_fare += commasToDot(current_class['base_fare']);

        if (current_class['discount']) {
          total_discount += commasToDot(current_class['discount']);
          total_fare_discounted += commasToDot(current_class['total_fare_discounted']);
          base_fare_discounted += commasToDot(current_class['base_fare_discounted']);
          total_discount_show = current_class['discount_show'];
          is_total_discount_price = current_class['is_discount_price'];
        }

        WT.ReservationData.classes[direction] = class_id;
        $j('#class_' + direction).val(class_id);
        WT.googleAnalyticsEvents.sendEvent('Flights', 'classSelect', direction);
      });

      if (total_fare > 0) {
        fl.base_fare = base_fare;
        fl.total_fare = total_fare;
        fl.total_discount = total_discount;
        fl.total_fare_discounted = total_fare_discounted;
        fl.base_fare_discounted = base_fare_discounted;
        fl.total_discount_show = total_discount_show;
        fl.is_total_discount_price = is_total_discount_price;
        fl.taxes.taxes_total = taxes;
        fl.taxes.fee_total = taxes;

        this._updateFlightBox(base_fare, total_fare, taxes, f_id, fl.currency_format);
        WT.Summary.refresh();
      }
    }
  },
  _flightSelect: function (trip_id, data, direction_optional) {
    if (!trip_id) return;

    var flights = this._flatFlightsWithoutTabsGrouping(data),
      f_item = $j('#flightitem' + trip_id),
      add_offset = 55,
      checked_classes = $j('.class-input-field:checked'),
      fl = WT.ReservationData.flight;

    WT.Utiles._showCountDown(1, {}, 'hide');
    $j('.packages').hide();
    $j('.flight-item').removeClass('selected');
    WT.googleAnalyticsEvents.sendEvent('Flights', 'flightSelect', trip_id);
    WT.Passengers.clearReservationDataForPassengers();
    WT.ReservationData.packages = {};
    WT.ReservationData.seats = {};
    WT.ReservationData.extras = {};

    $j('#packages' + trip_id).show();
    $j('#flightitem' + trip_id).addClass('selected');

    this._resizePackagesFromOnly();

    WT.Utiles.scrollTo(f_item, add_offset);

    var ids = [],
      merge_id = '';

    $j.each(checked_classes, function () {
      ids.push($j(this).data('trip_id'));
      $j(this).parents('.price-group-item').addClass('active');
      $j(this).parent().trigger('click');
    });

    if (fl.from_arrival_airport_name && $j('.tableview-inbound').length == 1) { //already choosen outbound for return
      delete WT.ReservationData.flight.segments[direction_optional];
      delete WT.ReservationData.flight.header[WT.SelectTrip.dirs_alias[direction_optional]];
      WT.ReservationData.flight = $j.extend(true, {}, fl, flights[trip_id]);
      merge_id = ids.join('_END_');
      WT.ReservationData.flight.trip_id = merge_id;
    } else {
      WT.ReservationData.flight = $j.extend(true, {}, flights[trip_id]);
    }

    if (Object.keys(WT.ReservationData.flight).length > 0) {
      WT.Summary.showSummary();
      WT.Summary.refresh();
    }

    $j(document).trigger('RESERVATION_FLIGHT_COME', WT.ReservationData.flight);
  },
  _updateFlightBox: function (base_fare, total_fare, taxes, f_id, format) {
    var flightBox = '#flightitem' + f_id,
      baseBox = $j('#base-price span', flightBox),
      taxesBox = $j('#tax-price span', flightBox),
      totalBox = $j('.unit-price span', flightBox);
    baseBox.html(WT.Utiles.formatWithCurrency(base_fare.toFixed(2), format));
    taxesBox.html(WT.Utiles.formatWithCurrency(taxes.toFixed(2), format));
    totalBox.html(WT.Utiles.formatWithCurrency(total_fare.toFixed(2), format));
  },
  formatByConnectedFlight: function (flight, type, direction) {
    var marketingCode = '',
      flightNumber = '',
      aircarftLabel = '',
      carrierLabel = '',
      directionCode = this.dirs_alias[direction],
      segments = flight.segments[direction],
      prevKeySegment = '',
      index = 0;

    for (var segment in segments) {
      var segmentMarketingCode = segments[segment][directionCode + '_marketing_airline_code'],
        segmentFlightNumber = segments[segment][directionCode + '_flight_number'],
        segmentAircarftLabel = segments[segment][directionCode + '_aircarft_label'],
        segmentCarrierLabel = segments[segment][directionCode + '_carrier_label'];

      if (marketingCode !== segmentMarketingCode && segmentMarketingCode) {
        marketingCode = marketingCode ? marketingCode + '-' + segmentMarketingCode : segmentMarketingCode;
      }

      if (segmentFlightNumber !== flightNumber && segmentFlightNumber) {
        flightNumber = flightNumber ? flightNumber + '-' + segmentFlightNumber : segmentFlightNumber;
      }

      if (segmentAircarftLabel !== aircarftLabel && segmentAircarftLabel) {
        aircarftLabel = aircarftLabel ? aircarftLabel + '-' + segmentAircarftLabel : segmentAircarftLabel;
      }

      if (segmentCarrierLabel !== carrierLabel && segmentCarrierLabel) {
        carrierLabel = carrierLabel ? carrierLabel + '-' + segmentCarrierLabel : segmentCarrierLabel;
      }

      if (index && prevKeySegment) {
        var diff = WT.Utiles.diffDate(
          segments[segment][directionCode + '_departure_datetime_origin'],
          segments[prevKeySegment][directionCode + '_arrival_datetime_origin']
        ),
          durationHours = Math.floor(diff / 60).toString().padStart(2, '0') || 0,
          durationMinutes = Math.floor(diff % 60).toString().padStart(2, '0') || 0;

        segments[segment]['interval'] = +durationHours + 'H ' + (+durationMinutes) + 'M';
      }

      this._formatFlightAddedNodes(segments[segment], directionCode, index);
      index++;
      prevKeySegment = segment;
    }

    var connectedInfoItems = [{
      key: directionCode + '_departure_airport_code',
      value: flight[directionCode + '_departure_airport_code']
    },
    {
      key: directionCode + '_arrival_airport_code',
      value: flight[directionCode + '_arrival_airport_code']
    },
    {
      key: 'added_' + directionCode + '_arrival_datetime',
      value: flight['added_' + directionCode + '_arrival_datetime']
    },
    {
      key: 'added_' + directionCode + '_departure_datetime',
      value: flight['added_' + directionCode + '_departure_datetime']
    },
    {
      key: 'flight_' + directionCode + '_duration',
      value: flight['flight_' + directionCode + '_duration']
    },
    {
      key: directionCode + '_marketing_airline_code',
      value: marketingCode
    },
    {
      key: directionCode + '_flight_number',
      value: flightNumber
    },
    {
      key: directionCode + '_aircarft_label',
      value: aircarftLabel
    },
    {
      key: directionCode + '_carrier_label',
      value: carrierLabel
    },
    {
      key: 'type',
      value: type
    },
    {
      key: 'countStops',
      value: Object.keys(segments).length - 1
    }
    ],
      newFlight = {};

    connectedInfoItems.forEach(function (item) {
      WT.Utiles._defineProperty(newFlight, item.key, item.value)
    })

    return { flight: newFlight };
  },
  rewriteFlightWithBreakdownsAndRules: function (data) {
    var fl = WT.ReservationData.flight;

    fl.passengers_fare_breakdown = data.fare_breakdowns.breakdowns;
    fl.segments_breakdowns = data.fare_breakdowns.segments_breakdowns;
    fl.fare_rules = data.fare_rules;
  },
  _flatFlightsWithoutTabsGrouping: function (data) {
    var flatFlights = {};
    for (var y in data) {
      if (data.hasOwnProperty(y)) {
        var flight = data[y].trips;
        for (var i in flight) {
          flatFlights[i] = flight[i];
        }
      }
    }
    return flatFlights;
  },
  _resizePackagesFromOnly: function () {
    var packages_box = $j('.package-departure.grid12-12');
    if (packages_box.length > 0)
      packages_box.maxHeightBox('.package-products > li label');
  },
  initReservationFlights: function () {
    if (!WT.Options.isRefreshInbound) return;

    var flights = this.flights;

    if (flights) {
      for (var direction in flights) {
        if (flights[direction]) {
          var dates = Object.keys(flights[direction] || {});

          if (dates.length) {
            dates.forEach(function (date) {
              var tab = flights[direction][date];
              if (tab.active) {
                if (tab && tab.trips) {
                  var tripKeys = Object.keys(tab.trips || {});

                  tripKeys.forEach(function (key, index) {
                    if (!index) {
                      var trip = $j.extend(true, {}, tab.trips[key]);

                      WT.ReservationData.flight = $j.extend(true, {}, WT.ReservationData.flight, trip);
                    }
                  })
                }
              }
            })
          }
        }
      }
    }
  },
  displayInboundList: function (isDisplay) {
    var $flightSelectList = $j('#flightSelectList');

    if (isDisplay) {
      $flightSelectList.find('.table-header-title.inbound').removeClass('no-display');
      $flightSelectList.find('.flight-tabs.inbound').removeClass('no-display');
      $flightSelectList.find('.tableview-inbound').removeClass('no-display');
    } else {
      $flightSelectList.find('.table-header-title.inbound').addClass('no-display');
      $flightSelectList.find('.flight-tabs.inbound').addClass('no-display');
      $flightSelectList.find('.tableview-inbound').addClass('no-display');
    }
  },
  resetSelectedTripByTableview: function ($element) {
    var $tableviewList = $element.parents('.tableview-list');

    $tableviewList
      .find('.row-flight')
      .removeClass('active-row')
      .find('td.active')
      .removeClass('active')
      .find('.class-input-select')
      .removeClass('clicked');

    $tableviewList.find('.description-price').hide();
  },
  isSoldOutTripsByDate: function () {
    if (this.flights && this.activeTab) {
      var flights = this.flights,
        flightDate = flights[this.activeTab.direction] || null;

      if (flightDate) {
        var activeId = (WT.SelectTrip.activeTab.id || '').replace('+', ''),
          tabInfo = flightDate[activeId];

        if (tabInfo && tabInfo.trips) {
          var tripKeys = Object.keys(tabInfo.trips || {});

          return tripKeys.every(function (tripId) {
            var trip = tabInfo.trips[tripId],
              activeDir = WT.SelectTrip.dirs_alias[WT.SelectTrip.activeTab.direction],
              classInfo = trip.classes[activeDir],
              classesIds = Object.keys(classInfo || {});

            if (!classesIds.length) return true;

            return classesIds.every(function (classId) {
              return classInfo[classId].total_fare_formatted ? true : false;
            });
          });
        }
      }
    }
  },
  displayMessageError: function ($element, message) {
    var $continueButtons = $j('#form-flights-buttons #continue, #summary #continue, #continue-checkout, #summary #form-flights');

    alert(Translator.translate(message));
    $element.prop('checked', false);
    $continueButtons.addClass('button-disabled');

    return false;
  }
};

var WT = WT || {};

WT.Cancel = {
  init: function (result) {
    this.renderContent(result);
    this.bindActions();
  },
  renderContent: function (result) {
    var source = WT.Templates.cancel_content,
      template = Handlebars.compile(source),
      data = {};

    data.flights = result.flights
      .filter(function (flight) {
        return flight.passenger_rph === 1;
      })
      .map(function (flight) {
        var dateFormat = WT.Options.dateFormat,
          format = 'YYYY-MM-DD HH:mm';

        flight.date = moment(flight.arrival_date, format).format(dateFormat);
        flight.arrival_time = moment(flight.arrival_date, format).format('HH:mm');
        flight.departure_time = moment(flight.departure_date, format).format('HH:mm');

        return flight;
      });
    data.passengers = WT.ReservationData.passengers;
    data.bookingReferenceID = result.bookingReferenceID;
    data.rloc = result.rlocToDisplay;

    $j('#cancel-content').html(template(data));
  },
  bindActions: function () {
    $j('.refund-button').addClass('button-disabled');

    $j('input[name="type_cancel"]').on('change', function () {
      var $content = $j(this).parents('#cancel-content');

      $j('.refund-button').removeClass('button-disabled');

      $content
        .find('.cancel-checkboxes')
        .find('input[type="checkbox"]')
        .prop('checked', false);

      $j(this)
        .parents('.cancel-item')
        .find('input[type="checkbox"]')
        .prop('checked', true);
    });

    $j('#cancel-content .checkbox').on('change', function () {
      var $item = $j(this).parents('.cancel-item'),
        $input = $item.find('.cancel-type').find('input[name="type_cancel"]'),
        value = $input.val();

      if (!$input.prop('checked') && $j(this).prop('checked')) {
        $input.prop('checked', true);
        $j('.refund-button').removeClass('button-disabled');

        $item.parent().find('.cancel-checkboxes').each(function () {
          if ($j(this).hasClass(value)) return;

          $j(this).find('input[type="checkbox"]').prop('checked', false);
        });
      }
    })
  },
  flatCancelPreparation: function (stepData) {
    var $content = $j('#cancel-content'),
      typeCancel = $content.find('.cancel-type').find('input:checked').val(),
      $selectedItems = $content.find('.cancel-checkboxes').find('input:checked');

    if (WT.Refund.isOnlyRefundStep()) {
      var params = WT.Utiles._getParams();

      stepData.type_cancel = params.type;

      switch (params.type) {
        case 'passenger': {
          var passengersIds = params.passengers || '',
            selectedPassengers = {};

          passengersIds.split(',').forEach(function (id, index) {
            selectedPassengers[index] = id;
          });

          stepData.selected_passengers = selectedPassengers;
          break;
        }
        case 'segment': {
          var outbound = params['cancel-segment-outbound'],
            inbound = params['cancel-segment-inbound'],
            flights = [outbound, inbound],
            selectedFlights = {};

          flights
            .filter(function (flight) {
              return flight;
            })
            .forEach(function (flight, index) {
              selectedFlights[index] = flight;
            })


          stepData.selected_flights = selectedFlights;
          break;
        }
      }

      return stepData;
    }

    stepData.type_cancel = typeCancel;

    if ($selectedItems.length) {
      var selected = {},
        key = '';

      $selectedItems.each(function (index) {
        var name = $j(this).data('name'),
          value = $j(this).val();

        selected[index] = value;

        if (name === 'passenger') {
          key = 'selected_passengers';
        }

        if (name === 'segment') {
          key = 'selected_flights';
        }
      });

      stepData[key] = selected;
    }

    return stepData;
  },
  cancelBooking: function (isRefund) {
    var baseUrl = WT.Options.baseUrl || '/';

    $j.ajax({
      url: baseUrl + 'sales/order/cancelBooking',
      type: 'POST',
      dataType: 'json',
      data: WT.Options.bookingData,
      success: function (result) {
        if (!result.status && result.error) {
          alert(result.error);

          return location.reload();
        }

        if (!isRefund) return location.reload();
        WT.Cancel.refundRequestByBooking();
        WT.Utiles.stepLoader(false);
      },
      error: function (xhr) {
        WT.Cancel.showAlert(xhr);
        if (!isRefund) location.reload();
        WT.Utiles.stepLoader(false);
      }
    });
  },
  cancelPassengers: function (data, isRefund) {
    var baseUrl = WT.Options.baseUrl || '/',
      orderId = WT.Options.bookingData.order_id || '';

    $j.ajax({
      url: baseUrl + 'booking/cancelPassenger/cancel?order_id=' + orderId,
      type: 'POST',
      dataType: 'json',
      data: data,
      success: function (result) {
        if (!result.status) {
          return location.reload();
        }

        if (!isRefund) return location.reload();

        WT.Cancel.refundRequestByPassengers();
        WT.Utiles.stepLoader(false);
      },
      error: function (xhr) {
        WT.Cancel.showAlert(xhr);
        if (!isRefund) location.reload();
        WT.Utiles.stepLoader(false);
      }
    });
  },
  cancelSegment: function (data, isRefund) {
    var baseUrl = WT.Options.baseUrl || '/',
      orderId = WT.Options.bookingData.order_id || '';

    $j.ajax({
      url: baseUrl + 'sales/order/cancelSegment?order_id=' + orderId,
      type: 'POST',
      dataType: 'json',
      data: data,
      success: function (result) {
        if (!result.status) {
          return location.reload();
        }

        if (!isRefund) return location.reload();

        WT.Cancel.refundRequestBySegment();
        WT.Utiles.stepLoader(false);
      },
      error: function (xhr) {
        WT.Cancel.showAlert(xhr);
        if (!isRefund) location.reload();
        WT.Utiles.stepLoader(false);
      }
    });
  },
  refundRequestByPassengers: function () {
    var $form = $j('#cancel_passenger_form'),
      rph = '',
      $rph = $form.find('input[name^="rph"]');

    $rph
      .filter(function () {
        return $j(this).val();
      })
      .each(function (index) {
        var separator = index + 1 === $rph.length ? '' : ',';

        rph += $j(this).val() + separator;
      });

    window.location.href = WT.Options.refundUrl + '?type=passenger&passengers=' + rph;
  },
  refundRequestByBooking: function () {
    window.location.href = WT.Options.refundUrl + '?type=booking';
  },
  refundRequestBySegment: function () {
    var $form = $j('#cancel_form');

    $form.find('input[name="booking_reference_id"]').removeAttr('name');
    $form.find('input[name="refund"]').removeAttr('name');

    window.location.href = WT.Options.refundUrl + '?type=segment&' + $form.serialize();
  },
  showAlert: function (xhr) {
    var message = xhr.responseJSON
      ? (xhr.responseJSON.message || xhr.responseJSON.error)
      : '';

    if (message) alert(message);
  }
};

var WT = WT || {};

WT.Refund = {
  init: function (result) {
    WT.Passengers.receiveFlights(result);
    this.renderContent(result);
    WT.Passengers.bindActionByMobilePhone();
    this.bindActions();
    this.submitRefund(result);
    WT.Steps.stepsClick();
    WT.Passengers.bindHandlersForSelectCopy($j('#refund-reasons-select'), '.reasons-options');
    this.hideSuccessMessage();
  },
  renderContent: function (result) {
    var source = WT.Templates.refund,
      template = Handlebars.compile(source),
      data = {};

    data.flights = result.flights
      .filter(function (flight) {
        return flight.passenger_rph === 1;
      })
      .map(function (flight) {
        var dateFormat = WT.Utiles.getDateFormat(),
          format = 'YYYY-MM-DD HH:mm';

        flight.date = moment(flight.arrival_date, format).format(dateFormat);
        flight.arrival_time = moment(flight.arrival_date, format).format('HH:mm');
        flight.departure_time = moment(flight.departure_date, format).format('HH:mm');

        return flight;
      });
    data.passengers = result.passengers.passengers.map(function (passenger) {
      passenger.age_label = WT.Utiles._getArrayIndexByText(passenger.passenger_usertype, WT.ReservationData.passengerAgeTypes);

      return passenger;
    });
    data.bookingReferenceID = result.bookingReferenceID;
    data.rloc = result.rlocToDisplay;
    data.reasons = result.reasons;
    data.contactInfo = result.contact;
    data.type_cancel = result.type_cancel;

    $j('#refund-content').html(template(data));
    $j('select option[value="' + data.contactInfo.prefix + '"]').prop('selected', 'selected');
  },
  bindActions: function () {
    var self = this;

    this.changeUploadDocument();
    this.bindActionBySelectOption();
    $j('.mobile-pp').change();

    $j('#form-flights-buttons').find('a').hide();

    $j('.browse-document').on('click', function (e) {
      e.preventDefault();
      var indexDocument = +$j(this).data('index-document'),
        $inputDocument = $j('#documents-' + indexDocument);

      if (!$inputDocument.val()) {
        $inputDocument.click();
      } else {
        var index = indexDocument + 1,
          $input = "<input class='document-input' ] id='documents-" +
            index + "' type='file' accept='.jpg, application/pdf' />",
          $label = "<label for='documents-" + index + "'></label>";

        $j(this).after($input);
        $j(this).after($label);
        $j(this).data('index-document', index);
        self.changeUploadDocument();
        $j('#documents-' + index).click();
      }
    });
  },
  getDocuments: function (formData) {
    var $documents = $j('.document-input');

    $documents
      .filter(function () {
        return this.files[0];
      })
      .each(function (index) {
        var name = 'documents[' + index + ']';

        formData.append(name, this.files[0], this.files[0].name);
      });

    return formData;
  },
  bindActionBySelectOption: function () {
    $j('#refund-reasons-select').find('.reason-option').on('click', function () {
      var $this = $j(this),
        $select = $this.parent().parent(),
        value = $this.data('value'),
        label = $this.text(),
        type = $this.data('type');

      $this.siblings().removeClass('active');
      $this.addClass('active');
      $select.trigger('blur')
        .find('.reason-selected-value')
        .text(label);
      $j('#reason-type').val(type);
      $j('#reason-value').val(value);
    });
  },
  changeUploadDocument: function () {
    var self = this;

    $j('.document-input').off().on('change', function () {
      var file = this.files[0],
        $this = $j(this),
        id = $this.attr('id'),
        $label = $j('label[for="' + id + '"]');

      if (!file) {
        return $label.html('')
      }

      $label.html("<div class='document-name'><span>" + file.name + "</span><i class='fal fa-times remove-document'></i></div>");
      self.removeDocument();
    });
  },
  removeDocument: function () {
    $j('.remove-document').off().on('click', function (e) {
      e.stopPropagation();
      e.preventDefault();

      var $label = $j(this).parent().parent(),
        id = $label.attr('for');

      $j('#' + id).val('');
      $label.empty();
    })
  },
  appendArrayToFormData: function (name, array, formData) {
    array.forEach(function (item, index) {
      formData = WT.Utiles.objectToFormData(item, formData, name + '[' + index + ']');
    });

    return formData;
  },
  initTracking: function () {
    $j('#refund_tracking').addClass('current')
      .find('a').hide()
      .siblings('strong').show();

    $j('#search-refund-button').on('click', function (e) {
      e.preventDefault();

      var searchForm = new VarienForm('search-refund-request');

      if (searchForm.validator && searchForm.validator.validate() === true) {
        var baseUrl = WT.Options.baseUrl;

        WT.Utiles.stepLoader(true);

        $j.ajax({
          url: baseUrl + 'customer/refund/getTracking',
          type: 'POST',
          data: $j('#search-refund-request').serialize(),
          success: function (result) {
            WT.Utiles.stepLoader(false);

            if (result && result.error) {
              WT.FlightService.renderMessageError(result.error, 'search-result');
            }

            if (result && result.status) {
              var newData = WT.Refund.transformResponseData([result]),
                body = $j('html, body'),
                positionTop = $j(document).height();

              WT.Refund.renderContentForSearchResult({ results: newData });

              body.stop().animate({ scrollTop: positionTop }, 600, 'swing');
            }
          },
          error: function (xhr, ajaxOptions, thrownError) {
            WT.Utiles.stepLoader(false);
            WT.FlightService.renderMessageError(xhr.message, 'search-result');
          }
        });
      }
    });

    $j('#clear-button').on('click', function () {
      $j('#search-refund-request').find('input').val('');
    });
  },
  renderContentForSearchResult: function (data) {
    var source = WT.Templates.refund_search_result,
      template = Handlebars.compile(source);

    $j('#search-result').html(template(data));
  },
  transformResponseData: function (data) {
    return data.map(function (item) {
      var passengers = {},
        dateFormat = WT.Utiles.getDateFormat();

      item.requestDate = moment(item.requestDate).format(dateFormat + ' HH:mm');
      item.flightSegments = item.flightSegments.map(function (segment, index) {
        segment.departureDate = moment(segment.departureDate).format(WT.Options.dateFormat);

        if (!index) {
          passengers = segment.passengers;
        }

        return segment;
      });

      item.passengers = passengers.map(function (passenger) {
        passenger.title = passenger.title.toLowerCase() + '.';
        passenger.passengerType = WT.Utiles._getArrayIndexByText(passenger.passengerType, WT.ReservationData.passengerAgeTypes);

        return passenger;
      });

      return item;
    })
  },
  submitRefund: function (response) {
    var self = this;

    $j('#submit-refund').on('click', function () {
      var $agreement = $j('#agreement'),
        $form = new VarienForm('form-refund'),
        $reason = $j('#reason-value'),
        isFailReason = false,
        $select = $j('#refund-reasons-select');

      if (!$agreement.prop('checked')) {
        $agreement.click();
        $j('#agreement-modal').modal();

        return;
      }

      if (!$reason.val()) {
        $select.addClass('validation-failed');

        return;
      } else {
        $select.removeClass('validation-failed');
      }

      if ($form.validator && $form.validator.validate() === true && !isFailReason) {
        var baseUrl = WT.Options.baseUrl || '/',
          formData = new FormData($j('#form-refund')[0]);

        formData = self.appendArrayToFormData('passengers', response.passengers && response.passengers.passengers, formData);
        formData = self.appendArrayToFormData('flights', WT.flights, formData);
        formData = self.getDocuments(formData);
        formData.append('bookingReferenceID', WT.ReservationData.flight.bookingReferenceID);

        WT.Utiles.stepLoader(true);

        $j('.field').removeClass('fail');

        $j.ajax({
          url: baseUrl + 'customer/refund/submit',
          data: formData,
          type: 'POST',
          enctype: 'multipart/form-data',
          processData: false,
          contentType: false,
          success: function (result) {
            WT.Utiles.stepLoader(false);

            if (result.return == 'success') {
              window.location.href = result.redirect ? result.redirect : baseUrl + 'customer/account/login';
              localStorage.setItem('refundRequestNumber', result.request_number);
            } else {
              alert(Translator.translate(result.message));
            }
          },
          error: function (xhr, ajaxOptions, thrownError) {
            WT.Utiles.stepLoader(false);
            alert(Translator.translate(xhr.message));
          }
        });
      } else {
        $j('.field').removeClass('fail');
        $j('.validation-failed').parents('.field').addClass('fail');
      }
    });
  },
  isOnlyRefundStep: function () {
    var modify = WT.Utiles._getParams('modify'),
      type = WT.Utiles._getParams('type');

    return modify === 'refund' && type;
  },
  hideSuccessMessage: function () {
    var $messages = $j('.messages');

    if ($messages.length) {
      setTimeout(function () {
        $messages.animate({
          opacity: 0,
          height: 0
        }, 500)
      }, 7000);
    }
  }
};


var WT = WT || {};
WT.Summary = {
  init: function () {
    this.summary_id = '#summary';
    this.clickSummary();
    this.toggleSummary();
    this.stickyOldSummary();
    this.toggleForAllResolutions();
    this.addSegmentsTabEventsHandler();
    this.enabled = [];
    this.isHideDirectPayment = true;
    this.isVisible = true;
    this.isOldSummary = $j('.summary-box.summary-sticky').length > 0;
    localStorage.setItem('showPopup', true);
  },
  stickyOldSummary: function () {
    if (this.isOldSummary) {
      $j('.summary-box.summary-sticky').stick_in_parent();
    }
  },
  unstickOldSummary: function () {
    if (this.isOldSummary) {
      $j('.summary-box.summary-sticky').trigger('sticky_kit:detach');
    }
  },
  hideSummary: function () {
    $j(this.summary_id).fadeOut(150);
    WT.Config.summaryIsOpen = false;
  },
  showSummary: function () {
    $j(this.summary_id).fadeIn(150);
    this.prepareSearchForm(true);
  },
  prepareSearchForm: function (isAddStyles) {
    var targetElements = '#tripsearch, body, .booking-index-index .inner-container .summary-box, .search-form-wrapper';

    if (isAddStyles) {
      $j(targetElements).addClass('is-summary');
      if (WT.Summary.isVisible) {
        $j('#tripsearch').hide();
        $j('.summary-box').attr('style', '');
      }
    } else {
      $j(targetElements).removeClass('is-summary');
    };
  },
  toggleSummary: function (selector) {
    var summaryId = selector || this.summary_id,
      summary = document.getElementById('page-header-steps'),
      $summary = $j(summaryId).parent();

    $j(window).on('scroll', function () {
      if (!$summary.length) return;

      var max = 130,
        positionTop = summary.getBoundingClientRect().top;

      if (positionTop < max && positionTop > -100) {
        $summary.parent().addClass('fixed');
      } else if (positionTop > max) {
        $summary.parent().removeClass('fixed');
      }
    });
  },
  clickSummary: function () {
    var self = this;
    var button;
    $j(document).on('click', '.continue-booking-check', function () {
      if ($j(this).hasClass('next-segment-button')) {
        return false;
      }

      button = 'continue-booking-check';
      var active_step = WT.Steps.backend_data[WT.Steps.activeIndex];

      if (active_step === 'passengers') {
        WT.ReservationData.extras = {};
        WT.ReservationData.packages = {};
        WT.ReservationData.seats = {};
        if (!WT.Passengers.validateCustomForm()) return;
      }

      self._showReminderPopupsIfNeed(active_step, function () {
        self.submitSummary();
      });
    });
    $j(document).on('click', '.continue-booking', function () {
      if (button === 'continue-checkout') {
        self._markSkippedSteps();
        self.submitSummary(true);
      } else {
        self.submitSummary();
      }
    });
    $j(document).on('click', '.continue-checkout', function () {
      button = 'continue-checkout';
      var active_step = WT.Steps.backend_data[WT.Steps.activeIndex];

      if (active_step === 'passengers' && !WT.Passengers.validateCustomForm()) {
        return false;
      }

      self._showReminderPopupsIfNeed(active_step, function () {
        self._markSkippedSteps();
        self.submitSummary(true);
      });
    });

    $j(document).on('click', '.arrow-toggle-summary', function () {
      var $summary = $j('#summary .summary-inner'),
        $body = $j('body'),
        $scrollToTop = $j('#scroll-to-top'),
        isMobile = $j(window).width() < WT.Config.maxWidthMobile;

      $j(this).toggleClass('active');
      $summary.toggle(350);

      if ($j(this).hasClass('active')) {
        if (isMobile) {
          $body.css({ overflow: 'hidden', height: '100%', position: 'relative' });
          $scrollToTop.fadeOut();
        }
      } else {
        $body.css({ overflow: 'visible' });
        if (isMobile && $j(window).scrollTop() > 100) $scrollToTop.fadeIn();
      }
    });

    $j('#button-close-search').off().on('click', function () {
      $j(this).parent().parent().hide();
      $j('.summary-box').attr('style', '');
      WT.Summary.isVisible = true;
    });
  },
  _markSkippedSteps: function () {
    var passed_steps = WT.Steps.backend_data.slice(0, WT.Steps.activeIndex + 1);
    var skipped_steps = $j(WT.Steps.backend_data).not(passed_steps).get();
    skipped_steps.pop();
    WT.Steps.skipped_steps = skipped_steps;
  },
  _showReminderPopupsIfNeed: function (active_step, callback) {
    var popup_enabled = WT.Config.remindPopups[active_step],
      popup_obj = $j('#remind-' + active_step),
      reserved_extras = WT.ReservationData.extras,
      reserved_packages = WT.ReservationData.packages,
      reserved_seats = WT.ReservationData.seats,
      qty_reservation = 0,
      isCountProducts = WT.flights && WT.flights.some(function (flight) {
        if (active_step !== 'ssr') return true;
        if (!Array.isArray(flight.ssrs)) return false;

        return flight.ssrs.length;
      });

    if (active_step === 'seatselect') {
      var selectedSeats = Object.keys(reserved_seats),
        seatsMapLength = WT.SeatSelect.checkSeatMapsLength();

      if (+popup_enabled === 1 && !(selectedSeats.length && seatsMapLength)) {
        popup_obj.modal();
      } else {
        callback();
      }

      return true;
    }

    var qtyReservation = WT.SSR.getQtyReservation(reserved_extras) + WT.SSR.getQtyReservation(reserved_packages);
    var hasInsurance = WT.SSR.getQtyReservation(reserved_extras, 'default_selector');
    var hasExtras = WT.SSR.getQtyReservation(reserved_extras);
    var $contentWrapper = $j('#remind-ssr .content-wrapper');
    var hasPackages = WT.SSR.getQtyReservation(reserved_packages);

    $contentWrapper.show();

    if (active_step === 'ssr') {
      if (WT.SSR.isInsurance) {
        qtyReservation = hasInsurance && (hasExtras > 1 || hasPackages) ? 1 : 0;

        if (!qtyReservation && hasInsurance) {
          $contentWrapper.siblings('.insurance').hide();
        } else if (!qtyReservation && !hasInsurance && (hasExtras || hasPackages)) {
          $contentWrapper.siblings('.baggage').hide();
        }
      } else {
        $contentWrapper.siblings('.insurance').hide();
        if (hasExtras || hasPackages) {
          $contentWrapper.hide();
        }
      }
    }

    if (
      +popup_enabled === 1
      && qtyReservation === 0
      && isCountProducts
    ) {
      popup_obj.modal();
    } else {
      callback();
    }
  },
  summaryResize: function () {
    if (matchMedia('only screen and (min-width:  ' + bp.large + 'px)').matches) {
      $j('#summary-items').removeAttr('style');
    }
  },
  toggleForAllResolutions: function () {
    $j('.collapsible-title').on('click', function () {
      if ($j(window).width() < 960) {
        $j('#summary .summary-inner').toggle();
        $j('#' + $j(this).data('collapse')).toggle();
        $j(this).toggleClass('active');
      } else {
        $j('#' + $j(this).data('collapse')).toggle();
        $j(this).toggleClass('active');
      }
    })
  },
  stepCustomValidation: function (step) {
    var message;

    switch (step) {
      case 'flights':
        if (WT.SelectTrip._checkChosenBothFlightsTableView()) {
          message = 'error';
        }
        break;
      case 'passengers':
        if (WT.modify_flag === 'updatedoc') {
          if (WT.Options.isCheckAdultPassenger && !WT.Passengers.checkPassengerAge()) {
            message = 'error';
          }
          break;
        }
        if (
          WT.Passengers._proceedAsGuestCheck()
          || WT.Passengers._validatePassengerAges()
          || WT.Passengers._validateLinkedInfants()
          || WT.Modify._validateChangeName()
        ) {
          message = 'error';
        }
        WT.Passengers._rememberMyDetails();
        break;
      case 'checkout':
        if (payment.validate() == false) {
          message = 'error';
        }
        break;
    }

    return message;
  },
  _stepFlightsModel: function (isRefreshInbound) {
    var searchdata = JSON.parse(localStorage.getItem('selected')) || {},
      flight,
      classes,
      fl_type,
      data;
    WT.Utiles._localStorageUpdate('trip_id', WT.ReservationData.flight.trip_id, true);
    WT.ReservationData.flight.to_departure_airport_code ? fl_type = 'return' : fl_type = 'one-way';

    if (isRefreshInbound) {
      flight = $j.extend(true, {}, WT.ReservationData.flight);
      classes = $j.extend(true, {}, WT.ReservationData.classes);

      delete flight.segments.inbound;
      delete flight.header.to;
      delete flight.classes.to;
      if (flight.passengers_fare_breakdown) delete flight.passengers_fare_breakdown.inbound;
      if (flight.fare_rules) delete flight.fare_rules.inbound;

      delete classes.to;
    } else {
      flight = WT.ReservationData.flight;
      classes = WT.ReservationData.classes;
    }

    flight.step = 'passengers';

    data = {
      selected_classes: classes,
      trip: flight,
      step: WT.Steps.backend_data[WT.Steps.activeIndex],
      flight_type: fl_type,
      numadult: searchdata['numadult'] || 1,
      numchild: searchdata['numchild'] || 0,
      numinfant: searchdata['numinfant'] || 0
    };

    return data;
  },
  _stepDataPreparation: function (step, direct, action) {
    var self = this,
      form_id = 'form-' + step,
      stepData;

    switch (step) {
      case 'flights':
        WT.Utiles._localStorageUpdate('trip_id', WT.ReservationData.flight.trip_id, true);
        stepData = self._stepFlightsModel();
        stepData.action = action || 'submit';
        break;
      case 'passengers':
        stepData = WT.Passengers.flatPassengersPreparation(form_id, direct);
        break;
      case 'ssr':
        stepData = {
          selected_packages: WT.ReservationData.packages,
          selected_extras: WT.ReservationData.extras,
          step: WT.Steps.backend_data[WT.Steps.activeIndex],
          directCheckout: direct,
          action: action || 'submit'
        };
        break;
      case 'seatselect':
        stepData = {
          selected_seats: WT.ReservationData.seats,
          step: WT.Steps.backend_data[WT.Steps.activeIndex],
          directCheckout: direct,
          action: action || 'submit'
        };
        break;
      case 'hotels':
        stepData = {
          step: WT.Steps.backend_data[WT.Steps.activeIndex],
          directCheckout: direct,
          action: action || 'submit'
        };
        break;
      case 'cancel':
        stepData = {
          step: WT.Steps.backend_data[WT.Steps.activeIndex],
          action: action || 'submit'
        };

        stepData = WT.Cancel.flatCancelPreparation(stepData);
        break;
      case 'checkout':
      case 'refund':
        stepData = $j('#' + form_id).serialize();
        break;
    }

    return stepData;
  },
  submitSummary: function (directCheckout, modifyStepFlag, action) {
    var self = this,
      step = WT.Steps.backend_data[WT.Steps.activeIndex],
      form_id = 'form-' + step,
      mageform = new VarienForm(form_id),
      baseUrl = WT.Options.baseUrl || '/',
      stepdata;

    if (self.stepCustomValidation(step) == 'error') {
      return;
    }

    if (typeof mageform.validator != 'undefined') {
      if (mageform.validator.validate() == true) {
        if (modifyStepFlag) {
          stepdata = { 'step': modifyStepFlag, 'request_params': WT.Utiles._getParams() };
        } else {
          stepdata = self._stepDataPreparation(step, directCheckout, action);
        }
        WT.Utiles.stepLoader(true);
        var ssr_empty = jQuery.isEmptyObject(WT.ReservationData.extras.from_extras)
          && jQuery.isEmptyObject(WT.ReservationData.extras.to_extras)
          && jQuery.isEmptyObject(WT.ReservationData.packages.from_packages)
          && jQuery.isEmptyObject(WT.ReservationData.packages.to_packages);

        switch (stepdata.step) {
          case 'seatselect':
            requestData = stepdata;
            break;
          case 'hotels':
            requestData = stepdata;
            break;
          case 'ssr':
            var flatSelectedPackages = WT.SSR.flatPackagePreparation(stepdata.selected_packages),
              flatSelectedExtras = WT.SSR.flatExtrasPreparation(stepdata.selected_extras),
              requestData = $j.extend({}, stepdata);
            requestData.selected_packages = flatSelectedPackages;
            requestData.selected_extras = flatSelectedExtras;
            break;
          default:
            requestData = stepdata;
            break;
        }

        WT.Utiles.sendWithRecaptcha(requestData, function (requestData) {
          $j.ajax({
            url: baseUrl + WT.Config.loadstep_url,
            data: requestData,
            type: 'POST',
            success: function (result) {
              if (result.return === 'redirect') {
                $j(location).attr('href', result.url);
              } else if (result.return === 'success') {
                var modify = WT.Utiles._getParams('modify');

                self.enabled = result.enabled && WT.modify_flag ? result.enabled : self.enabled;
                self.isHideDirectPayment = result.hide_direct_payment ? result.hide_direct_payment : self.hide_direct_payment;

                if (modify === 'buyextras' && result.step == 'checkout' && ssr_empty == true) {
                  alert(Translator.translate('Please select at least one product to continue to check-out page'));
                } else {
                  self.buildNextStep(result, modifyStepFlag);
                }

                WT.Utiles.stepLoader(false);
              } else {
                WT.Utiles.stepLoader(false);
                WT.googleAnalyticsEvents.sendException(result.message, true);

                switch (result.message) {
                  case 'Email exists':
                    WT.Passengers.showLoginModal(true);
                    break;
                  case 'This customer email already exists':
                    WT.Passengers.activateLoginByExistsCustomer(result.message);
                    break;
                  case 'No availability': {
                    if (+WT.Options.isVisiblePopupByFailReservation) {
                      $j('#modal-fail-reservation').modal();
                      self.runNewSearch();
                    } else {
                      alert(Translator.translate(result.message));
                    }
                    break;
                  }
                  default:
                    alert(Translator.translate(result.message));
                }
              }
            },
            error: function (xhr, ajaxOptions, thrownError) {
              WT.Utiles.stepLoader(false);
              WT.googleAnalyticsEvents.sendException(result.message, 'Status: ' + xhr.status + ' ' + thrownError);
              alert('Status: ' + xhr.status + ' ' + thrownError);
            }
          });
        });
      }
    } else {
      var err_message = Translator.translate('Error was encountered while processing your request.  Step is ') + step;
      WT.googleAnalyticsEvents.sendException(err_message, true);
      alert(err_message);
    }
  },
  buildNextStep: function (result, modifyStepFlag, sendEvent = true) {
    WT.Steps.activeIndex = WT.Steps.getStepIndexByText(result.step);
    this._filterSkippedSteps(WT.Steps.skipped_steps, result.step);

    if (sendEvent) {
      WT.googleAnalyticsEvents.sendEvent('BookingStep', 'enter', result.step);
    }

    if (modifyStepFlag) {
      WT.Modify.init(result, modifyStepFlag);
    }

    if (this.isHideDirectPayment) {
      $j('#form-flights').addClass('hidden-direct-payment');
    } else {
      $j('#form-flights').removeClass('hidden-direct-payment');
    }

    if (result.step !== 'checkout' && result.step !== 'passengers') {
      $j('#form-flights-buttons').css('display', 'flex');
    }

    if (!WT.Steps.activeIndex && WT.Refund.isOnlyRefundStep()) {
      WT.Summary.submitSummary(false);

      return;
    }

    WT.Utiles.setTitleBarByBookingStep(result.step);

    if (result.google_events) {
      WT.Utiles.triggerGoogleEvents(result.google_events);
    }

    switch (result.step) {
      case 'flights':
        WT.Summary.hideSummary();
        WT.Utiles._showCountDown(1, {}, 'hide');
        WT.SelectTrip.initResults(result);
        WT.Summary._createReservationDataPassengers();
        WT.Steps.activeIndex = WT.modify_flag == 'changedate' ? 1 : 0;
        WT.Steps.refresh();
        break;
      case 'passengers':
        WT.Passengers.init(result);
        if ($j('#tab-contactinfo').hasClass('active')) $j('#tab-passengers').click();
        $j('#totals-info-block').trigger('click');
        break;
      case 'ssr':
        WT.SSR.init(result);
        break;
      case 'seatselect':
        WT.SeatSelect.init(result);
        break;
      case 'hotels':
        WT.Hotels.init(result);
        break;
      case 'checkout':
        WT.Checkout.init(result);
        break;
      case 'refund':
        WT.Refund.init(result);
        break;
      case 'cancel':
        WT.Cancel.init(result);
        break;
    }

    if (result.loggedin == 1 && !WT.modify_flag) WT.Passengers._updateBlocksAfterLogin();
    if (result.bookingReferenceID) {
      var data = {
        referenceId: result.bookingReferenceID,
        rloc: result.rlocToDisplay
      };
      WT.Utiles._showCountDown(result.bookingTimeLimit, data);
    }

    if (result.step === 'flights') {
      $j('html, body').animate({ scrollTop: 0 }, 0);
      $j('.search-form-wrapper').removeClass('fixed');
    } else {
      WT.Utiles.scrollTo($j('.steps-data'), 60);
    }

    WT.Utiles.initFlashSaleBookingStyles(result.step);

    WT.Steps.refresh();
    this._hideDirectPayment(result);
    this._initStepActive();

    if (result.step === 'checkout') {
      WT.Checkout.afterPageIsFullyLoaded(result);
    }
  },
  _createReservationDataPassengers: function () {
    var searchdata = JSON.parse(localStorage.getItem('selected'));
    WT.ReservationData.passengers = Array.isArray(WT.ReservationData.passengers) ? WT.ReservationData.passengers : [];
    if (WT.ReservationData.passengers.length == 0) {
      var index = 0;
      for (var i = 0; i < parseInt(searchdata.numadult); i++) {
        WT.ReservationData.passengers.push({
          'age': 'adult',
          'id': index,
          'age_code': WT.ReservationData.passengerAgeTypes['adult'],
          'age_label': Translator.translate('adult')
        });
        index++;
      }
      for (var i = 0; i < parseInt(searchdata.numchild); i++) {
        WT.ReservationData.passengers.push({
          'age': 'child',
          'id': index,
          'age_code': WT.ReservationData.passengerAgeTypes['child'],
          'age_label': Translator.translate('child')
        });
        index++;
      }
      for (var i = 0; i < parseInt(searchdata.numinfant); i++) {
        WT.ReservationData.passengers.push({
          'age': 'infant',
          'id': index,
          'age_code': WT.ReservationData.passengerAgeTypes['infant'],
          'age_label': Translator.translate('infant')
        });
        index++;
      }
    }
  },
  _refreshSummaryButtons: function () {
    var summary_buttons = $j('.btn-checkout.continue-booking-check'),
      step = WT.Steps.backend_data[WT.Steps.activeIndex],
      next_step = WT.Steps.backend_data[WT.Steps.activeIndex + 1];
    summary_buttons.hide();
    if ($j('#page-header-steps li').length > 3) {
      if (next_step == WT.Steps.backend_data[WT.Steps.backend_data.length - 1]) {
        WT.FindTrip.continueCheckout.addClass('no-display');
      } else {
        WT.FindTrip.continueCheckout.removeClass('no-display');
      }
    }
    switch (step) {
      case 'flights':
        $j('.' + step + '-button').show();
        break;
      case 'passengers':
        var button = $j('.' + step + '-button');
        if ($j('#page-header-steps li').length == 3) {
          button.hide();
        } else {
          button.show();
        }
        if (WT.modify_flag === 'changename' || (WT.modify_flag !== undefined && next_step === 'checkout')) {
          button.hide();
          $j('#form-flights-buttons').css('display', 'flex');
          $j('.checkout-button').show()
        }
        if (WT.modify_flag === 'updatedoc') {
          button.hide();
          $j('.checkout-button').show();
        }
        break;
      case 'hotels':
      case 'cancel':
        if (next_step == WT.Steps.backend_data[WT.Steps.backend_data.length - 1]) {
          WT.FindTrip.continueCheckout.addClass('no-display');
        } else {
          WT.FindTrip.continueCheckout.removeClass('no-display');
        }
        $j('.' + next_step + '-button').show();
        break;
      case 'seatselect':
      case 'ssr':
        if (next_step == WT.Steps.backend_data[WT.Steps.backend_data.length - 1]) {
          WT.FindTrip.continueCheckout.addClass('no-display');
        } else {
          WT.FindTrip.continueCheckout.removeClass('no-display');
        }

        this.showSegmentsButtons();

        break;
    }
  },
  addSegmentsTabEventsHandler: function () {
    this.segmentTabClickHandler();
    this.nextSegmentButtonHandler();
  },
  segmentTabClickHandler: function () {
    var self = this;

    $j(document).on('click', '.tab-pane-content', function () {
      self.showSegmentsButtons();

      var $this = $j(this);

      $j('.passenger-ssr-button').removeClass('active');
      $j('.passenger-ssr-content').removeClass('active');
      $j('.passenger-ssr-button[data-flight_rph="' + $this.data('flight-rph') + '"]').addClass('active');
      $j('.passenger-ssr-content[data-flight_rph="' + $this.data('flight-rph') + '"]').addClass('active');
    });
  },
  nextSegmentButtonHandler: function () {
    $j(document).on('click', '.next-segment-button', function (e) {
      e.preventDefault();

      var currentStep = WT.Steps.backend_data[WT.Steps.activeIndex];
      var $flightSwitcher = $j('#step-' + currentStep).find('#top-flight-switcher');
      var $activeTab = $flightSwitcher.find('li.active .tab-pane-content');
      var activeTabFlightRph = parseInt($activeTab.data('flight-rph'));
      var nextSegmentFlightRph = activeTabFlightRph + 1;
      var $nextTab = $flightSwitcher.find('.tab-pane-content[data-flight-rph="' + nextSegmentFlightRph + '"]');

      $nextTab.trigger('click');

      $j([document.documentElement, document.body]).animate({
        scrollTop: $nextTab.offset().top - 100
      }, 500);

      $nextTab.animate({
        opacity: 0.5
      }, 1000, function () {
        $nextTab.animate({
          opacity: 1
        }, 1000);
      });
    });
  },
  showSegmentsButtons: function () {
    var currentStep = WT.Steps.backend_data[WT.Steps.activeIndex];
    var nextStep = WT.Steps.backend_data[WT.Steps.activeIndex + 1];
    var $nextSegmentButtons = $j('.next-segment-button');
    var $nextStepButtons = $j('.' + nextStep + '-button');
    var $flightSwitcher = $j('#step-' + currentStep).find('#top-flight-switcher');
    var $activeTab = $flightSwitcher.find('li.active .tab-pane-content');
    var activeTabFlightRph = parseInt($activeTab.data('flight-rph'));

    if (WT.flights.length > 1 && activeTabFlightRph < WT.flights.length) {
      $nextStepButtons.hide();
      $nextSegmentButtons.show();
    } else {
      $nextSegmentButtons.hide();
      $nextStepButtons.show();
    }
  },

  getPricePackagesFromDirection: function (packages) {
    var price = 0;
    for (var user_id in packages) {
      var flights = packages[user_id].flights;
      for (var $ii in flights) {
        if (typeof (flights[$ii]) !== "undefined") {
          var special_price = flights[$ii].special_price;

          if (special_price == -1 || special_price == 0 || special_price == "") {
            price += parseFloat(flights[$ii].price);
          } else {
            price += parseFloat(special_price);
          }
        }
      }
    }

    return price;
  },
  getPriceSeats: function (seats) {
    var totalLocalPrice = 0;

    for (var flight_rph in seats) {
      for (var passengerId in seats[flight_rph]) {
        totalLocalPrice += parseFloat(seats[flight_rph][passengerId].price);
      }
    }

    return totalLocalPrice;
  },
  getPricePackages: function (pack) {
    var priceToPackages = pack.to_packages ? this.getPricePackagesFromDirection(pack.to_packages) : 0;
    var priceFromPackages = pack.from_packages ? this.getPricePackagesFromDirection(pack.from_packages) : 0;

    return priceToPackages + priceFromPackages;
  },
  getPriceExtras: function (extras) {
    var priceToExtras = extras.to_extras ? this.getPriceExtrasFromDirection(extras.to_extras, 'to') : 0;
    var priceFromExtras = extras.from_extras ? this.getPriceExtrasFromDirection(extras.from_extras, 'from') : 0;

    return priceToExtras + priceFromExtras;
  },
  getPriceExtrasFromDirection: function (extras, direction) {
    var totalLocalPrice = 0;
    if (typeof (extras) !== "undefined") {
      for (var userId in extras) {
        if (extras[userId].flights) {
          var flights = extras[userId].flights;
          for (var flight_rph in flights) {
            var extrasOnFlight = flights[flight_rph];
            if (extrasOnFlight) {
              for (var extra_id in extrasOnFlight) {
                var extra = extrasOnFlight[extra_id];
                var qty = extra.qty;

                if (extra['free_product_' + direction] === true) {
                  qty = qty - 1;
                }

                var special_price = extra.special_price;
                if (special_price == -1 || special_price == 0 || special_price == "") {
                  totalLocalPrice += parseFloat(extra.price * qty);
                } else {
                  totalLocalPrice += parseFloat(special_price * qty);
                }
              }
            }
          }
        }
      }
    }

    return totalLocalPrice;
  },
  refresh: function (data) {
    var fl = WT.ReservationData.flight,
      old_fl = {},
      rph_list = [],
      payingPassengersCount = Translator.translate(this._getPayingPassengersCount());
    if ($j.isEmptyObject(fl)) return;
    var pack = WT.ReservationData.packages,
      seats = WT.ReservationData.seats,
      extras = WT.ReservationData.extras,
      passengers = WT.ReservationData.passengers || [],
      fl_type = fl.to_departure_airport_code ? 'return' : 'one-way',
      source = WT.Templates.summary_flight_item,
      modify_flag = WT.Utiles._getParams('modify'),
      template = Handlebars.compile(source),
      self = this,
      step = WT.Steps.backend_data[WT.Steps.activeIndex],
      format = fl.currency_format,
      searchInfo = WT.Templates.summary_search_info,
      containerId = WT.Summary.isOldSummary ? '#flight-summary-box' : '#flight-summary';

    if (searchInfo) var templateSearchInfo = Handlebars.compile(searchInfo);

    this._refreshSummaryButtons();

    function gettingPrice(price, just_float, isNotAddedProducts, total = false) {
      var totalprice = parseFloat(price);

      if (!isNotAddedProducts) {
        var packagesPrice = pack ? self.getPricePackages(pack) : 0,
          extrasPrice = extras ? self.getPriceExtras(extras) : 0,
          seatsPrice = seats ? self.getPriceSeats(seats) : 0;

        var countryVat = WT.SSR.country_vat;

        if (total || !countryVat) {
          totalprice += packagesPrice + extrasPrice + seatsPrice;
        } else {
          var ssrsAmount = packagesPrice + extrasPrice;
          var vatAmount = ssrsAmount * countryVat / 100;
          var ssrsAmountNet = ssrsAmount - vatAmount;

          totalprice += ssrsAmountNet + seatsPrice;
        }
      }

      if (typeof free_extras_discount !== 'undefined') {
        totalprice -= parseInt(free_extras_discount.discount);
      }

      if (just_float) {
        return totalprice.toFixed(2);
      } else {
        return WT.Utiles.formatWithCurrency(parseFloat(totalprice).toFixed(2), format);
      }
    }

    fl.added_totalprice = gettingPrice(fl.total_fare, false, false, true);
    fl.added_total_float = gettingPrice(fl.total_fare, true);
    fl.added_baseprice = gettingPrice(fl.base_fare);
    fl.added_extras_price = gettingPrice(0, true);
    fl.added_extras_price_with_vat = gettingPrice(0, true, false, true);

    if (fl.total_discount) {
      fl.added_total_discount = gettingPrice(fl.total_discount, false, true);
      fl.added_totalprice_discounted = gettingPrice(fl.total_fare_discounted);
      fl.added_total_float_discounted = gettingPrice(fl.total_fare_discounted, true);
      fl.added_baseprice_discounted = gettingPrice(fl.base_fare_discounted);
    }

    if (typeof fl.taxes !== 'undefined') {
      var ssrsVatAmount = fl.added_extras_price_with_vat - fl.added_extras_price;

      if (fl.taxes.taxes_total === undefined) {
        fl.taxes.taxes_total = 0.00
      }
      fl.taxes.taxes_total_formatted = WT.Utiles.formatWithCurrency(fl.taxes.taxes_total.toFixed(2), format);

      if (fl.taxes.fee_total === undefined) {
        fl.taxes.fee_total = 0.00
      }

      var totalFeeAmount = fl.taxes.fee_total + ssrsVatAmount;
      fl.taxes.fee_total_formatted = WT.Utiles.formatWithCurrency(totalFeeAmount.toFixed(2), format);
    }

    fl.added_type = fl_type;

    if (WT.Modify.order) {
      old_fl = WT.Modify.order;
      var directions = ['from', 'to'];

      $j.each(directions, function (index, direction) {
        old_fl['added_' + direction + '_week'] = Translator.translate(new Date(old_fl[direction + '_departure_datetime']).toLocaleString('en-GB', { weekday: 'short' }));
        old_fl['added_' + direction + '_date'] = new Date(old_fl[direction + '_departure_datetime']).toString(WT.Utiles.getDateFormat());

        fl.modify_flag = WT.modify_flag;
      });
    }

    if (Array.isArray(WT.flights)) {
      WT.flights.forEach(function (flight) {
        rph_list.push(flight.flight_rph);
      });
    }

    if (WT.ReservationData.hotel !== undefined) {
      var hotel = WT.ReservationData.hotel;
      fl.nightsNumber = moment(hotel.checkoutDate).diff(moment(hotel.checkinDate), 'days');
      fl.roomNumber = hotel.rooms.length;
      fl.passengersNumber = 0;
      fl.isHotelPlusFlight = true;
      fl.added_from_date = moment(fl.from_departure_datetime).format('DD MMM YY');
      fl.added_to_date = moment(fl.to_departure_datetime).format('DD MMM YY');

      hotel.rooms.forEach(function (room) {
        fl.passengersNumber += parseInt(room.numberOfAdults);
        if (Array.isArray(room.childAges)) {
          fl.passengersNumber += room.childAges.length;
        }
      });
    }

    var summary_data = {
      'fl': fl,
      'old_fl': old_fl,
      'pack': pack,
      'seats': seats,
      'passengers': passengers,
      'payingPassengersCount': payingPassengersCount,
      'passengersCount': Translator.translate(passengers.length),
      'rph_list': rph_list,
      'modify_flag': modify_flag
    };

    if (WT.Config.isHotelsPlusFlightFlow) {
      WT.Hotels.updateHotelFlightSummary(summary_data);
      return true;
    }

    $j(containerId).html(template(summary_data));
    if (templateSearchInfo) $j('#search-info').html(templateSearchInfo(summary_data));

    if (fl.total_discount) {
      $j('#base-total').text(fl.added_totalprice_discounted);
    } else {
      $j('#base-total').text(fl.added_totalprice);
    }

    self._summaryApplyTicketsFareBreakdownsAndRules(WT.ReservationData.flight);
    self._summaryApplyPackages(pack);
    self._summaryApplySeats();
    self._summaryApplyExtras(WT.ReservationData.extras);

    if (step != 'flights') {
      self.showSummary();
    }

    setTimeout(function () {
      if (WT.Summary.isOldSummary) {
        WT.Summary.unstickOldSummary();
        WT.Summary.stickyOldSummary();
      }
    }, 600);

    $j('#button-change-search').off().on('click', function () {
      $j(this).parent().parent().hide();
      $j('#tripsearch').show();
      WT.Summary.isVisible = false;
    });

    WT.Utiles.tooltipsInit();
  },
  _getPayingPassengersCount: function () {
    var reservation_passengers = WT.ReservationData.passengers,
      payingPassengersCount = 0;
    if (!$j.isEmptyObject(reservation_passengers)) {
      for (var $y = 0; $y < reservation_passengers.length; $y++) {
        if (reservation_passengers[$y].age_code != 'INF') payingPassengersCount++;
      }
    }
    return payingPassengersCount;
  },
  _summaryApplyTicketsFareBreakdownsAndRules: function (flight) {
    var fare_breakdowns = flight.passengers_fare_breakdown;
    if (fare_breakdowns !== null && typeof (fare_breakdowns) !== "undefined") {
      var reservation_passengers = WT.ReservationData.passengers;
      for (var $i = 0; $i < reservation_passengers.length; $i++) {
        var pas_id = WT.modify_flag === 'changename' ? $i + 1 : $i,
          block_pas_id = WT.modify_flag === 'changename' ? $i : pas_id;
        if (
          typeof fare_breakdowns['outbound'] != 'undefined' ||
          typeof fare_breakdowns['inbound'] != 'undefined'
        ) {
          for (var direction in fare_breakdowns) {
            if (fare_breakdowns.hasOwnProperty(direction)) {
              var fare_breakdowns_data = {
                fares: fare_breakdowns[direction][pas_id]
              };
              if (flight.fare_rules) {
                fare_breakdowns_data.fare_rules = flight.fare_rules[direction];
              }
              WT.Utiles._compileBlockWithHandlebars('.summary-flight-item #' + direction + '_ticket' + block_pas_id, 'summary_ticket_items', fare_breakdowns_data);
            }
          }
        }
      }
    }
  },
  _renderItemsInSummary: function (itemsData, selector, template) {
    var flights = (itemsData && itemsData.flights) ? itemsData.flights : {};
    var segments = this._getSegmentsObject();
    WT.Utiles._compileBlockWithHandlebars(selector, template, {
      flights: flights,
      segments: segments
    });
  },
  _getSegmentsObject: function () {
    var segments = WT.ReservationData.flight.segments;
    var segmentsObject = {};
    var i = 1;

    if (!segments) return segmentsObject;

    segments.outbound && Object.keys(segments.outbound).forEach(function (key) {
      segmentsObject[i] = segments.outbound[key].from_departure_airport_code
        + ' - '
        + segments.outbound[key].from_arrival_airport_code;
      i++;
    });

    segments.inbound && Object.keys(segments.inbound).forEach(function (key) {
      segmentsObject[i] = segments.inbound[key].to_departure_airport_code
        + ' - '
        + segments.inbound[key].to_arrival_airport_code;
      i++;
    });
    return segmentsObject;
  },
  getFlightsSegmentObject: function () {
    var flights = WT.ReservationData.flight.flights;
    var flightsObject = {};
    var i = 1;

    if (!flights) return flightsObject;

    flights.forEach(function (flight) {
      flightsObject[i] = flight.departure_airport
        + ' - '
        + flight.arrival_airport;
      i++;
    });

    return flightsObject;
  },
  _summaryApplyPackages: function (pack) {
    var self = this;
    if (typeof (pack) !== "undefined") {
      var reservation_passengers = WT.ReservationData.passengers;
      if (typeof (pack.from_packages) !== "undefined" || typeof (pack.to_packages) !== "undefined") {
        for (var $i = 0; $i < reservation_passengers.length; $i++) {
          var pas_id = reservation_passengers[$i].entity_id;
          self._renderItemsInSummary(
            pack.from_packages[pas_id],
            '.summary-flight-item #from_packages' + pas_id,
            'summary_package_items'
          );
          self._renderItemsInSummary(
            pack.to_packages[pas_id],
            '.summary-flight-item #to_packages' + pas_id,
            'summary_package_items'
          );
        }

        $j('.name-segments').filter('span[data-segments=""]').hide();
      }
    }
  },
  _summaryApplySeats: function () {
    var seats = WT.ReservationData.seats;
    var segments = !$j.isEmptyObject(seats) && this._getSegmentsObject();

    Object.keys(seats).forEach(function (flight_rph) {
      var flightsByDirection = WT.flights.filter(function (flight) {
        return flight.flight_rph == flight_rph;
      });

      var direction = flightsByDirection[0] && flightsByDirection[0].flight_direction;

      direction && Object.keys(seats[flight_rph]).forEach(function (passengerId) {
        var seat = seats[flight_rph][passengerId];
        seat.segment = segments[flight_rph];
        WT.Utiles._compileBlockWithHandlebars('.summary-flight-item #' + direction + '_seats' + passengerId + '_' + flight_rph, 'summary_seat_items', seat);
      });

      $j('.name-segments').filter('span[data-segments=""]').hide();

    });
  },
  _summaryApplyExtras: function (extras) {
    var addFreeProduct = function (originProducts, direction) {
      var products = JSON.parse(JSON.stringify(originProducts));
      var productKey, segmentKey, productsList;

      for (segmentKey in products.flights) {
        if (products.flights.hasOwnProperty(segmentKey)) {
          productsList = [];
          for (productKey in products.flights[segmentKey]) {
            if (products.flights[segmentKey].hasOwnProperty(productKey)) {
              var product = products.flights[segmentKey][productKey];
              if (product['free_product_' + direction] === true) {
                if (product['qty'] > 1) {
                  productsList.push($j.extend({}, product, {
                    qty: 1,
                    special_price: -1,
                    price: 0,
                    price_formatted: product['currency_format'].replace('%s', 0),
                  }));

                  product['qty'] = product['qty'] - 1;
                } else {
                  product['special_price'] = -1;
                  product['price'] = 0;
                  product['price_formatted'] = product['currency_format'].replace('%s', 0);
                }
              }

              productsList.push(product);
            }
          }

          products.flights[segmentKey] = productsList;
        }
      }

      return products;
    };

    var self = this;
    if (typeof (extras) !== "undefined") {
      var reservation_passengers = WT.ReservationData.passengers;
      if (typeof (extras.from_extras) !== "undefined" || typeof (extras.to_extras) !== "undefined") {
        for (var $i = 0; $i < reservation_passengers.length; $i++) {
          var pas_id = reservation_passengers[$i].entity_id;
          var pasExtrasFrom = extras.from_extras[pas_id];
          var pasExtrasTo = extras.to_extras[pas_id];

          if (pasExtrasFrom !== undefined) {
            var productsFrom = addFreeProduct(pasExtrasFrom, 'from');
            self._renderItemsInSummary(
              productsFrom,
              '.summary-flight-item #from_extras' + pas_id,
              'summary_extras_items'
            );
          }

          if (pasExtrasTo !== undefined) {
            var productsTo = addFreeProduct(pasExtrasTo, 'to');
            self._renderItemsInSummary(
              productsTo,
              '.summary-flight-item #to_extras' + pas_id,
              'summary_extras_items'
            );
          }

          WT.ReservationData.isEmptyExtras = $j.isEmptyObject(pasExtrasFrom && pasExtrasFrom.flights)
            && $j.isEmptyObject(pasExtrasTo && pasExtrasTo.flights);
        }

        $j('.name-segments').filter('span[data-segments=""]').hide();
      }
    }
  },
  getSelectedProduct: function () {
    var steps = ['packages', 'extras', 'seats'];
    var isBuying = steps.some(function (step) {
      var isReservedData = WT.ReservationData[step] && (step === 'seats' || WT.ReservationData[step]['from_' + step]);

      if (!isReservedData) return false;

      var reservedFromProduct = (step === 'seats')
        ? WT.ReservationData[step]
        : WT.ReservationData[step]['from_' + step],
        reservedToProduct = (step === 'seats')
          ? WT.ReservationData[step]
          : WT.ReservationData[step]['to_' + step],
        isSelected = Object.keys(reservedFromProduct).length || Object.keys(reservedToProduct).length;

      return isSelected;
    });

    return isBuying;
  },
  _hideDirectPayment: function () {
    var $btnContinueCheckout = $j('a#continue-checkout');

    if (this.enabled && this.enabled.length) {
      var stepsList = this.enabled,
        currentStepNumber = WT.Steps.activeIndex,
        isHideButton = (currentStepNumber >= stepsList.length - 2) || currentStepNumber == 0 || this.isHideDirectPayment;

      if (isHideButton) {
        if (
          stepsList[currentStepNumber] === 'passengers'
          &&
          WT.modify_flag !== 'changename'
          &&
          WT.modify_flag !== 'updatedoc'
          &&
          $j('.passengers-button').css('display') === 'none'
        ) {
          $btnContinueCheckout.show().addClass('simple-button');
        } else {
          $btnContinueCheckout.hide().removeClass('simple-button');
        }
      } else {
        $btnContinueCheckout.show();
      }
    }
  },
  _filterSkippedSteps: function (steps, activeStep) {
    if (steps.indexOf(activeStep) !== -1) {
      WT.Steps.skipped_steps = steps.filter(function (step) {
        return step !== activeStep;
      });
    }
  },
  runNewSearch: function () {
    var delayInMs = +WT.Options.delayButtonActivation * 1000,
      $button = $j('.btn-run-search'),
      $loader = $button.find('.loader-absolute');

    $loader.show();

    setTimeout(function () {
      $loader.hide();
    }, delayInMs)

    $button.off().on('click', function () {
      $j('#searchtrip').click();
    });
  },
  _initStepActive: function () {
    jQuery('#owl-bg').addClass('step-active');
    jQuery('.main.container').addClass('step-active');
  }
};

var WT = WT || {};

WT.FlightService = {
  initTicketVerification: function () {
    var numberRegExp = new RegExp(/^[0-9]{1,13}$/),
      namesRegExp = new RegExp(/^[a-zA-Z\s]{1,20}$/);

    this.bindActionInputs('#ticket_number', 13, numberRegExp, /[^\d]/g);
    this.bindActionInputs('#last_name, #first_name', 20, namesRegExp);
    this.ticketVerification();
  },
  bindActionInputs: function (id, maxLength, regExp, replacedRegExp) {
    $j(id).on('input', function (e) {
      var value = $j(this).val();

      $j(this)
        .removeClass('error')
        .siblings('.error-message')
        .hide();

      if ((value && !regExp.test(value)) || !value.trim()) {
        var realValue = replacedRegExp
          ? value.replace(replacedRegExp, '')
          : value.slice(0, -1);

        if (value.length > maxLength) {
          realValue = realValue.slice(0, maxLength);
        };

        $j(this)
          .val(realValue)
          .addClass('error')
          .siblings('.error-message')
          .show();

        return false;
      }
    });
  },
  ticketVerification: function () {
    $j('.btn-ticket-verification').on('click', function () {
      var baseUrl = WT.Options.baseUrl || '/',
        $inputs = $j('.searchBar').find('input'),
        data = {},
        isError = false;

      $inputs.each(function () {
        var $input = $j(this);
        id = $input.attr('id'),
          value = $input.val();

        data[id] = value;

        if (id === 'ticket_number') {
          var numberRegExp = new RegExp(/^[0-9]{1,13}$/);

          if (!numberRegExp.test(value)) isError = true;
        }

        if (!$input.val().trim()) {
          $input.addClass('error');
          isError = true;
        }
      });

      if (isError) return;
      WT.Utiles.stepLoader(true);

      $j.ajax({
        url: baseUrl + 'flight-service/ticket/verification',
        type: 'GET',
        data: data,
        dataType: 'json',
        success: function (result) {
          if (result.return === 'success') {
            WT.FlightService.renderTableTickets(result.ticket);
          } else {
            WT.FlightService.renderMessageError(result.message, 'wrapper-table-tickets');
          }
        },
        error: function (xhr) {
          WT.FlightService.renderMessageError(xhr.message, 'wrapper-table-tickets');
        },
        complete: function () {
          WT.Utiles.stepLoader(false);
        }
      });
    });
  },
  renderTableTickets: function (data) {
    WT.Utiles._compileBlockWithHandlebars('#wrapper-table-tickets', 'table_tickets', {
      tickets: data.tickets,
      userInfo: data.travellerInformation
    });
  },
  renderMessageError: function (message, container) {
    $j('#' + container).empty();
    $j('#error-message').text(Translator.translate(message));
    $j('.messages').animate({
      opacity: 1,
      height: '62px'
    }, 500);

    setTimeout(function () {
      $j('.messages').animate({
        opacity: 0,
        height: 0
      }, 500)
    }, 4000);
  },

  initFlightStatusVerification: function () {
    this.initFlightStatusTabs();
    this.initFlightStatusDatePicker();
    this.initFlightStatusSearchForm();
    this.initFlightStatusAirportAutocomplete();
  },
  initFlightStatusTabs: function () {
    $j('.wt-simple-tabs').each(function () {
      var wrap = $j(this);
      var $control = wrap.find('[data-role="control"]');
      var $content = wrap.find('[data-role="content"]');

      $control.on('click', function (e) {
        e.preventDefault();
        var index = $j(this).index();

        $control.removeClass('active').eq(index).addClass('active');
        $content.removeClass('active').eq(index).addClass('active');
      });
    });
  },
  initFlightStatusDatePicker: function () {
    var dateFormat = WT.Config.dateFormatDefault;
    var mask = dateFormat.replace(/\w/g, '9');

    $j('.simple-datepicker').mask(mask).datepickerDate({
      autoHide: true,
      format: dateFormat,
      autoPick: true
    });
  },
  initFlightStatusSearchForm: function () {
    var self = this;

    $j('form.search-form').on('submit', function (e) {
      e.preventDefault();

      var $form = $j(this);
      var id = $form.attr('id');
      var url = $form.attr('action');
      var validation = new VarienForm(id);

      if (!validation.validator.validate()) {
        return false;
      }

      WT.Utiles.stepLoader(true);

      $j.ajax({
        url: url,
        method: 'POST',
        data: $form.serialize(),
        success: function (result) {
          if (result.status) {
            self.renderTableFlightStatus(result);
          } else {
            WT.FlightService.renderMessageError(result.message, 'search-results');
          }
        },
        error: function (xhr) {
          WT.FlightService.renderMessageError(xhr.message, 'search-results');
        },
        complete: function () {
          WT.Utiles.stepLoader(false);
        }
      })
    });
  },
  initFlightStatusAirportAutocomplete: function () {
    var self = this;

    $j('.wt-airport-autocomplete').each(function () {
      var $input = $j(this);
      var $parent = $input.parent();
      var autocompleteFor = $input.data('autocomplete-for');
      var $hiddenInput = $parent.find('input[name="' + autocompleteFor + '"]');

      $input.on('input change', function () {
        $hiddenInput.val('');
        $input.data('origin-value', $input.val());
      });

      $input.on('focus', function () {
        var originValue = $input.data('origin-value');

        if (originValue) {
          $input.val(originValue);
        }
      });

      $input.autocomplete({
        minChars: 0,
        maxHeight: 250,
        width: 280,
        onSearchStart: function () {
          $parent.addClass('autocomplete-loading');
        },
        onSearchComplete: function () {
          $parent.removeClass('autocomplete-loading');
        },
        lookup: function (query, done) {
          var list = self.getDependentRouteList($input);
          list = self.filterRouteList(query, list);

          var result = {
            suggestions: $j.map(list, function (dataItem) {
              var value = dataItem.airport_name_translated || dataItem.airport_name;
              var cityName = dataItem.city_name_translated || dataItem.city_name;

              if (cityName) {
                value = cityName + ' - ' + value;
              }

              return {
                value: value,
                data: dataItem.iata
              }
            })
          };

          done(result);
        },
        onSelect: function (suggestion) {
          $hiddenInput.val(suggestion.data);
        },
      });
    });
  },
  getDependentRouteList: function ($autocompleteInput) {
    var $departureCityInput = $j('[name="departure_airport"]');
    var departureCode = $departureCityInput.val();

    if ($autocompleteInput.data('autocomplete-for') === $departureCityInput.attr('name')) {
      return WT.ReservationData.destinationConnectionsList;
    }

    if (!departureCode) {
      return [];
    }

    return WT.ReservationData.destinationConnectionsList[departureCode]['destinations'];
  },
  filterRouteList: function (query, list) {
    if (!query) {
      return list;
    }

    var filteredList = {};
    query = query.toLowerCase();

    $j.map(list, function (item) {
      var searchableFields = [
        'departure_airport_code',
        'airport_name',
        'airport_name_translated',
        'city_name',
        'city_name_translated',
      ];

      for (var i = 0; i < searchableFields.length; i++) {
        var value = item[searchableFields[i]];
        if (!value) {
          continue;
        }

        if (value.toLowerCase().indexOf(query) !== -1) {
          filteredList[item.departure_airport_code] = item;

          break;
        }
      }
    });

    return filteredList;
  },
  renderTableFlightStatus: function (data) {
    WT.Utiles._compileBlockWithHandlebars('#search-results', 'table_flight_status', data);

    $j(document).tooltip({ selector: '[data-toggle="tooltip"]' });
  },
};

var WT = WT || {};

WT.Promotions = {
  init: function () {
    this.initSearchForm();
    this.initPromotionsTable();
    this.initBookNowButtons();
    this.initAirportAutocomplete();
    this.initTermsAndConditions();
    this.initKeepInTouchForm();
  },
  initSearchForm: function () {
    var self = this;

    $j('form.table-promotions-form').on('submit', function (e) {
      e.preventDefault();

      var $form = $j(this);
      var id = $form.attr('id');
      var validation = new VarienForm(id);

      if (!validation.validator.validate()) {
        return false;
      }

      self.refreshTable($form.find('[name="departure_airport"]').val());
    });
  },
  initPromotionsTable: function () {
    this.refreshTable('');
  },
  initBookNowButtons: function () {
    WT.Session.additionalPostData.login = [
      { name: 'redirect', value: false },
    ];

    $j(document).on('click', '.book-now-link', function (e) {
      e.preventDefault();

      var $this = $j(this),
        deeplink = $this.attr('href'),
        isRegisteredOnly = parseInt($this.data('is-registered-only')),
        isLoggedIn = parseInt($this.data('is-logged-in')),
        $loginModal = $j('.ajax-login-modal');

      if (isRegisteredOnly && !isLoggedIn) {
        $loginModal.modal();

        $j(document).off('ajaxCustomerLogin').on('ajaxCustomerLogin', function (event, result) {
          $j(location).attr('href', deeplink);
        });
      } else {
        window.location.href = deeplink;
      }
    })
  },
  initAirportAutocomplete: function () {
    var self = this;

    $j('.wt-airport-autocomplete').each(function () {
      var $input = $j(this);
      var $parent = $input.parent();
      var autocompleteFor = $input.data('autocomplete-for');
      var $hiddenInput = $parent.find('input[name="' + autocompleteFor + '"]');

      $input.on('input change', function () {
        $hiddenInput.val('');
        $input.data('origin-value', $input.val());
      });

      $input.on('focus', function () {
        var originValue = $input.data('origin-value');

        if (originValue) {
          $input.val(originValue);
        }
      });

      $input.autocomplete({
        serviceUrl: '/promotion/index/getAirportsList',
        minChars: 0,
        maxHeight: 250,
        width: 280,
        onSearchStart: function () {
          $parent.addClass('autocomplete-loading');
        },
        onSearchComplete: function () {
          $parent.removeClass('autocomplete-loading');
        },
        onSelect: function (suggestion) {
          $hiddenInput.val(suggestion.data);
        },
      });
    });
  },
  initTermsAndConditions: function () {
    var $container = $j('.collapseable');
    $container.find('.c-button').click(function (e) {
      e.preventDefault();

      $container.toggleClass('open');
    })
  },
  initKeepInTouchForm: function () {
    new VarienForm('promotion-subscribe-form');
  },

  refreshTable: function (origin) {
    var self = this;

    WT.Utiles.stepLoader(true);

    $j.ajax({
      url: '/promotion/index/getPromotions',
      type: 'GET',
      data: {
        origin: origin,
      },
      dataType: 'json',
      success: function (result) {
        if (result.status) {
          self.renderTable(result.promotions);
        } else {
          self.renderMessageError(result.message, 'wrapper-table-tickets');
        }
      },
      error: function (xhr) {
        self.renderMessageError(xhr.message, 'wrapper-table-tickets');
      },
      complete: function () {
        WT.Utiles.stepLoader(false);
      }
    });
  },
  renderTable: function (data) {
    WT.Utiles._compileBlockWithHandlebars('#table-promotions', 'table_promotions', {
      promotions: data,
    });
  },
};

var WT = WT || {};

WT.Session = {
  DEFAULT_ERROR_MESSAGE: 'An unknown error has occurred',
  MESSAGE_WAS_SENT_TEXT: 'A text message with a 6-digit verification code was just sent to ••••••••%s',
  additionalPostData: {
    login: {}
  },

  init: function () {
    var self = this;

    $j(function () {
      self.initIntlTelInputs();
      self.initTabsSwitcher();

      self.renderLoginForm();
      self.renderRlockLoginForm();
      self.renderCreateForm();
      self.renderForgotPasswordForm();
    });
  },

  // Login tab
  renderLoginForm: function () {
    this.initLoginTypeSwitcher();
    this.initAjaxLogin();
    this.initMobilePhoneModal();
    this.initLoginResendVerificationCode();
  },
  initLoginTypeSwitcher: function () {
    var self = this;

    $j('.login-type-switcher').on('click', function () {
      self.activateLoginType($j(this).data('name'));
    });
  },
  initAjaxLogin: function () {
    var self = this;

    $j('#email-login-form').on('submit', function (e) {
      e.preventDefault();

      var $form = $j(this);
      var $activeStep = $form.find('.step-item.active');
      var $mobilePhoneModal = $j('#modal-passenger-phone');

      if (!self.validateForm($activeStep.attr('id'))) {
        return false;
      }

      var data = WT.Session.prepareFormData($form);

      if (self.additionalPostData.login) {
        data = data.concat(self.additionalPostData.login);
      }

      if (WT.Utiles._getParams('subscription')) {
        data.push({
          'name': 'subscription',
          'value': WT.Utiles._getParams('subscription')
        });
      }

      self.postRequest($form.attr('action'), data, $activeStep)
        .done(function (result) {
          if (result.is_phone_required) {
            $mobilePhoneModal.modal();
          } else if (result.otp_was_sent) {
            self.activateLoginEmailStep('two_factor_verification');
            $activeStep = $form.find('.step-item.active');

            $form.find('[name="mobile_phone"]').val(result.mobile_phone);
            self.runButtonResendTimer($activeStep.find('.resend-login-button'));

            self.messageWasSentNotification(
              $form.find('.step-item.active'),
              result.mobile_phone.slice(-4),
              Array.isArray(result.message) ? result.message : [result.message]
            );
          } else if (result.status) {
            $j(document).trigger('ajaxCustomerLogin', result);
          }
        });
    });
    $j('#phone-login-form').on('submit', function (e) {
      e.preventDefault();

      var $form = $j(this);

      if (!self.validateForm($form.attr('id'))) {
        return false;
      }

      var data = WT.Session.prepareFormData($form);

      if (self.additionalPostData.login) {
        data = data.concat(self.additionalPostData.login);
      }

      self.postRequest($form.attr('action'), data, $form).done(function (result) {
        if (result.status) {
          $j(document).trigger('ajaxCustomerLogin', result);
        }
      });
    });
  },
  initMobilePhoneModal: function () {
    var self = this;

    $j('#submit-phone-modal-btn').on('click', function () {
      var $form = $j('#email-login-form'),
        $modal = $j('#modal-passenger-phone'),
        modalPhone = $modal.find('.full-telephone-input').val();

      if (!self.validateForm($modal.attr('id'))) {
        return false;
      }

      $form.find('[name="mobile_phone"]').val(modalPhone);
      $form.submit();

      $modal.modal('hide');
    });
  },
  initLoginResendVerificationCode: function () {
    var self = this;

    $j('.resend-login-button').on('click', function () {
      var $button = $j(this),
        $form = $button.closest('.login-form'),
        $container = $button.parents('.resend-wrapper'),
        $mobilePhoneInput = $form.find('[name="mobile_phone"]'),
        $intlMobilePhoneInput = $mobilePhoneInput.parent().find('.custom-intl-tel-input');

      if (!$mobilePhoneInput.val().length) {
        $intlMobilePhoneInput.addClass('validation-failed');
        return false;
      } else {
        $intlMobilePhoneInput.removeClass('validation-failed');
      }

      self.runButtonResendTimer($button);

      self.postRequest($button.data('action'), WT.Session.prepareFormData($form), $container)
        .done(function (result) {
          if (result.otp_was_sent) {
            self.messageWasSentNotification($container, result.mobile_phone.slice(-4));
          }
        });
    });
  },
  messageWasSentNotification: function ($wrapper, $phoneSlice, messages = []) {
    var message = Translator.translate(this.MESSAGE_WAS_SENT_TEXT).replace(/%s/g, $phoneSlice);
    messages.push(message);

    this.showMessages('success', $wrapper, messages);
  },
  activateLoginType: function (type) {
    var $wrapper = $j('.login-types-wrapper');

    $wrapper.find('.login-type-item.active').removeClass('active');
    $wrapper.find('.login-type-item[data-name="' + type + '"]').addClass('active');
  },
  activateLoginEmailStep: function (step) {
    var $wrapper = $j('.steps-wrapper');

    $wrapper.find('.step-item.active').removeClass('active');
    $wrapper.find('.step-item[data-name=' + step + ']').addClass('active');
  },
  setLoginTabSuccessMessage: function (message) {
    this.showMessages('success', $j('#login-tab-wrapper'), message);
  },

  // Login Rlock
  renderRlockLoginForm: function () {
    this.initAjaxRlockLogin();
  },
  initAjaxRlockLogin: function () {
    var self = this;

    $j('#loginopenam-form').on('submit', function (e) {
      e.preventDefault();

      var $form = $j(this);

      if (!self.validateForm($form.attr('id'))) {
        return false;
      }

      var data = WT.Session.prepareFormData($form);

      if (self.additionalPostData.login) {
        data = data.concat(self.additionalPostData.login);
      }

      self.postRequest($form.attr('action'), data, $form);
    });
  },

  // Register
  renderCreateForm: function () {
    this.initAjaxCreate();
    this.initPhoneVerification();
    this.initDefaultValues();
  },
  initAjaxCreate: function () {
    var self = this;

    $j('.create-user-form').on('submit', function (e) {
      e.preventDefault();

      var $form = $j(this);

      if (!self.validateForm($form.attr('id'))) {
        return false;
      }

      self.postRequest($form.attr('action'), WT.Session.prepareFormData($form), $form);
    });
  },
  initPhoneVerification: function () {
    var self = this;
    var $createUserForm = $j('.create-user-form');
    var $phoneVerificationModal = $j('#modal-phone-verification');

    $createUserForm.find('.verify-phone-button').on('click', function (e) {
      e.preventDefault();

      var $button = $j(this);
      var $container = $button.parent();
      var $intlTelInput = $container.find('.custom-intl-tel-input');
      var $fullPhoneInput = $container.find('.full-telephone-input');
      var mobilePhone = $fullPhoneInput.val();

      if (!mobilePhone) {
        $intlTelInput.addClass('validation-failed');

        return false;
      } else {
        $intlTelInput.removeClass('validation-failed');
      }

      self.postRequest($button.data('action'), {
        mobile_phone: mobilePhone
      }, $phoneVerificationModal).done(function (result) {
        $phoneVerificationModal.find('.custom-intl-tel-input')
          .intlTelInput('setNumber', mobilePhone)
          .trigger('change');
        $phoneVerificationModal.modal();

        if (result.otp_was_sent) {
          self.messageWasSentNotification($phoneVerificationModal, result.mobile_phone.slice(-4));
          self.runButtonResendTimer($phoneVerificationModal.find('.resend-register-button'));
        }
      });
    });

    $phoneVerificationModal.find('.resend-register-button').on('click', function () {
      var $button = $j(this),
        $mobilePhoneInput = $phoneVerificationModal.find('[name="mobile_phone"]'),
        $errorWrapper = $phoneVerificationModal.find('.server-error');

      self.postRequest($button.data('action'), {
        mobile_phone: $mobilePhoneInput.val()
      }, $errorWrapper)
        .done(function (result) {
          if (result.otp_was_sent) {
            self.runButtonResendTimer($button);
            self.messageWasSentNotification($phoneVerificationModal, result.mobile_phone.slice(-4));
          }
        });
    });

    $phoneVerificationModal.find('#verify-phone-modal-btn').on('click', function (e) {
      e.preventDefault();

      var $button = $j(this);
      var $formTwoFactorCodeInput = $createUserForm.find('.two-factor-code-input');
      var $modalTwoFactorCodeInput = $phoneVerificationModal.find('.verification-code-input');
      var mobilePhone = $phoneVerificationModal.find('.full-telephone-input').val();
      var twoFactorCode = $modalTwoFactorCodeInput.val();

      if (!self.validateForm($phoneVerificationModal.attr('id'))) {
        return false;
      }

      self.postRequest($button.data('action'), {
        mobile_phone: mobilePhone,
        two_factor_code: twoFactorCode
      }, $phoneVerificationModal).done(function (result) {
        if (result.status) {
          $formTwoFactorCodeInput.val(twoFactorCode);
          $formTwoFactorCodeInput.parent().find('.custom-intl-tel-input')
            .addClass('verified')
            .intlTelInput('setNumber', mobilePhone)
            .trigger('change');

          $phoneVerificationModal.modal('hide');
        }
      });
    });
  },
  initDefaultValues: function () {
    if (WT.Utiles._getParams('subscription')) {
      var email = WT.Utiles._getParams('email');
      var $form = $j('.create-user-form');

      $form.find('input[name="email"], input[name="confirmation_email"]').val(email);
      $form.find('input[name="is_subscribed"]').trigger('click');
    }
  },

  // Forgot password
  renderForgotPasswordForm: function () {
    this.initAjaxForgotPassword();
    this.initResetTypeSwitcher();
  },
  initAjaxForgotPassword: function () {
    var self = this;

    $j('#forgot-password-form').on('submit', function (e) {
      e.preventDefault();

      var $form = $j(this);

      if (!self.validateForm($form.attr('id'))) {
        return false;
      }

      self.postRequest($form.attr('action'), WT.Session.prepareFormData($form), $form)
        .done(function (result) {
          if (result.status) {
            self.setLoginTabSuccessMessage(result.message);

            self.activateResetType('email');
            self.selectLoginTab('tab-1');
          }
        });
    });

    var $phoneForgotForm = $j('#phone-forgot-password');

    $phoneForgotForm.on('submit', function (e) {
      e.preventDefault();

      var $form = $j(this);

      if (!self.validateForm($form.attr('id'))) {
        return false;
      }

      self.postRequest($form.attr('action'), WT.Session.prepareFormData($form), $form)
        .done(function (result) {
          if (result.status) {
            self.activateResetType('reset_password');
          }
        });
    });

    $phoneForgotForm.find('.resend-reset-button').on('click', function (e) {
      e.preventDefault();

      var $button = $j(this);

      self.runButtonResendTimer($button);

      self.postRequest($button.data('action'), WT.Session.prepareFormData($phoneForgotForm), $phoneForgotForm)
        .done(function (result) {
          if (result.otp_was_sent) {
            self.messageWasSentNotification($phoneForgotForm, result.mobile_phone.slice(-4));
          }
        });
    });

    $j('#reset-forgotten-password').on('submit', function (e) {
      e.preventDefault();

      var $form = $j(this);

      if (!self.validateForm($form.attr('id'))) {
        return false;
      }

      self.postRequest($form.attr('action'), self.prepareFormData($form), $form)
        .done(function (result) {
          if (result.status) {
            self.setLoginTabSuccessMessage(result.message);

            self.activateResetType('email');
            self.selectLoginTab('tab-1');
          }
        });
    });
  },
  initResetTypeSwitcher: function () {
    var self = this;

    $j('.reset-type-switcher').on('click', function () {
      self.activateResetType($j(this).data('name'));
    });
  },
  activateResetType: function (type) {
    var $wrapper = $j('.reset-password-types-wrapper');

    $wrapper.find('.reset-password-type-item.active').removeClass('active');
    $wrapper.find('.reset-password-type-item[data-name="' + type + '"]').addClass('active');
  },

  // Helpers
  initTabsSwitcher: function () {
    var self = this;

    $j('.tabs-switcher').on('click', function (e) {
      e.preventDefault();

      var $button = $j(this);
      self.selectLoginTab($button.data('name'));
    })
  },
  selectLoginTab: function (id) {
    var isDesktop = $j(document).width() > WT.Config.maxWidthMobile;

    if (isDesktop) {
      if (id == 'tab-3') {
        $j('#login-tabs').css('width', '85%');
        $j('.account-login').addClass('animate-transition');
      } else {
        $j('#login-tabs').css('width', '56%');
        setTimeout(function () {
          $j('.account-login').removeClass('animate-transition');
        }, 200);
      }
    }

    $j('#tabs-content-wrapper .tab-content').removeClass('active');
    $j('#login-tabs .tab').removeClass('active');

    $j('#login-tabs #' + id).addClass('active');
    $j('#tabs-content-wrapper #' + id + '-content').addClass('active');

    localStorage.setItem('loginHash', '#' + id);
  },
  runButtonResendTimer: function ($button) {
    var $timerWrapper = $button.find('.timer');
    var delay = $button.data('resend-delay');

    $timerWrapper.text(delay);
    $button.prop('disabled', true);

    var timer = setInterval(function () {
      delay--;

      if (delay <= 0) {
        $timerWrapper.text('');
        $button.prop('disabled', false);

        clearInterval(timer);

        return;
      }

      $timerWrapper.text(delay);
    }, 1000);
  },
  validateForm: function (id) {
    $j('.server-error').hide();

    var $element = $j('#' + id);
    var varienForm = new VarienForm(id, true);

    if (!varienForm.validator.validate()) {
      return false;
    }

    if ($element.find('.validation-failed').length) {
      return false;
    }

    return true;
  },
  initRecaptcha: function () {
    WT.Utiles.appendScript(WT.Config.recaptchaUrl + '?hl=' + locale);

    $j('.recaptcha-form').each(function (index) {
      $j(this).on('submit', function (e) {
        var $form = $j(this);

        if (!WT.Session.validateRecaptcha($form, index)) {
          e.preventDefault();

          return;
        }
      });
    });
  },
  validateRecaptcha: function ($form, index) {
    var $captcha = $form.find('.rcode .captcha');
    var $errorMsg = $form.find('.captcha-required');

    if (!$captcha.length) return true;

    if (grecaptcha.getResponse(index) != "") {
      $captcha.removeClass('validation-failed');
      $errorMsg.hide();

      return true;
    } else {
      $captcha.addClass('validation-failed');
      $errorMsg.show();

      return false;
    }
  },
  initIntlTelInputs: function () {
    if ($j('.custom-intl-tel-input').length) {
      $j('.custom-intl-tel-input').intlTelInput({
        separateDialCode: true,
        preferredCountries: WT.Utiles.preferredCountries
      })
        .on('input', WT.Utiles.validatePhone)
        .on('change', WT.Utiles.onChangePhone);
    }
  },
  postRequest: function (url, data, $container) {
    var self = this;
    WT.Utiles.stepLoader(true);

    return $j.ajax({
      type: 'POST',
      url: url,
      data: data
    }).done(function (result) {
      var message;

      if (result.redirect) {
        $j(location).attr('href', result.redirect);
      } else if (result.change_login_type_to !== undefined) {
        message = result.message;
        self.activateLoginType(result.change_login_type_to);
        $container = $j('.tab-content.active .login-type-item.active .login-form');
      } else if (result.status === 0) {
        message = result.message ? result.message : Translator.translate(self.DEFAULT_ERROR_MESSAGE);
      }

      if (message) {
        self.showMessages('error', $container, message);
      }
    }).always(function () {
      WT.Utiles.stepLoader(false);
    });
  },
  prepareFormData: function ($form) {
    return $form.serializeArray().filter(function (item) {
      return item.value !== ''
    });
  },
  clearMessages: function ($container) {
    $container.find('.ajax-messages').html('');
  },
  showMessages: function (type, $container, messages, autoHide) {
    this.clearMessages($container);
    var $wrapper = $container.find('.ajax-messages');

    if (typeof messages === 'string') {
      messages = [messages];
    }

    var html = '',
      items = '',
      successMessages = [],
      errorMessages = [];

    messages.forEach(function (message) {
      if (typeof message === 'string') {
        if (type === 'success') {
          successMessages.push(message);
        }

        if (type === 'error') {
          errorMessages.push(message);
        }
      } else if (typeof message === 'object') {
        if (message.type === 'success') {
          successMessages.push(message.text);
        }

        if (message.type === 'error') {
          errorMessages.push(message.text);
        }
      }
    });

    if (errorMessages.length) {
      items = '<ul>';
      errorMessages.forEach(function (value) {
        items += '<li>' + value + '</li>';
      });
      items += '</ul>';

      html += '<div class="ajax-message ajax-error alert alert-danger">' + items + '</div>';
    }

    if (successMessages.length) {
      items = '<ul>';
      successMessages.forEach(function (value) {
        items += '<li>' + value + '</li>';
      });
      items += '</ul>';

      html += '<div class="ajax-message ajax-success alert alert-success">' + items + '</div>';
    }

    $wrapper.html(html);

    if (autoHide) setTimeout(function () { WT.Session.clearMessages($container) }, 4000);
  },
};

/**
 *  Ajax Autocomplete for jQuery, version 1.4.10
 *  (c) 2017 Tomas Kirda
 *
 *  Ajax Autocomplete for jQuery is freely distributable under the terms of an MIT-style license.
 *  For details, see the web site: https://github.com/devbridge/jQuery-Autocomplete
 */

/*jslint  browser: true, white: true, single: true, this: true, multivar: true */
/*global define, window, document, jQuery, exports, require */

// Expose plugin as an AMD module if AMD loader is present:
(function (factory) {
  "use strict";
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['jquery'], factory);
  } else if (typeof exports === 'object' && typeof require === 'function') {
    // Browserify
    factory(require('jquery'));
  } else {
    // Browser globals
    factory(jQuery);
  }
}(function ($) {
  'use strict';

  var
    utils = (function () {
      return {
        escapeRegExChars: function (value) {
          return value.replace(/[|\\{}()[\]^$+*?.]/g, "\\$&");
        },
        createNode: function (containerClass) {
          var div = document.createElement('div');
          div.className = containerClass;
          div.style.position = 'absolute';
          div.style.display = 'none';
          return div;
        }
      };
    }()),

    keys = {
      ESC: 27,
      TAB: 9,
      RETURN: 13,
      LEFT: 37,
      UP: 38,
      RIGHT: 39,
      DOWN: 40
    },

    noop = $.noop;

  function Autocomplete(el, options) {
    var that = this;

    // Shared variables:
    that.element = el;
    that.el = $(el);
    that.suggestions = [];
    that.badQueries = [];
    that.selectedIndex = -1;
    that.currentValue = that.element.value;
    that.timeoutId = null;
    that.cachedResponse = {};
    that.onChangeTimeout = null;
    that.onChange = null;
    that.isLocal = false;
    that.suggestionsContainer = null;
    that.noSuggestionsContainer = null;
    that.options = $.extend(true, {}, Autocomplete.defaults, options);
    that.classes = {
      selected: 'autocomplete-selected',
      suggestion: 'autocomplete-suggestion'
    };
    that.hint = null;
    that.hintValue = '';
    that.selection = null;

    // Initialize and set options:
    that.initialize();
    that.setOptions(options);
  }

  Autocomplete.utils = utils;

  $.Autocomplete = Autocomplete;

  Autocomplete.defaults = {
    ajaxSettings: {},
    autoSelectFirst: false,
    appendTo: 'body',
    serviceUrl: null,
    lookup: null,
    onSelect: null,
    width: 'auto',
    minChars: 1,
    maxHeight: 300,
    deferRequestBy: 0,
    params: {},
    formatResult: _formatResult,
    formatGroup: _formatGroup,
    delimiter: null,
    zIndex: 9999,
    type: 'GET',
    noCache: false,
    onSearchStart: noop,
    onSearchComplete: noop,
    onSearchError: noop,
    preserveInput: false,
    containerClass: 'autocomplete-suggestions',
    tabDisabled: false,
    dataType: 'text',
    currentRequest: null,
    triggerSelectOnValidInput: true,
    preventBadQueries: true,
    lookupFilter: _lookupFilter,
    paramName: 'query',
    transformResult: _transformResult,
    showNoSuggestionNotice: false,
    noSuggestionNotice: 'No results',
    orientation: 'bottom',
    forceFixPosition: false
  };

  function _lookupFilter(suggestion, originalQuery, queryLowerCase) {
    return suggestion.value.toLowerCase().indexOf(queryLowerCase) !== -1;
  };

  function _transformResult(response) {
    return typeof response === 'string' ? $.parseJSON(response) : response;
  };

  function _formatResult(suggestion, currentValue) {
    // Do not replace anything if the current value is empty
    if (!currentValue) {
      return suggestion.value;
    }

    var pattern = '(' + utils.escapeRegExChars(currentValue) + ')';

    return suggestion.value
      .replace(new RegExp(pattern, 'gi'), '<strong>$1<\/strong>')
      .replace(/&/g, '&amp;')
      .replace(/</g, '&lt;')
      .replace(/>/g, '&gt;')
      .replace(/"/g, '&quot;')
      .replace(/&lt;(\/?strong)&gt;/g, '<$1>');
  };

  function _formatGroup(suggestion, category) {
    return '<div class="autocomplete-group">' + category + '</div>';
  };

  Autocomplete.prototype = {

    initialize: function () {
      var that = this,
        suggestionSelector = '.' + that.classes.suggestion,
        selected = that.classes.selected,
        options = that.options,
        container;

      that.element.setAttribute('autocomplete', 'off');

      // html() deals with many types: htmlString or Element or Array or jQuery
      that.noSuggestionsContainer = $('<div class="autocomplete-no-suggestion"></div>')
        .html(this.options.noSuggestionNotice).get(0);

      that.suggestionsContainer = Autocomplete.utils.createNode(options.containerClass);

      container = $(that.suggestionsContainer);

      container.appendTo(options.appendTo || 'body');

      // Only set width if it was provided:
      if (options.width !== 'auto') {
        container.css('width', options.width);
      }

      // Listen for mouse over event on suggestions list:
      container.on('mouseover.autocomplete', suggestionSelector, function () {
        that.activate($(this).data('index'));
      });

      // Deselect active element when mouse leaves suggestions container:
      container.on('mouseout.autocomplete', function () {
        that.selectedIndex = -1;
        container.children('.' + selected).removeClass(selected);
      });

      // Listen for click event on suggestions list:
      container.on('click.autocomplete', suggestionSelector, function () {
        that.select($(this).data('index'));
      });

      container.on('click.autocomplete', function () {
        clearTimeout(that.blurTimeoutId);
      })

      that.fixPositionCapture = function () {
        if (that.visible) {
          that.fixPosition();
        }
      };

      $(window).on('resize.autocomplete', that.fixPositionCapture);

      that.el.on('keydown.autocomplete', function (e) { that.onKeyPress(e); });
      that.el.on('keyup.autocomplete', function (e) { that.onKeyUp(e); });
      that.el.on('blur.autocomplete', function () { that.onBlur(); });
      that.el.on('focus.autocomplete', function () { that.onFocus(); });
      that.el.on('change.autocomplete', function (e) { that.onKeyUp(e); });
      that.el.on('input.autocomplete', function (e) { that.onKeyUp(e); });
    },

    onFocus: function () {
      var that = this;

      that.fixPosition();

      if (that.el.val().length >= that.options.minChars) {
        that.onValueChange();
      }
    },

    onBlur: function () {
      var that = this,
        options = that.options,
        value = that.el.val(),
        query = that.getQuery(value);

      // If user clicked on a suggestion, hide() will
      // be canceled, otherwise close suggestions
      that.blurTimeoutId = setTimeout(function () {
        that.hide();

        if (that.selection && that.currentValue !== query) {
          (options.onInvalidateSelection || $.noop).call(that.element);
        }
      }, 200);
    },

    abortAjax: function () {
      var that = this;
      if (that.currentRequest) {
        that.currentRequest.abort();
        that.currentRequest = null;
      }
    },

    setOptions: function (suppliedOptions) {
      var that = this,
        options = $.extend({}, that.options, suppliedOptions);

      that.isLocal = Array.isArray(options.lookup);

      if (that.isLocal) {
        options.lookup = that.verifySuggestionsFormat(options.lookup);
      }

      options.orientation = that.validateOrientation(options.orientation, 'bottom');

      // Adjust height, width and z-index:
      $(that.suggestionsContainer).css({
        'max-height': options.maxHeight + 'px',
        'width': options.width + 'px',
        'z-index': options.zIndex
      });

      this.options = options;
    },


    clearCache: function () {
      this.cachedResponse = {};
      this.badQueries = [];
    },

    clear: function () {
      this.clearCache();
      this.currentValue = '';
      this.suggestions = [];
    },

    disable: function () {
      var that = this;
      that.disabled = true;
      clearTimeout(that.onChangeTimeout);
      that.abortAjax();
    },

    enable: function () {
      this.disabled = false;
    },

    fixPosition: function () {
      // Use only when container has already its content

      var that = this,
        $container = $(that.suggestionsContainer),
        containerParent = $container.parent().get(0);
      // Fix position automatically when appended to body.
      // In other cases force parameter must be given.
      if (containerParent !== document.body && !that.options.forceFixPosition) {
        return;
      }

      // Choose orientation
      var orientation = that.options.orientation,
        containerHeight = $container.outerHeight(),
        height = that.el.outerHeight(),
        offset = that.el.offset(),
        styles = { 'top': offset.top, 'left': offset.left };

      if (orientation === 'auto') {
        var viewPortHeight = $(window).height(),
          scrollTop = $(window).scrollTop(),
          topOverflow = -scrollTop + offset.top - containerHeight,
          bottomOverflow = scrollTop + viewPortHeight - (offset.top + height + containerHeight);

        orientation = (Math.max(topOverflow, bottomOverflow) === topOverflow) ? 'top' : 'bottom';
      }

      if (orientation === 'top') {
        styles.top += -containerHeight;
      } else {
        styles.top += height;
      }

      // If container is not positioned to body,
      // correct its position using offset parent offset
      if (containerParent !== document.body) {
        var opacity = $container.css('opacity'),
          parentOffsetDiff;

        if (!that.visible) {
          $container.css('opacity', 0).show();
        }

        parentOffsetDiff = $container.offsetParent().offset();
        styles.top -= parentOffsetDiff.top;
        styles.top += containerParent.scrollTop;
        styles.left -= parentOffsetDiff.left;

        if (!that.visible) {
          $container.css('opacity', opacity).hide();
        }
      }

      if (that.options.width === 'auto') {
        styles.width = that.el.outerWidth() + 'px';
      }

      $container.css(styles);
    },

    isCursorAtEnd: function () {
      var that = this,
        valLength = that.el.val().length,
        selectionStart = that.element.selectionStart,
        range;

      if (typeof selectionStart === 'number') {
        return selectionStart === valLength;
      }
      if (document.selection) {
        range = document.selection.createRange();
        range.moveStart('character', -valLength);
        return valLength === range.text.length;
      }
      return true;
    },

    onKeyPress: function (e) {
      var that = this;

      // If suggestions are hidden and user presses arrow down, display suggestions:
      if (!that.disabled && !that.visible && e.which === keys.DOWN && that.currentValue) {
        that.suggest();
        return;
      }

      if (that.disabled || !that.visible) {
        return;
      }

      switch (e.which) {
        case keys.ESC:
          that.el.val(that.currentValue);
          that.hide();
          break;
        case keys.RIGHT:
          if (that.hint && that.options.onHint && that.isCursorAtEnd()) {
            that.selectHint();
            break;
          }
          return;
        case keys.TAB:
          if (that.hint && that.options.onHint) {
            that.selectHint();
            return;
          }
          if (that.selectedIndex === -1) {
            that.hide();
            return;
          }
          that.select(that.selectedIndex);
          if (that.options.tabDisabled === false) {
            return;
          }
          break;
        case keys.RETURN:
          if (that.selectedIndex === -1) {
            that.hide();
            return;
          }
          that.select(that.selectedIndex);
          break;
        case keys.UP:
          that.moveUp();
          break;
        case keys.DOWN:
          that.moveDown();
          break;
        default:
          return;
      }

      // Cancel event if function did not return:
      e.stopImmediatePropagation();
      e.preventDefault();
    },

    onKeyUp: function (e) {
      var that = this;

      if (that.disabled) {
        return;
      }

      switch (e.which) {
        case keys.UP:
        case keys.DOWN:
          return;
      }

      clearTimeout(that.onChangeTimeout);

      if (that.currentValue !== that.el.val()) {
        that.findBestHint();
        if (that.options.deferRequestBy > 0) {
          // Defer lookup in case when value changes very quickly:
          that.onChangeTimeout = setTimeout(function () {
            that.onValueChange();
          }, that.options.deferRequestBy);
        } else {
          that.onValueChange();
        }
      }
    },

    onValueChange: function () {
      if (this.ignoreValueChange) {
        this.ignoreValueChange = false;
        return;
      }

      var that = this,
        options = that.options,
        value = that.el.val(),
        query = that.getQuery(value);

      if (that.selection && that.currentValue !== query) {
        that.selection = null;
        (options.onInvalidateSelection || $.noop).call(that.element);
      }

      clearTimeout(that.onChangeTimeout);
      that.currentValue = value;
      that.selectedIndex = -1;

      // Check existing suggestion for the match before proceeding:
      if (options.triggerSelectOnValidInput && that.isExactMatch(query)) {
        that.select(0);
        return;
      }

      if (query.length < options.minChars) {
        that.hide();
      } else {
        that.getSuggestions(query);
      }
    },

    isExactMatch: function (query) {
      var suggestions = this.suggestions;

      return (suggestions.length === 1 && suggestions[0].value.toLowerCase() === query.toLowerCase());
    },

    getQuery: function (value) {
      var delimiter = this.options.delimiter,
        parts;

      if (!delimiter) {
        return value;
      }
      parts = value.split(delimiter);
      return $.trim(parts[parts.length - 1]);
    },

    getSuggestionsLocal: function (query) {
      var that = this,
        options = that.options,
        queryLowerCase = query.toLowerCase(),
        filter = options.lookupFilter,
        limit = parseInt(options.lookupLimit, 10),
        data;

      data = {
        suggestions: $.grep(options.lookup, function (suggestion) {
          return filter(suggestion, query, queryLowerCase);
        })
      };

      if (limit && data.suggestions.length > limit) {
        data.suggestions = data.suggestions.slice(0, limit);
      }

      return data;
    },

    getSuggestions: function (q) {
      var response,
        that = this,
        options = that.options,
        serviceUrl = options.serviceUrl,
        params,
        cacheKey,
        ajaxSettings;

      options.params[options.paramName] = q;

      if (options.onSearchStart.call(that.element, options.params) === false) {
        return;
      }

      params = options.ignoreParams ? null : options.params;

      if ($.isFunction(options.lookup)) {
        options.lookup(q, function (data) {
          that.suggestions = data.suggestions;
          that.suggest();
          options.onSearchComplete.call(that.element, q, data.suggestions);
        });
        return;
      }

      if (that.isLocal) {
        response = that.getSuggestionsLocal(q);
      } else {
        if ($.isFunction(serviceUrl)) {
          serviceUrl = serviceUrl.call(that.element, q);
        }
        cacheKey = serviceUrl + '?' + $.param(params || {});
        response = that.cachedResponse[cacheKey];
      }

      if (response && Array.isArray(response.suggestions)) {
        that.suggestions = response.suggestions;
        that.suggest();
        options.onSearchComplete.call(that.element, q, response.suggestions);
      } else if (!that.isBadQuery(q)) {
        that.abortAjax();

        ajaxSettings = {
          url: serviceUrl,
          data: params,
          type: options.type,
          dataType: options.dataType
        };

        $.extend(ajaxSettings, options.ajaxSettings);

        that.currentRequest = $.ajax(ajaxSettings).done(function (data) {
          var result;
          that.currentRequest = null;
          result = options.transformResult(data, q);
          that.processResponse(result, q, cacheKey);
          options.onSearchComplete.call(that.element, q, result.suggestions);
        }).fail(function (jqXHR, textStatus, errorThrown) {
          options.onSearchError.call(that.element, q, jqXHR, textStatus, errorThrown);
        });
      } else {
        options.onSearchComplete.call(that.element, q, []);
      }
    },

    isBadQuery: function (q) {
      if (!this.options.preventBadQueries) {
        return false;
      }

      var badQueries = this.badQueries,
        i = badQueries.length;

      while (i--) {
        if (q.indexOf(badQueries[i]) === 0) {
          return true;
        }
      }

      return false;
    },

    hide: function () {
      var that = this,
        container = $(that.suggestionsContainer);

      if ($.isFunction(that.options.onHide) && that.visible) {
        that.options.onHide.call(that.element, container);
      }

      that.visible = false;
      that.selectedIndex = -1;
      clearTimeout(that.onChangeTimeout);
      $(that.suggestionsContainer).hide();
      that.signalHint(null);
    },

    suggest: function () {
      if (!this.suggestions.length) {
        if (this.options.showNoSuggestionNotice) {
          this.noSuggestions();
        } else {
          this.hide();
        }
        return;
      }

      var that = this,
        options = that.options,
        groupBy = options.groupBy,
        formatResult = options.formatResult,
        value = that.getQuery(that.currentValue),
        className = that.classes.suggestion,
        classSelected = that.classes.selected,
        container = $(that.suggestionsContainer),
        noSuggestionsContainer = $(that.noSuggestionsContainer),
        beforeRender = options.beforeRender,
        html = '',
        category,
        formatGroup = function (suggestion, index) {
          var currentCategory = suggestion.data[groupBy];

          if (category === currentCategory) {
            return '';
          }

          category = currentCategory;

          return options.formatGroup(suggestion, category);
        };

      if (options.triggerSelectOnValidInput && that.isExactMatch(value)) {
        that.select(0);
        return;
      }

      // Build suggestions inner HTML:
      $.each(that.suggestions, function (i, suggestion) {
        if (groupBy) {
          html += formatGroup(suggestion, value, i);
        }

        html += '<div class="' + className + '" data-index="' + i + '">' + formatResult(suggestion, value, i) + '</div>';
      });

      this.adjustContainerWidth();

      noSuggestionsContainer.detach();
      container.html(html);

      if ($.isFunction(beforeRender)) {
        beforeRender.call(that.element, container, that.suggestions);
      }

      that.fixPosition();
      container.show();

      // Select first value by default:
      if (options.autoSelectFirst) {
        that.selectedIndex = 0;
        container.scrollTop(0);
        container.children('.' + className).first().addClass(classSelected);
      }

      that.visible = true;
      that.findBestHint();
    },

    noSuggestions: function () {
      var that = this,
        beforeRender = that.options.beforeRender,
        container = $(that.suggestionsContainer),
        noSuggestionsContainer = $(that.noSuggestionsContainer);

      this.adjustContainerWidth();

      // Some explicit steps. Be careful here as it easy to get
      // noSuggestionsContainer removed from DOM if not detached properly.
      noSuggestionsContainer.detach();

      // clean suggestions if any
      container.empty();
      container.append(noSuggestionsContainer);

      if ($.isFunction(beforeRender)) {
        beforeRender.call(that.element, container, that.suggestions);
      }

      that.fixPosition();

      container.show();
      that.visible = true;
    },

    adjustContainerWidth: function () {
      var that = this,
        options = that.options,
        width,
        container = $(that.suggestionsContainer);

      // If width is auto, adjust width before displaying suggestions,
      // because if instance was created before input had width, it will be zero.
      // Also it adjusts if input width has changed.
      if (options.width === 'auto') {
        width = that.el.outerWidth();
        container.css('width', width > 0 ? width : 300);
      } else if (options.width === 'flex') {
        // Trust the source! Unset the width property so it will be the max length
        // the containing elements.
        container.css('width', '');
      }
    },

    findBestHint: function () {
      var that = this,
        value = that.el.val().toLowerCase(),
        bestMatch = null;

      if (!value) {
        return;
      }

      $.each(that.suggestions, function (i, suggestion) {
        var foundMatch = suggestion.value.toLowerCase().indexOf(value) === 0;
        if (foundMatch) {
          bestMatch = suggestion;
        }
        return !foundMatch;
      });

      that.signalHint(bestMatch);
    },

    signalHint: function (suggestion) {
      var hintValue = '',
        that = this;
      if (suggestion) {
        hintValue = that.currentValue + suggestion.value.substr(that.currentValue.length);
      }
      if (that.hintValue !== hintValue) {
        that.hintValue = hintValue;
        that.hint = suggestion;
        (this.options.onHint || $.noop)(hintValue);
      }
    },

    verifySuggestionsFormat: function (suggestions) {
      // If suggestions is string array, convert them to supported format:
      if (suggestions.length && typeof suggestions[0] === 'string') {
        return $.map(suggestions, function (value) {
          return { value: value, data: null };
        });
      }

      return suggestions;
    },

    validateOrientation: function (orientation, fallback) {
      orientation = $.trim(orientation || '').toLowerCase();

      if ($.inArray(orientation, ['auto', 'bottom', 'top']) === -1) {
        orientation = fallback;
      }

      return orientation;
    },

    processResponse: function (result, originalQuery, cacheKey) {
      var that = this,
        options = that.options;

      result.suggestions = that.verifySuggestionsFormat(result.suggestions);

      // Cache results if cache is not disabled:
      if (!options.noCache) {
        that.cachedResponse[cacheKey] = result;
        if (options.preventBadQueries && !result.suggestions.length) {
          that.badQueries.push(originalQuery);
        }
      }

      // Return if originalQuery is not matching current query:
      if (originalQuery !== that.getQuery(that.currentValue)) {
        return;
      }

      that.suggestions = result.suggestions;
      that.suggest();
    },

    activate: function (index) {
      var that = this,
        activeItem,
        selected = that.classes.selected,
        container = $(that.suggestionsContainer),
        children = container.find('.' + that.classes.suggestion);

      container.find('.' + selected).removeClass(selected);

      that.selectedIndex = index;

      if (that.selectedIndex !== -1 && children.length > that.selectedIndex) {
        activeItem = children.get(that.selectedIndex);
        $(activeItem).addClass(selected);
        return activeItem;
      }

      return null;
    },

    selectHint: function () {
      var that = this,
        i = $.inArray(that.hint, that.suggestions);

      that.select(i);
    },

    select: function (i) {
      var that = this;
      that.hide();
      that.onSelect(i);
    },

    moveUp: function () {
      var that = this;

      if (that.selectedIndex === -1) {
        return;
      }

      if (that.selectedIndex === 0) {
        $(that.suggestionsContainer).children('.' + that.classes.suggestion).first().removeClass(that.classes.selected);
        that.selectedIndex = -1;
        that.ignoreValueChange = false;
        that.el.val(that.currentValue);
        that.findBestHint();
        return;
      }

      that.adjustScroll(that.selectedIndex - 1);
    },

    moveDown: function () {
      var that = this;

      if (that.selectedIndex === (that.suggestions.length - 1)) {
        return;
      }

      that.adjustScroll(that.selectedIndex + 1);
    },

    adjustScroll: function (index) {
      var that = this,
        activeItem = that.activate(index);

      if (!activeItem) {
        return;
      }

      var offsetTop,
        upperBound,
        lowerBound,
        heightDelta = $(activeItem).outerHeight();

      offsetTop = activeItem.offsetTop;
      upperBound = $(that.suggestionsContainer).scrollTop();
      lowerBound = upperBound + that.options.maxHeight - heightDelta;

      if (offsetTop < upperBound) {
        $(that.suggestionsContainer).scrollTop(offsetTop);
      } else if (offsetTop > lowerBound) {
        $(that.suggestionsContainer).scrollTop(offsetTop - that.options.maxHeight + heightDelta);
      }

      if (!that.options.preserveInput) {
        // During onBlur event, browser will trigger "change" event,
        // because value has changed, to avoid side effect ignore,
        // that event, so that correct suggestion can be selected
        // when clicking on suggestion with a mouse
        that.ignoreValueChange = true;
        that.el.val(that.getValue(that.suggestions[index].value));
      }

      that.signalHint(null);
    },

    onSelect: function (index) {
      var that = this,
        onSelectCallback = that.options.onSelect,
        suggestion = that.suggestions[index];

      that.currentValue = that.getValue(suggestion.value);

      if (that.currentValue !== that.el.val() && !that.options.preserveInput) {
        that.el.val(that.currentValue);
      }

      that.signalHint(null);
      that.suggestions = [];
      that.selection = suggestion;

      if ($.isFunction(onSelectCallback)) {
        onSelectCallback.call(that.element, suggestion);
      }
    },

    getValue: function (value) {
      var that = this,
        delimiter = that.options.delimiter,
        currentValue,
        parts;

      if (!delimiter) {
        return value;
      }

      currentValue = that.currentValue;
      parts = currentValue.split(delimiter);

      if (parts.length === 1) {
        return value;
      }

      return currentValue.substr(0, currentValue.length - parts[parts.length - 1].length) + value;
    },

    dispose: function () {
      var that = this;
      that.el.off('.autocomplete').removeData('autocomplete');
      $(window).off('resize.autocomplete', that.fixPositionCapture);
      $(that.suggestionsContainer).remove();
    }
  };

  // Create chainable jQuery plugin:
  $.fn.devbridgeAutocomplete = function (options, args) {
    var dataKey = 'autocomplete';
    // If function invoked without argument return
    // instance of the first matched element:
    if (!arguments.length) {
      return this.first().data(dataKey);
    }

    return this.each(function () {
      var inputElement = $(this),
        instance = inputElement.data(dataKey);

      if (typeof options === 'string') {
        if (instance && typeof instance[options] === 'function') {
          instance[options](args);
        }
      } else {
        // If instance already exists, destroy it:
        if (instance && instance.dispose) {
          instance.dispose();
        }
        instance = new Autocomplete(this, options);
        inputElement.data(dataKey, instance);
      }
    });
  };

  // Don't overwrite if it already exists
  if (!$.fn.autocomplete) {
    $.fn.autocomplete = $.fn.devbridgeAutocomplete;
  }
}));
; (function ($) {
  $(function () {
    function popupAdsInit() {
      var $popupAdsWrapper = $('.popup-ads-wrapper');
      if (!$popupAdsWrapper.length) {
        return null;
      }

      var $popupAdsOverlay = $popupAdsWrapper.find('.popup-ads-overlay');
      var $popupAdsCloseButton = $popupAdsWrapper.find('.popup-ads-close');
      var popupAdsCookieName = 'is_popup_ads_showed';
      var isPopupAdsShowed = Mage.Cookies.get(popupAdsCookieName);

      function showPopupAdsModal() {
        $popupAdsWrapper.addClass('open');

        if (WT.Config.popupAds.autoCloseTime) {
          setTimeout(function () {
            removePopupAdsModal();
          }, WT.Config.popupAds.autoCloseTime * 1000);
        }
      }

      function removePopupAdsModal() {
        $popupAdsWrapper.remove();
      }

      function setPopupAdsCookie() {
        var d = new Date();
        d.setTime(d.getTime() + (365 * 24 * 60 * 60 * 1000));

        Mage.Cookies.set(popupAdsCookieName, 1, d, '/', window.location.hostname);
      }

      if (!isPopupAdsShowed) {
        showPopupAdsModal();
        setPopupAdsCookie();
      }

      [$popupAdsCloseButton, $popupAdsOverlay].each(function (item) {
        item.on('click', function (e) {
          e.preventDefault();

          removePopupAdsModal();
        })
      });
    }

    popupAdsInit();
  })
})(jQuery);
(function () {
  'use strict';

  var RS = function (conf) {
    this.input = null;
    this.inputDisplay = null;
    this.slider = null;
    this.sliderWidth = 0;
    this.sliderLeft = 0;
    this.pointerWidth = 0;
    this.pointerR = null;
    this.pointerL = null;
    this.activePointer = null;
    this.selected = null;
    this.scale = null;
    this.step = 0;
    this.tipL = null;
    this.tipR = null;
    this.timeout = null;
    this.valRange = false;

    this.values = {
      start: null,
      end: null
    };
    this.conf = {
      target: null,
      values: null,
      set: null,
      range: false,
      width: null,
      scale: true,
      labels: true,
      tooltip: true,
      step: null,
      disabled: false,
      throttling: 500,
      onChange: null
    };

    this.cls = {
      container: 'rs-container',
      background: 'rs-bg',
      selected: 'rs-selected',
      pointer: 'rs-pointer',
      scale: 'rs-scale',
      noscale: 'rs-noscale',
      tip: 'rs-tooltip'
    };

    for (var i in this.conf) { if (conf.hasOwnProperty(i)) this.conf[i] = conf[i]; }

    this.init();
  };

  RS.prototype.init = function () {
    if (typeof this.conf.target === 'object') this.input = this.conf.target;
    else this.input = document.getElementById(this.conf.target.replace('#', ''));

    if (!this.input) return console.log('Cannot find target element...');

    this.inputDisplay = getComputedStyle(this.input, null).display;
    this.input.style.display = 'none';
    this.valRange = !(this.conf.values instanceof Array);

    if (this.valRange) {
      if (!this.conf.values.hasOwnProperty('min') || !this.conf.values.hasOwnProperty('max'))
        return console.log('Missing min or max value...');
    }
    return this.createSlider();
  };

  RS.prototype.createSlider = function () {
    this.slider = createElement('div', this.cls.container);
    this.slider.innerHTML = '<div class="rs-bg"></div>';
    this.selected = createElement('div', this.cls.selected);
    this.pointerL = createElement('div', this.cls.pointer, ['dir', 'left']);
    this.scale = createElement('div', this.cls.scale);

    if (this.conf.tooltip) {
      this.tipL = createElement('div', this.cls.tip);
      this.tipR = createElement('div', this.cls.tip);
      this.pointerL.appendChild(this.tipL);
    }
    this.slider.appendChild(this.selected);
    this.slider.appendChild(this.scale);
    this.slider.appendChild(this.pointerL);

    if (this.conf.range) {
      this.pointerR = createElement('div', this.cls.pointer, ['dir', 'right']);
      if (this.conf.tooltip) this.pointerR.appendChild(this.tipR);
      this.slider.appendChild(this.pointerR);
    }

    this.input.parentNode.insertBefore(this.slider, this.input.nextSibling);

    if (this.conf.width) this.slider.style.width = parseInt(this.conf.width) + 'px';
    this.sliderLeft = this.slider.getBoundingClientRect().left;
    this.sliderWidth = this.slider.clientWidth;
    this.pointerWidth = this.pointerL.clientWidth;

    if (!this.conf.scale) this.slider.classList.add(this.cls.noscale);

    return this.setInitialValues();
  };

  RS.prototype.setInitialValues = function () {
    this.disabled(this.conf.disabled);

    if (this.valRange) this.conf.values = prepareArrayValues(this.conf);

    this.values.start = 0;
    this.values.end = this.conf.range ? this.conf.values.length - 1 : 0;


    if (this.conf.set && this.conf.set.length && checkInitial(this.conf)) {
      var vals = this.conf.set;

      if (this.conf.range) {
        this.values.start = this.conf.values.indexOf(vals[0]);
        this.values.end = this.conf.set[1] ? this.conf.values.indexOf(vals[1]) : null;
      }
      else this.values.end = this.conf.values.indexOf(vals[0]);
    }
    return this.createScale();
  };

  RS.prototype.createScale = function (resize) {
    this.step = this.sliderWidth / (this.conf.values.length - 1);

    for (var i = 0, iLen = this.conf.values.length; i < iLen; i++) {
      var span = createElement('span'),
        ins = createElement('ins');

      span.appendChild(ins);
      this.scale.appendChild(span);

      span.style.width = i === iLen - 1 ? 0 : this.step + 'px';

      if (!this.conf.labels) {
        if (i === 0 || i === iLen - 1) ins.innerHTML = this.conf.values[i]
      }
      else ins.innerHTML = this.conf.values[i];

      ins.style.marginLeft = (ins.clientWidth / 2) * - 1 + 'px';
    }
    return this.addEvents();
  };

  RS.prototype.updateScale = function () {
    this.step = this.sliderWidth / (this.conf.values.length - 1);

    var pieces = this.slider.querySelectorAll('span');

    for (var i = 0, iLen = pieces.length; i < iLen; i++)
      pieces[i].style.width = this.step + 'px';

    return this.setValues();
  };

  RS.prototype.addEvents = function () {
    var pointers = this.slider.querySelectorAll('.' + this.cls.pointer),
      pieces = this.slider.querySelectorAll('span');

    createEvents(document, 'mousemove touchmove', this.move.bind(this));
    createEvents(document, 'mouseup touchend touchcancel', this.drop.bind(this));

    for (var i = 0, iLen = pointers.length; i < iLen; i++)
      createEvents(pointers[i], 'mousedown touchstart', this.drag.bind(this));

    for (var i = 0, iLen = pieces.length; i < iLen; i++)
      createEvents(pieces[i], 'click', this.onClickPiece.bind(this));

    window.addEventListener('resize', this.onResize.bind(this));

    return this.setValues();
  };

  RS.prototype.drag = function (e) {
    e.preventDefault();

    if (this.conf.disabled) return;

    var dir = e.target.getAttribute('data-dir');
    if (dir === 'left') this.activePointer = this.pointerL;
    if (dir === 'right') this.activePointer = this.pointerR;

    return this.slider.classList.add('sliding');
  };

  RS.prototype.move = function (e) {
    if (this.activePointer && !this.conf.disabled) {
      var coordX = e.type === 'touchmove' ? e.touches[0].clientX : e.pageX,
        index = coordX - this.sliderLeft - (this.pointerWidth / 2);

      index = Math.round(index / this.step);

      if (index <= 0) index = 0;
      if (index > this.conf.values.length - 1) index = this.conf.values.length - 1;

      if (this.conf.range) {
        if (this.activePointer === this.pointerL) this.values.start = index;
        if (this.activePointer === this.pointerR) this.values.end = index;
      }
      else this.values.end = index;

      return this.setValues();
    }
  };

  RS.prototype.drop = function () {
    this.activePointer = null;
  };

  RS.prototype.setValues = function (start, end) {
    var activePointer = this.conf.range ? 'start' : 'end';

    if (start && this.conf.values.indexOf(start) > -1)
      this.values[activePointer] = this.conf.values.indexOf(start);

    if (end && this.conf.values.indexOf(end) > -1)
      this.values.end = this.conf.values.indexOf(end);

    if (this.conf.range && this.values.start > this.values.end)
      this.values.start = this.values.end;

    this.pointerL.style.left = (this.values[activePointer] * this.step - (this.pointerWidth / 2)) + 'px';

    if (this.conf.range) {
      if (this.conf.tooltip) {
        this.tipL.innerHTML = this.conf.values[this.values.start];
        this.tipR.innerHTML = this.conf.values[this.values.end];
      }
      this.input.value = this.conf.values[this.values.start] + ',' + this.conf.values[this.values.end];
      this.pointerR.style.left = (this.values.end * this.step - (this.pointerWidth / 2)) + 'px';
    }
    else {
      if (this.conf.tooltip)
        this.tipL.innerHTML = this.conf.values[this.values.end];
      this.input.value = this.conf.values[this.values.end];
    }

    if (this.values.end > this.conf.values.length - 1) this.values.end = this.conf.values.length - 1;
    if (this.values.start < 0) this.values.start = 0;

    this.selected.style.width = (this.values.end - this.values.start) * this.step + 'px';
    this.selected.style.left = this.values.start * this.step + 'px';

    return this.onChange();
  };

  RS.prototype.onClickPiece = function (e) {

    if (this.conf.disabled) return;

    var idx = Math.round((e.clientX - this.sliderLeft) / this.step);

    if (idx > this.conf.values.length - 1) idx = this.conf.values.length - 1;
    if (idx < 0) idx = 0;

    if (this.conf.range) {
      if (idx - this.values.start <= this.values.end - idx) {
        this.values.start = idx;
      }
      else this.values.end = idx;
    }
    else this.values.end = idx;

    this.slider.classList.remove('sliding');

    return this.setValues();
  };

  RS.prototype.onChange = function () {
    var _this = this;

    if (this.timeout) clearTimeout(this.timeout);

    this.timeout = setTimeout(function () {
      if (_this.conf.onChange && typeof _this.conf.onChange === 'function') {
        return _this.conf.onChange(_this.input.value);
      }
    }, _this.conf.throttling);
  };

  RS.prototype.onResize = function () {
    this.sliderLeft = this.slider.getBoundingClientRect().left;
    this.sliderWidth = this.slider.clientWidth;
    return this.updateScale();
  };

  RS.prototype.disabled = function (disabled) {
    this.conf.disabled = disabled;
    this.slider.classList[disabled ? 'add' : 'remove']('disabled');
  };

  RS.prototype.getValue = function () {
    return this.input.value;
  };

  RS.prototype.destroy = function () {
    this.input.style.display = this.inputDisplay;
    this.slider.remove();
  };

  var createElement = function (el, cls, dataAttr) {
    var element = document.createElement(el);
    if (cls) element.className = cls;
    if (dataAttr && dataAttr.length === 2)
      element.setAttribute('data-' + dataAttr[0], dataAttr[1]);

    return element;
  },

    createEvents = function (el, ev, callback) {
      var events = ev.split(' ');

      for (var i = 0, iLen = events.length; i < iLen; i++)
        el.addEventListener(events[i], callback);
    },

    prepareArrayValues = function (conf) {
      var values = [],
        range = conf.values.max - conf.values.min;

      if (!conf.step) {
        console.log('No step defined...');
        return [conf.values.min, conf.values.max];
      }

      for (var i = 0, iLen = (range / conf.step); i < iLen; i++)
        values.push(conf.values.min + i * conf.step);

      if (values.indexOf(conf.values.max) < 0) values.push(conf.values.max);

      return values;
    },

    checkInitial = function (conf) {
      if (!conf.set || conf.set.length < 1) return null;
      if (conf.values.indexOf(conf.set[0]) < 0) return null;

      if (conf.range) {
        if (conf.set.length < 2 || conf.values.indexOf(conf.set[1]) < 0) return null;
      }
      return true;
    };

  window.rSlider = RS;
})();
var PP_CALCULATOR = (function () {
  var my = {};
  var commissions = {
    ipCommission: 2.9,
    acqCommission: 0.02,
    ppCommission: 0.015
  };
  function privParseInt(num) {
    return parseInt(num, 10)
  }
  function getValByTerm(term) {
    var commissions = {
      1: 0.015,
      2: 0.025,
      3: 0.045,
      4: 0.07,
      5: 0.09,
      6: 0.115,
      7: 0.135,
      8: 0.155,
      9: 0.165,
      10: 0.17,
      11: 0.175,
      12: 0.19,
      13: 0.205,
      14: 0.22,
      15: 0.235,
      16: 0.245,
      17: 0.26,
      18: 0.27,
      19: 0.285,
      20: 0.295,
      21: 0.31,
      22: 0.32,
      23: 0.33,
      24: 0.345
    };
    return commissions[term];
  }
  my.calculatePhys = function (paymentsCount, price) {
    if (isNaN(paymentsCount) || isNaN(price)) return;
    paymentsCount = privParseInt(paymentsCount) + 1;
    var ip = price / paymentsCount + price * (commissions.ipCommission / 100);
    var pp = price / paymentsCount + price * 0.0001;
    return ({
      payCount: paymentsCount,
      ipValue: ip.toFixed(2),
      ppValue: pp.toFixed(2)
    });
  };
  my.calculateJur = function (paymentsCount, price) {
    if (isNaN(paymentsCount) || isNaN(price)) return;
    paymentsCount = privParseInt(paymentsCount) + 1;
    var tabVal = getValByTerm(paymentsCount - 1);
    var stpp = price * (1 - (tabVal + commissions.acqCommission));
    var pp = 0;
    var ppValHint = '0.00';
    var singlePayment = price / paymentsCount;
    var ppFirst = singlePayment - price * (commissions.acqCommission + commissions.ppCommission);
    var ppSecond = singlePayment;
    var ppOther = (paymentsCount - 1) * ppSecond;
    pp = ppFirst + ppOther;
    ppValHint = ppFirst.toFixed(2) + " + " + (paymentsCount - 1) + "*" + ppSecond.toFixed(2);
    var ip = price * (1 - commissions.acqCommission);
    return ({
      payCount: paymentsCount,
      stPpValue: stpp.toFixed(2),
      ipValue: ip.toFixed(2),
      ppValue: pp.toFixed(2),
      ppValueHint: ppValHint
    });
  };
  return my;
}());
/**
 * jquery-circle-progress - jQuery Plugin to draw animated circular progress bars:
 * {@link http://kottenator.github.io/jquery-circle-progress/}
 *
 * @author Rostyslav Bryzgunov <kottenator@gmail.com>
 * @version 1.2.2
 * @licence MIT
 * @preserve
 */
// UMD factory - https://github.com/umdjs/umd/blob/d31bb6ee7098715e019f52bdfe27b3e4bfd2b97e/templates/jqueryPlugin.js
// Uses AMD, CommonJS or browser globals to create a jQuery plugin.
(function (factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD - register as an anonymous module
    define(['jquery'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // Node/CommonJS
    var $ = require('jquery');
    factory($);
    module.exports = $;
  } else {
    // Browser globals
    factory(jQuery);
  }
})(function ($) {
  /**
   * Inner implementation of the circle progress bar.
   * The class is not exposed _yet_ but you can create an instance through jQuery method call.
   *
   * @param {object} config - You can customize any class member (property or method).
   * @class
   * @alias CircleProgress
   */
  function CircleProgress(config) {
    this.init(config);
  }

  CircleProgress.prototype = {
    //--------------------------------------- public options ---------------------------------------
    /**
     * This is the only required option. It should be from `0.0` to `1.0`.
     * @type {number}
     * @default 0.0
     */
    value: 0.0,

    /**
     * Size of the canvas in pixels.
     * It's a square so we need only one dimension.
     * @type {number}
     * @default 100.0
     */
    size: 100.0,

    /**
     * Initial angle for `0.0` value in radians.
     * @type {number}
     * @default -Math.PI
     */
    startAngle: -Math.PI,

    /**
     * Width of the arc in pixels.
     * If it's `'auto'` - the value is calculated as `[this.size]{@link CircleProgress#size} / 14`.
     * @type {number|string}
     * @default 'auto'
     */
    thickness: 'auto',

    emptyThickness: 'auto',

    /**
     * Fill of the arc. You may set it to:
     *
     *   - solid color:
     *     - `'#3aeabb'`
     *     - `{ color: '#3aeabb' }`
     *     - `{ color: 'rgba(255, 255, 255, .3)' }`
     *   - linear gradient _(left to right)_:
     *     - `{ gradient: ['#3aeabb', '#fdd250'], gradientAngle: Math.PI / 4 }`
     *     - `{ gradient: ['red', 'green', 'blue'], gradientDirection: [x0, y0, x1, y1] }`
     *     - `{ gradient: [["red", .2], ["green", .3], ["blue", .8]] }`
     *   - image:
     *     - `{ image: 'http://i.imgur.com/pT0i89v.png' }`
     *     - `{ image: imageObject }`
     *     - `{ color: 'lime', image: 'http://i.imgur.com/pT0i89v.png' }` -
     *       color displayed until the image is loaded
     *
     * @default {gradient: ['#3aeabb', '#fdd250']}
     */
    fill: {
      gradient: ['#3aeabb', '#fdd250']
    },

    /**
     * Color of the "empty" arc. Only a color fill supported by now.
     * @type {string}
     * @default 'rgba(0, 0, 0, .1)'
     */
    emptyFill: 'rgba(0, 0, 0, .1)',

    /**
     * jQuery Animation config.
     * You can pass `false` to disable the animation.
     * @see http://api.jquery.com/animate/
     * @type {object|boolean}
     * @default {duration: 1200, easing: 'circleProgressEasing'}
     */
    animation: {
      duration: 1200,
      easing: 'circleProgressEasing'
    },

    /**
     * Default animation starts at `0.0` and ends at specified `value`. Let's call this _direct animation_.
     * If you want to make _reversed animation_ - set `animationStartValue: 1.0`.
     * Also you may specify any other value from `0.0` to `1.0`.
     * @type {number}
     * @default 0.0
     */
    animationStartValue: 0.0,

    /**
     * Reverse animation and arc draw.
     * By default, the arc is filled from `0.0` to `value`, _clockwise_.
     * With `reverse: true` the arc is filled from `1.0` to `value`, _counter-clockwise_.
     * @type {boolean}
     * @default false
     */
    reverse: false,

    /**
     * Arc line cap: `'butt'`, `'round'` or `'square'` -
     * [read more]{@link https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D.lineCap}.
     * @type {string}
     * @default 'butt'
     */
    lineCap: 'butt',

    /**
     * Canvas insertion mode: append or prepend it into the parent element?
     * @type {string}
     * @default 'prepend'
     */
    insertMode: 'prepend',

    //------------------------------ protected properties and methods ------------------------------
    /**
     * Link to {@link CircleProgress} constructor.
     * @protected
     */
    constructor: CircleProgress,

    /**
     * Container element. Should be passed into constructor config.
     * @protected
     * @type {jQuery}
     */
    el: null,

    /**
     * Canvas element. Automatically generated and prepended to [this.el]{@link CircleProgress#el}.
     * @protected
     * @type {HTMLCanvasElement}
     */
    canvas: null,

    /**
     * 2D-context of [this.canvas]{@link CircleProgress#canvas}.
     * @protected
     * @type {CanvasRenderingContext2D}
     */
    ctx: null,

    /**
     * Radius of the outer circle. Automatically calculated as `[this.size]{@link CircleProgress#size} / 2`.
     * @protected
     * @type {number}
     */
    radius: 0.0,

    /**
     * Fill of the main arc. Automatically calculated, depending on [this.fill]{@link CircleProgress#fill} option.
     * @protected
     * @type {string|CanvasGradient|CanvasPattern}
     */
    arcFill: null,

    /**
     * Last rendered frame value.
     * @protected
     * @type {number}
     */
    lastFrameValue: 0.0,

    /**
     * Init/re-init the widget.
     *
     * Throws a jQuery event:
     *
     * - `circle-inited(jqEvent)`
     *
     * @param {object} config - You can customize any class member (property or method).
     */
    init: function (config) {
      $.extend(this, config);
      this.radius = this.size / 2;
      this.initWidget();
      this.initFill();
      this.draw();
      this.el.trigger('circle-inited');
    },

    /**
     * Initialize `<canvas>`.
     * @protected
     */
    initWidget: function () {
      if (!this.canvas)
        this.canvas = $('<canvas>')[this.insertMode == 'prepend' ? 'prependTo' : 'appendTo'](this.el)[0];

      var canvas = this.canvas;
      canvas.width = this.size;
      canvas.height = this.size;
      this.ctx = canvas.getContext('2d');

      if (window.devicePixelRatio > 1) {
        var scaleBy = window.devicePixelRatio;
        canvas.style.width = canvas.style.height = this.size + 'px';
        canvas.width = canvas.height = this.size * scaleBy;
        this.ctx.scale(scaleBy, scaleBy);
      }
    },

    /**
     * This method sets [this.arcFill]{@link CircleProgress#arcFill}.
     * It could do this async (on image load).
     * @protected
     */
    initFill: function () {
      var self = this,
        fill = this.fill,
        ctx = this.ctx,
        size = this.size;

      if (!fill)
        throw Error("The fill is not specified!");

      if (typeof fill == 'string')
        fill = { color: fill };

      if (fill.color)
        this.arcFill = fill.color;

      if (fill.gradient) {
        var gr = fill.gradient;

        if (gr.length == 1) {
          this.arcFill = gr[0];
        } else if (gr.length > 1) {
          var ga = fill.gradientAngle || 0, // gradient direction angle; 0 by default
            gd = fill.gradientDirection || [
              size / 2 * (1 - Math.cos(ga)), // x0
              size / 2 * (1 + Math.sin(ga)), // y0
              size / 2 * (1 + Math.cos(ga)), // x1
              size / 2 * (1 - Math.sin(ga))  // y1
            ];

          var lg = ctx.createLinearGradient.apply(ctx, gd);

          for (var i = 0; i < gr.length; i++) {
            var color = gr[i],
              pos = i / (gr.length - 1);

            if ($.isArray(color)) {
              pos = color[1];
              color = color[0];
            }

            lg.addColorStop(pos, color);
          }

          this.arcFill = lg;
        }
      }

      if (fill.image) {
        var img;

        if (fill.image instanceof Image) {
          img = fill.image;
        } else {
          img = new Image();
          img.src = fill.image;
        }

        if (img.complete)
          setImageFill();
        else
          img.onload = setImageFill;
      }

      function setImageFill() {
        var bg = $('<canvas>')[0];
        bg.width = self.size;
        bg.height = self.size;
        bg.getContext('2d').drawImage(img, 0, 0, size, size);
        self.arcFill = self.ctx.createPattern(bg, 'no-repeat');
        self.drawFrame(self.lastFrameValue);
      }
    },

    /**
     * Draw the circle.
     * @protected
     */
    draw: function () {
      if (this.animation)
        this.drawAnimated(this.value);
      else
        this.drawFrame(this.value);
    },

    /**
     * Draw a single animation frame.
     * @protected
     * @param {number} v - Frame value.
     */
    drawFrame: function (v) {
      this.lastFrameValue = v;
      this.ctx.clearRect(0, 0, this.size, this.size);
      this.drawEmptyArc(v);
      this.drawArc(v);
    },

    /**
     * Draw the arc (part of the circle).
     * @protected
     * @param {number} v - Frame value.
     */
    drawArc: function (v) {
      if (v === 0)
        return;

      var ctx = this.ctx,
        r = this.radius,
        t = this.getThickness(),
        a = this.startAngle;

      ctx.save();
      ctx.beginPath();

      if (!this.reverse) {
        ctx.arc(r, r, r - t / 2, a, a + Math.PI * 2 * v);
      } else {
        ctx.arc(r, r, r - t / 2, a - Math.PI * 2 * v, a);
      }

      ctx.lineWidth = t;
      ctx.lineCap = this.lineCap;
      ctx.strokeStyle = this.arcFill;
      ctx.stroke();
      ctx.restore();
    },

    /**
     * Draw the _empty (background)_ arc (part of the circle).
     * @protected
     * @param {number} v - Frame value.
     */
    drawEmptyArc: function (v) {
      var ctx = this.ctx,
        r = this.radius,
        t = this.getEmptyThickness(),
        a = this.startAngle,
        radius = r - t / 2;

      if (this.getThickness() !== t) {
        radius -= (this.getThickness() - t) / 2;
      }

      if (v < 1) {
        ctx.save();
        ctx.beginPath();

        if (v <= 0) {
          ctx.arc(r, r, radius, 0, Math.PI * 2);
        } else {
          if (!this.reverse) {
            ctx.arc(r, r, radius, a + Math.PI * 2 * v, a);
          } else {
            ctx.arc(r, r, radius, a, a - Math.PI * 2 * v);
          }
        }

        ctx.lineWidth = t;
        ctx.strokeStyle = this.emptyFill;
        ctx.stroke();
        ctx.restore();
      }
    },

    /**
     * Animate the progress bar.
     *
     * Throws 3 jQuery events:
     *
     * - `circle-animation-start(jqEvent)`
     * - `circle-animation-progress(jqEvent, animationProgress, stepValue)` - multiple event
     *   animationProgress: from `0.0` to `1.0`; stepValue: from `0.0` to `value`
     * - `circle-animation-end(jqEvent)`
     *
     * @protected
     * @param {number} v - Final value.
     */
    drawAnimated: function (v) {
      var self = this,
        el = this.el,
        canvas = $(this.canvas);

      // stop previous animation before new "start" event is triggered
      canvas.stop(true, false);
      el.trigger('circle-animation-start');

      canvas
        .css({ animationProgress: 0 })
        .animate({ animationProgress: 1 }, $.extend({}, this.animation, {
          step: function (animationProgress) {
            var stepValue = self.animationStartValue * (1 - animationProgress) + v * animationProgress;
            self.drawFrame(stepValue);
            el.trigger('circle-animation-progress', [animationProgress, stepValue]);
          }
        }))
        .promise()
        .always(function () {
          // trigger on both successful & failure animation end
          el.trigger('circle-animation-end');
        });
    },

    /**
     * Get the circle thickness.
     * @see CircleProgress#thickness
     * @protected
     * @returns {number}
     */
    getThickness: function () {
      return $.isNumeric(this.thickness) ? this.thickness : this.size / 14;
    },

    getEmptyThickness: function () {
      return $.isNumeric(this.emptyThickness) ? this.emptyThickness : this.size / 14;
    },

    /**
     * Get current value.
     * @protected
     * @return {number}
     */
    getValue: function () {
      return this.value;
    },

    /**
     * Set current value (with smooth animation transition).
     * @protected
     * @param {number} newValue
     */
    setValue: function (newValue) {
      if (this.animation)
        this.animationStartValue = this.lastFrameValue;
      this.value = newValue;
      this.draw();
    }
  };

  //----------------------------------- Initiating jQuery plugin -----------------------------------
  $.circleProgress = {
    // Default options (you may override them)
    defaults: CircleProgress.prototype
  };

  // ease-in-out-cubic
  $.easing.circleProgressEasing = function (x) {
    if (x < 0.5) {
      x = 2 * x;
      return 0.5 * x * x * x;
    } else {
      x = 2 - 2 * x;
      return 1 - 0.5 * x * x * x;
    }
  };

  /**
   * Creates an instance of {@link CircleProgress}.
   * Produces [init event]{@link CircleProgress#init} and [animation events]{@link CircleProgress#drawAnimated}.
   *
   * @param {object} [configOrCommand] - Config object or command name.
   *
   * Config example (you can specify any {@link CircleProgress} property):
   *
   * ```js
   * { value: 0.75, size: 50, animation: false }
   * ```
   *
   * Commands:
   *
   * ```js
   * el.circleProgress('widget'); // get the <canvas>
   * el.circleProgress('value'); // get the value
   * el.circleProgress('value', newValue); // update the value
   * el.circleProgress('redraw'); // redraw the circle
   * el.circleProgress(); // the same as 'redraw'
   * ```
   *
   * @param {string} [commandArgument] - Some commands (like `'value'`) may require an argument.
   * @see CircleProgress
   * @alias "$(...).circleProgress"
   */
  $.fn.circleProgress = function (configOrCommand, commandArgument) {
    var dataName = 'circle-progress',
      firstInstance = this.data(dataName);

    if (configOrCommand == 'widget') {
      if (!firstInstance)
        throw Error('Calling "widget" method on not initialized instance is forbidden');
      return firstInstance.canvas;
    }

    if (configOrCommand == 'value') {
      if (!firstInstance)
        throw Error('Calling "value" method on not initialized instance is forbidden');
      if (typeof commandArgument == 'undefined') {
        return firstInstance.getValue();
      } else {
        var newValue = arguments[1];
        return this.each(function () {
          $(this).data(dataName).setValue(newValue);
        });
      }
    }

    return this.each(function () {
      var el = $(this),
        instance = el.data(dataName),
        config = $.isPlainObject(configOrCommand) ? configOrCommand : {};

      if (instance) {
        instance.init(config);
      } else {
        var initialConfig = $.extend({}, el.data());
        if (typeof initialConfig.fill == 'string')
          initialConfig.fill = JSON.parse(initialConfig.fill);
        if (typeof initialConfig.animation == 'string')
          initialConfig.animation = JSON.parse(initialConfig.animation);
        config = $.extend(initialConfig, config);
        config.el = el;
        instance = new CircleProgress(config);
        el.data(dataName, instance);
      }
    });
  };
});
var WT = WT || {};

WT.Loyalty = {
  init: function () {

  },
  initPersonalPreferences: function () {
    this.initAirportAutocomplete();
    this.initMyInterests();
  },
  initAirportAutocomplete: function () {
    var self = this;

    $j('.airport-selector-widget').each(function () {
      var $wrapper = $j(this);
      var $input = $wrapper.find('.asw-autocomplete');
      var $hiddenInput = $wrapper.find('.asw-hidden');

      $input.on('input change', function () {
        $hiddenInput.val('');
        $input.data('origin-value', $input.val());
      });

      $input.on('focus', function () {
        var originValue = $input.data('origin-value');

        if (originValue) {
          $input.val(originValue);
        }
      });

      $input.autocomplete({
        serviceUrl: WT.Config.airportAutocompleteUrl,
        minChars: 2,
        maxHeight: 250,
        width: 280,
        transformResult: function (response) {
          response = JSON.parse(response);

          return {
            suggestions: $j.map(response.rows, function (row) {
              var value = row.translation_airport_name || row.airport_name;

              return {
                value: value + ' (' + row.iata + ')',
                data: row.iata,
                image: row.image,
              };
            })
          };
        },
        onSearchStart: function () {
          $wrapper.addClass('autocomplete-loading');
        },
        onSearchComplete: function () {
          $wrapper.removeClass('autocomplete-loading');
        },
        onSelect: function (suggestion) {
          $hiddenInput.val(suggestion.data);

          var $imageSkeleton = $wrapper.find('.asw-image-skeleton'),
            $imageWrapper = $imageSkeleton.parent(),
            src;

          if (suggestion.image) {
            $imageWrapper.removeClass('no-image');
            src = '/media/' + suggestion.image;
          } else {
            $imageWrapper.addClass('no-image');
            $imageWrapper.find('.airport-code').text(suggestion.data);
            src = $imageSkeleton.data('default-src');
          }

          $imageSkeleton.attr('src', src);
        },
      });
    });
  },
  initMyInterests: function () {
    $j('.miw-action-link').on('click', function (e) {
      e.preventDefault();

      $j('.miwc-item input').prop('checked', $j(this).data('type') === 'all');
    });
  },
};

$j(function () {
  initSimpleDatePicker();
  initCustomModal();
  initSimpleCollapse();
});

function initSimpleDatePicker() {
  var dateFormat = WT.Config.dateFormatDefault;
  var mask = dateFormat.replace(/\w/g, '9');

  $j('.simple-datepicker').mask(mask).datepickerDate({
    autoHide: true,
    format: dateFormat
  });
}

function debounce(func, wait, immediate) {
  var timeout;
  return function () {
    var context = this,
      args = arguments;
    var later = function later() {
      timeout = null;
      if (!immediate) func.apply(context, args);
    };
    var callNow = immediate && !timeout;
    clearTimeout(timeout);
    timeout = setTimeout(later, wait);
    if (callNow) func.apply(context, args);
  };
}

function initCustomModal() {
  $j('.js-custom-modal-close').on('click', function (e) {
    e.preventDefault();

    $j(this).parents('.custom-modal').removeClass('open');
  });
}

function showCustomModal(elementSelector) {
  $j(elementSelector).addClass('open');
}

function initSimpleCollapse() {
  $j(document).on('click', '.js-simple-collapse', function (e) {
    e.preventDefault();

    $j(this).parents('.js-simple-collapse-parent').toggleClass('open');
  });
}
!function (t, e) { "object" == typeof exports && "undefined" != typeof module ? e(exports) : "function" == typeof define && define.amd ? define(["exports"], e) : e((t = t || self).IMask = {}) }(this, function (t) { "use strict"; var e = "undefined" != typeof globalThis ? globalThis : "undefined" != typeof window ? window : "undefined" != typeof global ? global : "undefined" != typeof self ? self : {}; function n(t, e) { return t(e = { exports: {} }, e.exports), e.exports } var u = function (t) { return t && t.Math == Math && t }, i = u("object" == typeof globalThis && globalThis) || u("object" == typeof window && window) || u("object" == typeof self && self) || u("object" == typeof e && e) || Function("return this")(), r = function (t) { try { return !!t() } catch (t) { return !0 } }, a = !r(function () { return 7 != Object.defineProperty({}, 1, { get: function () { return 7 } })[1] }), s = {}.propertyIsEnumerable, o = Object.getOwnPropertyDescriptor, l = { f: o && !s.call({ 1: 2 }, 1) ? function (t) { var e = o(this, t); return !!e && e.enumerable } : s }, h = function (t, e) { return { enumerable: !(1 & t), configurable: !(2 & t), writable: !(4 & t), value: e } }, c = {}.toString, f = "".split, p = r(function () { return !Object("z").propertyIsEnumerable(0) }) ? function (t) { return "String" == function (t) { return c.call(t).slice(8, -1) }(t) ? f.call(t, "") : Object(t) } : Object, d = function (t) { if (null == t) throw TypeError("Can't call method on " + t); return t }, v = function (t) { return p(d(t)) }, k = function (t) { return "object" == typeof t ? null !== t : "function" == typeof t }, g = function (t, e) { if (!k(t)) return t; var n, u; if (e && "function" == typeof (n = t.toString) && !k(u = n.call(t))) return u; if ("function" == typeof (n = t.valueOf) && !k(u = n.call(t))) return u; if (!e && "function" == typeof (n = t.toString) && !k(u = n.call(t))) return u; throw TypeError("Can't convert object to primitive value") }, y = {}.hasOwnProperty, m = function (t, e) { return y.call(t, e) }, _ = i.document, A = k(_) && k(_.createElement), E = !a && !r(function () { return 7 != Object.defineProperty((t = "div", A ? _.createElement(t) : {}), "a", { get: function () { return 7 } }).a; var t }), b = Object.getOwnPropertyDescriptor, C = { f: a ? b : function (t, e) { if (t = v(t), e = g(e, !0), E) try { return b(t, e) } catch (t) { } if (m(t, e)) return h(!l.f.call(t, e), t[e]) } }, F = function (t) { if (!k(t)) throw TypeError(String(t) + " is not an object"); return t }, S = Object.defineProperty, D = { f: a ? S : function (t, e, n) { if (F(t), e = g(e, !0), F(n), E) try { return S(t, e, n) } catch (t) { } if ("get" in n || "set" in n) throw TypeError("Accessors not supported"); return "value" in n && (t[e] = n.value), t } }, B = a ? function (t, e, n) { return D.f(t, e, h(1, n)) } : function (t, e, n) { return t[e] = n, t }, w = function (t, e) { try { B(i, t, e) } catch (n) { i[t] = e } return e }, O = i["__core-js_shared__"] || w("__core-js_shared__", {}), M = Function.toString; "function" != typeof O.inspectSource && (O.inspectSource = function (t) { return M.call(t) }); var T, x, P, I, R = O.inspectSource, j = i.WeakMap, V = "function" == typeof j && /native code/.test(R(j)), N = n(function (t) { (t.exports = function (t, e) { return O[t] || (O[t] = void 0 !== e ? e : {}) })("versions", []).push({ version: "3.6.4", mode: "global", copyright: "© 2020 Denis Pushkarev (zloirock.ru)" }) }), L = 0, H = Math.random(), U = N("keys"), G = {}, z = i.WeakMap; if (V) { var Y = new z, Z = Y.get, K = Y.has, q = Y.set; T = function (t, e) { return q.call(Y, t, e), e }, x = function (t) { return Z.call(Y, t) || {} }, P = function (t) { return K.call(Y, t) } } else { var W = U[I = "state"] || (U[I] = function (t) { return "Symbol(" + String(void 0 === t ? "" : t) + ")_" + (++L + H).toString(36) }(I)); G[W] = !0, T = function (t, e) { return B(t, W, e), e }, x = function (t) { return m(t, W) ? t[W] : {} }, P = function (t) { return m(t, W) } } var $ = { set: T, get: x, has: P, enforce: function (t) { return P(t) ? x(t) : T(t, {}) }, getterFor: function (t) { return function (e) { var n; if (!k(e) || (n = x(e)).type !== t) throw TypeError("Incompatible receiver, " + t + " required"); return n } } }, X = n(function (t) { var e = $.get, n = $.enforce, u = String(String).split("String"); (t.exports = function (t, e, r, a) { var s = !!a && !!a.unsafe, o = !!a && !!a.enumerable, l = !!a && !!a.noTargetGet; "function" == typeof r && ("string" != typeof e || m(r, "name") || B(r, "name", e), n(r).source = u.join("string" == typeof e ? e : "")), t !== i ? (s ? !l && t[e] && (o = !0) : delete t[e], o ? t[e] = r : B(t, e, r)) : o ? t[e] = r : w(e, r) })(Function.prototype, "toString", function () { return "function" == typeof this && e(this).source || R(this) }) }), J = i, Q = function (t) { return "function" == typeof t ? t : void 0 }, tt = function (t, e) { return arguments.length < 2 ? Q(J[t]) || Q(i[t]) : J[t] && J[t][e] || i[t] && i[t][e] }, et = Math.ceil, nt = Math.floor, ut = function (t) { return isNaN(t = +t) ? 0 : (t > 0 ? nt : et)(t) }, it = Math.min, rt = function (t) { return t > 0 ? it(ut(t), 9007199254740991) : 0 }, at = Math.max, st = Math.min, ot = function (t) { return function (e, n, u) { var i, r = v(e), a = rt(r.length), s = function (t, e) { var n = ut(t); return n < 0 ? at(n + e, 0) : st(n, e) }(u, a); if (t && n != n) { for (; a > s;)if ((i = r[s++]) != i) return !0 } else for (; a > s; s++)if ((t || s in r) && r[s] === n) return t || s || 0; return !t && -1 } }, lt = { includes: ot(!0), indexOf: ot(!1) }.indexOf, ht = function (t, e) { var n, u = v(t), i = 0, r = []; for (n in u) !m(G, n) && m(u, n) && r.push(n); for (; e.length > i;)m(u, n = e[i++]) && (~lt(r, n) || r.push(n)); return r }, ct = ["constructor", "hasOwnProperty", "isPrototypeOf", "propertyIsEnumerable", "toLocaleString", "toString", "valueOf"], ft = ct.concat("length", "prototype"), pt = { f: Object.getOwnPropertyNames || function (t) { return ht(t, ft) } }, dt = { f: Object.getOwnPropertySymbols }, vt = tt("Reflect", "ownKeys") || function (t) { var e = pt.f(F(t)), n = dt.f; return n ? e.concat(n(t)) : e }, kt = function (t, e) { for (var n = vt(e), u = D.f, i = C.f, r = 0; r < n.length; r++) { var a = n[r]; m(t, a) || u(t, a, i(e, a)) } }, gt = /#|\.prototype\./, yt = function (t, e) { var n = _t[mt(t)]; return n == Et || n != At && ("function" == typeof e ? r(e) : !!e) }, mt = yt.normalize = function (t) { return String(t).replace(gt, ".").toLowerCase() }, _t = yt.data = {}, At = yt.NATIVE = "N", Et = yt.POLYFILL = "P", bt = yt, Ct = C.f, Ft = function (t, e) { var n, u, r, a, s, o = t.target, l = t.global, h = t.stat; if (n = l ? i : h ? i[o] || w(o, {}) : (i[o] || {}).prototype) for (u in e) { if (a = e[u], r = t.noTargetGet ? (s = Ct(n, u)) && s.value : n[u], !bt(l ? u : o + (h ? "." : "#") + u, t.forced) && void 0 !== r) { if (typeof a == typeof r) continue; kt(a, r) } (t.sham || r && r.sham) && B(a, "sham", !0), X(n, u, a, t) } }, St = Object.keys || function (t) { return ht(t, ct) }, Dt = Object.assign, Bt = Object.defineProperty, wt = !Dt || r(function () { if (a && 1 !== Dt({ b: 1 }, Dt(Bt({}, "a", { enumerable: !0, get: function () { Bt(this, "b", { value: 3, enumerable: !1 }) } }), { b: 2 })).b) return !0; var t = {}, e = {}, n = Symbol(); return t[n] = 7, "abcdefghijklmnopqrst".split("").forEach(function (t) { e[t] = t }), 7 != Dt({}, t)[n] || "abcdefghijklmnopqrst" != St(Dt({}, e)).join("") }) ? function (t, e) { for (var n = Object(d(t)), u = arguments.length, i = 1, r = dt.f, s = l.f; u > i;)for (var o, h = p(arguments[i++]), c = r ? St(h).concat(r(h)) : St(h), f = c.length, v = 0; f > v;)o = c[v++], a && !s.call(h, o) || (n[o] = h[o]); return n } : Dt; Ft({ target: "Object", stat: !0, forced: Object.assign !== wt }, { assign: wt }); var Ot = "".repeat || function (t) { var e = String(d(this)), n = "", u = ut(t); if (u < 0 || u == 1 / 0) throw RangeError("Wrong number of repetitions"); for (; u > 0; (u >>>= 1) && (e += e))1 & u && (n += e); return n }, Mt = Math.ceil, Tt = function (t) { return function (e, n, u) { var i, r, a = String(d(e)), s = a.length, o = void 0 === u ? " " : String(u), l = rt(n); return l <= s || "" == o ? a : (i = l - s, (r = Ot.call(o, Mt(i / o.length))).length > i && (r = r.slice(0, i)), t ? a + r : r + a) } }, xt = { start: Tt(!1), end: Tt(!0) }, Pt = tt("navigator", "userAgent") || "", It = /Version\/10\.\d+(\.\d+)?( Mobile\/\w+)? Safari\//.test(Pt), Rt = xt.end; Ft({ target: "String", proto: !0, forced: It }, { padEnd: function (t) { return Rt(this, t, arguments.length > 1 ? arguments[1] : void 0) } }); var jt = xt.start; function Vt(t) { return (Vt = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (t) { return typeof t } : function (t) { return t && "function" == typeof Symbol && t.constructor === Symbol && t !== Symbol.prototype ? "symbol" : typeof t })(t) } function Nt(t, e) { if (!(t instanceof e)) throw new TypeError("Cannot call a class as a function") } function Lt(t, e) { for (var n = 0; n < e.length; n++) { var u = e[n]; u.enumerable = u.enumerable || !1, u.configurable = !0, "value" in u && (u.writable = !0), Object.defineProperty(t, u.key, u) } } function Ht(t, e, n) { return e && Lt(t.prototype, e), n && Lt(t, n), t } function Ut(t, e) { if ("function" != typeof e && null !== e) throw new TypeError("Super expression must either be null or a function"); t.prototype = Object.create(e && e.prototype, { constructor: { value: t, writable: !0, configurable: !0 } }), e && zt(t, e) } function Gt(t) { return (Gt = Object.setPrototypeOf ? Object.getPrototypeOf : function (t) { return t.__proto__ || Object.getPrototypeOf(t) })(t) } function zt(t, e) { return (zt = Object.setPrototypeOf || function (t, e) { return t.__proto__ = e, t })(t, e) } function Yt(t, e) { if (null == t) return {}; var n, u, i = function (t, e) { if (null == t) return {}; var n, u, i = {}, r = Object.keys(t); for (u = 0; u < r.length; u++)n = r[u], e.indexOf(n) >= 0 || (i[n] = t[n]); return i }(t, e); if (Object.getOwnPropertySymbols) { var r = Object.getOwnPropertySymbols(t); for (u = 0; u < r.length; u++)n = r[u], e.indexOf(n) >= 0 || Object.prototype.propertyIsEnumerable.call(t, n) && (i[n] = t[n]) } return i } function Zt(t, e) { return !e || "object" != typeof e && "function" != typeof e ? function (t) { if (void 0 === t) throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); return t }(t) : e } function Kt(t, e) { for (; !Object.prototype.hasOwnProperty.call(t, e) && null !== (t = Gt(t));); return t } function qt(t, e, n) { return (qt = "undefined" != typeof Reflect && Reflect.get ? Reflect.get : function (t, e, n) { var u = Kt(t, e); if (u) { var i = Object.getOwnPropertyDescriptor(u, e); return i.get ? i.get.call(n) : i.value } })(t, e, n || t) } function Wt(t, e, n, u) { return (Wt = "undefined" != typeof Reflect && Reflect.set ? Reflect.set : function (t, e, n, u) { var i, r = Kt(t, e); if (r) { if ((i = Object.getOwnPropertyDescriptor(r, e)).set) return i.set.call(u, n), !0; if (!i.writable) return !1 } if (i = Object.getOwnPropertyDescriptor(u, e)) { if (!i.writable) return !1; i.value = n, Object.defineProperty(u, e, i) } else !function (t, e, n) { e in t ? Object.defineProperty(t, e, { value: n, enumerable: !0, configurable: !0, writable: !0 }) : t[e] = n }(u, e, n); return !0 })(t, e, n, u) } function $t(t, e, n, u, i) { if (!Wt(t, e, n, u || t) && i) throw new Error("failed to set property"); return n } function Xt(t, e) { return function (t) { if (Array.isArray(t)) return t }(t) || function (t, e) { if (!(Symbol.iterator in Object(t) || "[object Arguments]" === Object.prototype.toString.call(t))) return; var n = [], u = !0, i = !1, r = void 0; try { for (var a, s = t[Symbol.iterator](); !(u = (a = s.next()).done) && (n.push(a.value), !e || n.length !== e); u = !0); } catch (t) { i = !0, r = t } finally { try { u || null == s.return || s.return() } finally { if (i) throw r } } return n }(t, e) || function () { throw new TypeError("Invalid attempt to destructure non-iterable instance") }() } function Jt(t) { return "string" == typeof t || t instanceof String } Ft({ target: "String", proto: !0, forced: It }, { padStart: function (t) { return jt(this, t, arguments.length > 1 ? arguments[1] : void 0) } }), Ft({ target: "String", proto: !0 }, { repeat: Ot }), Ft({ global: !0 }, { globalThis: i }); var Qt = { NONE: "NONE", LEFT: "LEFT", FORCE_LEFT: "FORCE_LEFT", RIGHT: "RIGHT", FORCE_RIGHT: "FORCE_RIGHT" }; function te(t) { return t.replace(/([.*+?^=!:${}()|[\]\/\\])/g, "\\$1") } var ee = function () { function t(e, n, u, i) { for (Nt(this, t), this.value = e, this.cursorPos = n, this.oldValue = u, this.oldSelection = i; this.value.slice(0, this.startChangePos) !== this.oldValue.slice(0, this.startChangePos);)--this.oldSelection.start } return Ht(t, [{ key: "startChangePos", get: function () { return Math.min(this.cursorPos, this.oldSelection.start) } }, { key: "insertedCount", get: function () { return this.cursorPos - this.startChangePos } }, { key: "inserted", get: function () { return this.value.substr(this.startChangePos, this.insertedCount) } }, { key: "removedCount", get: function () { return Math.max(this.oldSelection.end - this.startChangePos || this.oldValue.length - this.value.length, 0) } }, { key: "removed", get: function () { return this.oldValue.substr(this.startChangePos, this.removedCount) } }, { key: "head", get: function () { return this.value.substring(0, this.startChangePos) } }, { key: "tail", get: function () { return this.value.substring(this.startChangePos + this.insertedCount) } }, { key: "removeDirection", get: function () { return !this.removedCount || this.insertedCount ? Qt.NONE : this.oldSelection.end === this.cursorPos || this.oldSelection.start === this.cursorPos ? Qt.RIGHT : Qt.LEFT } }]), t }(), ne = function () { function t(e) { Nt(this, t), Object.assign(this, { inserted: "", rawInserted: "", skip: !1, tailShift: 0 }, e) } return Ht(t, [{ key: "aggregate", value: function (t) { return this.rawInserted += t.rawInserted, this.skip = this.skip || t.skip, this.inserted += t.inserted, this.tailShift += t.tailShift, this } }, { key: "offset", get: function () { return this.tailShift + this.inserted.length } }]), t }(), ue = function () { function t() { var e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : "", n = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : 0, u = arguments.length > 2 ? arguments[2] : void 0; Nt(this, t), this.value = e, this.from = n, this.stop = u } return Ht(t, [{ key: "toString", value: function () { return this.value } }, { key: "extend", value: function (t) { this.value += String(t) } }, { key: "appendTo", value: function (t) { return t.append(this.toString(), { tail: !0 }).aggregate(t._appendPlaceholder()) } }, { key: "shiftBefore", value: function (t) { if (this.from >= t || !this.value.length) return ""; var e = this.value[0]; return this.value = this.value.slice(1), e } }, { key: "state", get: function () { return { value: this.value, from: this.from, stop: this.stop } }, set: function (t) { Object.assign(this, t) } }]), t }(); function ie(t) { var e = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {}; return new ie.InputMask(t, e) } var re = function () { function t(e) { Nt(this, t), this._value = "", this._update(Object.assign({}, t.DEFAULTS, {}, e)), this.isInitialized = !0 } return Ht(t, [{ key: "updateOptions", value: function (t) { Object.keys(t).length && this.withValueRefresh(this._update.bind(this, t)) } }, { key: "_update", value: function (t) { Object.assign(this, t) } }, { key: "reset", value: function () { this._value = "" } }, { key: "resolve", value: function (t) { return this.reset(), this.append(t, { input: !0 }, ""), this.doCommit(), this.value } }, { key: "nearestInputPos", value: function (t, e) { return t } }, { key: "extractInput", value: function () { var t = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : 0, e = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : this.value.length; return this.value.slice(t, e) } }, { key: "extractTail", value: function () { var t = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : 0, e = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : this.value.length; return new ue(this.extractInput(t, e), t) } }, { key: "appendTail", value: function (t) { return Jt(t) && (t = new ue(String(t))), t.appendTo(this) } }, { key: "_appendCharRaw", value: function (t) { var e = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {}; return (t = this.doPrepare(t, e)) ? (this._value += t, new ne({ inserted: t, rawInserted: t })) : new ne } }, { key: "_appendChar", value: function (t) { var e = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {}, n = arguments.length > 2 ? arguments[2] : void 0, u = this.state, i = this._appendCharRaw(t, e); if (i.inserted) { var r, a = !1 !== this.doValidate(e); if (a && null != n) { var s = this.state; this.overwrite && (r = n.state, n.shiftBefore(this.value.length)); var o = this.appendTail(n); (a = o.rawInserted === n.toString()) && o.inserted && (this.state = s) } a || (i = new ne, this.state = u, n && r && (n.state = r)) } return i } }, { key: "_appendPlaceholder", value: function () { return new ne } }, { key: "append", value: function (t, e, n) { if (!Jt(t)) throw new Error("value should be string"); var u = new ne, i = Jt(n) ? new ue(String(n)) : n; e.tail && (e._beforeTailState = this.state); for (var r = 0; r < t.length; ++r)u.aggregate(this._appendChar(t[r], e, i)); return null != i && (u.tailShift += this.appendTail(i).tailShift), u } }, { key: "remove", value: function () { var t = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : 0, e = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : this.value.length; return this._value = this.value.slice(0, t) + this.value.slice(e), new ne } }, { key: "withValueRefresh", value: function (t) { if (this._refreshing || !this.isInitialized) return t(); this._refreshing = !0; var e = this.rawInputValue, n = this.value, u = t(); return this.rawInputValue = e, this.value !== n && 0 === n.indexOf(this.value) && this.append(n.slice(this.value.length), {}, ""), delete this._refreshing, u } }, { key: "runIsolated", value: function (t) { if (this._isolated || !this.isInitialized) return t(this); this._isolated = !0; var e = this.state, n = t(this); return this.state = e, delete this._isolated, n } }, { key: "doPrepare", value: function (t) { var e = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {}; return this.prepare ? this.prepare(t, this, e) : t } }, { key: "doValidate", value: function (t) { return (!this.validate || this.validate(this.value, this, t)) && (!this.parent || this.parent.doValidate(t)) } }, { key: "doCommit", value: function () { this.commit && this.commit(this.value, this) } }, { key: "doFormat", value: function (t) { return this.format ? this.format(t, this) : t } }, { key: "doParse", value: function (t) { return this.parse ? this.parse(t, this) : t } }, { key: "splice", value: function (t, e, n, u) { var i = t + e, r = this.extractTail(i), a = this.nearestInputPos(t, u); return new ne({ tailShift: a - t }).aggregate(this.remove(a)).aggregate(this.append(n, { input: !0 }, r)) } }, { key: "state", get: function () { return { _value: this.value } }, set: function (t) { this._value = t._value } }, { key: "value", get: function () { return this._value }, set: function (t) { this.resolve(t) } }, { key: "unmaskedValue", get: function () { return this.value }, set: function (t) { this.reset(), this.append(t, {}, ""), this.doCommit() } }, { key: "typedValue", get: function () { return this.doParse(this.value) }, set: function (t) { this.value = this.doFormat(t) } }, { key: "rawInputValue", get: function () { return this.extractInput(0, this.value.length, { raw: !0 }) }, set: function (t) { this.reset(), this.append(t, { raw: !0 }, ""), this.doCommit() } }, { key: "isComplete", get: function () { return !0 } }]), t }(); function ae(t) { if (null == t) throw new Error("mask property should be defined"); return t instanceof RegExp ? ie.MaskedRegExp : Jt(t) ? ie.MaskedPattern : t instanceof Date || t === Date ? ie.MaskedDate : t instanceof Number || "number" == typeof t || t === Number ? ie.MaskedNumber : Array.isArray(t) || t === Array ? ie.MaskedDynamic : ie.Masked && t.prototype instanceof ie.Masked ? t : t instanceof Function ? ie.MaskedFunction : t instanceof ie.Masked ? t.constructor : (console.warn("Mask not found for mask", t), ie.Masked) } function se(t) { if (ie.Masked && t instanceof ie.Masked) return t; var e = (t = Object.assign({}, t)).mask; if (ie.Masked && e instanceof ie.Masked) return e; var n = ae(e); if (!n) throw new Error("Masked class is not found for provided mask, appropriate module needs to be import manually before creating mask."); return new n(t) } re.DEFAULTS = { format: function (t) { return t }, parse: function (t) { return t } }, ie.Masked = re, ie.createMask = se; var oe = { 0: /\d/, a: /[\u0041-\u005A\u0061-\u007A\u00AA\u00B5\u00BA\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02C1\u02C6-\u02D1\u02E0-\u02E4\u02EC\u02EE\u0370-\u0374\u0376\u0377\u037A-\u037D\u0386\u0388-\u038A\u038C\u038E-\u03A1\u03A3-\u03F5\u03F7-\u0481\u048A-\u0527\u0531-\u0556\u0559\u0561-\u0587\u05D0-\u05EA\u05F0-\u05F2\u0620-\u064A\u066E\u066F\u0671-\u06D3\u06D5\u06E5\u06E6\u06EE\u06EF\u06FA-\u06FC\u06FF\u0710\u0712-\u072F\u074D-\u07A5\u07B1\u07CA-\u07EA\u07F4\u07F5\u07FA\u0800-\u0815\u081A\u0824\u0828\u0840-\u0858\u08A0\u08A2-\u08AC\u0904-\u0939\u093D\u0950\u0958-\u0961\u0971-\u0977\u0979-\u097F\u0985-\u098C\u098F\u0990\u0993-\u09A8\u09AA-\u09B0\u09B2\u09B6-\u09B9\u09BD\u09CE\u09DC\u09DD\u09DF-\u09E1\u09F0\u09F1\u0A05-\u0A0A\u0A0F\u0A10\u0A13-\u0A28\u0A2A-\u0A30\u0A32\u0A33\u0A35\u0A36\u0A38\u0A39\u0A59-\u0A5C\u0A5E\u0A72-\u0A74\u0A85-\u0A8D\u0A8F-\u0A91\u0A93-\u0AA8\u0AAA-\u0AB0\u0AB2\u0AB3\u0AB5-\u0AB9\u0ABD\u0AD0\u0AE0\u0AE1\u0B05-\u0B0C\u0B0F\u0B10\u0B13-\u0B28\u0B2A-\u0B30\u0B32\u0B33\u0B35-\u0B39\u0B3D\u0B5C\u0B5D\u0B5F-\u0B61\u0B71\u0B83\u0B85-\u0B8A\u0B8E-\u0B90\u0B92-\u0B95\u0B99\u0B9A\u0B9C\u0B9E\u0B9F\u0BA3\u0BA4\u0BA8-\u0BAA\u0BAE-\u0BB9\u0BD0\u0C05-\u0C0C\u0C0E-\u0C10\u0C12-\u0C28\u0C2A-\u0C33\u0C35-\u0C39\u0C3D\u0C58\u0C59\u0C60\u0C61\u0C85-\u0C8C\u0C8E-\u0C90\u0C92-\u0CA8\u0CAA-\u0CB3\u0CB5-\u0CB9\u0CBD\u0CDE\u0CE0\u0CE1\u0CF1\u0CF2\u0D05-\u0D0C\u0D0E-\u0D10\u0D12-\u0D3A\u0D3D\u0D4E\u0D60\u0D61\u0D7A-\u0D7F\u0D85-\u0D96\u0D9A-\u0DB1\u0DB3-\u0DBB\u0DBD\u0DC0-\u0DC6\u0E01-\u0E30\u0E32\u0E33\u0E40-\u0E46\u0E81\u0E82\u0E84\u0E87\u0E88\u0E8A\u0E8D\u0E94-\u0E97\u0E99-\u0E9F\u0EA1-\u0EA3\u0EA5\u0EA7\u0EAA\u0EAB\u0EAD-\u0EB0\u0EB2\u0EB3\u0EBD\u0EC0-\u0EC4\u0EC6\u0EDC-\u0EDF\u0F00\u0F40-\u0F47\u0F49-\u0F6C\u0F88-\u0F8C\u1000-\u102A\u103F\u1050-\u1055\u105A-\u105D\u1061\u1065\u1066\u106E-\u1070\u1075-\u1081\u108E\u10A0-\u10C5\u10C7\u10CD\u10D0-\u10FA\u10FC-\u1248\u124A-\u124D\u1250-\u1256\u1258\u125A-\u125D\u1260-\u1288\u128A-\u128D\u1290-\u12B0\u12B2-\u12B5\u12B8-\u12BE\u12C0\u12C2-\u12C5\u12C8-\u12D6\u12D8-\u1310\u1312-\u1315\u1318-\u135A\u1380-\u138F\u13A0-\u13F4\u1401-\u166C\u166F-\u167F\u1681-\u169A\u16A0-\u16EA\u1700-\u170C\u170E-\u1711\u1720-\u1731\u1740-\u1751\u1760-\u176C\u176E-\u1770\u1780-\u17B3\u17D7\u17DC\u1820-\u1877\u1880-\u18A8\u18AA\u18B0-\u18F5\u1900-\u191C\u1950-\u196D\u1970-\u1974\u1980-\u19AB\u19C1-\u19C7\u1A00-\u1A16\u1A20-\u1A54\u1AA7\u1B05-\u1B33\u1B45-\u1B4B\u1B83-\u1BA0\u1BAE\u1BAF\u1BBA-\u1BE5\u1C00-\u1C23\u1C4D-\u1C4F\u1C5A-\u1C7D\u1CE9-\u1CEC\u1CEE-\u1CF1\u1CF5\u1CF6\u1D00-\u1DBF\u1E00-\u1F15\u1F18-\u1F1D\u1F20-\u1F45\u1F48-\u1F4D\u1F50-\u1F57\u1F59\u1F5B\u1F5D\u1F5F-\u1F7D\u1F80-\u1FB4\u1FB6-\u1FBC\u1FBE\u1FC2-\u1FC4\u1FC6-\u1FCC\u1FD0-\u1FD3\u1FD6-\u1FDB\u1FE0-\u1FEC\u1FF2-\u1FF4\u1FF6-\u1FFC\u2071\u207F\u2090-\u209C\u2102\u2107\u210A-\u2113\u2115\u2119-\u211D\u2124\u2126\u2128\u212A-\u212D\u212F-\u2139\u213C-\u213F\u2145-\u2149\u214E\u2183\u2184\u2C00-\u2C2E\u2C30-\u2C5E\u2C60-\u2CE4\u2CEB-\u2CEE\u2CF2\u2CF3\u2D00-\u2D25\u2D27\u2D2D\u2D30-\u2D67\u2D6F\u2D80-\u2D96\u2DA0-\u2DA6\u2DA8-\u2DAE\u2DB0-\u2DB6\u2DB8-\u2DBE\u2DC0-\u2DC6\u2DC8-\u2DCE\u2DD0-\u2DD6\u2DD8-\u2DDE\u2E2F\u3005\u3006\u3031-\u3035\u303B\u303C\u3041-\u3096\u309D-\u309F\u30A1-\u30FA\u30FC-\u30FF\u3105-\u312D\u3131-\u318E\u31A0-\u31BA\u31F0-\u31FF\u3400-\u4DB5\u4E00-\u9FCC\uA000-\uA48C\uA4D0-\uA4FD\uA500-\uA60C\uA610-\uA61F\uA62A\uA62B\uA640-\uA66E\uA67F-\uA697\uA6A0-\uA6E5\uA717-\uA71F\uA722-\uA788\uA78B-\uA78E\uA790-\uA793\uA7A0-\uA7AA\uA7F8-\uA801\uA803-\uA805\uA807-\uA80A\uA80C-\uA822\uA840-\uA873\uA882-\uA8B3\uA8F2-\uA8F7\uA8FB\uA90A-\uA925\uA930-\uA946\uA960-\uA97C\uA984-\uA9B2\uA9CF\uAA00-\uAA28\uAA40-\uAA42\uAA44-\uAA4B\uAA60-\uAA76\uAA7A\uAA80-\uAAAF\uAAB1\uAAB5\uAAB6\uAAB9-\uAABD\uAAC0\uAAC2\uAADB-\uAADD\uAAE0-\uAAEA\uAAF2-\uAAF4\uAB01-\uAB06\uAB09-\uAB0E\uAB11-\uAB16\uAB20-\uAB26\uAB28-\uAB2E\uABC0-\uABE2\uAC00-\uD7A3\uD7B0-\uD7C6\uD7CB-\uD7FB\uF900-\uFA6D\uFA70-\uFAD9\uFB00-\uFB06\uFB13-\uFB17\uFB1D\uFB1F-\uFB28\uFB2A-\uFB36\uFB38-\uFB3C\uFB3E\uFB40\uFB41\uFB43\uFB44\uFB46-\uFBB1\uFBD3-\uFD3D\uFD50-\uFD8F\uFD92-\uFDC7\uFDF0-\uFDFB\uFE70-\uFE74\uFE76-\uFEFC\uFF21-\uFF3A\uFF41-\uFF5A\uFF66-\uFFBE\uFFC2-\uFFC7\uFFCA-\uFFCF\uFFD2-\uFFD7\uFFDA-\uFFDC]/, "*": /./ }, le = function () { function t(e) { Nt(this, t); var n = e.mask, u = Yt(e, ["mask"]); this.masked = se({ mask: n }), Object.assign(this, u) } return Ht(t, [{ key: "reset", value: function () { this._isFilled = !1, this.masked.reset() } }, { key: "remove", value: function () { var t = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : 0, e = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : this.value.length; return 0 === t && e >= 1 ? (this._isFilled = !1, this.masked.remove(t, e)) : new ne } }, { key: "_appendChar", value: function (t) { var e = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {}; if (this._isFilled) return new ne; var n = this.masked.state, u = this.masked._appendChar(t, e); return u.inserted && !1 === this.doValidate(e) && (u.inserted = u.rawInserted = "", this.masked.state = n), u.inserted || this.isOptional || this.lazy || e.input || (u.inserted = this.placeholderChar), u.skip = !u.inserted && !this.isOptional, this._isFilled = Boolean(u.inserted), u } }, { key: "append", value: function () { var t; return (t = this.masked).append.apply(t, arguments) } }, { key: "_appendPlaceholder", value: function () { var t = new ne; return this._isFilled || this.isOptional ? t : (this._isFilled = !0, t.inserted = this.placeholderChar, t) } }, { key: "extractTail", value: function () { var t; return (t = this.masked).extractTail.apply(t, arguments) } }, { key: "appendTail", value: function () { var t; return (t = this.masked).appendTail.apply(t, arguments) } }, { key: "extractInput", value: function () { var t = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : 0, e = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : this.value.length, n = arguments.length > 2 ? arguments[2] : void 0; return this.masked.extractInput(t, e, n) } }, { key: "nearestInputPos", value: function (t) { var e = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : Qt.NONE, n = this.value.length, u = Math.min(Math.max(t, 0), n); switch (e) { case Qt.LEFT: case Qt.FORCE_LEFT: return this.isComplete ? u : 0; case Qt.RIGHT: case Qt.FORCE_RIGHT: return this.isComplete ? u : n; case Qt.NONE: default: return u } } }, { key: "doValidate", value: function () { var t, e; return (t = this.masked).doValidate.apply(t, arguments) && (!this.parent || (e = this.parent).doValidate.apply(e, arguments)) } }, { key: "doCommit", value: function () { this.masked.doCommit() } }, { key: "value", get: function () { return this.masked.value || (this._isFilled && !this.isOptional ? this.placeholderChar : "") } }, { key: "unmaskedValue", get: function () { return this.masked.unmaskedValue } }, { key: "isComplete", get: function () { return Boolean(this.masked.value) || this.isOptional } }, { key: "state", get: function () { return { masked: this.masked.state, _isFilled: this._isFilled } }, set: function (t) { this.masked.state = t.masked, this._isFilled = t._isFilled } }]), t }(), he = function () { function t(e) { Nt(this, t), Object.assign(this, e), this._value = "" } return Ht(t, [{ key: "reset", value: function () { this._isRawInput = !1, this._value = "" } }, { key: "remove", value: function () { var t = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : 0, e = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : this._value.length; return this._value = this._value.slice(0, t) + this._value.slice(e), this._value || (this._isRawInput = !1), new ne } }, { key: "nearestInputPos", value: function (t) { var e = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : Qt.NONE, n = this._value.length; switch (e) { case Qt.LEFT: case Qt.FORCE_LEFT: return 0; case Qt.NONE: case Qt.RIGHT: case Qt.FORCE_RIGHT: default: return n } } }, { key: "extractInput", value: function () { var t = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : 0, e = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : this._value.length; return (arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : {}).raw && this._isRawInput && this._value.slice(t, e) || "" } }, { key: "_appendChar", value: function (t) { var e = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {}, n = new ne; if (this._value) return n; var u = this.char === t[0] && (this.isUnmasking || e.input || e.raw) && !e.tail; return u && (n.rawInserted = this.char), this._value = n.inserted = this.char, this._isRawInput = u && (e.raw || e.input), n } }, { key: "_appendPlaceholder", value: function () { var t = new ne; return this._value ? t : (this._value = t.inserted = this.char, t) } }, { key: "extractTail", value: function () { arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : this.value.length; return new ue("") } }, { key: "appendTail", value: function (t) { return Jt(t) && (t = new ue(String(t))), t.appendTo(this) } }, { key: "append", value: function (t, e, n) { var u = this._appendChar(t, e); return null != n && (u.tailShift += this.appendTail(n).tailShift), u } }, { key: "doCommit", value: function () { } }, { key: "value", get: function () { return this._value } }, { key: "unmaskedValue", get: function () { return this.isUnmasking ? this.value : "" } }, { key: "isComplete", get: function () { return !0 } }, { key: "state", get: function () { return { _value: this._value, _isRawInput: this._isRawInput } }, set: function (t) { Object.assign(this, t) } }]), t }(), ce = function () { function t() { var e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : [], n = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : 0; Nt(this, t), this.chunks = e, this.from = n } return Ht(t, [{ key: "toString", value: function () { return this.chunks.map(String).join("") } }, { key: "extend", value: function (e) { if (String(e)) { Jt(e) && (e = new ue(String(e))); var n = this.chunks[this.chunks.length - 1], u = n && (n.stop === e.stop || null == e.stop) && e.from === n.from + n.toString().length; if (e instanceof ue) u ? n.extend(e.toString()) : this.chunks.push(e); else if (e instanceof t) { if (null == e.stop) for (var i; e.chunks.length && null == e.chunks[0].stop;)(i = e.chunks.shift()).from += e.from, this.extend(i); e.toString() && (e.stop = e.blockIndex, this.chunks.push(e)) } } } }, { key: "appendTo", value: function (e) { if (!(e instanceof ie.MaskedPattern)) return new ue(this.toString()).appendTo(e); for (var n = new ne, u = 0; u < this.chunks.length && !n.skip; ++u) { var i = this.chunks[u], r = e._mapPosToBlock(e.value.length), a = i.stop, s = void 0; if (null != a && (!r || r.index <= a) && ((i instanceof t || e._stops.indexOf(a) >= 0) && n.aggregate(e._appendPlaceholder(a)), s = i instanceof t && e._blocks[a]), s) { var o = s.appendTail(i); o.skip = !1, n.aggregate(o), e._value += o.inserted; var l = i.toString().slice(o.rawInserted.length); l && n.aggregate(e.append(l, { tail: !0 })) } else n.aggregate(e.append(i.toString(), { tail: !0 })) } return n } }, { key: "shiftBefore", value: function (t) { if (this.from >= t || !this.chunks.length) return ""; for (var e = t - this.from, n = 0; n < this.chunks.length;) { var u = this.chunks[n], i = u.shiftBefore(e); if (u.toString()) { if (!i) break; ++n } else this.chunks.splice(n, 1); if (i) return i } return "" } }, { key: "state", get: function () { return { chunks: this.chunks.map(function (t) { return t.state }), from: this.from, stop: this.stop, blockIndex: this.blockIndex } }, set: function (e) { var n = e.chunks, u = Yt(e, ["chunks"]); Object.assign(this, u), this.chunks = n.map(function (e) { var n = "chunks" in e ? new t : new ue; return n.state = e, n }) } }]), t }(), fe = function (t) { function e() { return Nt(this, e), Zt(this, Gt(e).apply(this, arguments)) } return Ut(e, re), Ht(e, [{ key: "_update", value: function (t) { t.mask && (t.validate = function (e) { return e.search(t.mask) >= 0 }), qt(Gt(e.prototype), "_update", this).call(this, t) } }]), e }(); ie.MaskedRegExp = fe; var pe = function (t) { function e() { var t = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {}; return Nt(this, e), t.definitions = Object.assign({}, oe, t.definitions), Zt(this, Gt(e).call(this, Object.assign({}, e.DEFAULTS, {}, t))) } return Ut(e, re), Ht(e, [{ key: "_update", value: function () { var t = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {}; t.definitions = Object.assign({}, this.definitions, t.definitions), qt(Gt(e.prototype), "_update", this).call(this, t), this._rebuildMask() } }, { key: "_rebuildMask", value: function () { var t = this, n = this.definitions; this._blocks = [], this._stops = [], this._maskedBlocks = {}; var u = this.mask; if (u && n) for (var i = !1, r = !1, a = 0; a < u.length; ++a) { if (this.blocks) if ("continue" === function () { var e = u.slice(a), n = Object.keys(t.blocks).filter(function (t) { return 0 === e.indexOf(t) }); n.sort(function (t, e) { return e.length - t.length }); var i = n[0]; if (i) { var r = se(Object.assign({ parent: t, lazy: t.lazy, placeholderChar: t.placeholderChar, overwrite: t.overwrite }, t.blocks[i])); return r && (t._blocks.push(r), t._maskedBlocks[i] || (t._maskedBlocks[i] = []), t._maskedBlocks[i].push(t._blocks.length - 1)), a += i.length - 1, "continue" } }()) continue; var s = u[a], o = s in n; if (s !== e.STOP_CHAR) if ("{" !== s && "}" !== s) if ("[" !== s && "]" !== s) { if (s === e.ESCAPE_CHAR) { if (!(s = u[++a])) break; o = !1 } var l = o ? new le({ parent: this, lazy: this.lazy, placeholderChar: this.placeholderChar, mask: n[s], isOptional: r }) : new he({ char: s, isUnmasking: i }); this._blocks.push(l) } else r = !r; else i = !i; else this._stops.push(this._blocks.length) } } }, { key: "reset", value: function () { qt(Gt(e.prototype), "reset", this).call(this), this._blocks.forEach(function (t) { return t.reset() }) } }, { key: "doCommit", value: function () { this._blocks.forEach(function (t) { return t.doCommit() }), qt(Gt(e.prototype), "doCommit", this).call(this) } }, { key: "appendTail", value: function (t) { return qt(Gt(e.prototype), "appendTail", this).call(this, t).aggregate(this._appendPlaceholder()) } }, { key: "_appendCharRaw", value: function (t) { var e = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {}; t = this.doPrepare(t, e); var n = this._mapPosToBlock(this.value.length), u = new ne; if (!n) return u; for (var i = n.index; ; ++i) { var r = this._blocks[i]; if (!r) break; var a = r._appendChar(t, e), s = a.skip; if (u.aggregate(a), s || a.rawInserted) break } return u } }, { key: "extractTail", value: function () { var t = this, e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : 0, n = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : this.value.length, u = new ce; return e === n ? u : (this._forEachBlocksInRange(e, n, function (e, n, i, r) { var a = e.extractTail(i, r); a.stop = t._findStopBefore(n), a.from = t._blockStartPos(n), a instanceof ce && (a.blockIndex = n), u.extend(a) }), u) } }, { key: "extractInput", value: function () { var t = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : 0, e = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : this.value.length, n = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : {}; if (t === e) return ""; var u = ""; return this._forEachBlocksInRange(t, e, function (t, e, i, r) { u += t.extractInput(i, r, n) }), u } }, { key: "_findStopBefore", value: function (t) { for (var e, n = 0; n < this._stops.length; ++n) { var u = this._stops[n]; if (!(u <= t)) break; e = u } return e } }, { key: "_appendPlaceholder", value: function (t) { var e = this, n = new ne; if (this.lazy && null == t) return n; var u = this._mapPosToBlock(this.value.length); if (!u) return n; var i = u.index, r = null != t ? t : this._blocks.length; return this._blocks.slice(i, r).forEach(function (u) { if (!u.lazy || null != t) { var i = null != u._blocks ? [u._blocks.length] : [], r = u._appendPlaceholder.apply(u, i); e._value += r.inserted, n.aggregate(r) } }), n } }, { key: "_mapPosToBlock", value: function (t) { for (var e = "", n = 0; n < this._blocks.length; ++n) { var u = this._blocks[n], i = e.length; if (t <= (e += u.value).length) return { index: n, offset: t - i } } } }, { key: "_blockStartPos", value: function (t) { return this._blocks.slice(0, t).reduce(function (t, e) { return t + e.value.length }, 0) } }, { key: "_forEachBlocksInRange", value: function (t) { var e = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : this.value.length, n = arguments.length > 2 ? arguments[2] : void 0, u = this._mapPosToBlock(t); if (u) { var i = this._mapPosToBlock(e), r = i && u.index === i.index, a = u.offset, s = i && r ? i.offset : this._blocks[u.index].value.length; if (n(this._blocks[u.index], u.index, a, s), i && !r) { for (var o = u.index + 1; o < i.index; ++o)n(this._blocks[o], o, 0, this._blocks[o].value.length); n(this._blocks[i.index], i.index, 0, i.offset) } } } }, { key: "remove", value: function () { var t = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : 0, n = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : this.value.length, u = qt(Gt(e.prototype), "remove", this).call(this, t, n); return this._forEachBlocksInRange(t, n, function (t, e, n, i) { u.aggregate(t.remove(n, i)) }), u } }, { key: "nearestInputPos", value: function (t) { var e = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : Qt.NONE, n = this._mapPosToBlock(t) || { index: 0, offset: 0 }, u = n.offset, i = n.index, r = this._blocks[i]; if (!r) return t; var a = u; 0 !== a && a < r.value.length && (a = r.nearestInputPos(u, function (t) { switch (t) { case Qt.LEFT: return Qt.FORCE_LEFT; case Qt.RIGHT: return Qt.FORCE_RIGHT; default: return t } }(e))); var s = a === r.value.length; if (!(0 === a) && !s) return this._blockStartPos(i) + a; var o = s ? i + 1 : i; if (e === Qt.NONE) { if (o > 0) { var l = o - 1, h = this._blocks[l], c = h.nearestInputPos(0, Qt.NONE); if (!h.value.length || c !== h.value.length) return this._blockStartPos(o) } for (var f = o; f < this._blocks.length; ++f) { var p = this._blocks[f], d = p.nearestInputPos(0, Qt.NONE); if (!p.value.length || d !== p.value.length) return this._blockStartPos(f) + d } for (var v = o - 1; v >= 0; --v) { var k = this._blocks[v], g = k.nearestInputPos(0, Qt.NONE); if (!k.value.length || g !== k.value.length) return this._blockStartPos(v) + k.value.length } return t } if (e === Qt.LEFT || e === Qt.FORCE_LEFT) { for (var y, m = o; m < this._blocks.length; ++m)if (this._blocks[m].value) { y = m; break } if (null != y) { var _ = this._blocks[y], A = _.nearestInputPos(0, Qt.RIGHT); if (0 === A && _.unmaskedValue.length) return this._blockStartPos(y) + A } for (var E, b = -1, C = o - 1; C >= 0; --C) { var F = this._blocks[C], S = F.nearestInputPos(F.value.length, Qt.FORCE_LEFT); if (F.value && 0 === S || (E = C), 0 !== S) { if (S !== F.value.length) return this._blockStartPos(C) + S; b = C; break } } if (e === Qt.LEFT) for (var D = b + 1; D <= Math.min(o, this._blocks.length - 1); ++D) { var B = this._blocks[D], w = B.nearestInputPos(0, Qt.NONE), O = this._blockStartPos(D) + w; if (O > t) break; if (w !== B.value.length) return O } if (b >= 0) return this._blockStartPos(b) + this._blocks[b].value.length; if (e === Qt.FORCE_LEFT || this.lazy && !this.extractInput() && !function (t) { if (!t) return !1; var e = t.value; return !e || t.nearestInputPos(0, Qt.NONE) !== e.length }(this._blocks[o])) return 0; if (null != E) return this._blockStartPos(E); for (var M = o; M < this._blocks.length; ++M) { var T = this._blocks[M], x = T.nearestInputPos(0, Qt.NONE); if (!T.value.length || x !== T.value.length) return this._blockStartPos(M) + x } return 0 } if (e === Qt.RIGHT || e === Qt.FORCE_RIGHT) { for (var P, I, R = o; R < this._blocks.length; ++R) { var j = this._blocks[R], V = j.nearestInputPos(0, Qt.NONE); if (V !== j.value.length) { I = this._blockStartPos(R) + V, P = R; break } } if (null != P && null != I) { for (var N = P; N < this._blocks.length; ++N) { var L = this._blocks[N], H = L.nearestInputPos(0, Qt.FORCE_RIGHT); if (H !== L.value.length) return this._blockStartPos(N) + H } return e === Qt.FORCE_RIGHT ? this.value.length : I } for (var U = Math.min(o, this._blocks.length - 1); U >= 0; --U) { var G = this._blocks[U], z = G.nearestInputPos(G.value.length, Qt.LEFT); if (0 !== z) { var Y = this._blockStartPos(U) + z; if (Y >= t) return Y; break } } } return t } }, { key: "maskedBlock", value: function (t) { return this.maskedBlocks(t)[0] } }, { key: "maskedBlocks", value: function (t) { var e = this, n = this._maskedBlocks[t]; return n ? n.map(function (t) { return e._blocks[t] }) : [] } }, { key: "state", get: function () { return Object.assign({}, qt(Gt(e.prototype), "state", this), { _blocks: this._blocks.map(function (t) { return t.state }) }) }, set: function (t) { var n = t._blocks, u = Yt(t, ["_blocks"]); this._blocks.forEach(function (t, e) { return t.state = n[e] }), $t(Gt(e.prototype), "state", u, this, !0) } }, { key: "isComplete", get: function () { return this._blocks.every(function (t) { return t.isComplete }) } }, { key: "unmaskedValue", get: function () { return this._blocks.reduce(function (t, e) { return t + e.unmaskedValue }, "") }, set: function (t) { $t(Gt(e.prototype), "unmaskedValue", t, this, !0) } }, { key: "value", get: function () { return this._blocks.reduce(function (t, e) { return t + e.value }, "") }, set: function (t) { $t(Gt(e.prototype), "value", t, this, !0) } }]), e }(); pe.DEFAULTS = { lazy: !0, placeholderChar: "_" }, pe.STOP_CHAR = "`", pe.ESCAPE_CHAR = "\\", pe.InputDefinition = le, pe.FixedDefinition = he, ie.MaskedPattern = pe; var de = function (t) { function e() { return Nt(this, e), Zt(this, Gt(e).apply(this, arguments)) } return Ut(e, pe), Ht(e, [{ key: "_update", value: function (t) { t = Object.assign({ to: this.to || 0, from: this.from || 0 }, t); var n = String(t.to).length; null != t.maxLength && (n = Math.max(n, t.maxLength)), t.maxLength = n; for (var u = String(t.from).padStart(n, "0"), i = String(t.to).padStart(n, "0"), r = 0; r < i.length && i[r] === u[r];)++r; t.mask = i.slice(0, r).replace(/0/g, "\\0") + "0".repeat(n - r), qt(Gt(e.prototype), "_update", this).call(this, t) } }, { key: "boundaries", value: function (t) { var e = "", n = "", u = Xt(t.match(/^(\D*)(\d*)(\D*)/) || [], 3), i = u[1], r = u[2]; return r && (e = "0".repeat(i.length) + r, n = "9".repeat(i.length) + r), [e = e.padEnd(this.maxLength, "0"), n = n.padEnd(this.maxLength, "9")] } }, { key: "doPrepare", value: function (t) { var n = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {}; if (t = qt(Gt(e.prototype), "doPrepare", this).call(this, t, n).replace(/\D/g, ""), !this.autofix) return t; for (var u = String(this.from).padStart(this.maxLength, "0"), i = String(this.to).padStart(this.maxLength, "0"), r = this.value, a = "", s = 0; s < t.length; ++s) { var o = r + a + t[s], l = Xt(this.boundaries(o), 2), h = l[0], c = l[1]; Number(c) < this.from ? a += u[o.length - 1] : Number(h) > this.to ? a += i[o.length - 1] : a += t[s] } return a } }, { key: "doValidate", value: function () { var t, n = this.value; if (-1 === n.search(/[^0]/) && n.length <= this._matchFrom) return !0; for (var u = Xt(this.boundaries(n), 2), i = u[0], r = u[1], a = arguments.length, s = new Array(a), o = 0; o < a; o++)s[o] = arguments[o]; return this.from <= Number(r) && Number(i) <= this.to && (t = qt(Gt(e.prototype), "doValidate", this)).call.apply(t, [this].concat(s)) } }, { key: "_matchFrom", get: function () { return this.maxLength - String(this.from).length } }, { key: "isComplete", get: function () { return qt(Gt(e.prototype), "isComplete", this) && Boolean(this.value) } }]), e }(); ie.MaskedRange = de; var ve = function (t) { function e(t) { return Nt(this, e), Zt(this, Gt(e).call(this, Object.assign({}, e.DEFAULTS, {}, t))) } return Ut(e, pe), Ht(e, [{ key: "_update", value: function (t) { t.mask === Date && delete t.mask, t.pattern && (t.mask = t.pattern); var n = t.blocks; t.blocks = Object.assign({}, e.GET_DEFAULT_BLOCKS()), t.min && (t.blocks.Y.from = t.min.getFullYear()), t.max && (t.blocks.Y.to = t.max.getFullYear()), t.min && t.max && t.blocks.Y.from === t.blocks.Y.to && (t.blocks.m.from = t.min.getMonth() + 1, t.blocks.m.to = t.max.getMonth() + 1, t.blocks.m.from === t.blocks.m.to && (t.blocks.d.from = t.min.getDate(), t.blocks.d.to = t.max.getDate())), Object.assign(t.blocks, n), Object.keys(t.blocks).forEach(function (e) { var n = t.blocks[e]; "autofix" in n || (n.autofix = t.autofix) }), qt(Gt(e.prototype), "_update", this).call(this, t) } }, { key: "doValidate", value: function () { for (var t, n = this.date, u = arguments.length, i = new Array(u), r = 0; r < u; r++)i[r] = arguments[r]; return (t = qt(Gt(e.prototype), "doValidate", this)).call.apply(t, [this].concat(i)) && (!this.isComplete || this.isDateExist(this.value) && null != n && (null == this.min || this.min <= n) && (null == this.max || n <= this.max)) } }, { key: "isDateExist", value: function (t) { return this.format(this.parse(t, this), this).indexOf(t) >= 0 } }, { key: "date", get: function () { return this.typedValue }, set: function (t) { this.typedValue = t } }, { key: "typedValue", get: function () { return this.isComplete ? qt(Gt(e.prototype), "typedValue", this) : null }, set: function (t) { $t(Gt(e.prototype), "typedValue", t, this, !0) } }]), e }(); ve.DEFAULTS = { pattern: "d{.}`m{.}`Y", format: function (t) { return [String(t.getDate()).padStart(2, "0"), String(t.getMonth() + 1).padStart(2, "0"), t.getFullYear()].join(".") }, parse: function (t) { var e = Xt(t.split("."), 3), n = e[0], u = e[1], i = e[2]; return new Date(i, u - 1, n) } }, ve.GET_DEFAULT_BLOCKS = function () { return { d: { mask: de, from: 1, to: 31, maxLength: 2 }, m: { mask: de, from: 1, to: 12, maxLength: 2 }, Y: { mask: de, from: 1900, to: 9999 } } }, ie.MaskedDate = ve; var ke = function () { function t() { Nt(this, t) } return Ht(t, [{ key: "select", value: function (t, e) { if (null != t && null != e && (t !== this.selectionStart || e !== this.selectionEnd)) try { this._unsafeSelect(t, e) } catch (t) { } } }, { key: "_unsafeSelect", value: function (t, e) { } }, { key: "bindEvents", value: function (t) { } }, { key: "unbindEvents", value: function () { } }, { key: "selectionStart", get: function () { var t; try { t = this._unsafeSelectionStart } catch (t) { } return null != t ? t : this.value.length } }, { key: "selectionEnd", get: function () { var t; try { t = this._unsafeSelectionEnd } catch (t) { } return null != t ? t : this.value.length } }, { key: "isActive", get: function () { return !1 } }]), t }(); ie.MaskElement = ke; var ge = function (t) { function e(t) { var n; return Nt(this, e), (n = Zt(this, Gt(e).call(this))).input = t, n._handlers = {}, n } return Ut(e, ke), Ht(e, [{ key: "_unsafeSelect", value: function (t, e) { this.input.setSelectionRange(t, e) } }, { key: "bindEvents", value: function (t) { var n = this; Object.keys(t).forEach(function (u) { return n._toggleEventHandler(e.EVENTS_MAP[u], t[u]) }) } }, { key: "unbindEvents", value: function () { var t = this; Object.keys(this._handlers).forEach(function (e) { return t._toggleEventHandler(e) }) } }, { key: "_toggleEventHandler", value: function (t, e) { this._handlers[t] && (this.input.removeEventListener(t, this._handlers[t]), delete this._handlers[t]), e && (this.input.addEventListener(t, e), this._handlers[t] = e) } }, { key: "rootElement", get: function () { return this.input.getRootNode ? this.input.getRootNode() : document } }, { key: "isActive", get: function () { return this.input === this.rootElement.activeElement } }, { key: "_unsafeSelectionStart", get: function () { return this.input.selectionStart } }, { key: "_unsafeSelectionEnd", get: function () { return this.input.selectionEnd } }, { key: "value", get: function () { return this.input.value }, set: function (t) { this.input.value = t } }]), e }(); ge.EVENTS_MAP = { selectionChange: "keydown", input: "input", drop: "drop", click: "click", focus: "focus", commit: "blur" }, ie.HTMLMaskElement = ge; var ye = function (t) { function e() { return Nt(this, e), Zt(this, Gt(e).apply(this, arguments)) } return Ut(e, ge), Ht(e, [{ key: "_unsafeSelect", value: function (t, e) { if (this.rootElement.createRange) { var n = this.rootElement.createRange(); n.setStart(this.input.firstChild || this.input, t), n.setEnd(this.input.lastChild || this.input, e); var u = this.rootElement, i = u.getSelection && u.getSelection(); i && (i.removeAllRanges(), i.addRange(n)) } } }, { key: "_unsafeSelectionStart", get: function () { var t = this.rootElement, e = t.getSelection && t.getSelection(); return e && e.anchorOffset } }, { key: "_unsafeSelectionEnd", get: function () { var t = this.rootElement, e = t.getSelection && t.getSelection(); return e && this._unsafeSelectionStart + String(e).length } }, { key: "value", get: function () { return this.input.textContent }, set: function (t) { this.input.textContent = t } }]), e }(); ie.HTMLContenteditableMaskElement = ye; var me = function () { function t(e, n) { Nt(this, t), this.el = e instanceof ke ? e : e.isContentEditable && "INPUT" !== e.tagName && "TEXTAREA" !== e.tagName ? new ye(e) : new ge(e), this.masked = se(n), this._listeners = {}, this._value = "", this._unmaskedValue = "", this._saveSelection = this._saveSelection.bind(this), this._onInput = this._onInput.bind(this), this._onChange = this._onChange.bind(this), this._onDrop = this._onDrop.bind(this), this._onFocus = this._onFocus.bind(this), this._onClick = this._onClick.bind(this), this.alignCursor = this.alignCursor.bind(this), this.alignCursorFriendly = this.alignCursorFriendly.bind(this), this._bindEvents(), this.updateValue(), this._onChange() } return Ht(t, [{ key: "maskEquals", value: function (t) { return null == t || t === this.masked.mask || t === Date && this.masked instanceof ve } }, { key: "_bindEvents", value: function () { this.el.bindEvents({ selectionChange: this._saveSelection, input: this._onInput, drop: this._onDrop, click: this._onClick, focus: this._onFocus, commit: this._onChange }) } }, { key: "_unbindEvents", value: function () { this.el && this.el.unbindEvents() } }, { key: "_fireEvent", value: function (t) { for (var e = arguments.length, n = new Array(e > 1 ? e - 1 : 0), u = 1; u < e; u++)n[u - 1] = arguments[u]; var i = this._listeners[t]; i && i.forEach(function (t) { return t.apply(void 0, n) }) } }, { key: "_saveSelection", value: function () { this.value !== this.el.value && console.warn("Element value was changed outside of mask. Syncronize mask using `mask.updateValue()` to work properly."), this._selection = { start: this.selectionStart, end: this.cursorPos } } }, { key: "updateValue", value: function () { this.masked.value = this.el.value, this._value = this.masked.value } }, { key: "updateControl", value: function () { var t = this.masked.unmaskedValue, e = this.masked.value, n = this.unmaskedValue !== t || this.value !== e; this._unmaskedValue = t, this._value = e, this.el.value !== e && (this.el.value = e), n && this._fireChangeEvents() } }, { key: "updateOptions", value: function (t) { var e = t.mask, n = Yt(t, ["mask"]), u = !this.maskEquals(e), i = !function t(e, n) { if (n === e) return !0; var u, i = Array.isArray(n), r = Array.isArray(e); if (i && r) { if (n.length != e.length) return !1; for (u = 0; u < n.length; u++)if (!t(n[u], e[u])) return !1; return !0 } if (i != r) return !1; if (n && e && "object" === Vt(n) && "object" === Vt(e)) { var a = n instanceof Date, s = e instanceof Date; if (a && s) return n.getTime() == e.getTime(); if (a != s) return !1; var o = n instanceof RegExp, l = e instanceof RegExp; if (o && l) return n.toString() == e.toString(); if (o != l) return !1; var h = Object.keys(n); for (u = 0; u < h.length; u++)if (!Object.prototype.hasOwnProperty.call(e, h[u])) return !1; for (u = 0; u < h.length; u++)if (!t(e[h[u]], n[h[u]])) return !1; return !0 } return !(!n || !e || "function" != typeof n || "function" != typeof e) && n.toString() === e.toString() }(this.masked, n); u && (this.mask = e), i && this.masked.updateOptions(n), (u || i) && this.updateControl() } }, { key: "updateCursor", value: function (t) { null != t && (this.cursorPos = t, this._delayUpdateCursor(t)) } }, { key: "_delayUpdateCursor", value: function (t) { var e = this; this._abortUpdateCursor(), this._changingCursorPos = t, this._cursorChanging = setTimeout(function () { e.el && (e.cursorPos = e._changingCursorPos, e._abortUpdateCursor()) }, 10) } }, { key: "_fireChangeEvents", value: function () { this._fireEvent("accept", this._inputEvent), this.masked.isComplete && this._fireEvent("complete", this._inputEvent) } }, { key: "_abortUpdateCursor", value: function () { this._cursorChanging && (clearTimeout(this._cursorChanging), delete this._cursorChanging) } }, { key: "alignCursor", value: function () { this.cursorPos = this.masked.nearestInputPos(this.cursorPos, Qt.LEFT) } }, { key: "alignCursorFriendly", value: function () { this.selectionStart === this.cursorPos && this.alignCursor() } }, { key: "on", value: function (t, e) { return this._listeners[t] || (this._listeners[t] = []), this._listeners[t].push(e), this } }, { key: "off", value: function (t, e) { if (!this._listeners[t]) return this; if (!e) return delete this._listeners[t], this; var n = this._listeners[t].indexOf(e); return n >= 0 && this._listeners[t].splice(n, 1), this } }, { key: "_onInput", value: function (t) { if (this._inputEvent = t, this._abortUpdateCursor(), !this._selection) return this.updateValue(); var e = new ee(this.el.value, this.cursorPos, this.value, this._selection), n = this.masked.rawInputValue, u = this.masked.splice(e.startChangePos, e.removed.length, e.inserted, e.removeDirection).offset, i = n === this.masked.rawInputValue ? e.removeDirection : Qt.NONE, r = this.masked.nearestInputPos(e.startChangePos + u, i); this.updateControl(), this.updateCursor(r), delete this._inputEvent } }, { key: "_onChange", value: function () { this.value !== this.el.value && this.updateValue(), this.masked.doCommit(), this.updateControl(), this._saveSelection() } }, { key: "_onDrop", value: function (t) { t.preventDefault(), t.stopPropagation() } }, { key: "_onFocus", value: function (t) { this.alignCursorFriendly() } }, { key: "_onClick", value: function (t) { this.alignCursorFriendly() } }, { key: "destroy", value: function () { this._unbindEvents(), this._listeners.length = 0, delete this.el } }, { key: "mask", get: function () { return this.masked.mask }, set: function (t) { if (!this.maskEquals(t)) if (t instanceof ie.Masked || this.masked.constructor !== ae(t)) { var e = se({ mask: t }); e.unmaskedValue = this.masked.unmaskedValue, this.masked = e } else this.masked.updateOptions({ mask: t }) } }, { key: "value", get: function () { return this._value }, set: function (t) { this.masked.value = t, this.updateControl(), this.alignCursor() } }, { key: "unmaskedValue", get: function () { return this._unmaskedValue }, set: function (t) { this.masked.unmaskedValue = t, this.updateControl(), this.alignCursor() } }, { key: "typedValue", get: function () { return this.masked.typedValue }, set: function (t) { this.masked.typedValue = t, this.updateControl(), this.alignCursor() } }, { key: "selectionStart", get: function () { return this._cursorChanging ? this._changingCursorPos : this.el.selectionStart } }, { key: "cursorPos", get: function () { return this._cursorChanging ? this._changingCursorPos : this.el.selectionEnd }, set: function (t) { this.el && this.el.isActive && (this.el.select(t, t), this._saveSelection()) } }]), t }(); ie.InputMask = me; var _e = function (t) { function e() { return Nt(this, e), Zt(this, Gt(e).apply(this, arguments)) } return Ut(e, pe), Ht(e, [{ key: "_update", value: function (t) { t.enum && (t.mask = "*".repeat(t.enum[0].length)), qt(Gt(e.prototype), "_update", this).call(this, t) } }, { key: "doValidate", value: function () { for (var t, n = this, u = arguments.length, i = new Array(u), r = 0; r < u; r++)i[r] = arguments[r]; return this.enum.some(function (t) { return t.indexOf(n.unmaskedValue) >= 0 }) && (t = qt(Gt(e.prototype), "doValidate", this)).call.apply(t, [this].concat(i)) } }]), e }(); ie.MaskedEnum = _e; var Ae = function (t) { function e(t) { return Nt(this, e), Zt(this, Gt(e).call(this, Object.assign({}, e.DEFAULTS, {}, t))) } return Ut(e, re), Ht(e, [{ key: "_update", value: function (t) { qt(Gt(e.prototype), "_update", this).call(this, t), this._updateRegExps() } }, { key: "_updateRegExps", value: function () { var t = "^" + (this.allowNegative ? "[+|\\-]?" : ""), e = (this.scale ? "(" + te(this.radix) + "\\d{0," + this.scale + "})?" : "") + "$"; this._numberRegExpInput = new RegExp(t + "(0|([1-9]+\\d*))?" + e), this._numberRegExp = new RegExp(t + "\\d*" + e), this._mapToRadixRegExp = new RegExp("[" + this.mapToRadix.map(te).join("") + "]", "g"), this._thousandsSeparatorRegExp = new RegExp(te(this.thousandsSeparator), "g") } }, { key: "_removeThousandsSeparators", value: function (t) { return t.replace(this._thousandsSeparatorRegExp, "") } }, { key: "_insertThousandsSeparators", value: function (t) { var e = t.split(this.radix); return e[0] = e[0].replace(/\B(?=(\d{3})+(?!\d))/g, this.thousandsSeparator), e.join(this.radix) } }, { key: "doPrepare", value: function (t) { for (var n, u = arguments.length, i = new Array(u > 1 ? u - 1 : 0), r = 1; r < u; r++)i[r - 1] = arguments[r]; return (n = qt(Gt(e.prototype), "doPrepare", this)).call.apply(n, [this, this._removeThousandsSeparators(t.replace(this._mapToRadixRegExp, this.radix))].concat(i)) } }, { key: "_separatorsCount", value: function (t) { for (var e = arguments.length > 1 && void 0 !== arguments[1] && arguments[1], n = 0, u = 0; u < t; ++u)this._value.indexOf(this.thousandsSeparator, u) === u && (++n, e && (t += this.thousandsSeparator.length)); return n } }, { key: "_separatorsCountFromSlice", value: function () { var t = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : this._value; return this._separatorsCount(this._removeThousandsSeparators(t).length, !0) } }, { key: "extractInput", value: function () { var t = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : 0, n = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : this.value.length, u = arguments.length > 2 ? arguments[2] : void 0, i = Xt(this._adjustRangeWithSeparators(t, n), 2); return t = i[0], n = i[1], this._removeThousandsSeparators(qt(Gt(e.prototype), "extractInput", this).call(this, t, n, u)) } }, { key: "_appendCharRaw", value: function (t) { var n = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {}; if (!this.thousandsSeparator) return qt(Gt(e.prototype), "_appendCharRaw", this).call(this, t, n); var u = n.tail && n._beforeTailState ? n._beforeTailState._value : this._value, i = this._separatorsCountFromSlice(u); this._value = this._removeThousandsSeparators(this.value); var r = qt(Gt(e.prototype), "_appendCharRaw", this).call(this, t, n); this._value = this._insertThousandsSeparators(this._value); var a = n.tail && n._beforeTailState ? n._beforeTailState._value : this._value, s = this._separatorsCountFromSlice(a); return r.tailShift += (s - i) * this.thousandsSeparator.length, r.skip = !r.rawInserted && t === this.thousandsSeparator, r } }, { key: "_findSeparatorAround", value: function (t) { if (this.thousandsSeparator) { var e = t - this.thousandsSeparator.length + 1, n = this.value.indexOf(this.thousandsSeparator, e); if (n <= t) return n } return -1 } }, { key: "_adjustRangeWithSeparators", value: function (t, e) { var n = this._findSeparatorAround(t); n >= 0 && (t = n); var u = this._findSeparatorAround(e); return u >= 0 && (e = u + this.thousandsSeparator.length), [t, e] } }, { key: "remove", value: function () { var t = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : 0, e = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : this.value.length, n = Xt(this._adjustRangeWithSeparators(t, e), 2); t = n[0], e = n[1]; var u = this.value.slice(0, t), i = this.value.slice(e), r = this._separatorsCount(u.length); this._value = this._insertThousandsSeparators(this._removeThousandsSeparators(u + i)); var a = this._separatorsCountFromSlice(u); return new ne({ tailShift: (a - r) * this.thousandsSeparator.length }) } }, { key: "nearestInputPos", value: function (t, e) { if (!this.thousandsSeparator) return t; switch (e) { case Qt.NONE: case Qt.LEFT: case Qt.FORCE_LEFT: var n = this._findSeparatorAround(t - 1); if (n >= 0) { var u = n + this.thousandsSeparator.length; if (t < u || this.value.length <= u || e === Qt.FORCE_LEFT) return n } break; case Qt.RIGHT: case Qt.FORCE_RIGHT: var i = this._findSeparatorAround(t); if (i >= 0) return i + this.thousandsSeparator.length }return t } }, { key: "doValidate", value: function (t) { var n = (t.input ? this._numberRegExpInput : this._numberRegExp).test(this._removeThousandsSeparators(this.value)); if (n) { var u = this.number; n = n && !isNaN(u) && (null == this.min || this.min >= 0 || this.min <= this.number) && (null == this.max || this.max <= 0 || this.number <= this.max) } return n && qt(Gt(e.prototype), "doValidate", this).call(this, t) } }, { key: "doCommit", value: function () { if (this.value) { var t = this.number, n = t; null != this.min && (n = Math.max(n, this.min)), null != this.max && (n = Math.min(n, this.max)), n !== t && (this.unmaskedValue = String(n)); var u = this.value; this.normalizeZeros && (u = this._normalizeZeros(u)), this.padFractionalZeros && (u = this._padFractionalZeros(u)), this._value = u } qt(Gt(e.prototype), "doCommit", this).call(this) } }, { key: "_normalizeZeros", value: function (t) { var e = this._removeThousandsSeparators(t).split(this.radix); return e[0] = e[0].replace(/^(\D*)(0*)(\d*)/, function (t, e, n, u) { return e + u }), t.length && !/\d$/.test(e[0]) && (e[0] = e[0] + "0"), e.length > 1 && (e[1] = e[1].replace(/0*$/, ""), e[1].length || (e.length = 1)), this._insertThousandsSeparators(e.join(this.radix)) } }, { key: "_padFractionalZeros", value: function (t) { if (!t) return t; var e = t.split(this.radix); return e.length < 2 && e.push(""), e[1] = e[1].padEnd(this.scale, "0"), e.join(this.radix) } }, { key: "unmaskedValue", get: function () { return this._removeThousandsSeparators(this._normalizeZeros(this.value)).replace(this.radix, ".") }, set: function (t) { $t(Gt(e.prototype), "unmaskedValue", t.replace(".", this.radix), this, !0) } }, { key: "typedValue", get: function () { return Number(this.unmaskedValue) }, set: function (t) { $t(Gt(e.prototype), "unmaskedValue", String(t), this, !0) } }, { key: "number", get: function () { return this.typedValue }, set: function (t) { this.typedValue = t } }, { key: "allowNegative", get: function () { return this.signed || null != this.min && this.min < 0 || null != this.max && this.max < 0 } }]), e }(); Ae.DEFAULTS = { radix: ",", thousandsSeparator: "", mapToRadix: ["."], scale: 2, signed: !1, normalizeZeros: !0, padFractionalZeros: !1 }, ie.MaskedNumber = Ae; var Ee = function (t) { function e() { return Nt(this, e), Zt(this, Gt(e).apply(this, arguments)) } return Ut(e, re), Ht(e, [{ key: "_update", value: function (t) { t.mask && (t.validate = t.mask), qt(Gt(e.prototype), "_update", this).call(this, t) } }]), e }(); ie.MaskedFunction = Ee; var be = function (t) { function e(t) { var n; return Nt(this, e), (n = Zt(this, Gt(e).call(this, Object.assign({}, e.DEFAULTS, {}, t)))).currentMask = null, n } return Ut(e, re), Ht(e, [{ key: "_update", value: function (t) { qt(Gt(e.prototype), "_update", this).call(this, t), "mask" in t && (this.compiledMasks = Array.isArray(t.mask) ? t.mask.map(function (t) { return se(t) }) : []) } }, { key: "_appendCharRaw", value: function () { var t, e = this._applyDispatch.apply(this, arguments); this.currentMask && e.aggregate((t = this.currentMask)._appendChar.apply(t, arguments)); return e } }, { key: "_applyDispatch", value: function () { var t = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : "", e = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {}, n = e.tail && null != e._beforeTailState ? e._beforeTailState._value : this.value, u = this.rawInputValue, i = e.tail && null != e._beforeTailState ? e._beforeTailState._rawInputValue : u, r = u.slice(i.length), a = this.currentMask, s = new ne, o = a && a.state; if (this.currentMask = this.doDispatch(t, Object.assign({}, e)), this.currentMask) if (this.currentMask !== a) { this.currentMask.reset(); var l = this.currentMask.append(i, { raw: !0 }); s.tailShift = l.inserted.length - n.length, r && (s.tailShift += this.currentMask.append(r, { raw: !0, tail: !0 }).tailShift) } else this.currentMask.state = o; return s } }, { key: "_appendPlaceholder", value: function () { var t = this._applyDispatch.apply(this, arguments); return this.currentMask && t.aggregate(this.currentMask._appendPlaceholder()), t } }, { key: "doDispatch", value: function (t) { var e = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {}; return this.dispatch(t, this, e) } }, { key: "doValidate", value: function () { for (var t, n, u = arguments.length, i = new Array(u), r = 0; r < u; r++)i[r] = arguments[r]; return (t = qt(Gt(e.prototype), "doValidate", this)).call.apply(t, [this].concat(i)) && (!this.currentMask || (n = this.currentMask).doValidate.apply(n, i)) } }, { key: "reset", value: function () { this.currentMask && this.currentMask.reset(), this.compiledMasks.forEach(function (t) { return t.reset() }) } }, { key: "remove", value: function () { var t, e = new ne; this.currentMask && e.aggregate((t = this.currentMask).remove.apply(t, arguments)).aggregate(this._applyDispatch()); return e } }, { key: "extractInput", value: function () { var t; return this.currentMask ? (t = this.currentMask).extractInput.apply(t, arguments) : "" } }, { key: "extractTail", value: function () { for (var t, n, u = arguments.length, i = new Array(u), r = 0; r < u; r++)i[r] = arguments[r]; return this.currentMask ? (t = this.currentMask).extractTail.apply(t, i) : (n = qt(Gt(e.prototype), "extractTail", this)).call.apply(n, [this].concat(i)) } }, { key: "doCommit", value: function () { this.currentMask && this.currentMask.doCommit(), qt(Gt(e.prototype), "doCommit", this).call(this) } }, { key: "nearestInputPos", value: function () { for (var t, n, u = arguments.length, i = new Array(u), r = 0; r < u; r++)i[r] = arguments[r]; return this.currentMask ? (t = this.currentMask).nearestInputPos.apply(t, i) : (n = qt(Gt(e.prototype), "nearestInputPos", this)).call.apply(n, [this].concat(i)) } }, { key: "value", get: function () { return this.currentMask ? this.currentMask.value : "" }, set: function (t) { $t(Gt(e.prototype), "value", t, this, !0) } }, { key: "unmaskedValue", get: function () { return this.currentMask ? this.currentMask.unmaskedValue : "" }, set: function (t) { $t(Gt(e.prototype), "unmaskedValue", t, this, !0) } }, { key: "typedValue", get: function () { return this.currentMask ? this.currentMask.typedValue : "" }, set: function (t) { var e = String(t); this.currentMask && (this.currentMask.typedValue = t, e = this.currentMask.unmaskedValue), this.unmaskedValue = e } }, { key: "isComplete", get: function () { return !!this.currentMask && this.currentMask.isComplete } }, { key: "state", get: function () { return Object.assign({}, qt(Gt(e.prototype), "state", this), { _rawInputValue: this.rawInputValue, compiledMasks: this.compiledMasks.map(function (t) { return t.state }), currentMaskRef: this.currentMask, currentMask: this.currentMask && this.currentMask.state }) }, set: function (t) { var n = t.compiledMasks, u = t.currentMaskRef, i = t.currentMask, r = Yt(t, ["compiledMasks", "currentMaskRef", "currentMask"]); this.compiledMasks.forEach(function (t, e) { return t.state = n[e] }), null != u && (this.currentMask = u, this.currentMask.state = i), $t(Gt(e.prototype), "state", r, this, !0) } }, { key: "overwrite", get: function () { return this.currentMask ? this.currentMask.overwrite : qt(Gt(e.prototype), "overwrite", this) }, set: function (t) { console.warn('"overwrite" option is not available in dynamic mask, use this option in siblings') } }]), e }(); be.DEFAULTS = { dispatch: function (t, e, n) { if (e.compiledMasks.length) { var u = e.rawInputValue, i = e.compiledMasks.map(function (e, i) { return e.reset(), e.append(u, { raw: !0 }), e.append(t, n), { weight: e.rawInputValue.length, index: i } }); return i.sort(function (t, e) { return e.weight - t.weight }), e.compiledMasks[i[0].index] } } }, ie.MaskedDynamic = be; var Ce = { MASKED: "value", UNMASKED: "unmaskedValue", TYPED: "typedValue" }; function Fe(t) { var e = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : Ce.MASKED, n = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : Ce.MASKED, u = se(t); return function (t) { return u.runIsolated(function (u) { return u[e] = t, u[n] }) } } function Se(t) { for (var e = arguments.length, n = new Array(e > 1 ? e - 1 : 0), u = 1; u < e; u++)n[u - 1] = arguments[u]; return Fe.apply(void 0, n)(t) } ie.PIPE_TYPE = Ce, ie.createPipe = Fe, ie.pipe = Se; try { globalThis.IMask = ie } catch (t) { } t.HTMLContenteditableMaskElement = ye, t.HTMLMaskElement = ge, t.InputMask = me, t.MaskElement = ke, t.Masked = re, t.MaskedDate = ve, t.MaskedDynamic = be, t.MaskedEnum = _e, t.MaskedFunction = Ee, t.MaskedNumber = Ae, t.MaskedPattern = pe, t.MaskedRange = de, t.MaskedRegExp = fe, t.PIPE_TYPE = Ce, t.createMask = se, t.createPipe = Fe, t.default = ie, t.pipe = Se, Object.defineProperty(t, "__esModule", { value: !0 }) });
/*!
 * Select2 4.0.13
 * https://select2.github.io
 *
 * Released under the MIT license
 * https://github.com/select2/select2/blob/master/LICENSE.md
 */
; (function (factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['jquery'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // Node/CommonJS
    module.exports = function (root, jQuery) {
      if (jQuery === undefined) {
        // require('jQuery') returns a factory that requires window to
        // build a jQuery instance, we normalize how we use modules
        // that require this pattern but the window provided is a noop
        // if it's defined (how jquery works)
        if (typeof window !== 'undefined') {
          jQuery = require('jquery');
        }
        else {
          jQuery = require('jquery')(root);
        }
      }
      factory(jQuery);
      return jQuery;
    };
  } else {
    // Browser globals
    factory(jQuery);
  }
}(function (jQuery) {
  // This is needed so we can catch the AMD loader configuration and use it
  // The inner file should be wrapped (by `banner.start.js`) in a function that
  // returns the AMD loader references.
  var S2 = (function () {
    // Restore the Select2 AMD loader so it can be used
    // Needed mostly in the language files, where the loader is not inserted
    if (jQuery && jQuery.fn && jQuery.fn.select2 && jQuery.fn.select2.amd) {
      var S2 = jQuery.fn.select2.amd;
    }
    var S2; (function () {
      if (!S2 || !S2.requirejs) {
        if (!S2) { S2 = {}; } else { require = S2; }
        /**
         * @license almond 0.3.3 Copyright jQuery Foundation and other contributors.
         * Released under MIT license, http://github.com/requirejs/almond/LICENSE
         */
        //Going sloppy to avoid 'use strict' string cost, but strict practices should
        //be followed.
        /*global setTimeout: false */

        var requirejs, require, define;
        (function (undef) {
          var main, req, makeMap, handlers,
            defined = {},
            waiting = {},
            config = {},
            defining = {},
            hasOwn = Object.prototype.hasOwnProperty,
            aps = [].slice,
            jsSuffixRegExp = /\.js$/;

          function hasProp(obj, prop) {
            return hasOwn.call(obj, prop);
          }

          /**
           * Given a relative module name, like ./something, normalize it to
           * a real name that can be mapped to a path.
           * @param {String} name the relative name
           * @param {String} baseName a real name that the name arg is relative
           * to.
           * @returns {String} normalized name
           */
          function normalize(name, baseName) {
            var nameParts, nameSegment, mapValue, foundMap, lastIndex,
              foundI, foundStarMap, starI, i, j, part, normalizedBaseParts,
              baseParts = baseName && baseName.split("/"),
              map = config.map,
              starMap = (map && map['*']) || {};

            //Adjust any relative paths.
            if (name) {
              name = name.split('/');
              lastIndex = name.length - 1;

              // If wanting node ID compatibility, strip .js from end
              // of IDs. Have to do this here, and not in nameToUrl
              // because node allows either .js or non .js to map
              // to same file.
              if (config.nodeIdCompat && jsSuffixRegExp.test(name[lastIndex])) {
                name[lastIndex] = name[lastIndex].replace(jsSuffixRegExp, '');
              }

              // Starts with a '.' so need the baseName
              if (name[0].charAt(0) === '.' && baseParts) {
                //Convert baseName to array, and lop off the last part,
                //so that . matches that 'directory' and not name of the baseName's
                //module. For instance, baseName of 'one/two/three', maps to
                //'one/two/three.js', but we want the directory, 'one/two' for
                //this normalization.
                normalizedBaseParts = baseParts.slice(0, baseParts.length - 1);
                name = normalizedBaseParts.concat(name);
              }

              //start trimDots
              for (i = 0; i < name.length; i++) {
                part = name[i];
                if (part === '.') {
                  name.splice(i, 1);
                  i -= 1;
                } else if (part === '..') {
                  // If at the start, or previous value is still ..,
                  // keep them so that when converted to a path it may
                  // still work when converted to a path, even though
                  // as an ID it is less than ideal. In larger point
                  // releases, may be better to just kick out an error.
                  if (i === 0 || (i === 1 && name[2] === '..') || name[i - 1] === '..') {
                    continue;
                  } else if (i > 0) {
                    name.splice(i - 1, 2);
                    i -= 2;
                  }
                }
              }
              //end trimDots

              name = name.join('/');
            }

            //Apply map config if available.
            if ((baseParts || starMap) && map) {
              nameParts = name.split('/');

              for (i = nameParts.length; i > 0; i -= 1) {
                nameSegment = nameParts.slice(0, i).join("/");

                if (baseParts) {
                  //Find the longest baseName segment match in the config.
                  //So, do joins on the biggest to smallest lengths of baseParts.
                  for (j = baseParts.length; j > 0; j -= 1) {
                    mapValue = map[baseParts.slice(0, j).join('/')];

                    //baseName segment has  config, find if it has one for
                    //this name.
                    if (mapValue) {
                      mapValue = mapValue[nameSegment];
                      if (mapValue) {
                        //Match, update name to the new value.
                        foundMap = mapValue;
                        foundI = i;
                        break;
                      }
                    }
                  }
                }

                if (foundMap) {
                  break;
                }

                //Check for a star map match, but just hold on to it,
                //if there is a shorter segment match later in a matching
                //config, then favor over this star map.
                if (!foundStarMap && starMap && starMap[nameSegment]) {
                  foundStarMap = starMap[nameSegment];
                  starI = i;
                }
              }

              if (!foundMap && foundStarMap) {
                foundMap = foundStarMap;
                foundI = starI;
              }

              if (foundMap) {
                nameParts.splice(0, foundI, foundMap);
                name = nameParts.join('/');
              }
            }

            return name;
          }

          function makeRequire(relName, forceSync) {
            return function () {
              //A version of a require function that passes a moduleName
              //value for items that may need to
              //look up paths relative to the moduleName
              var args = aps.call(arguments, 0);

              //If first arg is not require('string'), and there is only
              //one arg, it is the array form without a callback. Insert
              //a null so that the following concat is correct.
              if (typeof args[0] !== 'string' && args.length === 1) {
                args.push(null);
              }
              return req.apply(undef, args.concat([relName, forceSync]));
            };
          }

          function makeNormalize(relName) {
            return function (name) {
              return normalize(name, relName);
            };
          }

          function makeLoad(depName) {
            return function (value) {
              defined[depName] = value;
            };
          }

          function callDep(name) {
            if (hasProp(waiting, name)) {
              var args = waiting[name];
              delete waiting[name];
              defining[name] = true;
              main.apply(undef, args);
            }

            if (!hasProp(defined, name) && !hasProp(defining, name)) {
              throw new Error('No ' + name);
            }
            return defined[name];
          }

          //Turns a plugin!resource to [plugin, resource]
          //with the plugin being undefined if the name
          //did not have a plugin prefix.
          function splitPrefix(name) {
            var prefix,
              index = name ? name.indexOf('!') : -1;
            if (index > -1) {
              prefix = name.substring(0, index);
              name = name.substring(index + 1, name.length);
            }
            return [prefix, name];
          }

          //Creates a parts array for a relName where first part is plugin ID,
          //second part is resource ID. Assumes relName has already been normalized.
          function makeRelParts(relName) {
            return relName ? splitPrefix(relName) : [];
          }

          /**
           * Makes a name map, normalizing the name, and using a plugin
           * for normalization if necessary. Grabs a ref to plugin
           * too, as an optimization.
           */
          makeMap = function (name, relParts) {
            var plugin,
              parts = splitPrefix(name),
              prefix = parts[0],
              relResourceName = relParts[1];

            name = parts[1];

            if (prefix) {
              prefix = normalize(prefix, relResourceName);
              plugin = callDep(prefix);
            }

            //Normalize according
            if (prefix) {
              if (plugin && plugin.normalize) {
                name = plugin.normalize(name, makeNormalize(relResourceName));
              } else {
                name = normalize(name, relResourceName);
              }
            } else {
              name = normalize(name, relResourceName);
              parts = splitPrefix(name);
              prefix = parts[0];
              name = parts[1];
              if (prefix) {
                plugin = callDep(prefix);
              }
            }

            //Using ridiculous property names for space reasons
            return {
              f: prefix ? prefix + '!' + name : name, //fullName
              n: name,
              pr: prefix,
              p: plugin
            };
          };

          function makeConfig(name) {
            return function () {
              return (config && config.config && config.config[name]) || {};
            };
          }

          handlers = {
            require: function (name) {
              return makeRequire(name);
            },
            exports: function (name) {
              var e = defined[name];
              if (typeof e !== 'undefined') {
                return e;
              } else {
                return (defined[name] = {});
              }
            },
            module: function (name) {
              return {
                id: name,
                uri: '',
                exports: defined[name],
                config: makeConfig(name)
              };
            }
          };

          main = function (name, deps, callback, relName) {
            var cjsModule, depName, ret, map, i, relParts,
              args = [],
              callbackType = typeof callback,
              usingExports;

            //Use name if no relName
            relName = relName || name;
            relParts = makeRelParts(relName);

            //Call the callback to define the module, if necessary.
            if (callbackType === 'undefined' || callbackType === 'function') {
              //Pull out the defined dependencies and pass the ordered
              //values to the callback.
              //Default to [require, exports, module] if no deps
              deps = !deps.length && callback.length ? ['require', 'exports', 'module'] : deps;
              for (i = 0; i < deps.length; i += 1) {
                map = makeMap(deps[i], relParts);
                depName = map.f;

                //Fast path CommonJS standard dependencies.
                if (depName === "require") {
                  args[i] = handlers.require(name);
                } else if (depName === "exports") {
                  //CommonJS module spec 1.1
                  args[i] = handlers.exports(name);
                  usingExports = true;
                } else if (depName === "module") {
                  //CommonJS module spec 1.1
                  cjsModule = args[i] = handlers.module(name);
                } else if (hasProp(defined, depName) ||
                  hasProp(waiting, depName) ||
                  hasProp(defining, depName)) {
                  args[i] = callDep(depName);
                } else if (map.p) {
                  map.p.load(map.n, makeRequire(relName, true), makeLoad(depName), {});
                  args[i] = defined[depName];
                } else {
                  throw new Error(name + ' missing ' + depName);
                }
              }

              ret = callback ? callback.apply(defined[name], args) : undefined;

              if (name) {
                //If setting exports via "module" is in play,
                //favor that over return value and exports. After that,
                //favor a non-undefined return value over exports use.
                if (cjsModule && cjsModule.exports !== undef &&
                  cjsModule.exports !== defined[name]) {
                  defined[name] = cjsModule.exports;
                } else if (ret !== undef || !usingExports) {
                  //Use the return value from the function.
                  defined[name] = ret;
                }
              }
            } else if (name) {
              //May just be an object definition for the module. Only
              //worry about defining if have a module name.
              defined[name] = callback;
            }
          };

          requirejs = require = req = function (deps, callback, relName, forceSync, alt) {
            if (typeof deps === "string") {
              if (handlers[deps]) {
                //callback in this case is really relName
                return handlers[deps](callback);
              }
              //Just return the module wanted. In this scenario, the
              //deps arg is the module name, and second arg (if passed)
              //is just the relName.
              //Normalize module name, if it contains . or ..
              return callDep(makeMap(deps, makeRelParts(callback)).f);
            } else if (!deps.splice) {
              //deps is a config object, not an array.
              config = deps;
              if (config.deps) {
                req(config.deps, config.callback);
              }
              if (!callback) {
                return;
              }

              if (callback.splice) {
                //callback is an array, which means it is a dependency list.
                //Adjust args if there are dependencies
                deps = callback;
                callback = relName;
                relName = null;
              } else {
                deps = undef;
              }
            }

            //Support require(['a'])
            callback = callback || function () { };

            //If relName is a function, it is an errback handler,
            //so remove it.
            if (typeof relName === 'function') {
              relName = forceSync;
              forceSync = alt;
            }

            //Simulate async callback;
            if (forceSync) {
              main(undef, deps, callback, relName);
            } else {
              //Using a non-zero value because of concern for what old browsers
              //do, and latest browsers "upgrade" to 4 if lower value is used:
              //http://www.whatwg.org/specs/web-apps/current-work/multipage/timers.html#dom-windowtimers-settimeout:
              //If want a value immediately, use require('id') instead -- something
              //that works in almond on the global level, but not guaranteed and
              //unlikely to work in other AMD implementations.
              setTimeout(function () {
                main(undef, deps, callback, relName);
              }, 4);
            }

            return req;
          };

          /**
           * Just drops the config on the floor, but returns req in case
           * the config return value is used.
           */
          req.config = function (cfg) {
            return req(cfg);
          };

          /**
           * Expose module registry for debugging and tooling
           */
          requirejs._defined = defined;

          define = function (name, deps, callback) {
            if (typeof name !== 'string') {
              throw new Error('See almond README: incorrect module build, no module name');
            }

            //This module may not have dependencies
            if (!deps.splice) {
              //deps is not an array, so probably means
              //an object literal or factory function for
              //the value. Adjust args.
              callback = deps;
              deps = [];
            }

            if (!hasProp(defined, name) && !hasProp(waiting, name)) {
              waiting[name] = [name, deps, callback];
            }
          };

          define.amd = {
            jQuery: true
          };
        }());

        S2.requirejs = requirejs; S2.require = require; S2.define = define;
      }
    }());
    S2.define("almond", function () { });

    /* global jQuery:false, $:false */
    S2.define('jquery', [], function () {
      var _$ = jQuery || $;

      if (_$ == null && console && console.error) {
        console.error(
          'Select2: An instance of jQuery or a jQuery-compatible library was not ' +
          'found. Make sure that you are including jQuery before Select2 on your ' +
          'web page.'
        );
      }

      return _$;
    });

    S2.define('select2/utils', [
      'jquery'
    ], function ($) {
      var Utils = {};

      Utils.Extend = function (ChildClass, SuperClass) {
        var __hasProp = {}.hasOwnProperty;

        function BaseConstructor() {
          this.constructor = ChildClass;
        }

        for (var key in SuperClass) {
          if (__hasProp.call(SuperClass, key)) {
            ChildClass[key] = SuperClass[key];
          }
        }

        BaseConstructor.prototype = SuperClass.prototype;
        ChildClass.prototype = new BaseConstructor();
        ChildClass.__super__ = SuperClass.prototype;

        return ChildClass;
      };

      function getMethods(theClass) {
        var proto = theClass.prototype;

        var methods = [];

        for (var methodName in proto) {
          var m = proto[methodName];

          if (typeof m !== 'function') {
            continue;
          }

          if (methodName === 'constructor') {
            continue;
          }

          methods.push(methodName);
        }

        return methods;
      }

      Utils.Decorate = function (SuperClass, DecoratorClass) {
        var decoratedMethods = getMethods(DecoratorClass);
        var superMethods = getMethods(SuperClass);

        function DecoratedClass() {
          var unshift = Array.prototype.unshift;

          var argCount = DecoratorClass.prototype.constructor.length;

          var calledConstructor = SuperClass.prototype.constructor;

          if (argCount > 0) {
            unshift.call(arguments, SuperClass.prototype.constructor);

            calledConstructor = DecoratorClass.prototype.constructor;
          }

          calledConstructor.apply(this, arguments);
        }

        DecoratorClass.displayName = SuperClass.displayName;

        function ctr() {
          this.constructor = DecoratedClass;
        }

        DecoratedClass.prototype = new ctr();

        for (var m = 0; m < superMethods.length; m++) {
          var superMethod = superMethods[m];

          DecoratedClass.prototype[superMethod] =
            SuperClass.prototype[superMethod];
        }

        var calledMethod = function (methodName) {
          // Stub out the original method if it's not decorating an actual method
          var originalMethod = function () { };

          if (methodName in DecoratedClass.prototype) {
            originalMethod = DecoratedClass.prototype[methodName];
          }

          var decoratedMethod = DecoratorClass.prototype[methodName];

          return function () {
            var unshift = Array.prototype.unshift;

            unshift.call(arguments, originalMethod);

            return decoratedMethod.apply(this, arguments);
          };
        };

        for (var d = 0; d < decoratedMethods.length; d++) {
          var decoratedMethod = decoratedMethods[d];

          DecoratedClass.prototype[decoratedMethod] = calledMethod(decoratedMethod);
        }

        return DecoratedClass;
      };

      var Observable = function () {
        this.listeners = {};
      };

      Observable.prototype.on = function (event, callback) {
        this.listeners = this.listeners || {};

        if (event in this.listeners) {
          this.listeners[event].push(callback);
        } else {
          this.listeners[event] = [callback];
        }
      };

      Observable.prototype.trigger = function (event) {
        var slice = Array.prototype.slice;
        var params = slice.call(arguments, 1);

        this.listeners = this.listeners || {};

        // Params should always come in as an array
        if (params == null) {
          params = [];
        }

        // If there are no arguments to the event, use a temporary object
        if (params.length === 0) {
          params.push({});
        }

        // Set the `_type` of the first object to the event
        params[0]._type = event;

        if (event in this.listeners) {
          this.invoke(this.listeners[event], slice.call(arguments, 1));
        }

        if ('*' in this.listeners) {
          this.invoke(this.listeners['*'], arguments);
        }
      };

      Observable.prototype.invoke = function (listeners, params) {
        for (var i = 0, len = listeners.length; i < len; i++) {
          listeners[i].apply(this, params);
        }
      };

      Utils.Observable = Observable;

      Utils.generateChars = function (length) {
        var chars = '';

        for (var i = 0; i < length; i++) {
          var randomChar = Math.floor(Math.random() * 36);
          chars += randomChar.toString(36);
        }

        return chars;
      };

      Utils.bind = function (func, context) {
        return function () {
          func.apply(context, arguments);
        };
      };

      Utils._convertData = function (data) {
        for (var originalKey in data) {
          var keys = originalKey.split('-');

          var dataLevel = data;

          if (keys.length === 1) {
            continue;
          }

          for (var k = 0; k < keys.length; k++) {
            var key = keys[k];

            // Lowercase the first letter
            // By default, dash-separated becomes camelCase
            key = key.substring(0, 1).toLowerCase() + key.substring(1);

            if (!(key in dataLevel)) {
              dataLevel[key] = {};
            }

            if (k == keys.length - 1) {
              dataLevel[key] = data[originalKey];
            }

            dataLevel = dataLevel[key];
          }

          delete data[originalKey];
        }

        return data;
      };

      Utils.hasScroll = function (index, el) {
        // Adapted from the function created by @ShadowScripter
        // and adapted by @BillBarry on the Stack Exchange Code Review website.
        // The original code can be found at
        // http://codereview.stackexchange.com/q/13338
        // and was designed to be used with the Sizzle selector engine.

        var $el = $(el);
        var overflowX = el.style.overflowX;
        var overflowY = el.style.overflowY;

        //Check both x and y declarations
        if (overflowX === overflowY &&
          (overflowY === 'hidden' || overflowY === 'visible')) {
          return false;
        }

        if (overflowX === 'scroll' || overflowY === 'scroll') {
          return true;
        }

        return ($el.innerHeight() < el.scrollHeight ||
          $el.innerWidth() < el.scrollWidth);
      };

      Utils.escapeMarkup = function (markup) {
        var replaceMap = {
          '\\': '&#92;',
          '&': '&amp;',
          '<': '&lt;',
          '>': '&gt;',
          '"': '&quot;',
          '\'': '&#39;',
          '/': '&#47;'
        };

        // Do not try to escape the markup if it's not a string
        if (typeof markup !== 'string') {
          return markup;
        }

        return String(markup).replace(/[&<>"'\/\\]/g, function (match) {
          return replaceMap[match];
        });
      };

      // Append an array of jQuery nodes to a given element.
      Utils.appendMany = function ($element, $nodes) {
        // jQuery 1.7.x does not support $.fn.append() with an array
        // Fall back to a jQuery object collection using $.fn.add()
        if ($.fn.jquery.substr(0, 3) === '1.7') {
          var $jqNodes = $();

          $.map($nodes, function (node) {
            $jqNodes = $jqNodes.add(node);
          });

          $nodes = $jqNodes;
        }

        $element.append($nodes);
      };

      // Cache objects in Utils.__cache instead of $.data (see #4346)
      Utils.__cache = {};

      var id = 0;
      Utils.GetUniqueElementId = function (element) {
        // Get a unique element Id. If element has no id,
        // creates a new unique number, stores it in the id
        // attribute and returns the new id.
        // If an id already exists, it simply returns it.

        var select2Id = element.getAttribute('data-select2-id');
        if (select2Id == null) {
          // If element has id, use it.
          if (element.id) {
            select2Id = element.id;
            element.setAttribute('data-select2-id', select2Id);
          } else {
            element.setAttribute('data-select2-id', ++id);
            select2Id = id.toString();
          }
        }
        return select2Id;
      };

      Utils.StoreData = function (element, name, value) {
        // Stores an item in the cache for a specified element.
        // name is the cache key.
        var id = Utils.GetUniqueElementId(element);
        if (!Utils.__cache[id]) {
          Utils.__cache[id] = {};
        }

        Utils.__cache[id][name] = value;
      };

      Utils.GetData = function (element, name) {
        // Retrieves a value from the cache by its key (name)
        // name is optional. If no name specified, return
        // all cache items for the specified element.
        // and for a specified element.
        var id = Utils.GetUniqueElementId(element);
        if (name) {
          if (Utils.__cache[id]) {
            if (Utils.__cache[id][name] != null) {
              return Utils.__cache[id][name];
            }
            return $(element).data(name); // Fallback to HTML5 data attribs.
          }
          return $(element).data(name); // Fallback to HTML5 data attribs.
        } else {
          return Utils.__cache[id];
        }
      };

      Utils.RemoveData = function (element) {
        // Removes all cached items for a specified element.
        var id = Utils.GetUniqueElementId(element);
        if (Utils.__cache[id] != null) {
          delete Utils.__cache[id];
        }

        element.removeAttribute('data-select2-id');
      };

      return Utils;
    });

    S2.define('select2/results', [
      'jquery',
      './utils'
    ], function ($, Utils) {
      function Results($element, options, dataAdapter) {
        this.$element = $element;
        this.data = dataAdapter;
        this.options = options;

        Results.__super__.constructor.call(this);
      }

      Utils.Extend(Results, Utils.Observable);

      Results.prototype.render = function () {
        var $results = $(
          '<ul class="select2-results__options" role="listbox"></ul>'
        );

        if (this.options.get('multiple')) {
          $results.attr('aria-multiselectable', 'true');
        }

        this.$results = $results;

        return $results;
      };

      Results.prototype.clear = function () {
        this.$results.empty();
      };

      Results.prototype.displayMessage = function (params) {
        var escapeMarkup = this.options.get('escapeMarkup');

        this.clear();
        this.hideLoading();

        var $message = $(
          '<li role="alert" aria-live="assertive"' +
          ' class="select2-results__option"></li>'
        );

        var message = this.options.get('translations').get(params.message);

        $message.append(
          escapeMarkup(
            message(params.args)
          )
        );

        $message[0].className += ' select2-results__message';

        this.$results.append($message);
      };

      Results.prototype.hideMessages = function () {
        this.$results.find('.select2-results__message').remove();
      };

      Results.prototype.append = function (data) {
        this.hideLoading();

        var $options = [];

        if (data.results == null || data.results.length === 0) {
          if (this.$results.children().length === 0) {
            this.trigger('results:message', {
              message: 'noResults'
            });
          }

          return;
        }

        data.results = this.sort(data.results);

        for (var d = 0; d < data.results.length; d++) {
          var item = data.results[d];

          var $option = this.option(item);

          $options.push($option);
        }

        this.$results.append($options);
      };

      Results.prototype.position = function ($results, $dropdown) {
        var $resultsContainer = $dropdown.find('.select2-results');
        $resultsContainer.append($results);
      };

      Results.prototype.sort = function (data) {
        var sorter = this.options.get('sorter');

        return sorter(data);
      };

      Results.prototype.highlightFirstItem = function () {
        var $options = this.$results
          .find('.select2-results__option[aria-selected]');

        var $selected = $options.filter('[aria-selected=true]');

        // Check if there are any selected options
        if ($selected.length > 0) {
          // If there are selected options, highlight the first
          $selected.first().trigger('mouseenter');
        } else {
          // If there are no selected options, highlight the first option
          // in the dropdown
          $options.first().trigger('mouseenter');
        }

        this.ensureHighlightVisible();
      };

      Results.prototype.setClasses = function () {
        var self = this;

        this.data.current(function (selected) {
          var selectedIds = $.map(selected, function (s) {
            return s.id.toString();
          });

          var $options = self.$results
            .find('.select2-results__option[aria-selected]');

          $options.each(function () {
            var $option = $(this);

            var item = Utils.GetData(this, 'data');

            // id needs to be converted to a string when comparing
            var id = '' + item.id;

            if ((item.element != null && item.element.selected) ||
              (item.element == null && $.inArray(id, selectedIds) > -1)) {
              $option.attr('aria-selected', 'true');
            } else {
              $option.attr('aria-selected', 'false');
            }
          });

        });
      };

      Results.prototype.showLoading = function (params) {
        this.hideLoading();

        var loadingMore = this.options.get('translations').get('searching');

        var loading = {
          disabled: true,
          loading: true,
          text: loadingMore(params)
        };
        var $loading = this.option(loading);
        $loading.className += ' loading-results';

        this.$results.prepend($loading);
      };

      Results.prototype.hideLoading = function () {
        this.$results.find('.loading-results').remove();
      };

      Results.prototype.option = function (data) {
        var option = document.createElement('li');
        option.className = 'select2-results__option';

        var attrs = {
          'role': 'option',
          'aria-selected': 'false'
        };

        var matches = window.Element.prototype.matches ||
          window.Element.prototype.msMatchesSelector ||
          window.Element.prototype.webkitMatchesSelector;

        if ((data.element != null && matches.call(data.element, ':disabled')) ||
          (data.element == null && data.disabled)) {
          delete attrs['aria-selected'];
          attrs['aria-disabled'] = 'true';
        }

        if (data.id == null) {
          delete attrs['aria-selected'];
        }

        if (data._resultId != null) {
          option.id = data._resultId;
        }

        if (data.title) {
          option.title = data.title;
        }

        if (data.children) {
          attrs.role = 'group';
          attrs['aria-label'] = data.text;
          delete attrs['aria-selected'];
        }

        for (var attr in attrs) {
          var val = attrs[attr];

          option.setAttribute(attr, val);
        }

        if (data.children) {
          var $option = $(option);

          var label = document.createElement('strong');
          label.className = 'select2-results__group';

          var $label = $(label);
          this.template(data, label);

          var $children = [];

          for (var c = 0; c < data.children.length; c++) {
            var child = data.children[c];

            var $child = this.option(child);

            $children.push($child);
          }

          var $childrenContainer = $('<ul></ul>', {
            'class': 'select2-results__options select2-results__options--nested'
          });

          $childrenContainer.append($children);

          $option.append(label);
          $option.append($childrenContainer);
        } else {
          this.template(data, option);
        }

        Utils.StoreData(option, 'data', data);

        return option;
      };

      Results.prototype.bind = function (container, $container) {
        var self = this;

        var id = container.id + '-results';

        this.$results.attr('id', id);

        container.on('results:all', function (params) {
          self.clear();
          self.append(params.data);

          if (container.isOpen()) {
            self.setClasses();
            self.highlightFirstItem();
          }
        });

        container.on('results:append', function (params) {
          self.append(params.data);

          if (container.isOpen()) {
            self.setClasses();
          }
        });

        container.on('query', function (params) {
          self.hideMessages();
          self.showLoading(params);
        });

        container.on('select', function () {
          if (!container.isOpen()) {
            return;
          }

          self.setClasses();

          if (self.options.get('scrollAfterSelect')) {
            self.highlightFirstItem();
          }
        });

        container.on('unselect', function () {
          if (!container.isOpen()) {
            return;
          }

          self.setClasses();

          if (self.options.get('scrollAfterSelect')) {
            self.highlightFirstItem();
          }
        });

        container.on('open', function () {
          // When the dropdown is open, aria-expended="true"
          self.$results.attr('aria-expanded', 'true');
          self.$results.attr('aria-hidden', 'false');

          self.setClasses();
          self.ensureHighlightVisible();
        });

        container.on('close', function () {
          // When the dropdown is closed, aria-expended="false"
          self.$results.attr('aria-expanded', 'false');
          self.$results.attr('aria-hidden', 'true');
          self.$results.removeAttr('aria-activedescendant');
        });

        container.on('results:toggle', function () {
          var $highlighted = self.getHighlightedResults();

          if ($highlighted.length === 0) {
            return;
          }

          $highlighted.trigger('mouseup');
        });

        container.on('results:select', function () {
          var $highlighted = self.getHighlightedResults();

          if ($highlighted.length === 0) {
            return;
          }

          var data = Utils.GetData($highlighted[0], 'data');

          if ($highlighted.attr('aria-selected') == 'true') {
            self.trigger('close', {});
          } else {
            self.trigger('select', {
              data: data
            });
          }
        });

        container.on('results:previous', function () {
          var $highlighted = self.getHighlightedResults();

          var $options = self.$results.find('[aria-selected]');

          var currentIndex = $options.index($highlighted);

          // If we are already at the top, don't move further
          // If no options, currentIndex will be -1
          if (currentIndex <= 0) {
            return;
          }

          var nextIndex = currentIndex - 1;

          // If none are highlighted, highlight the first
          if ($highlighted.length === 0) {
            nextIndex = 0;
          }

          var $next = $options.eq(nextIndex);

          $next.trigger('mouseenter');

          var currentOffset = self.$results.offset().top;
          var nextTop = $next.offset().top;
          var nextOffset = self.$results.scrollTop() + (nextTop - currentOffset);

          if (nextIndex === 0) {
            self.$results.scrollTop(0);
          } else if (nextTop - currentOffset < 0) {
            self.$results.scrollTop(nextOffset);
          }
        });

        container.on('results:next', function () {
          var $highlighted = self.getHighlightedResults();

          var $options = self.$results.find('[aria-selected]');

          var currentIndex = $options.index($highlighted);

          var nextIndex = currentIndex + 1;

          // If we are at the last option, stay there
          if (nextIndex >= $options.length) {
            return;
          }

          var $next = $options.eq(nextIndex);

          $next.trigger('mouseenter');

          var currentOffset = self.$results.offset().top +
            self.$results.outerHeight(false);
          var nextBottom = $next.offset().top + $next.outerHeight(false);
          var nextOffset = self.$results.scrollTop() + nextBottom - currentOffset;

          if (nextIndex === 0) {
            self.$results.scrollTop(0);
          } else if (nextBottom > currentOffset) {
            self.$results.scrollTop(nextOffset);
          }
        });

        container.on('results:focus', function (params) {
          params.element.addClass('select2-results__option--highlighted');
        });

        container.on('results:message', function (params) {
          self.displayMessage(params);
        });

        if ($.fn.mousewheel) {
          this.$results.on('mousewheel', function (e) {
            var top = self.$results.scrollTop();

            var bottom = self.$results.get(0).scrollHeight - top + e.deltaY;

            var isAtTop = e.deltaY > 0 && top - e.deltaY <= 0;
            var isAtBottom = e.deltaY < 0 && bottom <= self.$results.height();

            if (isAtTop) {
              self.$results.scrollTop(0);

              e.preventDefault();
              e.stopPropagation();
            } else if (isAtBottom) {
              self.$results.scrollTop(
                self.$results.get(0).scrollHeight - self.$results.height()
              );

              e.preventDefault();
              e.stopPropagation();
            }
          });
        }

        this.$results.on('mouseup', '.select2-results__option[aria-selected]',
          function (evt) {
            var $this = $(this);

            var data = Utils.GetData(this, 'data');

            if ($this.attr('aria-selected') === 'true') {
              if (self.options.get('multiple')) {
                self.trigger('unselect', {
                  originalEvent: evt,
                  data: data
                });
              } else {
                self.trigger('close', {});
              }

              return;
            }

            self.trigger('select', {
              originalEvent: evt,
              data: data
            });
          });

        this.$results.on('mouseenter', '.select2-results__option[aria-selected]',
          function (evt) {
            var data = Utils.GetData(this, 'data');

            self.getHighlightedResults()
              .removeClass('select2-results__option--highlighted');

            self.trigger('results:focus', {
              data: data,
              element: $(this)
            });
          });
      };

      Results.prototype.getHighlightedResults = function () {
        var $highlighted = this.$results
          .find('.select2-results__option--highlighted');

        return $highlighted;
      };

      Results.prototype.destroy = function () {
        this.$results.remove();
      };

      Results.prototype.ensureHighlightVisible = function () {
        var $highlighted = this.getHighlightedResults();

        if ($highlighted.length === 0) {
          return;
        }

        var $options = this.$results.find('[aria-selected]');

        var currentIndex = $options.index($highlighted);

        var currentOffset = this.$results.offset().top;
        var nextTop = $highlighted.offset().top;
        var nextOffset = this.$results.scrollTop() + (nextTop - currentOffset);

        var offsetDelta = nextTop - currentOffset;
        nextOffset -= $highlighted.outerHeight(false) * 2;

        if (currentIndex <= 2) {
          this.$results.scrollTop(0);
        } else if (offsetDelta > this.$results.outerHeight() || offsetDelta < 0) {
          this.$results.scrollTop(nextOffset);
        }
      };

      Results.prototype.template = function (result, container) {
        var template = this.options.get('templateResult');
        var escapeMarkup = this.options.get('escapeMarkup');

        var content = template(result, container);

        if (content == null) {
          container.style.display = 'none';
        } else if (typeof content === 'string') {
          container.innerHTML = escapeMarkup(content);
        } else {
          $(container).append(content);
        }
      };

      return Results;
    });

    S2.define('select2/keys', [

    ], function () {
      var KEYS = {
        BACKSPACE: 8,
        TAB: 9,
        ENTER: 13,
        SHIFT: 16,
        CTRL: 17,
        ALT: 18,
        ESC: 27,
        SPACE: 32,
        PAGE_UP: 33,
        PAGE_DOWN: 34,
        END: 35,
        HOME: 36,
        LEFT: 37,
        UP: 38,
        RIGHT: 39,
        DOWN: 40,
        DELETE: 46
      };

      return KEYS;
    });

    S2.define('select2/selection/base', [
      'jquery',
      '../utils',
      '../keys'
    ], function ($, Utils, KEYS) {
      function BaseSelection($element, options) {
        this.$element = $element;
        this.options = options;

        BaseSelection.__super__.constructor.call(this);
      }

      Utils.Extend(BaseSelection, Utils.Observable);

      BaseSelection.prototype.render = function () {
        var $selection = $(
          '<span class="select2-selection" role="combobox" ' +
          ' aria-haspopup="true" aria-expanded="false">' +
          '</span>'
        );

        this._tabindex = 0;

        if (Utils.GetData(this.$element[0], 'old-tabindex') != null) {
          this._tabindex = Utils.GetData(this.$element[0], 'old-tabindex');
        } else if (this.$element.attr('tabindex') != null) {
          this._tabindex = this.$element.attr('tabindex');
        }

        $selection.attr('title', this.$element.attr('title'));
        $selection.attr('tabindex', this._tabindex);
        $selection.attr('aria-disabled', 'false');

        this.$selection = $selection;

        return $selection;
      };

      BaseSelection.prototype.bind = function (container, $container) {
        var self = this;

        var resultsId = container.id + '-results';

        this.container = container;

        this.$selection.on('focus', function (evt) {
          self.trigger('focus', evt);
        });

        this.$selection.on('blur', function (evt) {
          self._handleBlur(evt);
        });

        this.$selection.on('keydown', function (evt) {
          self.trigger('keypress', evt);

          if (evt.which === KEYS.SPACE) {
            evt.preventDefault();
          }
        });

        container.on('results:focus', function (params) {
          self.$selection.attr('aria-activedescendant', params.data._resultId);
        });

        container.on('selection:update', function (params) {
          self.update(params.data);
        });

        container.on('open', function () {
          // When the dropdown is open, aria-expanded="true"
          self.$selection.attr('aria-expanded', 'true');
          self.$selection.attr('aria-owns', resultsId);

          self._attachCloseHandler(container);
        });

        container.on('close', function () {
          // When the dropdown is closed, aria-expanded="false"
          self.$selection.attr('aria-expanded', 'false');
          self.$selection.removeAttr('aria-activedescendant');
          self.$selection.removeAttr('aria-owns');

          self.$selection.trigger('focus');

          self._detachCloseHandler(container);
        });

        container.on('enable', function () {
          self.$selection.attr('tabindex', self._tabindex);
          self.$selection.attr('aria-disabled', 'false');
        });

        container.on('disable', function () {
          self.$selection.attr('tabindex', '-1');
          self.$selection.attr('aria-disabled', 'true');
        });
      };

      BaseSelection.prototype._handleBlur = function (evt) {
        var self = this;

        // This needs to be delayed as the active element is the body when the tab
        // key is pressed, possibly along with others.
        window.setTimeout(function () {
          // Don't trigger `blur` if the focus is still in the selection
          if (
            (document.activeElement == self.$selection[0]) ||
            ($.contains(self.$selection[0], document.activeElement))
          ) {
            return;
          }

          self.trigger('blur', evt);
        }, 1);
      };

      BaseSelection.prototype._attachCloseHandler = function (container) {

        $(document.body).on('mousedown.select2.' + container.id, function (e) {
          var $target = $(e.target);

          var $select = $target.closest('.select2');

          var $all = $('.select2.select2-container--open');

          $all.each(function () {
            if (this == $select[0]) {
              return;
            }

            var $element = Utils.GetData(this, 'element');

            $element.select2('close');
          });
        });
      };

      BaseSelection.prototype._detachCloseHandler = function (container) {
        $(document.body).off('mousedown.select2.' + container.id);
      };

      BaseSelection.prototype.position = function ($selection, $container) {
        var $selectionContainer = $container.find('.selection');
        $selectionContainer.append($selection);
      };

      BaseSelection.prototype.destroy = function () {
        this._detachCloseHandler(this.container);
      };

      BaseSelection.prototype.update = function (data) {
        throw new Error('The `update` method must be defined in child classes.');
      };

      /**
       * Helper method to abstract the "enabled" (not "disabled") state of this
       * object.
       *
       * @return {true} if the instance is not disabled.
       * @return {false} if the instance is disabled.
       */
      BaseSelection.prototype.isEnabled = function () {
        return !this.isDisabled();
      };

      /**
       * Helper method to abstract the "disabled" state of this object.
       *
       * @return {true} if the disabled option is true.
       * @return {false} if the disabled option is false.
       */
      BaseSelection.prototype.isDisabled = function () {
        return this.options.get('disabled');
      };

      return BaseSelection;
    });

    S2.define('select2/selection/single', [
      'jquery',
      './base',
      '../utils',
      '../keys'
    ], function ($, BaseSelection, Utils, KEYS) {
      function SingleSelection() {
        SingleSelection.__super__.constructor.apply(this, arguments);
      }

      Utils.Extend(SingleSelection, BaseSelection);

      SingleSelection.prototype.render = function () {
        var $selection = SingleSelection.__super__.render.call(this);

        $selection.addClass('select2-selection--single');

        $selection.html(
          '<span class="select2-selection__rendered"></span>' +
          '<span class="select2-selection__arrow" role="presentation">' +
          '<b role="presentation"></b>' +
          '</span>'
        );

        return $selection;
      };

      SingleSelection.prototype.bind = function (container, $container) {
        var self = this;

        SingleSelection.__super__.bind.apply(this, arguments);

        var id = container.id + '-container';

        this.$selection.find('.select2-selection__rendered')
          .attr('id', id)
          .attr('role', 'textbox')
          .attr('aria-readonly', 'true');
        this.$selection.attr('aria-labelledby', id);

        this.$selection.on('mousedown', function (evt) {
          // Only respond to left clicks
          if (evt.which !== 1) {
            return;
          }

          self.trigger('toggle', {
            originalEvent: evt
          });
        });

        this.$selection.on('focus', function (evt) {
          // User focuses on the container
        });

        this.$selection.on('blur', function (evt) {
          // User exits the container
        });

        container.on('focus', function (evt) {
          if (!container.isOpen()) {
            self.$selection.trigger('focus');
          }
        });
      };

      SingleSelection.prototype.clear = function () {
        var $rendered = this.$selection.find('.select2-selection__rendered');
        $rendered.empty();
        $rendered.removeAttr('title'); // clear tooltip on empty
      };

      SingleSelection.prototype.display = function (data, container) {
        var template = this.options.get('templateSelection');
        var escapeMarkup = this.options.get('escapeMarkup');

        return escapeMarkup(template(data, container));
      };

      SingleSelection.prototype.selectionContainer = function () {
        return $('<span></span>');
      };

      SingleSelection.prototype.update = function (data) {
        if (data.length === 0) {
          this.clear();
          return;
        }

        var selection = data[0];

        var $rendered = this.$selection.find('.select2-selection__rendered');
        var formatted = this.display(selection, $rendered);

        $rendered.empty().append(formatted);

        var title = selection.title || selection.text;

        if (title) {
          $rendered.attr('title', title);
        } else {
          $rendered.removeAttr('title');
        }
      };

      return SingleSelection;
    });

    S2.define('select2/selection/multiple', [
      'jquery',
      './base',
      '../utils'
    ], function ($, BaseSelection, Utils) {
      function MultipleSelection($element, options) {
        MultipleSelection.__super__.constructor.apply(this, arguments);
      }

      Utils.Extend(MultipleSelection, BaseSelection);

      MultipleSelection.prototype.render = function () {
        var $selection = MultipleSelection.__super__.render.call(this);

        $selection.addClass('select2-selection--multiple');

        $selection.html(
          '<ul class="select2-selection__rendered"></ul>'
        );

        return $selection;
      };

      MultipleSelection.prototype.bind = function (container, $container) {
        var self = this;

        MultipleSelection.__super__.bind.apply(this, arguments);

        this.$selection.on('click', function (evt) {
          self.trigger('toggle', {
            originalEvent: evt
          });
        });

        this.$selection.on(
          'click',
          '.select2-selection__choice__remove',
          function (evt) {
            // Ignore the event if it is disabled
            if (self.isDisabled()) {
              return;
            }

            var $remove = $(this);
            var $selection = $remove.parent();

            var data = Utils.GetData($selection[0], 'data');

            self.trigger('unselect', {
              originalEvent: evt,
              data: data
            });
          }
        );
      };

      MultipleSelection.prototype.clear = function () {
        var $rendered = this.$selection.find('.select2-selection__rendered');
        $rendered.empty();
        $rendered.removeAttr('title');
      };

      MultipleSelection.prototype.display = function (data, container) {
        var template = this.options.get('templateSelection');
        var escapeMarkup = this.options.get('escapeMarkup');

        return escapeMarkup(template(data, container));
      };

      MultipleSelection.prototype.selectionContainer = function () {
        var $container = $(
          '<li class="select2-selection__choice">' +
          '<span class="select2-selection__choice__remove" role="presentation">' +
          '&times;' +
          '</span>' +
          '</li>'
        );

        return $container;
      };

      MultipleSelection.prototype.update = function (data) {
        this.clear();

        if (data.length === 0) {
          return;
        }

        var $selections = [];

        for (var d = 0; d < data.length; d++) {
          var selection = data[d];

          var $selection = this.selectionContainer();
          var formatted = this.display(selection, $selection);

          $selection.append(formatted);

          var title = selection.title || selection.text;

          if (title) {
            $selection.attr('title', title);
          }

          Utils.StoreData($selection[0], 'data', selection);

          $selections.push($selection);
        }

        var $rendered = this.$selection.find('.select2-selection__rendered');

        Utils.appendMany($rendered, $selections);
      };

      return MultipleSelection;
    });

    S2.define('select2/selection/placeholder', [
      '../utils'
    ], function (Utils) {
      function Placeholder(decorated, $element, options) {
        this.placeholder = this.normalizePlaceholder(options.get('placeholder'));

        decorated.call(this, $element, options);
      }

      Placeholder.prototype.normalizePlaceholder = function (_, placeholder) {
        if (typeof placeholder === 'string') {
          placeholder = {
            id: '',
            text: placeholder
          };
        }

        return placeholder;
      };

      Placeholder.prototype.createPlaceholder = function (decorated, placeholder) {
        var $placeholder = this.selectionContainer();

        $placeholder.html(this.display(placeholder));
        $placeholder.addClass('select2-selection__placeholder')
          .removeClass('select2-selection__choice');

        return $placeholder;
      };

      Placeholder.prototype.update = function (decorated, data) {
        var singlePlaceholder = (
          data.length == 1 && data[0].id != this.placeholder.id
        );
        var multipleSelections = data.length > 1;

        if (multipleSelections || singlePlaceholder) {
          return decorated.call(this, data);
        }

        this.clear();

        var $placeholder = this.createPlaceholder(this.placeholder);

        this.$selection.find('.select2-selection__rendered').append($placeholder);
      };

      return Placeholder;
    });

    S2.define('select2/selection/allowClear', [
      'jquery',
      '../keys',
      '../utils'
    ], function ($, KEYS, Utils) {
      function AllowClear() { }

      AllowClear.prototype.bind = function (decorated, container, $container) {
        var self = this;

        decorated.call(this, container, $container);

        if (this.placeholder == null) {
          if (this.options.get('debug') && window.console && console.error) {
            console.error(
              'Select2: The `allowClear` option should be used in combination ' +
              'with the `placeholder` option.'
            );
          }
        }

        this.$selection.on('mousedown', '.select2-selection__clear',
          function (evt) {
            self._handleClear(evt);
          });

        container.on('keypress', function (evt) {
          self._handleKeyboardClear(evt, container);
        });
      };

      AllowClear.prototype._handleClear = function (_, evt) {
        // Ignore the event if it is disabled
        if (this.isDisabled()) {
          return;
        }

        var $clear = this.$selection.find('.select2-selection__clear');

        // Ignore the event if nothing has been selected
        if ($clear.length === 0) {
          return;
        }

        evt.stopPropagation();

        var data = Utils.GetData($clear[0], 'data');

        var previousVal = this.$element.val();
        this.$element.val(this.placeholder.id);

        var unselectData = {
          data: data
        };
        this.trigger('clear', unselectData);
        if (unselectData.prevented) {
          this.$element.val(previousVal);
          return;
        }

        for (var d = 0; d < data.length; d++) {
          unselectData = {
            data: data[d]
          };

          // Trigger the `unselect` event, so people can prevent it from being
          // cleared.
          this.trigger('unselect', unselectData);

          // If the event was prevented, don't clear it out.
          if (unselectData.prevented) {
            this.$element.val(previousVal);
            return;
          }
        }

        this.$element.trigger('input').trigger('change');

        this.trigger('toggle', {});
      };

      AllowClear.prototype._handleKeyboardClear = function (_, evt, container) {
        if (container.isOpen()) {
          return;
        }

        if (evt.which == KEYS.DELETE || evt.which == KEYS.BACKSPACE) {
          this._handleClear(evt);
        }
      };

      AllowClear.prototype.update = function (decorated, data) {
        decorated.call(this, data);

        if (this.$selection.find('.select2-selection__placeholder').length > 0 ||
          data.length === 0) {
          return;
        }

        var removeAll = this.options.get('translations').get('removeAllItems');

        var $remove = $(
          '<span class="select2-selection__clear" title="' + removeAll() + '">' +
          '&times;' +
          '</span>'
        );
        Utils.StoreData($remove[0], 'data', data);

        this.$selection.find('.select2-selection__rendered').prepend($remove);
      };

      return AllowClear;
    });

    S2.define('select2/selection/search', [
      'jquery',
      '../utils',
      '../keys'
    ], function ($, Utils, KEYS) {
      function Search(decorated, $element, options) {
        decorated.call(this, $element, options);
      }

      Search.prototype.render = function (decorated) {
        var $search = $(
          '<li class="select2-search select2-search--inline">' +
          '<input class="select2-search__field" type="search" tabindex="-1"' +
          ' autocomplete="off" autocorrect="off" autocapitalize="none"' +
          ' spellcheck="false" role="searchbox" aria-autocomplete="list" />' +
          '</li>'
        );

        this.$searchContainer = $search;
        this.$search = $search.find('input');

        var $rendered = decorated.call(this);

        this._transferTabIndex();

        return $rendered;
      };

      Search.prototype.bind = function (decorated, container, $container) {
        var self = this;

        var resultsId = container.id + '-results';

        decorated.call(this, container, $container);

        container.on('open', function () {
          self.$search.attr('aria-controls', resultsId);
          self.$search.trigger('focus');
        });

        container.on('close', function () {
          self.$search.val('');
          self.$search.removeAttr('aria-controls');
          self.$search.removeAttr('aria-activedescendant');
          self.$search.trigger('focus');
        });

        container.on('enable', function () {
          self.$search.prop('disabled', false);

          self._transferTabIndex();
        });

        container.on('disable', function () {
          self.$search.prop('disabled', true);
        });

        container.on('focus', function (evt) {
          self.$search.trigger('focus');
        });

        container.on('results:focus', function (params) {
          if (params.data._resultId) {
            self.$search.attr('aria-activedescendant', params.data._resultId);
          } else {
            self.$search.removeAttr('aria-activedescendant');
          }
        });

        this.$selection.on('focusin', '.select2-search--inline', function (evt) {
          self.trigger('focus', evt);
        });

        this.$selection.on('focusout', '.select2-search--inline', function (evt) {
          self._handleBlur(evt);
        });

        this.$selection.on('keydown', '.select2-search--inline', function (evt) {
          evt.stopPropagation();

          self.trigger('keypress', evt);

          self._keyUpPrevented = evt.isDefaultPrevented();

          var key = evt.which;

          if (key === KEYS.BACKSPACE && self.$search.val() === '') {
            var $previousChoice = self.$searchContainer
              .prev('.select2-selection__choice');

            if ($previousChoice.length > 0) {
              var item = Utils.GetData($previousChoice[0], 'data');

              self.searchRemoveChoice(item);

              evt.preventDefault();
            }
          }
        });

        this.$selection.on('click', '.select2-search--inline', function (evt) {
          if (self.$search.val()) {
            evt.stopPropagation();
          }
        });

        // Try to detect the IE version should the `documentMode` property that
        // is stored on the document. This is only implemented in IE and is
        // slightly cleaner than doing a user agent check.
        // This property is not available in Edge, but Edge also doesn't have
        // this bug.
        var msie = document.documentMode;
        var disableInputEvents = msie && msie <= 11;

        // Workaround for browsers which do not support the `input` event
        // This will prevent double-triggering of events for browsers which support
        // both the `keyup` and `input` events.
        this.$selection.on(
          'input.searchcheck',
          '.select2-search--inline',
          function (evt) {
            // IE will trigger the `input` event when a placeholder is used on a
            // search box. To get around this issue, we are forced to ignore all
            // `input` events in IE and keep using `keyup`.
            if (disableInputEvents) {
              self.$selection.off('input.search input.searchcheck');
              return;
            }

            // Unbind the duplicated `keyup` event
            self.$selection.off('keyup.search');
          }
        );

        this.$selection.on(
          'keyup.search input.search',
          '.select2-search--inline',
          function (evt) {
            // IE will trigger the `input` event when a placeholder is used on a
            // search box. To get around this issue, we are forced to ignore all
            // `input` events in IE and keep using `keyup`.
            if (disableInputEvents && evt.type === 'input') {
              self.$selection.off('input.search input.searchcheck');
              return;
            }

            var key = evt.which;

            // We can freely ignore events from modifier keys
            if (key == KEYS.SHIFT || key == KEYS.CTRL || key == KEYS.ALT) {
              return;
            }

            // Tabbing will be handled during the `keydown` phase
            if (key == KEYS.TAB) {
              return;
            }

            self.handleSearch(evt);
          }
        );
      };

      /**
       * This method will transfer the tabindex attribute from the rendered
       * selection to the search box. This allows for the search box to be used as
       * the primary focus instead of the selection container.
       *
       * @private
       */
      Search.prototype._transferTabIndex = function (decorated) {
        this.$search.attr('tabindex', this.$selection.attr('tabindex'));
        this.$selection.attr('tabindex', '-1');
      };

      Search.prototype.createPlaceholder = function (decorated, placeholder) {
        this.$search.attr('placeholder', placeholder.text);
      };

      Search.prototype.update = function (decorated, data) {
        var searchHadFocus = this.$search[0] == document.activeElement;

        this.$search.attr('placeholder', '');

        decorated.call(this, data);

        this.$selection.find('.select2-selection__rendered')
          .append(this.$searchContainer);

        this.resizeSearch();
        if (searchHadFocus) {
          this.$search.trigger('focus');
        }
      };

      Search.prototype.handleSearch = function () {
        this.resizeSearch();

        if (!this._keyUpPrevented) {
          var input = this.$search.val();

          this.trigger('query', {
            term: input
          });
        }

        this._keyUpPrevented = false;
      };

      Search.prototype.searchRemoveChoice = function (decorated, item) {
        this.trigger('unselect', {
          data: item
        });

        this.$search.val(item.text);
        this.handleSearch();
      };

      Search.prototype.resizeSearch = function () {
        this.$search.css('width', '25px');

        var width = '';

        if (this.$search.attr('placeholder') !== '') {
          width = this.$selection.find('.select2-selection__rendered').width();
        } else {
          var minimumWidth = this.$search.val().length + 1;

          width = (minimumWidth * 0.75) + 'em';
        }

        this.$search.css('width', width);
      };

      return Search;
    });

    S2.define('select2/selection/eventRelay', [
      'jquery'
    ], function ($) {
      function EventRelay() { }

      EventRelay.prototype.bind = function (decorated, container, $container) {
        var self = this;
        var relayEvents = [
          'open', 'opening',
          'close', 'closing',
          'select', 'selecting',
          'unselect', 'unselecting',
          'clear', 'clearing'
        ];

        var preventableEvents = [
          'opening', 'closing', 'selecting', 'unselecting', 'clearing'
        ];

        decorated.call(this, container, $container);

        container.on('*', function (name, params) {
          // Ignore events that should not be relayed
          if ($.inArray(name, relayEvents) === -1) {
            return;
          }

          // The parameters should always be an object
          params = params || {};

          // Generate the jQuery event for the Select2 event
          var evt = $.Event('select2:' + name, {
            params: params
          });

          self.$element.trigger(evt);

          // Only handle preventable events if it was one
          if ($.inArray(name, preventableEvents) === -1) {
            return;
          }

          params.prevented = evt.isDefaultPrevented();
        });
      };

      return EventRelay;
    });

    S2.define('select2/translation', [
      'jquery',
      'require'
    ], function ($, require) {
      function Translation(dict) {
        this.dict = dict || {};
      }

      Translation.prototype.all = function () {
        return this.dict;
      };

      Translation.prototype.get = function (key) {
        return this.dict[key];
      };

      Translation.prototype.extend = function (translation) {
        this.dict = $.extend({}, translation.all(), this.dict);
      };

      // Static functions

      Translation._cache = {};

      Translation.loadPath = function (path) {
        if (!(path in Translation._cache)) {
          var translations = require(path);

          Translation._cache[path] = translations;
        }

        return new Translation(Translation._cache[path]);
      };

      return Translation;
    });

    S2.define('select2/diacritics', [

    ], function () {
      var diacritics = {
        '\u24B6': 'A',
        '\uFF21': 'A',
        '\u00C0': 'A',
        '\u00C1': 'A',
        '\u00C2': 'A',
        '\u1EA6': 'A',
        '\u1EA4': 'A',
        '\u1EAA': 'A',
        '\u1EA8': 'A',
        '\u00C3': 'A',
        '\u0100': 'A',
        '\u0102': 'A',
        '\u1EB0': 'A',
        '\u1EAE': 'A',
        '\u1EB4': 'A',
        '\u1EB2': 'A',
        '\u0226': 'A',
        '\u01E0': 'A',
        '\u00C4': 'A',
        '\u01DE': 'A',
        '\u1EA2': 'A',
        '\u00C5': 'A',
        '\u01FA': 'A',
        '\u01CD': 'A',
        '\u0200': 'A',
        '\u0202': 'A',
        '\u1EA0': 'A',
        '\u1EAC': 'A',
        '\u1EB6': 'A',
        '\u1E00': 'A',
        '\u0104': 'A',
        '\u023A': 'A',
        '\u2C6F': 'A',
        '\uA732': 'AA',
        '\u00C6': 'AE',
        '\u01FC': 'AE',
        '\u01E2': 'AE',
        '\uA734': 'AO',
        '\uA736': 'AU',
        '\uA738': 'AV',
        '\uA73A': 'AV',
        '\uA73C': 'AY',
        '\u24B7': 'B',
        '\uFF22': 'B',
        '\u1E02': 'B',
        '\u1E04': 'B',
        '\u1E06': 'B',
        '\u0243': 'B',
        '\u0182': 'B',
        '\u0181': 'B',
        '\u24B8': 'C',
        '\uFF23': 'C',
        '\u0106': 'C',
        '\u0108': 'C',
        '\u010A': 'C',
        '\u010C': 'C',
        '\u00C7': 'C',
        '\u1E08': 'C',
        '\u0187': 'C',
        '\u023B': 'C',
        '\uA73E': 'C',
        '\u24B9': 'D',
        '\uFF24': 'D',
        '\u1E0A': 'D',
        '\u010E': 'D',
        '\u1E0C': 'D',
        '\u1E10': 'D',
        '\u1E12': 'D',
        '\u1E0E': 'D',
        '\u0110': 'D',
        '\u018B': 'D',
        '\u018A': 'D',
        '\u0189': 'D',
        '\uA779': 'D',
        '\u01F1': 'DZ',
        '\u01C4': 'DZ',
        '\u01F2': 'Dz',
        '\u01C5': 'Dz',
        '\u24BA': 'E',
        '\uFF25': 'E',
        '\u00C8': 'E',
        '\u00C9': 'E',
        '\u00CA': 'E',
        '\u1EC0': 'E',
        '\u1EBE': 'E',
        '\u1EC4': 'E',
        '\u1EC2': 'E',
        '\u1EBC': 'E',
        '\u0112': 'E',
        '\u1E14': 'E',
        '\u1E16': 'E',
        '\u0114': 'E',
        '\u0116': 'E',
        '\u00CB': 'E',
        '\u1EBA': 'E',
        '\u011A': 'E',
        '\u0204': 'E',
        '\u0206': 'E',
        '\u1EB8': 'E',
        '\u1EC6': 'E',
        '\u0228': 'E',
        '\u1E1C': 'E',
        '\u0118': 'E',
        '\u1E18': 'E',
        '\u1E1A': 'E',
        '\u0190': 'E',
        '\u018E': 'E',
        '\u24BB': 'F',
        '\uFF26': 'F',
        '\u1E1E': 'F',
        '\u0191': 'F',
        '\uA77B': 'F',
        '\u24BC': 'G',
        '\uFF27': 'G',
        '\u01F4': 'G',
        '\u011C': 'G',
        '\u1E20': 'G',
        '\u011E': 'G',
        '\u0120': 'G',
        '\u01E6': 'G',
        '\u0122': 'G',
        '\u01E4': 'G',
        '\u0193': 'G',
        '\uA7A0': 'G',
        '\uA77D': 'G',
        '\uA77E': 'G',
        '\u24BD': 'H',
        '\uFF28': 'H',
        '\u0124': 'H',
        '\u1E22': 'H',
        '\u1E26': 'H',
        '\u021E': 'H',
        '\u1E24': 'H',
        '\u1E28': 'H',
        '\u1E2A': 'H',
        '\u0126': 'H',
        '\u2C67': 'H',
        '\u2C75': 'H',
        '\uA78D': 'H',
        '\u24BE': 'I',
        '\uFF29': 'I',
        '\u00CC': 'I',
        '\u00CD': 'I',
        '\u00CE': 'I',
        '\u0128': 'I',
        '\u012A': 'I',
        '\u012C': 'I',
        '\u0130': 'I',
        '\u00CF': 'I',
        '\u1E2E': 'I',
        '\u1EC8': 'I',
        '\u01CF': 'I',
        '\u0208': 'I',
        '\u020A': 'I',
        '\u1ECA': 'I',
        '\u012E': 'I',
        '\u1E2C': 'I',
        '\u0197': 'I',
        '\u24BF': 'J',
        '\uFF2A': 'J',
        '\u0134': 'J',
        '\u0248': 'J',
        '\u24C0': 'K',
        '\uFF2B': 'K',
        '\u1E30': 'K',
        '\u01E8': 'K',
        '\u1E32': 'K',
        '\u0136': 'K',
        '\u1E34': 'K',
        '\u0198': 'K',
        '\u2C69': 'K',
        '\uA740': 'K',
        '\uA742': 'K',
        '\uA744': 'K',
        '\uA7A2': 'K',
        '\u24C1': 'L',
        '\uFF2C': 'L',
        '\u013F': 'L',
        '\u0139': 'L',
        '\u013D': 'L',
        '\u1E36': 'L',
        '\u1E38': 'L',
        '\u013B': 'L',
        '\u1E3C': 'L',
        '\u1E3A': 'L',
        '\u0141': 'L',
        '\u023D': 'L',
        '\u2C62': 'L',
        '\u2C60': 'L',
        '\uA748': 'L',
        '\uA746': 'L',
        '\uA780': 'L',
        '\u01C7': 'LJ',
        '\u01C8': 'Lj',
        '\u24C2': 'M',
        '\uFF2D': 'M',
        '\u1E3E': 'M',
        '\u1E40': 'M',
        '\u1E42': 'M',
        '\u2C6E': 'M',
        '\u019C': 'M',
        '\u24C3': 'N',
        '\uFF2E': 'N',
        '\u01F8': 'N',
        '\u0143': 'N',
        '\u00D1': 'N',
        '\u1E44': 'N',
        '\u0147': 'N',
        '\u1E46': 'N',
        '\u0145': 'N',
        '\u1E4A': 'N',
        '\u1E48': 'N',
        '\u0220': 'N',
        '\u019D': 'N',
        '\uA790': 'N',
        '\uA7A4': 'N',
        '\u01CA': 'NJ',
        '\u01CB': 'Nj',
        '\u24C4': 'O',
        '\uFF2F': 'O',
        '\u00D2': 'O',
        '\u00D3': 'O',
        '\u00D4': 'O',
        '\u1ED2': 'O',
        '\u1ED0': 'O',
        '\u1ED6': 'O',
        '\u1ED4': 'O',
        '\u00D5': 'O',
        '\u1E4C': 'O',
        '\u022C': 'O',
        '\u1E4E': 'O',
        '\u014C': 'O',
        '\u1E50': 'O',
        '\u1E52': 'O',
        '\u014E': 'O',
        '\u022E': 'O',
        '\u0230': 'O',
        '\u00D6': 'O',
        '\u022A': 'O',
        '\u1ECE': 'O',
        '\u0150': 'O',
        '\u01D1': 'O',
        '\u020C': 'O',
        '\u020E': 'O',
        '\u01A0': 'O',
        '\u1EDC': 'O',
        '\u1EDA': 'O',
        '\u1EE0': 'O',
        '\u1EDE': 'O',
        '\u1EE2': 'O',
        '\u1ECC': 'O',
        '\u1ED8': 'O',
        '\u01EA': 'O',
        '\u01EC': 'O',
        '\u00D8': 'O',
        '\u01FE': 'O',
        '\u0186': 'O',
        '\u019F': 'O',
        '\uA74A': 'O',
        '\uA74C': 'O',
        '\u0152': 'OE',
        '\u01A2': 'OI',
        '\uA74E': 'OO',
        '\u0222': 'OU',
        '\u24C5': 'P',
        '\uFF30': 'P',
        '\u1E54': 'P',
        '\u1E56': 'P',
        '\u01A4': 'P',
        '\u2C63': 'P',
        '\uA750': 'P',
        '\uA752': 'P',
        '\uA754': 'P',
        '\u24C6': 'Q',
        '\uFF31': 'Q',
        '\uA756': 'Q',
        '\uA758': 'Q',
        '\u024A': 'Q',
        '\u24C7': 'R',
        '\uFF32': 'R',
        '\u0154': 'R',
        '\u1E58': 'R',
        '\u0158': 'R',
        '\u0210': 'R',
        '\u0212': 'R',
        '\u1E5A': 'R',
        '\u1E5C': 'R',
        '\u0156': 'R',
        '\u1E5E': 'R',
        '\u024C': 'R',
        '\u2C64': 'R',
        '\uA75A': 'R',
        '\uA7A6': 'R',
        '\uA782': 'R',
        '\u24C8': 'S',
        '\uFF33': 'S',
        '\u1E9E': 'S',
        '\u015A': 'S',
        '\u1E64': 'S',
        '\u015C': 'S',
        '\u1E60': 'S',
        '\u0160': 'S',
        '\u1E66': 'S',
        '\u1E62': 'S',
        '\u1E68': 'S',
        '\u0218': 'S',
        '\u015E': 'S',
        '\u2C7E': 'S',
        '\uA7A8': 'S',
        '\uA784': 'S',
        '\u24C9': 'T',
        '\uFF34': 'T',
        '\u1E6A': 'T',
        '\u0164': 'T',
        '\u1E6C': 'T',
        '\u021A': 'T',
        '\u0162': 'T',
        '\u1E70': 'T',
        '\u1E6E': 'T',
        '\u0166': 'T',
        '\u01AC': 'T',
        '\u01AE': 'T',
        '\u023E': 'T',
        '\uA786': 'T',
        '\uA728': 'TZ',
        '\u24CA': 'U',
        '\uFF35': 'U',
        '\u00D9': 'U',
        '\u00DA': 'U',
        '\u00DB': 'U',
        '\u0168': 'U',
        '\u1E78': 'U',
        '\u016A': 'U',
        '\u1E7A': 'U',
        '\u016C': 'U',
        '\u00DC': 'U',
        '\u01DB': 'U',
        '\u01D7': 'U',
        '\u01D5': 'U',
        '\u01D9': 'U',
        '\u1EE6': 'U',
        '\u016E': 'U',
        '\u0170': 'U',
        '\u01D3': 'U',
        '\u0214': 'U',
        '\u0216': 'U',
        '\u01AF': 'U',
        '\u1EEA': 'U',
        '\u1EE8': 'U',
        '\u1EEE': 'U',
        '\u1EEC': 'U',
        '\u1EF0': 'U',
        '\u1EE4': 'U',
        '\u1E72': 'U',
        '\u0172': 'U',
        '\u1E76': 'U',
        '\u1E74': 'U',
        '\u0244': 'U',
        '\u24CB': 'V',
        '\uFF36': 'V',
        '\u1E7C': 'V',
        '\u1E7E': 'V',
        '\u01B2': 'V',
        '\uA75E': 'V',
        '\u0245': 'V',
        '\uA760': 'VY',
        '\u24CC': 'W',
        '\uFF37': 'W',
        '\u1E80': 'W',
        '\u1E82': 'W',
        '\u0174': 'W',
        '\u1E86': 'W',
        '\u1E84': 'W',
        '\u1E88': 'W',
        '\u2C72': 'W',
        '\u24CD': 'X',
        '\uFF38': 'X',
        '\u1E8A': 'X',
        '\u1E8C': 'X',
        '\u24CE': 'Y',
        '\uFF39': 'Y',
        '\u1EF2': 'Y',
        '\u00DD': 'Y',
        '\u0176': 'Y',
        '\u1EF8': 'Y',
        '\u0232': 'Y',
        '\u1E8E': 'Y',
        '\u0178': 'Y',
        '\u1EF6': 'Y',
        '\u1EF4': 'Y',
        '\u01B3': 'Y',
        '\u024E': 'Y',
        '\u1EFE': 'Y',
        '\u24CF': 'Z',
        '\uFF3A': 'Z',
        '\u0179': 'Z',
        '\u1E90': 'Z',
        '\u017B': 'Z',
        '\u017D': 'Z',
        '\u1E92': 'Z',
        '\u1E94': 'Z',
        '\u01B5': 'Z',
        '\u0224': 'Z',
        '\u2C7F': 'Z',
        '\u2C6B': 'Z',
        '\uA762': 'Z',
        '\u24D0': 'a',
        '\uFF41': 'a',
        '\u1E9A': 'a',
        '\u00E0': 'a',
        '\u00E1': 'a',
        '\u00E2': 'a',
        '\u1EA7': 'a',
        '\u1EA5': 'a',
        '\u1EAB': 'a',
        '\u1EA9': 'a',
        '\u00E3': 'a',
        '\u0101': 'a',
        '\u0103': 'a',
        '\u1EB1': 'a',
        '\u1EAF': 'a',
        '\u1EB5': 'a',
        '\u1EB3': 'a',
        '\u0227': 'a',
        '\u01E1': 'a',
        '\u00E4': 'a',
        '\u01DF': 'a',
        '\u1EA3': 'a',
        '\u00E5': 'a',
        '\u01FB': 'a',
        '\u01CE': 'a',
        '\u0201': 'a',
        '\u0203': 'a',
        '\u1EA1': 'a',
        '\u1EAD': 'a',
        '\u1EB7': 'a',
        '\u1E01': 'a',
        '\u0105': 'a',
        '\u2C65': 'a',
        '\u0250': 'a',
        '\uA733': 'aa',
        '\u00E6': 'ae',
        '\u01FD': 'ae',
        '\u01E3': 'ae',
        '\uA735': 'ao',
        '\uA737': 'au',
        '\uA739': 'av',
        '\uA73B': 'av',
        '\uA73D': 'ay',
        '\u24D1': 'b',
        '\uFF42': 'b',
        '\u1E03': 'b',
        '\u1E05': 'b',
        '\u1E07': 'b',
        '\u0180': 'b',
        '\u0183': 'b',
        '\u0253': 'b',
        '\u24D2': 'c',
        '\uFF43': 'c',
        '\u0107': 'c',
        '\u0109': 'c',
        '\u010B': 'c',
        '\u010D': 'c',
        '\u00E7': 'c',
        '\u1E09': 'c',
        '\u0188': 'c',
        '\u023C': 'c',
        '\uA73F': 'c',
        '\u2184': 'c',
        '\u24D3': 'd',
        '\uFF44': 'd',
        '\u1E0B': 'd',
        '\u010F': 'd',
        '\u1E0D': 'd',
        '\u1E11': 'd',
        '\u1E13': 'd',
        '\u1E0F': 'd',
        '\u0111': 'd',
        '\u018C': 'd',
        '\u0256': 'd',
        '\u0257': 'd',
        '\uA77A': 'd',
        '\u01F3': 'dz',
        '\u01C6': 'dz',
        '\u24D4': 'e',
        '\uFF45': 'e',
        '\u00E8': 'e',
        '\u00E9': 'e',
        '\u00EA': 'e',
        '\u1EC1': 'e',
        '\u1EBF': 'e',
        '\u1EC5': 'e',
        '\u1EC3': 'e',
        '\u1EBD': 'e',
        '\u0113': 'e',
        '\u1E15': 'e',
        '\u1E17': 'e',
        '\u0115': 'e',
        '\u0117': 'e',
        '\u00EB': 'e',
        '\u1EBB': 'e',
        '\u011B': 'e',
        '\u0205': 'e',
        '\u0207': 'e',
        '\u1EB9': 'e',
        '\u1EC7': 'e',
        '\u0229': 'e',
        '\u1E1D': 'e',
        '\u0119': 'e',
        '\u1E19': 'e',
        '\u1E1B': 'e',
        '\u0247': 'e',
        '\u025B': 'e',
        '\u01DD': 'e',
        '\u24D5': 'f',
        '\uFF46': 'f',
        '\u1E1F': 'f',
        '\u0192': 'f',
        '\uA77C': 'f',
        '\u24D6': 'g',
        '\uFF47': 'g',
        '\u01F5': 'g',
        '\u011D': 'g',
        '\u1E21': 'g',
        '\u011F': 'g',
        '\u0121': 'g',
        '\u01E7': 'g',
        '\u0123': 'g',
        '\u01E5': 'g',
        '\u0260': 'g',
        '\uA7A1': 'g',
        '\u1D79': 'g',
        '\uA77F': 'g',
        '\u24D7': 'h',
        '\uFF48': 'h',
        '\u0125': 'h',
        '\u1E23': 'h',
        '\u1E27': 'h',
        '\u021F': 'h',
        '\u1E25': 'h',
        '\u1E29': 'h',
        '\u1E2B': 'h',
        '\u1E96': 'h',
        '\u0127': 'h',
        '\u2C68': 'h',
        '\u2C76': 'h',
        '\u0265': 'h',
        '\u0195': 'hv',
        '\u24D8': 'i',
        '\uFF49': 'i',
        '\u00EC': 'i',
        '\u00ED': 'i',
        '\u00EE': 'i',
        '\u0129': 'i',
        '\u012B': 'i',
        '\u012D': 'i',
        '\u00EF': 'i',
        '\u1E2F': 'i',
        '\u1EC9': 'i',
        '\u01D0': 'i',
        '\u0209': 'i',
        '\u020B': 'i',
        '\u1ECB': 'i',
        '\u012F': 'i',
        '\u1E2D': 'i',
        '\u0268': 'i',
        '\u0131': 'i',
        '\u24D9': 'j',
        '\uFF4A': 'j',
        '\u0135': 'j',
        '\u01F0': 'j',
        '\u0249': 'j',
        '\u24DA': 'k',
        '\uFF4B': 'k',
        '\u1E31': 'k',
        '\u01E9': 'k',
        '\u1E33': 'k',
        '\u0137': 'k',
        '\u1E35': 'k',
        '\u0199': 'k',
        '\u2C6A': 'k',
        '\uA741': 'k',
        '\uA743': 'k',
        '\uA745': 'k',
        '\uA7A3': 'k',
        '\u24DB': 'l',
        '\uFF4C': 'l',
        '\u0140': 'l',
        '\u013A': 'l',
        '\u013E': 'l',
        '\u1E37': 'l',
        '\u1E39': 'l',
        '\u013C': 'l',
        '\u1E3D': 'l',
        '\u1E3B': 'l',
        '\u017F': 'l',
        '\u0142': 'l',
        '\u019A': 'l',
        '\u026B': 'l',
        '\u2C61': 'l',
        '\uA749': 'l',
        '\uA781': 'l',
        '\uA747': 'l',
        '\u01C9': 'lj',
        '\u24DC': 'm',
        '\uFF4D': 'm',
        '\u1E3F': 'm',
        '\u1E41': 'm',
        '\u1E43': 'm',
        '\u0271': 'm',
        '\u026F': 'm',
        '\u24DD': 'n',
        '\uFF4E': 'n',
        '\u01F9': 'n',
        '\u0144': 'n',
        '\u00F1': 'n',
        '\u1E45': 'n',
        '\u0148': 'n',
        '\u1E47': 'n',
        '\u0146': 'n',
        '\u1E4B': 'n',
        '\u1E49': 'n',
        '\u019E': 'n',
        '\u0272': 'n',
        '\u0149': 'n',
        '\uA791': 'n',
        '\uA7A5': 'n',
        '\u01CC': 'nj',
        '\u24DE': 'o',
        '\uFF4F': 'o',
        '\u00F2': 'o',
        '\u00F3': 'o',
        '\u00F4': 'o',
        '\u1ED3': 'o',
        '\u1ED1': 'o',
        '\u1ED7': 'o',
        '\u1ED5': 'o',
        '\u00F5': 'o',
        '\u1E4D': 'o',
        '\u022D': 'o',
        '\u1E4F': 'o',
        '\u014D': 'o',
        '\u1E51': 'o',
        '\u1E53': 'o',
        '\u014F': 'o',
        '\u022F': 'o',
        '\u0231': 'o',
        '\u00F6': 'o',
        '\u022B': 'o',
        '\u1ECF': 'o',
        '\u0151': 'o',
        '\u01D2': 'o',
        '\u020D': 'o',
        '\u020F': 'o',
        '\u01A1': 'o',
        '\u1EDD': 'o',
        '\u1EDB': 'o',
        '\u1EE1': 'o',
        '\u1EDF': 'o',
        '\u1EE3': 'o',
        '\u1ECD': 'o',
        '\u1ED9': 'o',
        '\u01EB': 'o',
        '\u01ED': 'o',
        '\u00F8': 'o',
        '\u01FF': 'o',
        '\u0254': 'o',
        '\uA74B': 'o',
        '\uA74D': 'o',
        '\u0275': 'o',
        '\u0153': 'oe',
        '\u01A3': 'oi',
        '\u0223': 'ou',
        '\uA74F': 'oo',
        '\u24DF': 'p',
        '\uFF50': 'p',
        '\u1E55': 'p',
        '\u1E57': 'p',
        '\u01A5': 'p',
        '\u1D7D': 'p',
        '\uA751': 'p',
        '\uA753': 'p',
        '\uA755': 'p',
        '\u24E0': 'q',
        '\uFF51': 'q',
        '\u024B': 'q',
        '\uA757': 'q',
        '\uA759': 'q',
        '\u24E1': 'r',
        '\uFF52': 'r',
        '\u0155': 'r',
        '\u1E59': 'r',
        '\u0159': 'r',
        '\u0211': 'r',
        '\u0213': 'r',
        '\u1E5B': 'r',
        '\u1E5D': 'r',
        '\u0157': 'r',
        '\u1E5F': 'r',
        '\u024D': 'r',
        '\u027D': 'r',
        '\uA75B': 'r',
        '\uA7A7': 'r',
        '\uA783': 'r',
        '\u24E2': 's',
        '\uFF53': 's',
        '\u00DF': 's',
        '\u015B': 's',
        '\u1E65': 's',
        '\u015D': 's',
        '\u1E61': 's',
        '\u0161': 's',
        '\u1E67': 's',
        '\u1E63': 's',
        '\u1E69': 's',
        '\u0219': 's',
        '\u015F': 's',
        '\u023F': 's',
        '\uA7A9': 's',
        '\uA785': 's',
        '\u1E9B': 's',
        '\u24E3': 't',
        '\uFF54': 't',
        '\u1E6B': 't',
        '\u1E97': 't',
        '\u0165': 't',
        '\u1E6D': 't',
        '\u021B': 't',
        '\u0163': 't',
        '\u1E71': 't',
        '\u1E6F': 't',
        '\u0167': 't',
        '\u01AD': 't',
        '\u0288': 't',
        '\u2C66': 't',
        '\uA787': 't',
        '\uA729': 'tz',
        '\u24E4': 'u',
        '\uFF55': 'u',
        '\u00F9': 'u',
        '\u00FA': 'u',
        '\u00FB': 'u',
        '\u0169': 'u',
        '\u1E79': 'u',
        '\u016B': 'u',
        '\u1E7B': 'u',
        '\u016D': 'u',
        '\u00FC': 'u',
        '\u01DC': 'u',
        '\u01D8': 'u',
        '\u01D6': 'u',
        '\u01DA': 'u',
        '\u1EE7': 'u',
        '\u016F': 'u',
        '\u0171': 'u',
        '\u01D4': 'u',
        '\u0215': 'u',
        '\u0217': 'u',
        '\u01B0': 'u',
        '\u1EEB': 'u',
        '\u1EE9': 'u',
        '\u1EEF': 'u',
        '\u1EED': 'u',
        '\u1EF1': 'u',
        '\u1EE5': 'u',
        '\u1E73': 'u',
        '\u0173': 'u',
        '\u1E77': 'u',
        '\u1E75': 'u',
        '\u0289': 'u',
        '\u24E5': 'v',
        '\uFF56': 'v',
        '\u1E7D': 'v',
        '\u1E7F': 'v',
        '\u028B': 'v',
        '\uA75F': 'v',
        '\u028C': 'v',
        '\uA761': 'vy',
        '\u24E6': 'w',
        '\uFF57': 'w',
        '\u1E81': 'w',
        '\u1E83': 'w',
        '\u0175': 'w',
        '\u1E87': 'w',
        '\u1E85': 'w',
        '\u1E98': 'w',
        '\u1E89': 'w',
        '\u2C73': 'w',
        '\u24E7': 'x',
        '\uFF58': 'x',
        '\u1E8B': 'x',
        '\u1E8D': 'x',
        '\u24E8': 'y',
        '\uFF59': 'y',
        '\u1EF3': 'y',
        '\u00FD': 'y',
        '\u0177': 'y',
        '\u1EF9': 'y',
        '\u0233': 'y',
        '\u1E8F': 'y',
        '\u00FF': 'y',
        '\u1EF7': 'y',
        '\u1E99': 'y',
        '\u1EF5': 'y',
        '\u01B4': 'y',
        '\u024F': 'y',
        '\u1EFF': 'y',
        '\u24E9': 'z',
        '\uFF5A': 'z',
        '\u017A': 'z',
        '\u1E91': 'z',
        '\u017C': 'z',
        '\u017E': 'z',
        '\u1E93': 'z',
        '\u1E95': 'z',
        '\u01B6': 'z',
        '\u0225': 'z',
        '\u0240': 'z',
        '\u2C6C': 'z',
        '\uA763': 'z',
        '\u0386': '\u0391',
        '\u0388': '\u0395',
        '\u0389': '\u0397',
        '\u038A': '\u0399',
        '\u03AA': '\u0399',
        '\u038C': '\u039F',
        '\u038E': '\u03A5',
        '\u03AB': '\u03A5',
        '\u038F': '\u03A9',
        '\u03AC': '\u03B1',
        '\u03AD': '\u03B5',
        '\u03AE': '\u03B7',
        '\u03AF': '\u03B9',
        '\u03CA': '\u03B9',
        '\u0390': '\u03B9',
        '\u03CC': '\u03BF',
        '\u03CD': '\u03C5',
        '\u03CB': '\u03C5',
        '\u03B0': '\u03C5',
        '\u03CE': '\u03C9',
        '\u03C2': '\u03C3',
        '\u2019': '\''
      };

      return diacritics;
    });

    S2.define('select2/data/base', [
      '../utils'
    ], function (Utils) {
      function BaseAdapter($element, options) {
        BaseAdapter.__super__.constructor.call(this);
      }

      Utils.Extend(BaseAdapter, Utils.Observable);

      BaseAdapter.prototype.current = function (callback) {
        throw new Error('The `current` method must be defined in child classes.');
      };

      BaseAdapter.prototype.query = function (params, callback) {
        throw new Error('The `query` method must be defined in child classes.');
      };

      BaseAdapter.prototype.bind = function (container, $container) {
        // Can be implemented in subclasses
      };

      BaseAdapter.prototype.destroy = function () {
        // Can be implemented in subclasses
      };

      BaseAdapter.prototype.generateResultId = function (container, data) {
        var id = container.id + '-result-';

        id += Utils.generateChars(4);

        if (data.id != null) {
          id += '-' + data.id.toString();
        } else {
          id += '-' + Utils.generateChars(4);
        }
        return id;
      };

      return BaseAdapter;
    });

    S2.define('select2/data/select', [
      './base',
      '../utils',
      'jquery'
    ], function (BaseAdapter, Utils, $) {
      function SelectAdapter($element, options) {
        this.$element = $element;
        this.options = options;

        SelectAdapter.__super__.constructor.call(this);
      }

      Utils.Extend(SelectAdapter, BaseAdapter);

      SelectAdapter.prototype.current = function (callback) {
        var data = [];
        var self = this;

        this.$element.find(':selected').each(function () {
          var $option = $(this);

          var option = self.item($option);

          data.push(option);
        });

        callback(data);
      };

      SelectAdapter.prototype.select = function (data) {
        var self = this;

        data.selected = true;

        // If data.element is a DOM node, use it instead
        if ($(data.element).is('option')) {
          data.element.selected = true;

          this.$element.trigger('input').trigger('change');

          return;
        }

        if (this.$element.prop('multiple')) {
          this.current(function (currentData) {
            var val = [];

            data = [data];
            data.push.apply(data, currentData);

            for (var d = 0; d < data.length; d++) {
              var id = data[d].id;

              if ($.inArray(id, val) === -1) {
                val.push(id);
              }
            }

            self.$element.val(val);
            self.$element.trigger('input').trigger('change');
          });
        } else {
          var val = data.id;

          this.$element.val(val);
          this.$element.trigger('input').trigger('change');
        }
      };

      SelectAdapter.prototype.unselect = function (data) {
        var self = this;

        if (!this.$element.prop('multiple')) {
          return;
        }

        data.selected = false;

        if ($(data.element).is('option')) {
          data.element.selected = false;

          this.$element.trigger('input').trigger('change');

          return;
        }

        this.current(function (currentData) {
          var val = [];

          for (var d = 0; d < currentData.length; d++) {
            var id = currentData[d].id;

            if (id !== data.id && $.inArray(id, val) === -1) {
              val.push(id);
            }
          }

          self.$element.val(val);

          self.$element.trigger('input').trigger('change');
        });
      };

      SelectAdapter.prototype.bind = function (container, $container) {
        var self = this;

        this.container = container;

        container.on('select', function (params) {
          self.select(params.data);
        });

        container.on('unselect', function (params) {
          self.unselect(params.data);
        });
      };

      SelectAdapter.prototype.destroy = function () {
        // Remove anything added to child elements
        this.$element.find('*').each(function () {
          // Remove any custom data set by Select2
          Utils.RemoveData(this);
        });
      };

      SelectAdapter.prototype.query = function (params, callback) {
        var data = [];
        var self = this;

        var $options = this.$element.children();

        $options.each(function () {
          var $option = $(this);

          if (!$option.is('option') && !$option.is('optgroup')) {
            return;
          }

          var option = self.item($option);

          var matches = self.matches(params, option);

          if (matches !== null) {
            data.push(matches);
          }
        });

        callback({
          results: data
        });
      };

      SelectAdapter.prototype.addOptions = function ($options) {
        Utils.appendMany(this.$element, $options);
      };

      SelectAdapter.prototype.option = function (data) {
        var option;

        if (data.children) {
          option = document.createElement('optgroup');
          option.label = data.text;
        } else {
          option = document.createElement('option');

          if (option.textContent !== undefined) {
            option.textContent = data.text;
          } else {
            option.innerText = data.text;
          }
        }

        if (data.id !== undefined) {
          option.value = data.id;
        }

        if (data.disabled) {
          option.disabled = true;
        }

        if (data.selected) {
          option.selected = true;
        }

        if (data.title) {
          option.title = data.title;
        }

        var $option = $(option);

        var normalizedData = this._normalizeItem(data);
        normalizedData.element = option;

        // Override the option's data with the combined data
        Utils.StoreData(option, 'data', normalizedData);

        return $option;
      };

      SelectAdapter.prototype.item = function ($option) {
        var data = {};

        data = Utils.GetData($option[0], 'data');

        if (data != null) {
          return data;
        }

        if ($option.is('option')) {
          data = {
            id: $option.val(),
            text: $option.text(),
            disabled: $option.prop('disabled'),
            selected: $option.prop('selected'),
            title: $option.prop('title')
          };
        } else if ($option.is('optgroup')) {
          data = {
            text: $option.prop('label'),
            children: [],
            title: $option.prop('title')
          };

          var $children = $option.children('option');
          var children = [];

          for (var c = 0; c < $children.length; c++) {
            var $child = $($children[c]);

            var child = this.item($child);

            children.push(child);
          }

          data.children = children;
        }

        data = this._normalizeItem(data);
        data.element = $option[0];

        Utils.StoreData($option[0], 'data', data);

        return data;
      };

      SelectAdapter.prototype._normalizeItem = function (item) {
        if (item !== Object(item)) {
          item = {
            id: item,
            text: item
          };
        }

        item = $.extend({}, {
          text: ''
        }, item);

        var defaults = {
          selected: false,
          disabled: false
        };

        if (item.id != null) {
          item.id = item.id.toString();
        }

        if (item.text != null) {
          item.text = item.text.toString();
        }

        if (item._resultId == null && item.id && this.container != null) {
          item._resultId = this.generateResultId(this.container, item);
        }

        return $.extend({}, defaults, item);
      };

      SelectAdapter.prototype.matches = function (params, data) {
        var matcher = this.options.get('matcher');

        return matcher(params, data);
      };

      return SelectAdapter;
    });

    S2.define('select2/data/array', [
      './select',
      '../utils',
      'jquery'
    ], function (SelectAdapter, Utils, $) {
      function ArrayAdapter($element, options) {
        this._dataToConvert = options.get('data') || [];

        ArrayAdapter.__super__.constructor.call(this, $element, options);
      }

      Utils.Extend(ArrayAdapter, SelectAdapter);

      ArrayAdapter.prototype.bind = function (container, $container) {
        ArrayAdapter.__super__.bind.call(this, container, $container);

        this.addOptions(this.convertToOptions(this._dataToConvert));
      };

      ArrayAdapter.prototype.select = function (data) {
        var $option = this.$element.find('option').filter(function (i, elm) {
          return elm.value == data.id.toString();
        });

        if ($option.length === 0) {
          $option = this.option(data);

          this.addOptions($option);
        }

        ArrayAdapter.__super__.select.call(this, data);
      };

      ArrayAdapter.prototype.convertToOptions = function (data) {
        var self = this;

        var $existing = this.$element.find('option');
        var existingIds = $existing.map(function () {
          return self.item($(this)).id;
        }).get();

        var $options = [];

        // Filter out all items except for the one passed in the argument
        function onlyItem(item) {
          return function () {
            return $(this).val() == item.id;
          };
        }

        for (var d = 0; d < data.length; d++) {
          var item = this._normalizeItem(data[d]);

          // Skip items which were pre-loaded, only merge the data
          if ($.inArray(item.id, existingIds) >= 0) {
            var $existingOption = $existing.filter(onlyItem(item));

            var existingData = this.item($existingOption);
            var newData = $.extend(true, {}, item, existingData);

            var $newOption = this.option(newData);

            $existingOption.replaceWith($newOption);

            continue;
          }

          var $option = this.option(item);

          if (item.children) {
            var $children = this.convertToOptions(item.children);

            Utils.appendMany($option, $children);
          }

          $options.push($option);
        }

        return $options;
      };

      return ArrayAdapter;
    });

    S2.define('select2/data/ajax', [
      './array',
      '../utils',
      'jquery'
    ], function (ArrayAdapter, Utils, $) {
      function AjaxAdapter($element, options) {
        this.ajaxOptions = this._applyDefaults(options.get('ajax'));

        if (this.ajaxOptions.processResults != null) {
          this.processResults = this.ajaxOptions.processResults;
        }

        AjaxAdapter.__super__.constructor.call(this, $element, options);
      }

      Utils.Extend(AjaxAdapter, ArrayAdapter);

      AjaxAdapter.prototype._applyDefaults = function (options) {
        var defaults = {
          data: function (params) {
            return $.extend({}, params, {
              q: params.term
            });
          },
          transport: function (params, success, failure) {
            var $request = $.ajax(params);

            $request.then(success);
            $request.fail(failure);

            return $request;
          }
        };

        return $.extend({}, defaults, options, true);
      };

      AjaxAdapter.prototype.processResults = function (results) {
        return results;
      };

      AjaxAdapter.prototype.query = function (params, callback) {
        var matches = [];
        var self = this;

        if (this._request != null) {
          // JSONP requests cannot always be aborted
          if ($.isFunction(this._request.abort)) {
            this._request.abort();
          }

          this._request = null;
        }

        var options = $.extend({
          type: 'GET'
        }, this.ajaxOptions);

        if (typeof options.url === 'function') {
          options.url = options.url.call(this.$element, params);
        }

        if (typeof options.data === 'function') {
          options.data = options.data.call(this.$element, params);
        }

        function request() {
          var $request = options.transport(options, function (data) {
            var results = self.processResults(data, params);

            if (self.options.get('debug') && window.console && console.error) {
              // Check to make sure that the response included a `results` key.
              if (!results || !results.results || !$.isArray(results.results)) {
                console.error(
                  'Select2: The AJAX results did not return an array in the ' +
                  '`results` key of the response.'
                );
              }
            }

            callback(results);
          }, function () {
            // Attempt to detect if a request was aborted
            // Only works if the transport exposes a status property
            if ('status' in $request &&
              ($request.status === 0 || $request.status === '0')) {
              return;
            }

            self.trigger('results:message', {
              message: 'errorLoading'
            });
          });

          self._request = $request;
        }

        if (this.ajaxOptions.delay && params.term != null) {
          if (this._queryTimeout) {
            window.clearTimeout(this._queryTimeout);
          }

          this._queryTimeout = window.setTimeout(request, this.ajaxOptions.delay);
        } else {
          request();
        }
      };

      return AjaxAdapter;
    });

    S2.define('select2/data/tags', [
      'jquery'
    ], function ($) {
      function Tags(decorated, $element, options) {
        var tags = options.get('tags');

        var createTag = options.get('createTag');

        if (createTag !== undefined) {
          this.createTag = createTag;
        }

        var insertTag = options.get('insertTag');

        if (insertTag !== undefined) {
          this.insertTag = insertTag;
        }

        decorated.call(this, $element, options);

        if ($.isArray(tags)) {
          for (var t = 0; t < tags.length; t++) {
            var tag = tags[t];
            var item = this._normalizeItem(tag);

            var $option = this.option(item);

            this.$element.append($option);
          }
        }
      }

      Tags.prototype.query = function (decorated, params, callback) {
        var self = this;

        this._removeOldTags();

        if (params.term == null || params.page != null) {
          decorated.call(this, params, callback);
          return;
        }

        function wrapper(obj, child) {
          var data = obj.results;

          for (var i = 0; i < data.length; i++) {
            var option = data[i];

            var checkChildren = (
              option.children != null &&
              !wrapper({
                results: option.children
              }, true)
            );

            var optionText = (option.text || '').toUpperCase();
            var paramsTerm = (params.term || '').toUpperCase();

            var checkText = optionText === paramsTerm;

            if (checkText || checkChildren) {
              if (child) {
                return false;
              }

              obj.data = data;
              callback(obj);

              return;
            }
          }

          if (child) {
            return true;
          }

          var tag = self.createTag(params);

          if (tag != null) {
            var $option = self.option(tag);
            $option.attr('data-select2-tag', true);

            self.addOptions([$option]);

            self.insertTag(data, tag);
          }

          obj.results = data;

          callback(obj);
        }

        decorated.call(this, params, wrapper);
      };

      Tags.prototype.createTag = function (decorated, params) {
        var term = $.trim(params.term);

        if (term === '') {
          return null;
        }

        return {
          id: term,
          text: term
        };
      };

      Tags.prototype.insertTag = function (_, data, tag) {
        data.unshift(tag);
      };

      Tags.prototype._removeOldTags = function (_) {
        var $options = this.$element.find('option[data-select2-tag]');

        $options.each(function () {
          if (this.selected) {
            return;
          }

          $(this).remove();
        });
      };

      return Tags;
    });

    S2.define('select2/data/tokenizer', [
      'jquery'
    ], function ($) {
      function Tokenizer(decorated, $element, options) {
        var tokenizer = options.get('tokenizer');

        if (tokenizer !== undefined) {
          this.tokenizer = tokenizer;
        }

        decorated.call(this, $element, options);
      }

      Tokenizer.prototype.bind = function (decorated, container, $container) {
        decorated.call(this, container, $container);

        this.$search = container.dropdown.$search || container.selection.$search ||
          $container.find('.select2-search__field');
      };

      Tokenizer.prototype.query = function (decorated, params, callback) {
        var self = this;

        function createAndSelect(data) {
          // Normalize the data object so we can use it for checks
          var item = self._normalizeItem(data);

          // Check if the data object already exists as a tag
          // Select it if it doesn't
          var $existingOptions = self.$element.find('option').filter(function () {
            return $(this).val() === item.id;
          });

          // If an existing option wasn't found for it, create the option
          if (!$existingOptions.length) {
            var $option = self.option(item);
            $option.attr('data-select2-tag', true);

            self._removeOldTags();
            self.addOptions([$option]);
          }

          // Select the item, now that we know there is an option for it
          select(item);
        }

        function select(data) {
          self.trigger('select', {
            data: data
          });
        }

        params.term = params.term || '';

        var tokenData = this.tokenizer(params, this.options, createAndSelect);

        if (tokenData.term !== params.term) {
          // Replace the search term if we have the search box
          if (this.$search.length) {
            this.$search.val(tokenData.term);
            this.$search.trigger('focus');
          }

          params.term = tokenData.term;
        }

        decorated.call(this, params, callback);
      };

      Tokenizer.prototype.tokenizer = function (_, params, options, callback) {
        var separators = options.get('tokenSeparators') || [];
        var term = params.term;
        var i = 0;

        var createTag = this.createTag || function (params) {
          return {
            id: params.term,
            text: params.term
          };
        };

        while (i < term.length) {
          var termChar = term[i];

          if ($.inArray(termChar, separators) === -1) {
            i++;

            continue;
          }

          var part = term.substr(0, i);
          var partParams = $.extend({}, params, {
            term: part
          });

          var data = createTag(partParams);

          if (data == null) {
            i++;
            continue;
          }

          callback(data);

          // Reset the term to not include the tokenized portion
          term = term.substr(i + 1) || '';
          i = 0;
        }

        return {
          term: term
        };
      };

      return Tokenizer;
    });

    S2.define('select2/data/minimumInputLength', [

    ], function () {
      function MinimumInputLength(decorated, $e, options) {
        this.minimumInputLength = options.get('minimumInputLength');

        decorated.call(this, $e, options);
      }

      MinimumInputLength.prototype.query = function (decorated, params, callback) {
        params.term = params.term || '';

        if (params.term.length < this.minimumInputLength) {
          this.trigger('results:message', {
            message: 'inputTooShort',
            args: {
              minimum: this.minimumInputLength,
              input: params.term,
              params: params
            }
          });

          return;
        }

        decorated.call(this, params, callback);
      };

      return MinimumInputLength;
    });

    S2.define('select2/data/maximumInputLength', [

    ], function () {
      function MaximumInputLength(decorated, $e, options) {
        this.maximumInputLength = options.get('maximumInputLength');

        decorated.call(this, $e, options);
      }

      MaximumInputLength.prototype.query = function (decorated, params, callback) {
        params.term = params.term || '';

        if (this.maximumInputLength > 0 &&
          params.term.length > this.maximumInputLength) {
          this.trigger('results:message', {
            message: 'inputTooLong',
            args: {
              maximum: this.maximumInputLength,
              input: params.term,
              params: params
            }
          });

          return;
        }

        decorated.call(this, params, callback);
      };

      return MaximumInputLength;
    });

    S2.define('select2/data/maximumSelectionLength', [

    ], function () {
      function MaximumSelectionLength(decorated, $e, options) {
        this.maximumSelectionLength = options.get('maximumSelectionLength');

        decorated.call(this, $e, options);
      }

      MaximumSelectionLength.prototype.bind =
        function (decorated, container, $container) {
          var self = this;

          decorated.call(this, container, $container);

          container.on('select', function () {
            self._checkIfMaximumSelected();
          });
        };

      MaximumSelectionLength.prototype.query =
        function (decorated, params, callback) {
          var self = this;

          this._checkIfMaximumSelected(function () {
            decorated.call(self, params, callback);
          });
        };

      MaximumSelectionLength.prototype._checkIfMaximumSelected =
        function (_, successCallback) {
          var self = this;

          this.current(function (currentData) {
            var count = currentData != null ? currentData.length : 0;
            if (self.maximumSelectionLength > 0 &&
              count >= self.maximumSelectionLength) {
              self.trigger('results:message', {
                message: 'maximumSelected',
                args: {
                  maximum: self.maximumSelectionLength
                }
              });
              return;
            }

            if (successCallback) {
              successCallback();
            }
          });
        };

      return MaximumSelectionLength;
    });

    S2.define('select2/dropdown', [
      'jquery',
      './utils'
    ], function ($, Utils) {
      function Dropdown($element, options) {
        this.$element = $element;
        this.options = options;

        Dropdown.__super__.constructor.call(this);
      }

      Utils.Extend(Dropdown, Utils.Observable);

      Dropdown.prototype.render = function () {
        var $dropdown = $(
          '<span class="select2-dropdown">' +
          '<span class="select2-results"></span>' +
          '</span>'
        );

        $dropdown.attr('dir', this.options.get('dir'));

        this.$dropdown = $dropdown;

        return $dropdown;
      };

      Dropdown.prototype.bind = function () {
        // Should be implemented in subclasses
      };

      Dropdown.prototype.position = function ($dropdown, $container) {
        // Should be implemented in subclasses
      };

      Dropdown.prototype.destroy = function () {
        // Remove the dropdown from the DOM
        this.$dropdown.remove();
      };

      return Dropdown;
    });

    S2.define('select2/dropdown/search', [
      'jquery',
      '../utils'
    ], function ($, Utils) {
      function Search() { }

      Search.prototype.render = function (decorated) {
        var $rendered = decorated.call(this);

        var $search = $(
          '<span class="select2-search select2-search--dropdown">' +
          '<input class="select2-search__field" type="search" tabindex="-1"' +
          ' autocomplete="off" autocorrect="off" autocapitalize="none"' +
          ' spellcheck="false" role="searchbox" aria-autocomplete="list" />' +
          '</span>'
        );

        this.$searchContainer = $search;
        this.$search = $search.find('input');

        $rendered.prepend($search);

        return $rendered;
      };

      Search.prototype.bind = function (decorated, container, $container) {
        var self = this;

        var resultsId = container.id + '-results';

        decorated.call(this, container, $container);

        this.$search.on('keydown', function (evt) {
          self.trigger('keypress', evt);

          self._keyUpPrevented = evt.isDefaultPrevented();
        });

        // Workaround for browsers which do not support the `input` event
        // This will prevent double-triggering of events for browsers which support
        // both the `keyup` and `input` events.
        this.$search.on('input', function (evt) {
          // Unbind the duplicated `keyup` event
          $(this).off('keyup');
        });

        this.$search.on('keyup input', function (evt) {
          self.handleSearch(evt);
        });

        container.on('open', function () {
          self.$search.attr('tabindex', 0);
          self.$search.attr('aria-controls', resultsId);

          self.$search.trigger('focus');

          window.setTimeout(function () {
            self.$search.trigger('focus');
          }, 0);
        });

        container.on('close', function () {
          self.$search.attr('tabindex', -1);
          self.$search.removeAttr('aria-controls');
          self.$search.removeAttr('aria-activedescendant');

          self.$search.val('');
          self.$search.trigger('blur');
        });

        container.on('focus', function () {
          if (!container.isOpen()) {
            self.$search.trigger('focus');
          }
        });

        container.on('results:all', function (params) {
          if (params.query.term == null || params.query.term === '') {
            var showSearch = self.showSearch(params);

            if (showSearch) {
              self.$searchContainer.removeClass('select2-search--hide');
            } else {
              self.$searchContainer.addClass('select2-search--hide');
            }
          }
        });

        container.on('results:focus', function (params) {
          if (params.data._resultId) {
            self.$search.attr('aria-activedescendant', params.data._resultId);
          } else {
            self.$search.removeAttr('aria-activedescendant');
          }
        });
      };

      Search.prototype.handleSearch = function (evt) {
        if (!this._keyUpPrevented) {
          var input = this.$search.val();

          this.trigger('query', {
            term: input
          });
        }

        this._keyUpPrevented = false;
      };

      Search.prototype.showSearch = function (_, params) {
        return true;
      };

      return Search;
    });

    S2.define('select2/dropdown/hidePlaceholder', [

    ], function () {
      function HidePlaceholder(decorated, $element, options, dataAdapter) {
        this.placeholder = this.normalizePlaceholder(options.get('placeholder'));

        decorated.call(this, $element, options, dataAdapter);
      }

      HidePlaceholder.prototype.append = function (decorated, data) {
        data.results = this.removePlaceholder(data.results);

        decorated.call(this, data);
      };

      HidePlaceholder.prototype.normalizePlaceholder = function (_, placeholder) {
        if (typeof placeholder === 'string') {
          placeholder = {
            id: '',
            text: placeholder
          };
        }

        return placeholder;
      };

      HidePlaceholder.prototype.removePlaceholder = function (_, data) {
        var modifiedData = data.slice(0);

        for (var d = data.length - 1; d >= 0; d--) {
          var item = data[d];

          if (this.placeholder.id === item.id) {
            modifiedData.splice(d, 1);
          }
        }

        return modifiedData;
      };

      return HidePlaceholder;
    });

    S2.define('select2/dropdown/infiniteScroll', [
      'jquery'
    ], function ($) {
      function InfiniteScroll(decorated, $element, options, dataAdapter) {
        this.lastParams = {};

        decorated.call(this, $element, options, dataAdapter);

        this.$loadingMore = this.createLoadingMore();
        this.loading = false;
      }

      InfiniteScroll.prototype.append = function (decorated, data) {
        this.$loadingMore.remove();
        this.loading = false;

        decorated.call(this, data);

        if (this.showLoadingMore(data)) {
          this.$results.append(this.$loadingMore);
          this.loadMoreIfNeeded();
        }
      };

      InfiniteScroll.prototype.bind = function (decorated, container, $container) {
        var self = this;

        decorated.call(this, container, $container);

        container.on('query', function (params) {
          self.lastParams = params;
          self.loading = true;
        });

        container.on('query:append', function (params) {
          self.lastParams = params;
          self.loading = true;
        });

        this.$results.on('scroll', this.loadMoreIfNeeded.bind(this));
      };

      InfiniteScroll.prototype.loadMoreIfNeeded = function () {
        var isLoadMoreVisible = $.contains(
          document.documentElement,
          this.$loadingMore[0]
        );

        if (this.loading || !isLoadMoreVisible) {
          return;
        }

        var currentOffset = this.$results.offset().top +
          this.$results.outerHeight(false);
        var loadingMoreOffset = this.$loadingMore.offset().top +
          this.$loadingMore.outerHeight(false);

        if (currentOffset + 50 >= loadingMoreOffset) {
          this.loadMore();
        }
      };

      InfiniteScroll.prototype.loadMore = function () {
        this.loading = true;

        var params = $.extend({}, { page: 1 }, this.lastParams);

        params.page++;

        this.trigger('query:append', params);
      };

      InfiniteScroll.prototype.showLoadingMore = function (_, data) {
        return data.pagination && data.pagination.more;
      };

      InfiniteScroll.prototype.createLoadingMore = function () {
        var $option = $(
          '<li ' +
          'class="select2-results__option select2-results__option--load-more"' +
          'role="option" aria-disabled="true"></li>'
        );

        var message = this.options.get('translations').get('loadingMore');

        $option.html(message(this.lastParams));

        return $option;
      };

      return InfiniteScroll;
    });

    S2.define('select2/dropdown/attachBody', [
      'jquery',
      '../utils'
    ], function ($, Utils) {
      function AttachBody(decorated, $element, options) {
        this.$dropdownParent = $(options.get('dropdownParent') || document.body);

        decorated.call(this, $element, options);
      }

      AttachBody.prototype.bind = function (decorated, container, $container) {
        var self = this;

        decorated.call(this, container, $container);

        container.on('open', function () {
          self._showDropdown();
          self._attachPositioningHandler(container);

          // Must bind after the results handlers to ensure correct sizing
          self._bindContainerResultHandlers(container);
        });

        container.on('close', function () {
          self._hideDropdown();
          self._detachPositioningHandler(container);
        });

        this.$dropdownContainer.on('mousedown', function (evt) {
          evt.stopPropagation();
        });
      };

      AttachBody.prototype.destroy = function (decorated) {
        decorated.call(this);

        this.$dropdownContainer.remove();
      };

      AttachBody.prototype.position = function (decorated, $dropdown, $container) {
        // Clone all of the container classes
        $dropdown.attr('class', $container.attr('class'));

        $dropdown.removeClass('select2');
        $dropdown.addClass('select2-container--open');

        $dropdown.css({
          position: 'absolute',
          top: -999999
        });

        this.$container = $container;
      };

      AttachBody.prototype.render = function (decorated) {
        var $container = $('<span></span>');

        var $dropdown = decorated.call(this);
        $container.append($dropdown);

        this.$dropdownContainer = $container;

        return $container;
      };

      AttachBody.prototype._hideDropdown = function (decorated) {
        this.$dropdownContainer.detach();
      };

      AttachBody.prototype._bindContainerResultHandlers =
        function (decorated, container) {

          // These should only be bound once
          if (this._containerResultsHandlersBound) {
            return;
          }

          var self = this;

          container.on('results:all', function () {
            self._positionDropdown();
            self._resizeDropdown();
          });

          container.on('results:append', function () {
            self._positionDropdown();
            self._resizeDropdown();
          });

          container.on('results:message', function () {
            self._positionDropdown();
            self._resizeDropdown();
          });

          container.on('select', function () {
            self._positionDropdown();
            self._resizeDropdown();
          });

          container.on('unselect', function () {
            self._positionDropdown();
            self._resizeDropdown();
          });

          this._containerResultsHandlersBound = true;
        };

      AttachBody.prototype._attachPositioningHandler =
        function (decorated, container) {
          var self = this;

          var scrollEvent = 'scroll.select2.' + container.id;
          var resizeEvent = 'resize.select2.' + container.id;
          var orientationEvent = 'orientationchange.select2.' + container.id;

          var $watchers = this.$container.parents().filter(Utils.hasScroll);
          $watchers.each(function () {
            Utils.StoreData(this, 'select2-scroll-position', {
              x: $(this).scrollLeft(),
              y: $(this).scrollTop()
            });
          });

          $watchers.on(scrollEvent, function (ev) {
            var position = Utils.GetData(this, 'select2-scroll-position');
            $(this).scrollTop(position.y);
          });

          $(window).on(scrollEvent + ' ' + resizeEvent + ' ' + orientationEvent,
            function (e) {
              self._positionDropdown();
              self._resizeDropdown();
            });
        };

      AttachBody.prototype._detachPositioningHandler =
        function (decorated, container) {
          var scrollEvent = 'scroll.select2.' + container.id;
          var resizeEvent = 'resize.select2.' + container.id;
          var orientationEvent = 'orientationchange.select2.' + container.id;

          var $watchers = this.$container.parents().filter(Utils.hasScroll);
          $watchers.off(scrollEvent);

          $(window).off(scrollEvent + ' ' + resizeEvent + ' ' + orientationEvent);
        };

      AttachBody.prototype._positionDropdown = function () {
        var $window = $(window);

        var isCurrentlyAbove = this.$dropdown.hasClass('select2-dropdown--above');
        var isCurrentlyBelow = this.$dropdown.hasClass('select2-dropdown--below');

        var newDirection = null;

        var offset = this.$container.offset();

        offset.bottom = offset.top + this.$container.outerHeight(false);

        var container = {
          height: this.$container.outerHeight(false)
        };

        container.top = offset.top;
        container.bottom = offset.top + container.height;

        var dropdown = {
          height: this.$dropdown.outerHeight(false)
        };

        var viewport = {
          top: $window.scrollTop(),
          bottom: $window.scrollTop() + $window.height()
        };

        var enoughRoomAbove = viewport.top < (offset.top - dropdown.height);
        var enoughRoomBelow = viewport.bottom > (offset.bottom + dropdown.height);

        var css = {
          left: offset.left,
          top: container.bottom
        };

        // Determine what the parent element is to use for calculating the offset
        var $offsetParent = this.$dropdownParent;

        // For statically positioned elements, we need to get the element
        // that is determining the offset
        if ($offsetParent.css('position') === 'static') {
          $offsetParent = $offsetParent.offsetParent();
        }

        var parentOffset = {
          top: 0,
          left: 0
        };

        if (
          $.contains(document.body, $offsetParent[0]) ||
          $offsetParent[0].isConnected
        ) {
          parentOffset = $offsetParent.offset();
        }

        css.top -= parentOffset.top;
        css.left -= parentOffset.left;

        if (!isCurrentlyAbove && !isCurrentlyBelow) {
          newDirection = 'below';
        }

        if (!enoughRoomBelow && enoughRoomAbove && !isCurrentlyAbove) {
          newDirection = 'above';
        } else if (!enoughRoomAbove && enoughRoomBelow && isCurrentlyAbove) {
          newDirection = 'below';
        }

        if (newDirection == 'above' ||
          (isCurrentlyAbove && newDirection !== 'below')) {
          css.top = container.top - parentOffset.top - dropdown.height;
        }

        if (newDirection != null) {
          this.$dropdown
            .removeClass('select2-dropdown--below select2-dropdown--above')
            .addClass('select2-dropdown--' + newDirection);
          this.$container
            .removeClass('select2-container--below select2-container--above')
            .addClass('select2-container--' + newDirection);
        }

        this.$dropdownContainer.css(css);
      };

      AttachBody.prototype._resizeDropdown = function () {
        var css = {
          width: this.$container.outerWidth(false) + 'px'
        };

        if (this.options.get('dropdownAutoWidth')) {
          css.minWidth = css.width;
          css.position = 'relative';
          css.width = 'auto';
        }

        this.$dropdown.css(css);
      };

      AttachBody.prototype._showDropdown = function (decorated) {
        this.$dropdownContainer.appendTo(this.$dropdownParent);

        this._positionDropdown();
        this._resizeDropdown();
      };

      return AttachBody;
    });

    S2.define('select2/dropdown/minimumResultsForSearch', [

    ], function () {
      function countResults(data) {
        var count = 0;

        for (var d = 0; d < data.length; d++) {
          var item = data[d];

          if (item.children) {
            count += countResults(item.children);
          } else {
            count++;
          }
        }

        return count;
      }

      function MinimumResultsForSearch(decorated, $element, options, dataAdapter) {
        this.minimumResultsForSearch = options.get('minimumResultsForSearch');

        if (this.minimumResultsForSearch < 0) {
          this.minimumResultsForSearch = Infinity;
        }

        decorated.call(this, $element, options, dataAdapter);
      }

      MinimumResultsForSearch.prototype.showSearch = function (decorated, params) {
        if (countResults(params.data.results) < this.minimumResultsForSearch) {
          return false;
        }

        return decorated.call(this, params);
      };

      return MinimumResultsForSearch;
    });

    S2.define('select2/dropdown/selectOnClose', [
      '../utils'
    ], function (Utils) {
      function SelectOnClose() { }

      SelectOnClose.prototype.bind = function (decorated, container, $container) {
        var self = this;

        decorated.call(this, container, $container);

        container.on('close', function (params) {
          self._handleSelectOnClose(params);
        });
      };

      SelectOnClose.prototype._handleSelectOnClose = function (_, params) {
        if (params && params.originalSelect2Event != null) {
          var event = params.originalSelect2Event;

          // Don't select an item if the close event was triggered from a select or
          // unselect event
          if (event._type === 'select' || event._type === 'unselect') {
            return;
          }
        }

        var $highlightedResults = this.getHighlightedResults();

        // Only select highlighted results
        if ($highlightedResults.length < 1) {
          return;
        }

        var data = Utils.GetData($highlightedResults[0], 'data');

        // Don't re-select already selected resulte
        if (
          (data.element != null && data.element.selected) ||
          (data.element == null && data.selected)
        ) {
          return;
        }

        this.trigger('select', {
          data: data
        });
      };

      return SelectOnClose;
    });

    S2.define('select2/dropdown/closeOnSelect', [

    ], function () {
      function CloseOnSelect() { }

      CloseOnSelect.prototype.bind = function (decorated, container, $container) {
        var self = this;

        decorated.call(this, container, $container);

        container.on('select', function (evt) {
          self._selectTriggered(evt);
        });

        container.on('unselect', function (evt) {
          self._selectTriggered(evt);
        });
      };

      CloseOnSelect.prototype._selectTriggered = function (_, evt) {
        var originalEvent = evt.originalEvent;

        // Don't close if the control key is being held
        if (originalEvent && (originalEvent.ctrlKey || originalEvent.metaKey)) {
          return;
        }

        this.trigger('close', {
          originalEvent: originalEvent,
          originalSelect2Event: evt
        });
      };

      return CloseOnSelect;
    });

    S2.define('select2/i18n/en', [], function () {
      // English
      return {
        errorLoading: function () {
          return 'The results could not be loaded.';
        },
        inputTooLong: function (args) {
          var overChars = args.input.length - args.maximum;

          var message = 'Please delete ' + overChars + ' character';

          if (overChars != 1) {
            message += 's';
          }

          return message;
        },
        inputTooShort: function (args) {
          var remainingChars = args.minimum - args.input.length;

          var message = 'Please enter ' + remainingChars + ' or more characters';

          return message;
        },
        loadingMore: function () {
          return 'Loading more results…';
        },
        maximumSelected: function (args) {
          var message = 'You can only select ' + args.maximum + ' item';

          if (args.maximum != 1) {
            message += 's';
          }

          return message;
        },
        noResults: function () {
          return 'No results found';
        },
        searching: function () {
          return 'Searching…';
        },
        removeAllItems: function () {
          return 'Remove all items';
        }
      };
    });

    S2.define('select2/defaults', [
      'jquery',
      'require',

      './results',

      './selection/single',
      './selection/multiple',
      './selection/placeholder',
      './selection/allowClear',
      './selection/search',
      './selection/eventRelay',

      './utils',
      './translation',
      './diacritics',

      './data/select',
      './data/array',
      './data/ajax',
      './data/tags',
      './data/tokenizer',
      './data/minimumInputLength',
      './data/maximumInputLength',
      './data/maximumSelectionLength',

      './dropdown',
      './dropdown/search',
      './dropdown/hidePlaceholder',
      './dropdown/infiniteScroll',
      './dropdown/attachBody',
      './dropdown/minimumResultsForSearch',
      './dropdown/selectOnClose',
      './dropdown/closeOnSelect',

      './i18n/en'
    ], function ($, require,

      ResultsList,

      SingleSelection, MultipleSelection, Placeholder, AllowClear,
      SelectionSearch, EventRelay,

      Utils, Translation, DIACRITICS,

      SelectData, ArrayData, AjaxData, Tags, Tokenizer,
      MinimumInputLength, MaximumInputLength, MaximumSelectionLength,

      Dropdown, DropdownSearch, HidePlaceholder, InfiniteScroll,
      AttachBody, MinimumResultsForSearch, SelectOnClose, CloseOnSelect,

      EnglishTranslation) {
      function Defaults() {
        this.reset();
      }

      Defaults.prototype.apply = function (options) {
        options = $.extend(true, {}, this.defaults, options);

        if (options.dataAdapter == null) {
          if (options.ajax != null) {
            options.dataAdapter = AjaxData;
          } else if (options.data != null) {
            options.dataAdapter = ArrayData;
          } else {
            options.dataAdapter = SelectData;
          }

          if (options.minimumInputLength > 0) {
            options.dataAdapter = Utils.Decorate(
              options.dataAdapter,
              MinimumInputLength
            );
          }

          if (options.maximumInputLength > 0) {
            options.dataAdapter = Utils.Decorate(
              options.dataAdapter,
              MaximumInputLength
            );
          }

          if (options.maximumSelectionLength > 0) {
            options.dataAdapter = Utils.Decorate(
              options.dataAdapter,
              MaximumSelectionLength
            );
          }

          if (options.tags) {
            options.dataAdapter = Utils.Decorate(options.dataAdapter, Tags);
          }

          if (options.tokenSeparators != null || options.tokenizer != null) {
            options.dataAdapter = Utils.Decorate(
              options.dataAdapter,
              Tokenizer
            );
          }

          if (options.query != null) {
            var Query = require(options.amdBase + 'compat/query');

            options.dataAdapter = Utils.Decorate(
              options.dataAdapter,
              Query
            );
          }

          if (options.initSelection != null) {
            var InitSelection = require(options.amdBase + 'compat/initSelection');

            options.dataAdapter = Utils.Decorate(
              options.dataAdapter,
              InitSelection
            );
          }
        }

        if (options.resultsAdapter == null) {
          options.resultsAdapter = ResultsList;

          if (options.ajax != null) {
            options.resultsAdapter = Utils.Decorate(
              options.resultsAdapter,
              InfiniteScroll
            );
          }

          if (options.placeholder != null) {
            options.resultsAdapter = Utils.Decorate(
              options.resultsAdapter,
              HidePlaceholder
            );
          }

          if (options.selectOnClose) {
            options.resultsAdapter = Utils.Decorate(
              options.resultsAdapter,
              SelectOnClose
            );
          }
        }

        if (options.dropdownAdapter == null) {
          if (options.multiple) {
            options.dropdownAdapter = Dropdown;
          } else {
            var SearchableDropdown = Utils.Decorate(Dropdown, DropdownSearch);

            options.dropdownAdapter = SearchableDropdown;
          }

          if (options.minimumResultsForSearch !== 0) {
            options.dropdownAdapter = Utils.Decorate(
              options.dropdownAdapter,
              MinimumResultsForSearch
            );
          }

          if (options.closeOnSelect) {
            options.dropdownAdapter = Utils.Decorate(
              options.dropdownAdapter,
              CloseOnSelect
            );
          }

          if (
            options.dropdownCssClass != null ||
            options.dropdownCss != null ||
            options.adaptDropdownCssClass != null
          ) {
            var DropdownCSS = require(options.amdBase + 'compat/dropdownCss');

            options.dropdownAdapter = Utils.Decorate(
              options.dropdownAdapter,
              DropdownCSS
            );
          }

          options.dropdownAdapter = Utils.Decorate(
            options.dropdownAdapter,
            AttachBody
          );
        }

        if (options.selectionAdapter == null) {
          if (options.multiple) {
            options.selectionAdapter = MultipleSelection;
          } else {
            options.selectionAdapter = SingleSelection;
          }

          // Add the placeholder mixin if a placeholder was specified
          if (options.placeholder != null) {
            options.selectionAdapter = Utils.Decorate(
              options.selectionAdapter,
              Placeholder
            );
          }

          if (options.allowClear) {
            options.selectionAdapter = Utils.Decorate(
              options.selectionAdapter,
              AllowClear
            );
          }

          if (options.multiple) {
            options.selectionAdapter = Utils.Decorate(
              options.selectionAdapter,
              SelectionSearch
            );
          }

          if (
            options.containerCssClass != null ||
            options.containerCss != null ||
            options.adaptContainerCssClass != null
          ) {
            var ContainerCSS = require(options.amdBase + 'compat/containerCss');

            options.selectionAdapter = Utils.Decorate(
              options.selectionAdapter,
              ContainerCSS
            );
          }

          options.selectionAdapter = Utils.Decorate(
            options.selectionAdapter,
            EventRelay
          );
        }

        // If the defaults were not previously applied from an element, it is
        // possible for the language option to have not been resolved
        options.language = this._resolveLanguage(options.language);

        // Always fall back to English since it will always be complete
        options.language.push('en');

        var uniqueLanguages = [];

        for (var l = 0; l < options.language.length; l++) {
          var language = options.language[l];

          if (uniqueLanguages.indexOf(language) === -1) {
            uniqueLanguages.push(language);
          }
        }

        options.language = uniqueLanguages;

        options.translations = this._processTranslations(
          options.language,
          options.debug
        );

        return options;
      };

      Defaults.prototype.reset = function () {
        function stripDiacritics(text) {
          // Used 'uni range + named function' from http://jsperf.com/diacritics/18
          function match(a) {
            return DIACRITICS[a] || a;
          }

          return text.replace(/[^\u0000-\u007E]/g, match);
        }

        function matcher(params, data) {
          // Always return the object if there is nothing to compare
          if ($.trim(params.term) === '') {
            return data;
          }

          // Do a recursive check for options with children
          if (data.children && data.children.length > 0) {
            // Clone the data object if there are children
            // This is required as we modify the object to remove any non-matches
            var match = $.extend(true, {}, data);

            // Check each child of the option
            for (var c = data.children.length - 1; c >= 0; c--) {
              var child = data.children[c];

              var matches = matcher(params, child);

              // If there wasn't a match, remove the object in the array
              if (matches == null) {
                match.children.splice(c, 1);
              }
            }

            // If any children matched, return the new object
            if (match.children.length > 0) {
              return match;
            }

            // If there were no matching children, check just the plain object
            return matcher(params, match);
          }

          var original = stripDiacritics(data.text).toUpperCase();
          var term = stripDiacritics(params.term).toUpperCase();

          // Check if the text contains the term
          if (original.indexOf(term) > -1) {
            return data;
          }

          // If it doesn't contain the term, don't return anything
          return null;
        }

        this.defaults = {
          amdBase: './',
          amdLanguageBase: './i18n/',
          closeOnSelect: true,
          debug: false,
          dropdownAutoWidth: false,
          escapeMarkup: Utils.escapeMarkup,
          language: {},
          matcher: matcher,
          minimumInputLength: 0,
          maximumInputLength: 0,
          maximumSelectionLength: 0,
          minimumResultsForSearch: 0,
          selectOnClose: false,
          scrollAfterSelect: false,
          sorter: function (data) {
            return data;
          },
          templateResult: function (result) {
            return result.text;
          },
          templateSelection: function (selection) {
            return selection.text;
          },
          theme: 'default',
          width: 'resolve'
        };
      };

      Defaults.prototype.applyFromElement = function (options, $element) {
        var optionLanguage = options.language;
        var defaultLanguage = this.defaults.language;
        var elementLanguage = $element.prop('lang');
        var parentLanguage = $element.closest('[lang]').prop('lang');

        var languages = Array.prototype.concat.call(
          this._resolveLanguage(elementLanguage),
          this._resolveLanguage(optionLanguage),
          this._resolveLanguage(defaultLanguage),
          this._resolveLanguage(parentLanguage)
        );

        options.language = languages;

        return options;
      };

      Defaults.prototype._resolveLanguage = function (language) {
        if (!language) {
          return [];
        }

        if ($.isEmptyObject(language)) {
          return [];
        }

        if ($.isPlainObject(language)) {
          return [language];
        }

        var languages;

        if (!$.isArray(language)) {
          languages = [language];
        } else {
          languages = language;
        }

        var resolvedLanguages = [];

        for (var l = 0; l < languages.length; l++) {
          resolvedLanguages.push(languages[l]);

          if (typeof languages[l] === 'string' && languages[l].indexOf('-') > 0) {
            // Extract the region information if it is included
            var languageParts = languages[l].split('-');
            var baseLanguage = languageParts[0];

            resolvedLanguages.push(baseLanguage);
          }
        }

        return resolvedLanguages;
      };

      Defaults.prototype._processTranslations = function (languages, debug) {
        var translations = new Translation();

        for (var l = 0; l < languages.length; l++) {
          var languageData = new Translation();

          var language = languages[l];

          if (typeof language === 'string') {
            try {
              // Try to load it with the original name
              languageData = Translation.loadPath(language);
            } catch (e) {
              try {
                // If we couldn't load it, check if it wasn't the full path
                language = this.defaults.amdLanguageBase + language;
                languageData = Translation.loadPath(language);
              } catch (ex) {
                // The translation could not be loaded at all. Sometimes this is
                // because of a configuration problem, other times this can be
                // because of how Select2 helps load all possible translation files
                if (debug && window.console && console.warn) {
                  console.warn(
                    'Select2: The language file for "' + language + '" could ' +
                    'not be automatically loaded. A fallback will be used instead.'
                  );
                }
              }
            }
          } else if ($.isPlainObject(language)) {
            languageData = new Translation(language);
          } else {
            languageData = language;
          }

          translations.extend(languageData);
        }

        return translations;
      };

      Defaults.prototype.set = function (key, value) {
        var camelKey = $.camelCase(key);

        var data = {};
        data[camelKey] = value;

        var convertedData = Utils._convertData(data);

        $.extend(true, this.defaults, convertedData);
      };

      var defaults = new Defaults();

      return defaults;
    });

    S2.define('select2/options', [
      'require',
      'jquery',
      './defaults',
      './utils'
    ], function (require, $, Defaults, Utils) {
      function Options(options, $element) {
        this.options = options;

        if ($element != null) {
          this.fromElement($element);
        }

        if ($element != null) {
          this.options = Defaults.applyFromElement(this.options, $element);
        }

        this.options = Defaults.apply(this.options);

        if ($element && $element.is('input')) {
          var InputCompat = require(this.get('amdBase') + 'compat/inputData');

          this.options.dataAdapter = Utils.Decorate(
            this.options.dataAdapter,
            InputCompat
          );
        }
      }

      Options.prototype.fromElement = function ($e) {
        var excludedData = ['select2'];

        if (this.options.multiple == null) {
          this.options.multiple = $e.prop('multiple');
        }

        if (this.options.disabled == null) {
          this.options.disabled = $e.prop('disabled');
        }

        if (this.options.dir == null) {
          if ($e.prop('dir')) {
            this.options.dir = $e.prop('dir');
          } else if ($e.closest('[dir]').prop('dir')) {
            this.options.dir = $e.closest('[dir]').prop('dir');
          } else {
            this.options.dir = 'ltr';
          }
        }

        $e.prop('disabled', this.options.disabled);
        $e.prop('multiple', this.options.multiple);

        if (Utils.GetData($e[0], 'select2Tags')) {
          if (this.options.debug && window.console && console.warn) {
            console.warn(
              'Select2: The `data-select2-tags` attribute has been changed to ' +
              'use the `data-data` and `data-tags="true"` attributes and will be ' +
              'removed in future versions of Select2.'
            );
          }

          Utils.StoreData($e[0], 'data', Utils.GetData($e[0], 'select2Tags'));
          Utils.StoreData($e[0], 'tags', true);
        }

        if (Utils.GetData($e[0], 'ajaxUrl')) {
          if (this.options.debug && window.console && console.warn) {
            console.warn(
              'Select2: The `data-ajax-url` attribute has been changed to ' +
              '`data-ajax--url` and support for the old attribute will be removed' +
              ' in future versions of Select2.'
            );
          }

          $e.attr('ajax--url', Utils.GetData($e[0], 'ajaxUrl'));
          Utils.StoreData($e[0], 'ajax-Url', Utils.GetData($e[0], 'ajaxUrl'));
        }

        var dataset = {};

        function upperCaseLetter(_, letter) {
          return letter.toUpperCase();
        }

        // Pre-load all of the attributes which are prefixed with `data-`
        for (var attr = 0; attr < $e[0].attributes.length; attr++) {
          var attributeName = $e[0].attributes[attr].name;
          var prefix = 'data-';

          if (attributeName.substr(0, prefix.length) == prefix) {
            // Get the contents of the attribute after `data-`
            var dataName = attributeName.substring(prefix.length);

            // Get the data contents from the consistent source
            // This is more than likely the jQuery data helper
            var dataValue = Utils.GetData($e[0], dataName);

            // camelCase the attribute name to match the spec
            var camelDataName = dataName.replace(/-([a-z])/g, upperCaseLetter);

            // Store the data attribute contents into the dataset since
            dataset[camelDataName] = dataValue;
          }
        }

        // Prefer the element's `dataset` attribute if it exists
        // jQuery 1.x does not correctly handle data attributes with multiple dashes
        if ($.fn.jquery && $.fn.jquery.substr(0, 2) == '1.' && $e[0].dataset) {
          dataset = $.extend(true, {}, $e[0].dataset, dataset);
        }

        // Prefer our internal data cache if it exists
        var data = $.extend(true, {}, Utils.GetData($e[0]), dataset);

        data = Utils._convertData(data);

        for (var key in data) {
          if ($.inArray(key, excludedData) > -1) {
            continue;
          }

          if ($.isPlainObject(this.options[key])) {
            $.extend(this.options[key], data[key]);
          } else {
            this.options[key] = data[key];
          }
        }

        return this;
      };

      Options.prototype.get = function (key) {
        return this.options[key];
      };

      Options.prototype.set = function (key, val) {
        this.options[key] = val;
      };

      return Options;
    });

    S2.define('select2/core', [
      'jquery',
      './options',
      './utils',
      './keys'
    ], function ($, Options, Utils, KEYS) {
      var Select2 = function ($element, options) {
        if (Utils.GetData($element[0], 'select2') != null) {
          Utils.GetData($element[0], 'select2').destroy();
        }

        this.$element = $element;

        this.id = this._generateId($element);

        options = options || {};

        this.options = new Options(options, $element);

        Select2.__super__.constructor.call(this);

        // Set up the tabindex

        var tabindex = $element.attr('tabindex') || 0;
        Utils.StoreData($element[0], 'old-tabindex', tabindex);
        $element.attr('tabindex', '-1');

        // Set up containers and adapters

        var DataAdapter = this.options.get('dataAdapter');
        this.dataAdapter = new DataAdapter($element, this.options);

        var $container = this.render();

        this._placeContainer($container);

        var SelectionAdapter = this.options.get('selectionAdapter');
        this.selection = new SelectionAdapter($element, this.options);
        this.$selection = this.selection.render();

        this.selection.position(this.$selection, $container);

        var DropdownAdapter = this.options.get('dropdownAdapter');
        this.dropdown = new DropdownAdapter($element, this.options);
        this.$dropdown = this.dropdown.render();

        this.dropdown.position(this.$dropdown, $container);

        var ResultsAdapter = this.options.get('resultsAdapter');
        this.results = new ResultsAdapter($element, this.options, this.dataAdapter);
        this.$results = this.results.render();

        this.results.position(this.$results, this.$dropdown);

        // Bind events

        var self = this;

        // Bind the container to all of the adapters
        this._bindAdapters();

        // Register any DOM event handlers
        this._registerDomEvents();

        // Register any internal event handlers
        this._registerDataEvents();
        this._registerSelectionEvents();
        this._registerDropdownEvents();
        this._registerResultsEvents();
        this._registerEvents();

        // Set the initial state
        this.dataAdapter.current(function (initialData) {
          self.trigger('selection:update', {
            data: initialData
          });
        });

        // Hide the original select
        $element.addClass('select2-hidden-accessible');
        $element.attr('aria-hidden', 'true');

        // Synchronize any monitored attributes
        this._syncAttributes();

        Utils.StoreData($element[0], 'select2', this);

        // Ensure backwards compatibility with $element.data('select2').
        $element.data('select2', this);
      };

      Utils.Extend(Select2, Utils.Observable);

      Select2.prototype._generateId = function ($element) {
        var id = '';

        if ($element.attr('id') != null) {
          id = $element.attr('id');
        } else if ($element.attr('name') != null) {
          id = $element.attr('name') + '-' + Utils.generateChars(2);
        } else {
          id = Utils.generateChars(4);
        }

        id = id.replace(/(:|\.|\[|\]|,)/g, '');
        id = 'select2-' + id;

        return id;
      };

      Select2.prototype._placeContainer = function ($container) {
        $container.insertAfter(this.$element);

        var width = this._resolveWidth(this.$element, this.options.get('width'));

        if (width != null) {
          $container.css('width', width);
        }
      };

      Select2.prototype._resolveWidth = function ($element, method) {
        var WIDTH = /^width:(([-+]?([0-9]*\.)?[0-9]+)(px|em|ex|%|in|cm|mm|pt|pc))/i;

        if (method == 'resolve') {
          var styleWidth = this._resolveWidth($element, 'style');

          if (styleWidth != null) {
            return styleWidth;
          }

          return this._resolveWidth($element, 'element');
        }

        if (method == 'element') {
          var elementWidth = $element.outerWidth(false);

          if (elementWidth <= 0) {
            return 'auto';
          }

          return elementWidth + 'px';
        }

        if (method == 'style') {
          var style = $element.attr('style');

          if (typeof (style) !== 'string') {
            return null;
          }

          var attrs = style.split(';');

          for (var i = 0, l = attrs.length; i < l; i = i + 1) {
            var attr = attrs[i].replace(/\s/g, '');
            var matches = attr.match(WIDTH);

            if (matches !== null && matches.length >= 1) {
              return matches[1];
            }
          }

          return null;
        }

        if (method == 'computedstyle') {
          var computedStyle = window.getComputedStyle($element[0]);

          return computedStyle.width;
        }

        return method;
      };

      Select2.prototype._bindAdapters = function () {
        this.dataAdapter.bind(this, this.$container);
        this.selection.bind(this, this.$container);

        this.dropdown.bind(this, this.$container);
        this.results.bind(this, this.$container);
      };

      Select2.prototype._registerDomEvents = function () {
        var self = this;

        this.$element.on('change.select2', function () {
          self.dataAdapter.current(function (data) {
            self.trigger('selection:update', {
              data: data
            });
          });
        });

        this.$element.on('focus.select2', function (evt) {
          self.trigger('focus', evt);
        });

        this._syncA = Utils.bind(this._syncAttributes, this);
        this._syncS = Utils.bind(this._syncSubtree, this);

        if (this.$element[0].attachEvent) {
          this.$element[0].attachEvent('onpropertychange', this._syncA);
        }

        var observer = window.MutationObserver ||
          window.WebKitMutationObserver ||
          window.MozMutationObserver
          ;

        if (observer != null) {
          this._observer = new observer(function (mutations) {
            self._syncA();
            self._syncS(null, mutations);
          });
          this._observer.observe(this.$element[0], {
            attributes: true,
            childList: true,
            subtree: false
          });
        } else if (this.$element[0].addEventListener) {
          this.$element[0].addEventListener(
            'DOMAttrModified',
            self._syncA,
            false
          );
          this.$element[0].addEventListener(
            'DOMNodeInserted',
            self._syncS,
            false
          );
          this.$element[0].addEventListener(
            'DOMNodeRemoved',
            self._syncS,
            false
          );
        }
      };

      Select2.prototype._registerDataEvents = function () {
        var self = this;

        this.dataAdapter.on('*', function (name, params) {
          self.trigger(name, params);
        });
      };

      Select2.prototype._registerSelectionEvents = function () {
        var self = this;
        var nonRelayEvents = ['toggle', 'focus'];

        this.selection.on('toggle', function () {
          self.toggleDropdown();
        });

        this.selection.on('focus', function (params) {
          self.focus(params);
        });

        this.selection.on('*', function (name, params) {
          if ($.inArray(name, nonRelayEvents) !== -1) {
            return;
          }

          self.trigger(name, params);
        });
      };

      Select2.prototype._registerDropdownEvents = function () {
        var self = this;

        this.dropdown.on('*', function (name, params) {
          self.trigger(name, params);
        });
      };

      Select2.prototype._registerResultsEvents = function () {
        var self = this;

        this.results.on('*', function (name, params) {
          self.trigger(name, params);
        });
      };

      Select2.prototype._registerEvents = function () {
        var self = this;

        this.on('open', function () {
          self.$container.addClass('select2-container--open');
        });

        this.on('close', function () {
          self.$container.removeClass('select2-container--open');
        });

        this.on('enable', function () {
          self.$container.removeClass('select2-container--disabled');
        });

        this.on('disable', function () {
          self.$container.addClass('select2-container--disabled');
        });

        this.on('blur', function () {
          self.$container.removeClass('select2-container--focus');
        });

        this.on('query', function (params) {
          if (!self.isOpen()) {
            self.trigger('open', {});
          }

          this.dataAdapter.query(params, function (data) {
            self.trigger('results:all', {
              data: data,
              query: params
            });
          });
        });

        this.on('query:append', function (params) {
          this.dataAdapter.query(params, function (data) {
            self.trigger('results:append', {
              data: data,
              query: params
            });
          });
        });

        this.on('keypress', function (evt) {
          var key = evt.which;

          if (self.isOpen()) {
            if (key === KEYS.ESC || key === KEYS.TAB ||
              (key === KEYS.UP && evt.altKey)) {
              self.close(evt);

              evt.preventDefault();
            } else if (key === KEYS.ENTER) {
              self.trigger('results:select', {});

              evt.preventDefault();
            } else if ((key === KEYS.SPACE && evt.ctrlKey)) {
              self.trigger('results:toggle', {});

              evt.preventDefault();
            } else if (key === KEYS.UP) {
              self.trigger('results:previous', {});

              evt.preventDefault();
            } else if (key === KEYS.DOWN) {
              self.trigger('results:next', {});

              evt.preventDefault();
            }
          } else {
            if (key === KEYS.ENTER || key === KEYS.SPACE ||
              (key === KEYS.DOWN && evt.altKey)) {
              self.open();

              evt.preventDefault();
            }
          }
        });
      };

      Select2.prototype._syncAttributes = function () {
        this.options.set('disabled', this.$element.prop('disabled'));

        if (this.isDisabled()) {
          if (this.isOpen()) {
            this.close();
          }

          this.trigger('disable', {});
        } else {
          this.trigger('enable', {});
        }
      };

      Select2.prototype._isChangeMutation = function (evt, mutations) {
        var changed = false;
        var self = this;

        // Ignore any mutation events raised for elements that aren't options or
        // optgroups. This handles the case when the select element is destroyed
        if (
          evt && evt.target && (
            evt.target.nodeName !== 'OPTION' && evt.target.nodeName !== 'OPTGROUP'
          )
        ) {
          return;
        }

        if (!mutations) {
          // If mutation events aren't supported, then we can only assume that the
          // change affected the selections
          changed = true;
        } else if (mutations.addedNodes && mutations.addedNodes.length > 0) {
          for (var n = 0; n < mutations.addedNodes.length; n++) {
            var node = mutations.addedNodes[n];

            if (node.selected) {
              changed = true;
            }
          }
        } else if (mutations.removedNodes && mutations.removedNodes.length > 0) {
          changed = true;
        } else if ($.isArray(mutations)) {
          $.each(mutations, function (evt, mutation) {
            if (self._isChangeMutation(evt, mutation)) {
              // We've found a change mutation.
              // Let's escape from the loop and continue
              changed = true;
              return false;
            }
          });
        }
        return changed;
      };

      Select2.prototype._syncSubtree = function (evt, mutations) {
        var changed = this._isChangeMutation(evt, mutations);
        var self = this;

        // Only re-pull the data if we think there is a change
        if (changed) {
          this.dataAdapter.current(function (currentData) {
            self.trigger('selection:update', {
              data: currentData
            });
          });
        }
      };

      /**
       * Override the trigger method to automatically trigger pre-events when
       * there are events that can be prevented.
       */
      Select2.prototype.trigger = function (name, args) {
        var actualTrigger = Select2.__super__.trigger;
        var preTriggerMap = {
          'open': 'opening',
          'close': 'closing',
          'select': 'selecting',
          'unselect': 'unselecting',
          'clear': 'clearing'
        };

        if (args === undefined) {
          args = {};
        }

        if (name in preTriggerMap) {
          var preTriggerName = preTriggerMap[name];
          var preTriggerArgs = {
            prevented: false,
            name: name,
            args: args
          };

          actualTrigger.call(this, preTriggerName, preTriggerArgs);

          if (preTriggerArgs.prevented) {
            args.prevented = true;

            return;
          }
        }

        actualTrigger.call(this, name, args);
      };

      Select2.prototype.toggleDropdown = function () {
        if (this.isDisabled()) {
          return;
        }

        if (this.isOpen()) {
          this.close();
        } else {
          this.open();
        }
      };

      Select2.prototype.open = function () {
        if (this.isOpen()) {
          return;
        }

        if (this.isDisabled()) {
          return;
        }

        this.trigger('query', {});
      };

      Select2.prototype.close = function (evt) {
        if (!this.isOpen()) {
          return;
        }

        this.trigger('close', { originalEvent: evt });
      };

      /**
       * Helper method to abstract the "enabled" (not "disabled") state of this
       * object.
       *
       * @return {true} if the instance is not disabled.
       * @return {false} if the instance is disabled.
       */
      Select2.prototype.isEnabled = function () {
        return !this.isDisabled();
      };

      /**
       * Helper method to abstract the "disabled" state of this object.
       *
       * @return {true} if the disabled option is true.
       * @return {false} if the disabled option is false.
       */
      Select2.prototype.isDisabled = function () {
        return this.options.get('disabled');
      };

      Select2.prototype.isOpen = function () {
        return this.$container.hasClass('select2-container--open');
      };

      Select2.prototype.hasFocus = function () {
        return this.$container.hasClass('select2-container--focus');
      };

      Select2.prototype.focus = function (data) {
        // No need to re-trigger focus events if we are already focused
        if (this.hasFocus()) {
          return;
        }

        this.$container.addClass('select2-container--focus');
        this.trigger('focus', {});
      };

      Select2.prototype.enable = function (args) {
        if (this.options.get('debug') && window.console && console.warn) {
          console.warn(
            'Select2: The `select2("enable")` method has been deprecated and will' +
            ' be removed in later Select2 versions. Use $element.prop("disabled")' +
            ' instead.'
          );
        }

        if (args == null || args.length === 0) {
          args = [true];
        }

        var disabled = !args[0];

        this.$element.prop('disabled', disabled);
      };

      Select2.prototype.data = function () {
        if (this.options.get('debug') &&
          arguments.length > 0 && window.console && console.warn) {
          console.warn(
            'Select2: Data can no longer be set using `select2("data")`. You ' +
            'should consider setting the value instead using `$element.val()`.'
          );
        }

        var data = [];

        this.dataAdapter.current(function (currentData) {
          data = currentData;
        });

        return data;
      };

      Select2.prototype.val = function (args) {
        if (this.options.get('debug') && window.console && console.warn) {
          console.warn(
            'Select2: The `select2("val")` method has been deprecated and will be' +
            ' removed in later Select2 versions. Use $element.val() instead.'
          );
        }

        if (args == null || args.length === 0) {
          return this.$element.val();
        }

        var newVal = args[0];

        if ($.isArray(newVal)) {
          newVal = $.map(newVal, function (obj) {
            return obj.toString();
          });
        }

        this.$element.val(newVal).trigger('input').trigger('change');
      };

      Select2.prototype.destroy = function () {
        this.$container.remove();

        if (this.$element[0].detachEvent) {
          this.$element[0].detachEvent('onpropertychange', this._syncA);
        }

        if (this._observer != null) {
          this._observer.disconnect();
          this._observer = null;
        } else if (this.$element[0].removeEventListener) {
          this.$element[0]
            .removeEventListener('DOMAttrModified', this._syncA, false);
          this.$element[0]
            .removeEventListener('DOMNodeInserted', this._syncS, false);
          this.$element[0]
            .removeEventListener('DOMNodeRemoved', this._syncS, false);
        }

        this._syncA = null;
        this._syncS = null;

        this.$element.off('.select2');
        this.$element.attr('tabindex',
          Utils.GetData(this.$element[0], 'old-tabindex'));

        this.$element.removeClass('select2-hidden-accessible');
        this.$element.attr('aria-hidden', 'false');
        Utils.RemoveData(this.$element[0]);
        this.$element.removeData('select2');

        this.dataAdapter.destroy();
        this.selection.destroy();
        this.dropdown.destroy();
        this.results.destroy();

        this.dataAdapter = null;
        this.selection = null;
        this.dropdown = null;
        this.results = null;
      };

      Select2.prototype.render = function () {
        var $container = $(
          '<span class="select2 select2-container">' +
          '<span class="selection"></span>' +
          '<span class="dropdown-wrapper" aria-hidden="true"></span>' +
          '</span>'
        );

        $container.attr('dir', this.options.get('dir'));

        this.$container = $container;

        this.$container.addClass('select2-container--' + this.options.get('theme'));

        Utils.StoreData($container[0], 'element', this.$element);

        return $container;
      };

      return Select2;
    });

    S2.define('jquery-mousewheel', [
      'jquery'
    ], function ($) {
      // Used to shim jQuery.mousewheel for non-full builds.
      return $;
    });

    S2.define('jquery.select2', [
      'jquery',
      'jquery-mousewheel',

      './select2/core',
      './select2/defaults',
      './select2/utils'
    ], function ($, _, Select2, Defaults, Utils) {
      if ($.fn.select2 == null) {
        // All methods that should return the element
        var thisMethods = ['open', 'close', 'destroy'];

        $.fn.select2 = function (options) {
          options = options || {};

          if (typeof options === 'object') {
            this.each(function () {
              var instanceOptions = $.extend(true, {}, options);

              var instance = new Select2($(this), instanceOptions);
            });

            return this;
          } else if (typeof options === 'string') {
            var ret;
            var args = Array.prototype.slice.call(arguments, 1);

            this.each(function () {
              var instance = Utils.GetData(this, 'select2');

              if (instance == null && window.console && console.error) {
                console.error(
                  'The select2(\'' + options + '\') method was called on an ' +
                  'element that is not using Select2.'
                );
              }

              ret = instance[options].apply(instance, args);
            });

            // Check if we should be returning `this`
            if ($.inArray(options, thisMethods) > -1) {
              return this;
            }

            return ret;
          } else {
            throw new Error('Invalid arguments for Select2: ' + options);
          }
        };
      }

      if ($.fn.select2.defaults == null) {
        $.fn.select2.defaults = Defaults;
      }

      return Select2;
    });

    // Return the AMD loader configuration so it can be used outside of this file
    return {
      define: S2.define,
      require: S2.require
    };
  }());

  // Autoload the jQuery bindings
  // We know that all of the modules exist above this, so we're safe
  var select2 = S2.require('jquery.select2');

  // Hold the AMD module references on the jQuery function that was just loaded
  // This allows Select2 to use the internal loader outside of this file, such
  // as in the language files.
  jQuery.fn.select2.amd = S2;

  // Return the Select2 instance for anyone who is importing it.
  return select2;
}));
